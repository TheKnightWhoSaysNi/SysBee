
SysBee_Test_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004788  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004848  08004848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004948  08004948  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004950  08004950  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004950  08004950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004954  08004954  00014954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08004958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000208  08004b5c  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08004b5c  00020584  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b17c  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb6  00000000  00000000  0002b3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0002cf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002d730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013cd5  00000000  00000000  0002de58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa20  00000000  00000000  00041b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bc7d  00000000  00000000  0004c54d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c81ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e58  00000000  00000000  000c8220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000208 	.word	0x20000208
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004830 	.word	0x08004830

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000020c 	.word	0x2000020c
 8000104:	08004830 	.word	0x08004830

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8ba 	bl	800046c <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8b5 	bl	800046c <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzdi2>:
 800046c:	b510      	push	{r4, lr}
 800046e:	2900      	cmp	r1, #0
 8000470:	d103      	bne.n	800047a <__clzdi2+0xe>
 8000472:	f000 f807 	bl	8000484 <__clzsi2>
 8000476:	3020      	adds	r0, #32
 8000478:	e002      	b.n	8000480 <__clzdi2+0x14>
 800047a:	1c08      	adds	r0, r1, #0
 800047c:	f000 f802 	bl	8000484 <__clzsi2>
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__clzsi2>:
 8000484:	211c      	movs	r1, #28
 8000486:	2301      	movs	r3, #1
 8000488:	041b      	lsls	r3, r3, #16
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0xe>
 800048e:	0c00      	lsrs	r0, r0, #16
 8000490:	3910      	subs	r1, #16
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	4298      	cmp	r0, r3
 8000496:	d301      	bcc.n	800049c <__clzsi2+0x18>
 8000498:	0a00      	lsrs	r0, r0, #8
 800049a:	3908      	subs	r1, #8
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	4298      	cmp	r0, r3
 80004a0:	d301      	bcc.n	80004a6 <__clzsi2+0x22>
 80004a2:	0900      	lsrs	r0, r0, #4
 80004a4:	3904      	subs	r1, #4
 80004a6:	a202      	add	r2, pc, #8	; (adr r2, 80004b0 <__clzsi2+0x2c>)
 80004a8:	5c10      	ldrb	r0, [r2, r0]
 80004aa:	1840      	adds	r0, r0, r1
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	02020304 	.word	0x02020304
 80004b4:	01010101 	.word	0x01010101
	...

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c2:	b0a7      	sub	sp, #156	; 0x9c
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 febd 	bl	8001244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 fc35 	bl	8000d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 fd09 	bl	8000ee4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d2:	f000 fcd7 	bl	8000e84 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004d6:	f000 fca5 	bl	8000e24 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &xbee_rx_last_byte, 1);
 80004da:	49d9      	ldr	r1, [pc, #868]	; (8000840 <main+0x380>)
 80004dc:	4bd9      	ldr	r3, [pc, #868]	; (8000844 <main+0x384>)
 80004de:	2201      	movs	r2, #1
 80004e0:	0018      	movs	r0, r3
 80004e2:	f002 faad 	bl	8002a40 <HAL_UART_Receive_IT>

  while(xbee_send_state != config_over){
 80004e6:	e0f8      	b.n	80006da <main+0x21a>
	  static uint16_t timeout;
	  char string[50] = {0};
 80004e8:	2354      	movs	r3, #84	; 0x54
 80004ea:	18fa      	adds	r2, r7, r3
 80004ec:	2300      	movs	r3, #0
 80004ee:	6013      	str	r3, [r2, #0]
 80004f0:	1d10      	adds	r0, r2, #4
 80004f2:	232e      	movs	r3, #46	; 0x2e
 80004f4:	001a      	movs	r2, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	f003 fd6c 	bl	8003fd4 <memset>
	  switch(xbee_send_state){
 80004fc:	4bd2      	ldr	r3, [pc, #840]	; (8000848 <main+0x388>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b05      	cmp	r3, #5
 8000502:	d900      	bls.n	8000506 <main+0x46>
 8000504:	e0e2      	b.n	80006cc <main+0x20c>
 8000506:	009a      	lsls	r2, r3, #2
 8000508:	4bd0      	ldr	r3, [pc, #832]	; (800084c <main+0x38c>)
 800050a:	18d3      	adds	r3, r2, r3
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	469f      	mov	pc, r3

		  case enter_command_mode:
			  HAL_UART_Transmit(&huart1, "+++", 3, 100);
 8000510:	49cf      	ldr	r1, [pc, #828]	; (8000850 <main+0x390>)
 8000512:	48cc      	ldr	r0, [pc, #816]	; (8000844 <main+0x384>)
 8000514:	2364      	movs	r3, #100	; 0x64
 8000516:	2203      	movs	r2, #3
 8000518:	f002 f9ea 	bl	80028f0 <HAL_UART_Transmit>
			  timeout = 0;
 800051c:	4acd      	ldr	r2, [pc, #820]	; (8000854 <main+0x394>)
 800051e:	2300      	movs	r3, #0
 8000520:	8013      	strh	r3, [r2, #0]
			  xbee_send_state = command_mode_ok;
 8000522:	4ac9      	ldr	r2, [pc, #804]	; (8000848 <main+0x388>)
 8000524:	2301      	movs	r3, #1
 8000526:	7013      	strb	r3, [r2, #0]
		  break;
 8000528:	e0d7      	b.n	80006da <main+0x21a>

		  case command_mode_ok:
			  if(xbee_rx_buffer[xbee_rx_write_index-2] == 'O' && xbee_rx_buffer[xbee_rx_write_index-1] == 'K'){
 800052a:	4bcb      	ldr	r3, [pc, #812]	; (8000858 <main+0x398>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	1e9a      	subs	r2, r3, #2
 8000530:	4bca      	ldr	r3, [pc, #808]	; (800085c <main+0x39c>)
 8000532:	5c9b      	ldrb	r3, [r3, r2]
 8000534:	2b4f      	cmp	r3, #79	; 0x4f
 8000536:	d10d      	bne.n	8000554 <main+0x94>
 8000538:	4bc7      	ldr	r3, [pc, #796]	; (8000858 <main+0x398>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	1e5a      	subs	r2, r3, #1
 800053e:	4bc7      	ldr	r3, [pc, #796]	; (800085c <main+0x39c>)
 8000540:	5c9b      	ldrb	r3, [r3, r2]
 8000542:	2b4b      	cmp	r3, #75	; 0x4b
 8000544:	d106      	bne.n	8000554 <main+0x94>
				  xbee_send_state = single_command;
 8000546:	4ac0      	ldr	r2, [pc, #768]	; (8000848 <main+0x388>)
 8000548:	2304      	movs	r3, #4
 800054a:	7013      	strb	r3, [r2, #0]
			  	  timeout = 0;
 800054c:	4ac1      	ldr	r2, [pc, #772]	; (8000854 <main+0x394>)
 800054e:	2300      	movs	r3, #0
 8000550:	8013      	strh	r3, [r2, #0]
				  HAL_Delay(1);
				  timeout++;
				  if (timeout >= timeout_duration)
					  xbee_send_state = enter_command_mode;
			  }
		  break;
 8000552:	e0bd      	b.n	80006d0 <main+0x210>
				  HAL_Delay(1);
 8000554:	2001      	movs	r0, #1
 8000556:	f000 fee5 	bl	8001324 <HAL_Delay>
				  timeout++;
 800055a:	4bbe      	ldr	r3, [pc, #760]	; (8000854 <main+0x394>)
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	3301      	adds	r3, #1
 8000560:	b29b      	uxth	r3, r3
 8000562:	4abc      	ldr	r2, [pc, #752]	; (8000854 <main+0x394>)
 8000564:	8013      	strh	r3, [r2, #0]
				  if (timeout >= timeout_duration)
 8000566:	4bbb      	ldr	r3, [pc, #748]	; (8000854 <main+0x394>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	2bc7      	cmp	r3, #199	; 0xc7
 800056c:	d800      	bhi.n	8000570 <main+0xb0>
 800056e:	e0af      	b.n	80006d0 <main+0x210>
					  xbee_send_state = enter_command_mode;
 8000570:	4ab5      	ldr	r2, [pc, #724]	; (8000848 <main+0x388>)
 8000572:	2300      	movs	r3, #0
 8000574:	7013      	strb	r3, [r2, #0]
		  break;
 8000576:	e0ab      	b.n	80006d0 <main+0x210>

		  case single_command:
			  HAL_UART_Transmit(&huart1, "ATRE\r", 5, 100);
 8000578:	49b9      	ldr	r1, [pc, #740]	; (8000860 <main+0x3a0>)
 800057a:	48b2      	ldr	r0, [pc, #712]	; (8000844 <main+0x384>)
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	2205      	movs	r2, #5
 8000580:	f002 f9b6 	bl	80028f0 <HAL_UART_Transmit>
			  timeout = 0;
 8000584:	4ab3      	ldr	r2, [pc, #716]	; (8000854 <main+0x394>)
 8000586:	2300      	movs	r3, #0
 8000588:	8013      	strh	r3, [r2, #0]
			  xbee_send_state = single_command_ok;
 800058a:	4aaf      	ldr	r2, [pc, #700]	; (8000848 <main+0x388>)
 800058c:	2305      	movs	r3, #5
 800058e:	7013      	strb	r3, [r2, #0]
		  break;
 8000590:	e0a3      	b.n	80006da <main+0x21a>

		  case single_command_ok:
			  if(xbee_rx_buffer[xbee_rx_write_index-2] == 'O' && xbee_rx_buffer[xbee_rx_write_index-1] == 'K'){
 8000592:	4bb1      	ldr	r3, [pc, #708]	; (8000858 <main+0x398>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	1e9a      	subs	r2, r3, #2
 8000598:	4bb0      	ldr	r3, [pc, #704]	; (800085c <main+0x39c>)
 800059a:	5c9b      	ldrb	r3, [r3, r2]
 800059c:	2b4f      	cmp	r3, #79	; 0x4f
 800059e:	d10d      	bne.n	80005bc <main+0xfc>
 80005a0:	4bad      	ldr	r3, [pc, #692]	; (8000858 <main+0x398>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	1e5a      	subs	r2, r3, #1
 80005a6:	4bad      	ldr	r3, [pc, #692]	; (800085c <main+0x39c>)
 80005a8:	5c9b      	ldrb	r3, [r3, r2]
 80005aa:	2b4b      	cmp	r3, #75	; 0x4b
 80005ac:	d106      	bne.n	80005bc <main+0xfc>
				  xbee_send_state = send_config;
 80005ae:	4aa6      	ldr	r2, [pc, #664]	; (8000848 <main+0x388>)
 80005b0:	2302      	movs	r3, #2
 80005b2:	7013      	strb	r3, [r2, #0]
				  timeout = 0;
 80005b4:	4aa7      	ldr	r2, [pc, #668]	; (8000854 <main+0x394>)
 80005b6:	2300      	movs	r3, #0
 80005b8:	8013      	strh	r3, [r2, #0]
				  HAL_Delay(1);
				  timeout++;
				  if (timeout >= timeout_duration)
					  xbee_send_state = enter_command_mode;
			  }
		  break;
 80005ba:	e08b      	b.n	80006d4 <main+0x214>
				  HAL_Delay(1);
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 feb1 	bl	8001324 <HAL_Delay>
				  timeout++;
 80005c2:	4ba4      	ldr	r3, [pc, #656]	; (8000854 <main+0x394>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	4aa2      	ldr	r2, [pc, #648]	; (8000854 <main+0x394>)
 80005cc:	8013      	strh	r3, [r2, #0]
				  if (timeout >= timeout_duration)
 80005ce:	4ba1      	ldr	r3, [pc, #644]	; (8000854 <main+0x394>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	2bc7      	cmp	r3, #199	; 0xc7
 80005d4:	d800      	bhi.n	80005d8 <main+0x118>
 80005d6:	e07d      	b.n	80006d4 <main+0x214>
					  xbee_send_state = enter_command_mode;
 80005d8:	4a9b      	ldr	r2, [pc, #620]	; (8000848 <main+0x388>)
 80005da:	2300      	movs	r3, #0
 80005dc:	7013      	strb	r3, [r2, #0]
		  break;
 80005de:	e079      	b.n	80006d4 <main+0x214>

		  case send_config:
			  if(config_step == config_length){
 80005e0:	4ba0      	ldr	r3, [pc, #640]	; (8000864 <main+0x3a4>)
 80005e2:	781a      	ldrb	r2, [r3, #0]
 80005e4:	4ba0      	ldr	r3, [pc, #640]	; (8000868 <main+0x3a8>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d107      	bne.n	80005fc <main+0x13c>
				  sprintf(string, "ATWR\r");
 80005ec:	4a9f      	ldr	r2, [pc, #636]	; (800086c <main+0x3ac>)
 80005ee:	2354      	movs	r3, #84	; 0x54
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	0011      	movs	r1, r2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f003 fcf5 	bl	8003fe4 <siprintf>
 80005fa:	e019      	b.n	8000630 <main+0x170>
			  }
			  else sprintf(string, "AT%s%s\r", config[config_step][0], config[config_step][1]);
 80005fc:	4b99      	ldr	r3, [pc, #612]	; (8000864 <main+0x3a4>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	001a      	movs	r2, r3
 8000602:	0092      	lsls	r2, r2, #2
 8000604:	18d2      	adds	r2, r2, r3
 8000606:	0093      	lsls	r3, r2, #2
 8000608:	001a      	movs	r2, r3
 800060a:	4b99      	ldr	r3, [pc, #612]	; (8000870 <main+0x3b0>)
 800060c:	18d4      	adds	r4, r2, r3
 800060e:	4b95      	ldr	r3, [pc, #596]	; (8000864 <main+0x3a4>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	001a      	movs	r2, r3
 8000614:	0013      	movs	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	189b      	adds	r3, r3, r2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	330a      	adds	r3, #10
 800061e:	001a      	movs	r2, r3
 8000620:	4b93      	ldr	r3, [pc, #588]	; (8000870 <main+0x3b0>)
 8000622:	18d3      	adds	r3, r2, r3
 8000624:	4993      	ldr	r1, [pc, #588]	; (8000874 <main+0x3b4>)
 8000626:	2254      	movs	r2, #84	; 0x54
 8000628:	18b8      	adds	r0, r7, r2
 800062a:	0022      	movs	r2, r4
 800062c:	f003 fcda 	bl	8003fe4 <siprintf>
			  if(config_step==config_length){
 8000630:	4b8c      	ldr	r3, [pc, #560]	; (8000864 <main+0x3a4>)
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	4b8c      	ldr	r3, [pc, #560]	; (8000868 <main+0x3a8>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	429a      	cmp	r2, r3
 800063a:	d102      	bne.n	8000642 <main+0x182>
				  config_step = 4;
 800063c:	4a89      	ldr	r2, [pc, #548]	; (8000864 <main+0x3a4>)
 800063e:	2304      	movs	r3, #4
 8000640:	7013      	strb	r3, [r2, #0]
			  }
			  HAL_UART_Transmit(&huart1, string, strlen(string), 100);
 8000642:	2454      	movs	r4, #84	; 0x54
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0018      	movs	r0, r3
 8000648:	f7ff fd5e 	bl	8000108 <strlen>
 800064c:	0003      	movs	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	1939      	adds	r1, r7, r4
 8000652:	487c      	ldr	r0, [pc, #496]	; (8000844 <main+0x384>)
 8000654:	2364      	movs	r3, #100	; 0x64
 8000656:	f002 f94b 	bl	80028f0 <HAL_UART_Transmit>
			  xbee_send_state = config_ok;
 800065a:	4a7b      	ldr	r2, [pc, #492]	; (8000848 <main+0x388>)
 800065c:	2303      	movs	r3, #3
 800065e:	7013      	strb	r3, [r2, #0]
		  break;
 8000660:	e03b      	b.n	80006da <main+0x21a>

		  case config_ok:
			  if(xbee_rx_buffer[xbee_rx_write_index-2] == 'O' && xbee_rx_buffer[xbee_rx_write_index-1] == 'K'){
 8000662:	4b7d      	ldr	r3, [pc, #500]	; (8000858 <main+0x398>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	1e9a      	subs	r2, r3, #2
 8000668:	4b7c      	ldr	r3, [pc, #496]	; (800085c <main+0x39c>)
 800066a:	5c9b      	ldrb	r3, [r3, r2]
 800066c:	2b4f      	cmp	r3, #79	; 0x4f
 800066e:	d11c      	bne.n	80006aa <main+0x1ea>
 8000670:	4b79      	ldr	r3, [pc, #484]	; (8000858 <main+0x398>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	4b79      	ldr	r3, [pc, #484]	; (800085c <main+0x39c>)
 8000678:	5c9b      	ldrb	r3, [r3, r2]
 800067a:	2b4b      	cmp	r3, #75	; 0x4b
 800067c:	d115      	bne.n	80006aa <main+0x1ea>
				  if(config_step == config_length)
 800067e:	4b79      	ldr	r3, [pc, #484]	; (8000864 <main+0x3a4>)
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	4b79      	ldr	r3, [pc, #484]	; (8000868 <main+0x3a8>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	429a      	cmp	r2, r3
 8000688:	d102      	bne.n	8000690 <main+0x1d0>
					  xbee_send_state = config_over;
 800068a:	4a6f      	ldr	r2, [pc, #444]	; (8000848 <main+0x388>)
 800068c:	2306      	movs	r3, #6
 800068e:	7013      	strb	r3, [r2, #0]
				  timeout = 0;
 8000690:	4a70      	ldr	r2, [pc, #448]	; (8000854 <main+0x394>)
 8000692:	2300      	movs	r3, #0
 8000694:	8013      	strh	r3, [r2, #0]
				  config_step++;
 8000696:	4b73      	ldr	r3, [pc, #460]	; (8000864 <main+0x3a4>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	3301      	adds	r3, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4a71      	ldr	r2, [pc, #452]	; (8000864 <main+0x3a4>)
 80006a0:	7013      	strb	r3, [r2, #0]
				  xbee_send_state = send_config;
 80006a2:	4a69      	ldr	r2, [pc, #420]	; (8000848 <main+0x388>)
 80006a4:	2302      	movs	r3, #2
 80006a6:	7013      	strb	r3, [r2, #0]
				  HAL_Delay(1);
				  timeout++;
				  if (timeout >= timeout_duration)
					  xbee_send_state = enter_command_mode;
			  }
		  break;
 80006a8:	e016      	b.n	80006d8 <main+0x218>
				  HAL_Delay(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f000 fe3a 	bl	8001324 <HAL_Delay>
				  timeout++;
 80006b0:	4b68      	ldr	r3, [pc, #416]	; (8000854 <main+0x394>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	4a66      	ldr	r2, [pc, #408]	; (8000854 <main+0x394>)
 80006ba:	8013      	strh	r3, [r2, #0]
				  if (timeout >= timeout_duration)
 80006bc:	4b65      	ldr	r3, [pc, #404]	; (8000854 <main+0x394>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	2bc7      	cmp	r3, #199	; 0xc7
 80006c2:	d909      	bls.n	80006d8 <main+0x218>
					  xbee_send_state = enter_command_mode;
 80006c4:	4a60      	ldr	r2, [pc, #384]	; (8000848 <main+0x388>)
 80006c6:	2300      	movs	r3, #0
 80006c8:	7013      	strb	r3, [r2, #0]
		  break;
 80006ca:	e005      	b.n	80006d8 <main+0x218>

		  default: break;
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	e004      	b.n	80006da <main+0x21a>
		  break;
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	e002      	b.n	80006da <main+0x21a>
		  break;
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	e000      	b.n	80006da <main+0x21a>
		  break;
 80006d8:	46c0      	nop			; (mov r8, r8)
  while(xbee_send_state != config_over){
 80006da:	4b5b      	ldr	r3, [pc, #364]	; (8000848 <main+0x388>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d000      	beq.n	80006e4 <main+0x224>
 80006e2:	e701      	b.n	80004e8 <main+0x28>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(xbee_rx_read_index<xbee_rx_write_index){
 80006e4:	4b64      	ldr	r3, [pc, #400]	; (8000878 <main+0x3b8>)
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	4b5b      	ldr	r3, [pc, #364]	; (8000858 <main+0x398>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d2f9      	bcs.n	80006e4 <main+0x224>
		  uint64_t sum = 0;
 80006f0:	2200      	movs	r2, #0
 80006f2:	2300      	movs	r3, #0
 80006f4:	2190      	movs	r1, #144	; 0x90
 80006f6:	1879      	adds	r1, r7, r1
 80006f8:	600a      	str	r2, [r1, #0]
 80006fa:	604b      	str	r3, [r1, #4]
		  static uint8_t multiple_byte_step;

		  switch (xbee_receive_state){
 80006fc:	4b5f      	ldr	r3, [pc, #380]	; (800087c <main+0x3bc>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b0a      	cmp	r3, #10
 8000702:	d900      	bls.n	8000706 <main+0x246>
 8000704:	e30a      	b.n	8000d1c <main+0x85c>
 8000706:	009a      	lsls	r2, r3, #2
 8000708:	4b5d      	ldr	r3, [pc, #372]	; (8000880 <main+0x3c0>)
 800070a:	18d3      	adds	r3, r2, r3
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	469f      	mov	pc, r3
			  case idle:
				  if(xbee_rx_buffer[xbee_rx_read_index] == 0x7E) xbee_receive_state = frame_length;
 8000710:	4b59      	ldr	r3, [pc, #356]	; (8000878 <main+0x3b8>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	001a      	movs	r2, r3
 8000716:	4b51      	ldr	r3, [pc, #324]	; (800085c <main+0x39c>)
 8000718:	5c9b      	ldrb	r3, [r3, r2]
 800071a:	2b7e      	cmp	r3, #126	; 0x7e
 800071c:	d000      	beq.n	8000720 <main+0x260>
 800071e:	e2fc      	b.n	8000d1a <main+0x85a>
 8000720:	4a56      	ldr	r2, [pc, #344]	; (800087c <main+0x3bc>)
 8000722:	2301      	movs	r3, #1
 8000724:	7013      	strb	r3, [r2, #0]
				  /*else if (lora_requested && xbee_rx_buffer[xbee_rx_read_index] == 0xAA){
					  is_coordinator = True;
					  lora_requested = False;
				  }*/
			  break;
 8000726:	e2f8      	b.n	8000d1a <main+0x85a>

			  case frame_length:
				  received_frame.length += ((uint16_t)(xbee_rx_buffer[xbee_rx_read_index])) << (8-8*multiple_byte_step) ;
 8000728:	4b56      	ldr	r3, [pc, #344]	; (8000884 <main+0x3c4>)
 800072a:	8818      	ldrh	r0, [r3, #0]
 800072c:	4b52      	ldr	r3, [pc, #328]	; (8000878 <main+0x3b8>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	001a      	movs	r2, r3
 8000732:	4b4a      	ldr	r3, [pc, #296]	; (800085c <main+0x39c>)
 8000734:	5c9b      	ldrb	r3, [r3, r2]
 8000736:	0019      	movs	r1, r3
 8000738:	4b53      	ldr	r3, [pc, #332]	; (8000888 <main+0x3c8>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	001a      	movs	r2, r3
 800073e:	2301      	movs	r3, #1
 8000740:	1a9b      	subs	r3, r3, r2
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	4099      	lsls	r1, r3
 8000746:	000b      	movs	r3, r1
 8000748:	b29b      	uxth	r3, r3
 800074a:	18c3      	adds	r3, r0, r3
 800074c:	b29b      	uxth	r3, r3
 800074e:	4a4d      	ldr	r2, [pc, #308]	; (8000884 <main+0x3c4>)
 8000750:	8013      	strh	r3, [r2, #0]
				  if(multiple_byte_step){
 8000752:	4b4d      	ldr	r3, [pc, #308]	; (8000888 <main+0x3c8>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d006      	beq.n	8000768 <main+0x2a8>
					  multiple_byte_step = 0;
 800075a:	4a4b      	ldr	r2, [pc, #300]	; (8000888 <main+0x3c8>)
 800075c:	2300      	movs	r3, #0
 800075e:	7013      	strb	r3, [r2, #0]
					  xbee_receive_state = frame_type;
 8000760:	4a46      	ldr	r2, [pc, #280]	; (800087c <main+0x3bc>)
 8000762:	2302      	movs	r3, #2
 8000764:	7013      	strb	r3, [r2, #0]
				  }
				  else{
					  multiple_byte_step++;
				  }
			  break;
 8000766:	e2d9      	b.n	8000d1c <main+0x85c>
					  multiple_byte_step++;
 8000768:	4b47      	ldr	r3, [pc, #284]	; (8000888 <main+0x3c8>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	3301      	adds	r3, #1
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4a45      	ldr	r2, [pc, #276]	; (8000888 <main+0x3c8>)
 8000772:	7013      	strb	r3, [r2, #0]
			  break;
 8000774:	e2d2      	b.n	8000d1c <main+0x85c>

			  case frame_type:
				  received_frame.type = xbee_rx_buffer[xbee_rx_read_index];
 8000776:	4b40      	ldr	r3, [pc, #256]	; (8000878 <main+0x3b8>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	001a      	movs	r2, r3
 800077c:	4b37      	ldr	r3, [pc, #220]	; (800085c <main+0x39c>)
 800077e:	5c9b      	ldrb	r3, [r3, r2]
 8000780:	4a40      	ldr	r2, [pc, #256]	; (8000884 <main+0x3c4>)
 8000782:	7093      	strb	r3, [r2, #2]
				  switch(received_frame.type){
 8000784:	4b3f      	ldr	r3, [pc, #252]	; (8000884 <main+0x3c4>)
 8000786:	789b      	ldrb	r3, [r3, #2]
 8000788:	2b90      	cmp	r3, #144	; 0x90
 800078a:	d002      	beq.n	8000792 <main+0x2d2>
 800078c:	2b97      	cmp	r3, #151	; 0x97
 800078e:	d004      	beq.n	800079a <main+0x2da>
 8000790:	e007      	b.n	80007a2 <main+0x2e2>
				  	  case receive_packet: xbee_receive_state = frame_address64; break;
 8000792:	4a3a      	ldr	r2, [pc, #232]	; (800087c <main+0x3bc>)
 8000794:	2304      	movs	r3, #4
 8000796:	7013      	strb	r3, [r2, #0]
 8000798:	e00b      	b.n	80007b2 <main+0x2f2>
				  	  case remote_command_response: xbee_receive_state = frame_id; break;
 800079a:	4a38      	ldr	r2, [pc, #224]	; (800087c <main+0x3bc>)
 800079c:	2303      	movs	r3, #3
 800079e:	7013      	strb	r3, [r2, #0]
 80007a0:	e007      	b.n	80007b2 <main+0x2f2>
				  	  default: xbee_rx_read_index = xbee_rx_write_index;
 80007a2:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <main+0x398>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4a34      	ldr	r2, [pc, #208]	; (8000878 <main+0x3b8>)
 80007a8:	7013      	strb	r3, [r2, #0]
				  	  	  	   xbee_receive_state = idle;
 80007aa:	4a34      	ldr	r2, [pc, #208]	; (800087c <main+0x3bc>)
 80007ac:	2300      	movs	r3, #0
 80007ae:	7013      	strb	r3, [r2, #0]
				  	  break;
 80007b0:	46c0      	nop			; (mov r8, r8)
				  }

				  multiple_byte_step = 0;
 80007b2:	4a35      	ldr	r2, [pc, #212]	; (8000888 <main+0x3c8>)
 80007b4:	2300      	movs	r3, #0
 80007b6:	7013      	strb	r3, [r2, #0]
			  break;
 80007b8:	e2b0      	b.n	8000d1c <main+0x85c>

			  case frame_id:
				  received_frame.id = xbee_rx_buffer[xbee_rx_read_index];
 80007ba:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <main+0x3b8>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	001a      	movs	r2, r3
 80007c0:	4b26      	ldr	r3, [pc, #152]	; (800085c <main+0x39c>)
 80007c2:	5c9b      	ldrb	r3, [r3, r2]
 80007c4:	4a2f      	ldr	r2, [pc, #188]	; (8000884 <main+0x3c4>)
 80007c6:	70d3      	strb	r3, [r2, #3]
				  xbee_receive_state = frame_address64;
 80007c8:	4a2c      	ldr	r2, [pc, #176]	; (800087c <main+0x3bc>)
 80007ca:	2304      	movs	r3, #4
 80007cc:	7013      	strb	r3, [r2, #0]
			  break;
 80007ce:	e2a5      	b.n	8000d1c <main+0x85c>

			  case frame_address64:
				  received_frame.address64 += ((uint64_t)xbee_rx_buffer[xbee_rx_read_index]) << (56-8*multiple_byte_step);
 80007d0:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <main+0x3c4>)
 80007d2:	6898      	ldr	r0, [r3, #8]
 80007d4:	68d9      	ldr	r1, [r3, #12]
 80007d6:	4b28      	ldr	r3, [pc, #160]	; (8000878 <main+0x3b8>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	001a      	movs	r2, r3
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <main+0x39c>)
 80007de:	5c9b      	ldrb	r3, [r3, r2]
 80007e0:	643b      	str	r3, [r7, #64]	; 0x40
 80007e2:	2300      	movs	r3, #0
 80007e4:	647b      	str	r3, [r7, #68]	; 0x44
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <main+0x3c8>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	001a      	movs	r2, r3
 80007ec:	2307      	movs	r3, #7
 80007ee:	1a9b      	subs	r3, r3, r2
 80007f0:	00da      	lsls	r2, r3, #3
 80007f2:	0013      	movs	r3, r2
 80007f4:	3b20      	subs	r3, #32
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	db03      	blt.n	8000802 <main+0x342>
 80007fa:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80007fc:	409c      	lsls	r4, r3
 80007fe:	0026      	movs	r6, r4
 8000800:	e008      	b.n	8000814 <main+0x354>
 8000802:	2320      	movs	r3, #32
 8000804:	1a9b      	subs	r3, r3, r2
 8000806:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8000808:	40dc      	lsrs	r4, r3
 800080a:	0023      	movs	r3, r4
 800080c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800080e:	4094      	lsls	r4, r2
 8000810:	0026      	movs	r6, r4
 8000812:	431e      	orrs	r6, r3
 8000814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000816:	4093      	lsls	r3, r2
 8000818:	001d      	movs	r5, r3
 800081a:	0002      	movs	r2, r0
 800081c:	000b      	movs	r3, r1
 800081e:	1952      	adds	r2, r2, r5
 8000820:	4173      	adcs	r3, r6
 8000822:	4918      	ldr	r1, [pc, #96]	; (8000884 <main+0x3c4>)
 8000824:	608a      	str	r2, [r1, #8]
 8000826:	60cb      	str	r3, [r1, #12]

				  if(multiple_byte_step == 7){
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <main+0x3c8>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b07      	cmp	r3, #7
 800082e:	d12d      	bne.n	800088c <main+0x3cc>
					  xbee_receive_state = frame_address16;
 8000830:	4a12      	ldr	r2, [pc, #72]	; (800087c <main+0x3bc>)
 8000832:	2305      	movs	r3, #5
 8000834:	7013      	strb	r3, [r2, #0]
					  multiple_byte_step = 0;
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <main+0x3c8>)
 8000838:	2300      	movs	r3, #0
 800083a:	7013      	strb	r3, [r2, #0]
				  }
				  else multiple_byte_step++;
			  break;
 800083c:	e26e      	b.n	8000d1c <main+0x85c>
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	200003e4 	.word	0x200003e4
 8000844:	20000360 	.word	0x20000360
 8000848:	2000023a 	.word	0x2000023a
 800084c:	08004864 	.word	0x08004864
 8000850:	08004848 	.word	0x08004848
 8000854:	20000226 	.word	0x20000226
 8000858:	20000225 	.word	0x20000225
 800085c:	2000046c 	.word	0x2000046c
 8000860:	0800484c 	.word	0x0800484c
 8000864:	20000238 	.word	0x20000238
 8000868:	20000190 	.word	0x20000190
 800086c:	08004854 	.word	0x08004854
 8000870:	20000000 	.word	0x20000000
 8000874:	0800485c 	.word	0x0800485c
 8000878:	20000224 	.word	0x20000224
 800087c:	20000239 	.word	0x20000239
 8000880:	0800487c 	.word	0x0800487c
 8000884:	20000240 	.word	0x20000240
 8000888:	20000228 	.word	0x20000228
				  else multiple_byte_step++;
 800088c:	4bd0      	ldr	r3, [pc, #832]	; (8000bd0 <main+0x710>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4ace      	ldr	r2, [pc, #824]	; (8000bd0 <main+0x710>)
 8000896:	7013      	strb	r3, [r2, #0]
			  break;
 8000898:	e240      	b.n	8000d1c <main+0x85c>

			  case frame_address16:
				  received_frame.address16 += ((uint16_t)xbee_rx_buffer[xbee_rx_read_index]) << (8-8*multiple_byte_step);
 800089a:	4bce      	ldr	r3, [pc, #824]	; (8000bd4 <main+0x714>)
 800089c:	8a18      	ldrh	r0, [r3, #16]
 800089e:	4bce      	ldr	r3, [pc, #824]	; (8000bd8 <main+0x718>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	001a      	movs	r2, r3
 80008a4:	4bcd      	ldr	r3, [pc, #820]	; (8000bdc <main+0x71c>)
 80008a6:	5c9b      	ldrb	r3, [r3, r2]
 80008a8:	0019      	movs	r1, r3
 80008aa:	4bc9      	ldr	r3, [pc, #804]	; (8000bd0 <main+0x710>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	001a      	movs	r2, r3
 80008b0:	2301      	movs	r3, #1
 80008b2:	1a9b      	subs	r3, r3, r2
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	4099      	lsls	r1, r3
 80008b8:	000b      	movs	r3, r1
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	18c3      	adds	r3, r0, r3
 80008be:	b29b      	uxth	r3, r3
 80008c0:	4ac4      	ldr	r2, [pc, #784]	; (8000bd4 <main+0x714>)
 80008c2:	8213      	strh	r3, [r2, #16]
				  if(multiple_byte_step == 1){
 80008c4:	4bc2      	ldr	r3, [pc, #776]	; (8000bd0 <main+0x710>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d11a      	bne.n	8000902 <main+0x442>
					  switch(received_frame.type){
 80008cc:	4bc1      	ldr	r3, [pc, #772]	; (8000bd4 <main+0x714>)
 80008ce:	789b      	ldrb	r3, [r3, #2]
 80008d0:	2b90      	cmp	r3, #144	; 0x90
 80008d2:	d002      	beq.n	80008da <main+0x41a>
 80008d4:	2b97      	cmp	r3, #151	; 0x97
 80008d6:	d004      	beq.n	80008e2 <main+0x422>
 80008d8:	e007      	b.n	80008ea <main+0x42a>
					  	  case receive_packet: xbee_receive_state = frame_option; break;
 80008da:	4ac1      	ldr	r2, [pc, #772]	; (8000be0 <main+0x720>)
 80008dc:	2306      	movs	r3, #6
 80008de:	7013      	strb	r3, [r2, #0]
 80008e0:	e00b      	b.n	80008fa <main+0x43a>
					  	  case remote_command_response: xbee_receive_state = frame_at_status; break;
 80008e2:	4abf      	ldr	r2, [pc, #764]	; (8000be0 <main+0x720>)
 80008e4:	2307      	movs	r3, #7
 80008e6:	7013      	strb	r3, [r2, #0]
 80008e8:	e007      	b.n	80008fa <main+0x43a>
					  	  default: xbee_rx_read_index = xbee_rx_write_index;
 80008ea:	4bbe      	ldr	r3, [pc, #760]	; (8000be4 <main+0x724>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	4aba      	ldr	r2, [pc, #744]	; (8000bd8 <main+0x718>)
 80008f0:	7013      	strb	r3, [r2, #0]
							       xbee_receive_state = idle;
 80008f2:	4abb      	ldr	r2, [pc, #748]	; (8000be0 <main+0x720>)
 80008f4:	2300      	movs	r3, #0
 80008f6:	7013      	strb	r3, [r2, #0]
						  break;
 80008f8:	46c0      	nop			; (mov r8, r8)
					  }

					  multiple_byte_step = 0;
 80008fa:	4ab5      	ldr	r2, [pc, #724]	; (8000bd0 <main+0x710>)
 80008fc:	2300      	movs	r3, #0
 80008fe:	7013      	strb	r3, [r2, #0]
				  }
				  else multiple_byte_step++;
			  break;
 8000900:	e20c      	b.n	8000d1c <main+0x85c>
				  else multiple_byte_step++;
 8000902:	4bb3      	ldr	r3, [pc, #716]	; (8000bd0 <main+0x710>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	3301      	adds	r3, #1
 8000908:	b2db      	uxtb	r3, r3
 800090a:	4ab1      	ldr	r2, [pc, #708]	; (8000bd0 <main+0x710>)
 800090c:	7013      	strb	r3, [r2, #0]
			  break;
 800090e:	e205      	b.n	8000d1c <main+0x85c>

			  case frame_option:
				  received_frame.option = xbee_rx_buffer[xbee_rx_read_index];
 8000910:	4bb1      	ldr	r3, [pc, #708]	; (8000bd8 <main+0x718>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	001a      	movs	r2, r3
 8000916:	4bb1      	ldr	r3, [pc, #708]	; (8000bdc <main+0x71c>)
 8000918:	5c9b      	ldrb	r3, [r3, r2]
 800091a:	4aae      	ldr	r2, [pc, #696]	; (8000bd4 <main+0x714>)
 800091c:	7493      	strb	r3, [r2, #18]
				  xbee_receive_state = frame_content;
 800091e:	4ab0      	ldr	r2, [pc, #704]	; (8000be0 <main+0x720>)
 8000920:	2308      	movs	r3, #8
 8000922:	7013      	strb	r3, [r2, #0]
			  break;
 8000924:	e1fa      	b.n	8000d1c <main+0x85c>

			  case frame_at_status:
				  received_frame.command_status[multiple_byte_step] = xbee_rx_buffer[xbee_rx_read_index];
 8000926:	4bac      	ldr	r3, [pc, #688]	; (8000bd8 <main+0x718>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	001a      	movs	r2, r3
 800092c:	4ba8      	ldr	r3, [pc, #672]	; (8000bd0 <main+0x710>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	001c      	movs	r4, r3
 8000932:	4baa      	ldr	r3, [pc, #680]	; (8000bdc <main+0x71c>)
 8000934:	5c98      	ldrb	r0, [r3, r2]
 8000936:	49a7      	ldr	r1, [pc, #668]	; (8000bd4 <main+0x714>)
 8000938:	238a      	movs	r3, #138	; 0x8a
 800093a:	005a      	lsls	r2, r3, #1
 800093c:	190b      	adds	r3, r1, r4
 800093e:	189a      	adds	r2, r3, r2
 8000940:	1c03      	adds	r3, r0, #0
 8000942:	7013      	strb	r3, [r2, #0]
				  if(multiple_byte_step == 2){
 8000944:	4ba2      	ldr	r3, [pc, #648]	; (8000bd0 <main+0x710>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b02      	cmp	r3, #2
 800094a:	d106      	bne.n	800095a <main+0x49a>
					  multiple_byte_step = 0;
 800094c:	4aa0      	ldr	r2, [pc, #640]	; (8000bd0 <main+0x710>)
 800094e:	2300      	movs	r3, #0
 8000950:	7013      	strb	r3, [r2, #0]
					  xbee_receive_state = frame_content;
 8000952:	4aa3      	ldr	r2, [pc, #652]	; (8000be0 <main+0x720>)
 8000954:	2308      	movs	r3, #8
 8000956:	7013      	strb	r3, [r2, #0]
				  }
				  else multiple_byte_step++;
			  break;
 8000958:	e1e0      	b.n	8000d1c <main+0x85c>
				  else multiple_byte_step++;
 800095a:	4b9d      	ldr	r3, [pc, #628]	; (8000bd0 <main+0x710>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b2db      	uxtb	r3, r3
 8000962:	4a9b      	ldr	r2, [pc, #620]	; (8000bd0 <main+0x710>)
 8000964:	7013      	strb	r3, [r2, #0]
			  break;
 8000966:	e1d9      	b.n	8000d1c <main+0x85c>

			  case frame_content:
				  received_frame.content[received_frame.content_index] = xbee_rx_buffer[xbee_rx_read_index];
 8000968:	4b9b      	ldr	r3, [pc, #620]	; (8000bd8 <main+0x718>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	0019      	movs	r1, r3
 800096e:	4a99      	ldr	r2, [pc, #612]	; (8000bd4 <main+0x714>)
 8000970:	2314      	movs	r3, #20
 8000972:	33ff      	adds	r3, #255	; 0xff
 8000974:	5cd3      	ldrb	r3, [r2, r3]
 8000976:	001a      	movs	r2, r3
 8000978:	4b98      	ldr	r3, [pc, #608]	; (8000bdc <main+0x71c>)
 800097a:	5c59      	ldrb	r1, [r3, r1]
 800097c:	4b95      	ldr	r3, [pc, #596]	; (8000bd4 <main+0x714>)
 800097e:	189a      	adds	r2, r3, r2
 8000980:	1c0b      	adds	r3, r1, #0
 8000982:	74d3      	strb	r3, [r2, #19]
				  if(((received_frame.content_index == received_frame.length-13) && received_frame.type==receive_packet) || ((received_frame.content_index == received_frame.length-16) && (received_frame.type==remote_command_response)))
 8000984:	4a93      	ldr	r2, [pc, #588]	; (8000bd4 <main+0x714>)
 8000986:	2314      	movs	r3, #20
 8000988:	33ff      	adds	r3, #255	; 0xff
 800098a:	5cd3      	ldrb	r3, [r2, r3]
 800098c:	001a      	movs	r2, r3
 800098e:	4b91      	ldr	r3, [pc, #580]	; (8000bd4 <main+0x714>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	3b0d      	subs	r3, #13
 8000994:	429a      	cmp	r2, r3
 8000996:	d103      	bne.n	80009a0 <main+0x4e0>
 8000998:	4b8e      	ldr	r3, [pc, #568]	; (8000bd4 <main+0x714>)
 800099a:	789b      	ldrb	r3, [r3, #2]
 800099c:	2b90      	cmp	r3, #144	; 0x90
 800099e:	d00d      	beq.n	80009bc <main+0x4fc>
 80009a0:	4a8c      	ldr	r2, [pc, #560]	; (8000bd4 <main+0x714>)
 80009a2:	2314      	movs	r3, #20
 80009a4:	33ff      	adds	r3, #255	; 0xff
 80009a6:	5cd3      	ldrb	r3, [r2, r3]
 80009a8:	001a      	movs	r2, r3
 80009aa:	4b8a      	ldr	r3, [pc, #552]	; (8000bd4 <main+0x714>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	3b10      	subs	r3, #16
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d107      	bne.n	80009c4 <main+0x504>
 80009b4:	4b87      	ldr	r3, [pc, #540]	; (8000bd4 <main+0x714>)
 80009b6:	789b      	ldrb	r3, [r3, #2]
 80009b8:	2b97      	cmp	r3, #151	; 0x97
 80009ba:	d103      	bne.n	80009c4 <main+0x504>
					  xbee_receive_state = check_sum;
 80009bc:	4a88      	ldr	r2, [pc, #544]	; (8000be0 <main+0x720>)
 80009be:	2309      	movs	r3, #9
 80009c0:	7013      	strb	r3, [r2, #0]
				  else
					  received_frame.content_index++;
			  break;
 80009c2:	e1ab      	b.n	8000d1c <main+0x85c>
					  received_frame.content_index++;
 80009c4:	4a83      	ldr	r2, [pc, #524]	; (8000bd4 <main+0x714>)
 80009c6:	2314      	movs	r3, #20
 80009c8:	33ff      	adds	r3, #255	; 0xff
 80009ca:	5cd3      	ldrb	r3, [r2, r3]
 80009cc:	3301      	adds	r3, #1
 80009ce:	b2d8      	uxtb	r0, r3
 80009d0:	4980      	ldr	r1, [pc, #512]	; (8000bd4 <main+0x714>)
 80009d2:	2314      	movs	r3, #20
 80009d4:	33ff      	adds	r3, #255	; 0xff
 80009d6:	001a      	movs	r2, r3
 80009d8:	1c03      	adds	r3, r0, #0
 80009da:	548b      	strb	r3, [r1, r2]
			  break;
 80009dc:	e19e      	b.n	8000d1c <main+0x85c>

			  case check_sum:
				  received_frame.check_sum = xbee_rx_buffer[xbee_rx_read_index];
 80009de:	4b7e      	ldr	r3, [pc, #504]	; (8000bd8 <main+0x718>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	001a      	movs	r2, r3
 80009e4:	4b7d      	ldr	r3, [pc, #500]	; (8000bdc <main+0x71c>)
 80009e6:	5c98      	ldrb	r0, [r3, r2]
 80009e8:	497a      	ldr	r1, [pc, #488]	; (8000bd4 <main+0x714>)
 80009ea:	238c      	movs	r3, #140	; 0x8c
 80009ec:	005a      	lsls	r2, r3, #1
 80009ee:	1c03      	adds	r3, r0, #0
 80009f0:	548b      	strb	r3, [r1, r2]
				  for(uint8_t i=0; i<8; i++) sum += (((uint64_t)0xFF<<(56-8*i)) & received_frame.address64)>>(56-8*i);
 80009f2:	233f      	movs	r3, #63	; 0x3f
 80009f4:	2250      	movs	r2, #80	; 0x50
 80009f6:	18ba      	adds	r2, r7, r2
 80009f8:	18d2      	adds	r2, r2, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	7013      	strb	r3, [r2, #0]
 80009fe:	e05f      	b.n	8000ac0 <main+0x600>
 8000a00:	233f      	movs	r3, #63	; 0x3f
 8000a02:	2250      	movs	r2, #80	; 0x50
 8000a04:	4694      	mov	ip, r2
 8000a06:	44bc      	add	ip, r7
 8000a08:	4463      	add	r3, ip
 8000a0a:	781a      	ldrb	r2, [r3, #0]
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	1a9b      	subs	r3, r3, r2
 8000a10:	00d9      	lsls	r1, r3, #3
 8000a12:	000a      	movs	r2, r1
 8000a14:	3a20      	subs	r2, #32
 8000a16:	2a00      	cmp	r2, #0
 8000a18:	db03      	blt.n	8000a22 <main+0x562>
 8000a1a:	23ff      	movs	r3, #255	; 0xff
 8000a1c:	4093      	lsls	r3, r2
 8000a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a20:	e00a      	b.n	8000a38 <main+0x578>
 8000a22:	2320      	movs	r3, #32
 8000a24:	1a5a      	subs	r2, r3, r1
 8000a26:	23ff      	movs	r3, #255	; 0xff
 8000a28:	40d3      	lsrs	r3, r2
 8000a2a:	001a      	movs	r2, r3
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	408b      	lsls	r3, r1
 8000a30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a34:	4313      	orrs	r3, r2
 8000a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a38:	23ff      	movs	r3, #255	; 0xff
 8000a3a:	408b      	lsls	r3, r1
 8000a3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a3e:	4b65      	ldr	r3, [pc, #404]	; (8000bd4 <main+0x714>)
 8000a40:	689a      	ldr	r2, [r3, #8]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0011      	movs	r1, r2
 8000a46:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000a48:	4008      	ands	r0, r1
 8000a4a:	6338      	str	r0, [r7, #48]	; 0x30
 8000a4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a4e:	401a      	ands	r2, r3
 8000a50:	637a      	str	r2, [r7, #52]	; 0x34
 8000a52:	233f      	movs	r3, #63	; 0x3f
 8000a54:	2250      	movs	r2, #80	; 0x50
 8000a56:	4694      	mov	ip, r2
 8000a58:	44bc      	add	ip, r7
 8000a5a:	4463      	add	r3, ip
 8000a5c:	781a      	ldrb	r2, [r3, #0]
 8000a5e:	2307      	movs	r3, #7
 8000a60:	1a9b      	subs	r3, r3, r2
 8000a62:	00da      	lsls	r2, r3, #3
 8000a64:	0013      	movs	r3, r2
 8000a66:	3b20      	subs	r3, #32
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db03      	blt.n	8000a74 <main+0x5b4>
 8000a6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a6e:	40d9      	lsrs	r1, r3
 8000a70:	63b9      	str	r1, [r7, #56]	; 0x38
 8000a72:	e00c      	b.n	8000a8e <main+0x5ce>
 8000a74:	2320      	movs	r3, #32
 8000a76:	1a9b      	subs	r3, r3, r2
 8000a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a7c:	000c      	movs	r4, r1
 8000a7e:	409c      	lsls	r4, r3
 8000a80:	0023      	movs	r3, r4
 8000a82:	0001      	movs	r1, r0
 8000a84:	40d1      	lsrs	r1, r2
 8000a86:	63b9      	str	r1, [r7, #56]	; 0x38
 8000a88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000a8a:	4319      	orrs	r1, r3
 8000a8c:	63b9      	str	r1, [r7, #56]	; 0x38
 8000a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a90:	40d3      	lsrs	r3, r2
 8000a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a94:	2490      	movs	r4, #144	; 0x90
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000a9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000aa0:	1812      	adds	r2, r2, r0
 8000aa2:	414b      	adcs	r3, r1
 8000aa4:	1939      	adds	r1, r7, r4
 8000aa6:	600a      	str	r2, [r1, #0]
 8000aa8:	604b      	str	r3, [r1, #4]
 8000aaa:	223f      	movs	r2, #63	; 0x3f
 8000aac:	2350      	movs	r3, #80	; 0x50
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	189b      	adds	r3, r3, r2
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2150      	movs	r1, #80	; 0x50
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	44bc      	add	ip, r7
 8000aba:	4462      	add	r2, ip
 8000abc:	3301      	adds	r3, #1
 8000abe:	7013      	strb	r3, [r2, #0]
 8000ac0:	233f      	movs	r3, #63	; 0x3f
 8000ac2:	2250      	movs	r2, #80	; 0x50
 8000ac4:	4694      	mov	ip, r2
 8000ac6:	44bc      	add	ip, r7
 8000ac8:	4463      	add	r3, ip
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b07      	cmp	r3, #7
 8000ace:	d997      	bls.n	8000a00 <main+0x540>
				  for(uint8_t i=0; i<2; i++) sum += (((uint16_t)0xFF<<(8-8*i)) & received_frame.address16)>>(8-i*8);
 8000ad0:	233e      	movs	r3, #62	; 0x3e
 8000ad2:	2250      	movs	r2, #80	; 0x50
 8000ad4:	18ba      	adds	r2, r7, r2
 8000ad6:	18d2      	adds	r2, r2, r3
 8000ad8:	2300      	movs	r3, #0
 8000ada:	7013      	strb	r3, [r2, #0]
 8000adc:	e02f      	b.n	8000b3e <main+0x67e>
 8000ade:	203e      	movs	r0, #62	; 0x3e
 8000ae0:	2250      	movs	r2, #80	; 0x50
 8000ae2:	18bb      	adds	r3, r7, r2
 8000ae4:	181b      	adds	r3, r3, r0
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	2301      	movs	r3, #1
 8000aea:	1a9b      	subs	r3, r3, r2
 8000aec:	00da      	lsls	r2, r3, #3
 8000aee:	23ff      	movs	r3, #255	; 0xff
 8000af0:	4093      	lsls	r3, r2
 8000af2:	001a      	movs	r2, r3
 8000af4:	4b37      	ldr	r3, [pc, #220]	; (8000bd4 <main+0x714>)
 8000af6:	8a1b      	ldrh	r3, [r3, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	0019      	movs	r1, r3
 8000afc:	0004      	movs	r4, r0
 8000afe:	2250      	movs	r2, #80	; 0x50
 8000b00:	18bb      	adds	r3, r7, r2
 8000b02:	181b      	adds	r3, r3, r0
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	2301      	movs	r3, #1
 8000b08:	1a9b      	subs	r3, r3, r2
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	4119      	asrs	r1, r3
 8000b0e:	000b      	movs	r3, r1
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b12:	17db      	asrs	r3, r3, #31
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b16:	2190      	movs	r1, #144	; 0x90
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b22:	1812      	adds	r2, r2, r0
 8000b24:	414b      	adcs	r3, r1
 8000b26:	2190      	movs	r1, #144	; 0x90
 8000b28:	1879      	adds	r1, r7, r1
 8000b2a:	600a      	str	r2, [r1, #0]
 8000b2c:	604b      	str	r3, [r1, #4]
 8000b2e:	2250      	movs	r2, #80	; 0x50
 8000b30:	18bb      	adds	r3, r7, r2
 8000b32:	191b      	adds	r3, r3, r4
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	18ba      	adds	r2, r7, r2
 8000b38:	1912      	adds	r2, r2, r4
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	7013      	strb	r3, [r2, #0]
 8000b3e:	233e      	movs	r3, #62	; 0x3e
 8000b40:	2250      	movs	r2, #80	; 0x50
 8000b42:	4694      	mov	ip, r2
 8000b44:	44bc      	add	ip, r7
 8000b46:	4463      	add	r3, ip
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d9c7      	bls.n	8000ade <main+0x61e>
				  if(received_frame.id==receive_packet) for(uint16_t i=0; i<received_frame.length-12; i++) sum += received_frame.content[i];
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <main+0x714>)
 8000b50:	78db      	ldrb	r3, [r3, #3]
 8000b52:	2b90      	cmp	r3, #144	; 0x90
 8000b54:	d131      	bne.n	8000bba <main+0x6fa>
 8000b56:	233c      	movs	r3, #60	; 0x3c
 8000b58:	2250      	movs	r2, #80	; 0x50
 8000b5a:	18ba      	adds	r2, r7, r2
 8000b5c:	18d2      	adds	r2, r2, r3
 8000b5e:	2300      	movs	r3, #0
 8000b60:	8013      	strh	r3, [r2, #0]
 8000b62:	e01e      	b.n	8000ba2 <main+0x6e2>
 8000b64:	243c      	movs	r4, #60	; 0x3c
 8000b66:	2250      	movs	r2, #80	; 0x50
 8000b68:	18bb      	adds	r3, r7, r2
 8000b6a:	191b      	adds	r3, r3, r4
 8000b6c:	881a      	ldrh	r2, [r3, #0]
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <main+0x714>)
 8000b70:	189b      	adds	r3, r3, r2
 8000b72:	7cdb      	ldrb	r3, [r3, #19]
 8000b74:	623b      	str	r3, [r7, #32]
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
 8000b7a:	2190      	movs	r1, #144	; 0x90
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	6a38      	ldr	r0, [r7, #32]
 8000b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b86:	1812      	adds	r2, r2, r0
 8000b88:	414b      	adcs	r3, r1
 8000b8a:	2190      	movs	r1, #144	; 0x90
 8000b8c:	1879      	adds	r1, r7, r1
 8000b8e:	600a      	str	r2, [r1, #0]
 8000b90:	604b      	str	r3, [r1, #4]
 8000b92:	2250      	movs	r2, #80	; 0x50
 8000b94:	18bb      	adds	r3, r7, r2
 8000b96:	191b      	adds	r3, r3, r4
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	18ba      	adds	r2, r7, r2
 8000b9c:	1912      	adds	r2, r2, r4
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	8013      	strh	r3, [r2, #0]
 8000ba2:	233c      	movs	r3, #60	; 0x3c
 8000ba4:	2250      	movs	r2, #80	; 0x50
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	44bc      	add	ip, r7
 8000baa:	4463      	add	r3, ip
 8000bac:	881a      	ldrh	r2, [r3, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <main+0x714>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	3b0c      	subs	r3, #12
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbd5      	blt.n	8000b64 <main+0x6a4>
 8000bb8:	e071      	b.n	8000c9e <main+0x7de>
				  else if(received_frame.type==remote_command_response){
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <main+0x714>)
 8000bbc:	789b      	ldrb	r3, [r3, #2]
 8000bbe:	2b97      	cmp	r3, #151	; 0x97
 8000bc0:	d16d      	bne.n	8000c9e <main+0x7de>
					  for(uint16_t i=0; i<received_frame.length-15; i++) sum += received_frame.content[i];
 8000bc2:	233a      	movs	r3, #58	; 0x3a
 8000bc4:	2250      	movs	r2, #80	; 0x50
 8000bc6:	18ba      	adds	r2, r7, r2
 8000bc8:	18d2      	adds	r2, r2, r3
 8000bca:	2300      	movs	r3, #0
 8000bcc:	8013      	strh	r3, [r2, #0]
 8000bce:	e02a      	b.n	8000c26 <main+0x766>
 8000bd0:	20000228 	.word	0x20000228
 8000bd4:	20000240 	.word	0x20000240
 8000bd8:	20000224 	.word	0x20000224
 8000bdc:	2000046c 	.word	0x2000046c
 8000be0:	20000239 	.word	0x20000239
 8000be4:	20000225 	.word	0x20000225
 8000be8:	243a      	movs	r4, #58	; 0x3a
 8000bea:	2250      	movs	r2, #80	; 0x50
 8000bec:	18bb      	adds	r3, r7, r2
 8000bee:	191b      	adds	r3, r3, r4
 8000bf0:	881a      	ldrh	r2, [r3, #0]
 8000bf2:	4b4e      	ldr	r3, [pc, #312]	; (8000d2c <main+0x86c>)
 8000bf4:	189b      	adds	r3, r3, r2
 8000bf6:	7cdb      	ldrb	r3, [r3, #19]
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
 8000bfe:	2190      	movs	r1, #144	; 0x90
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	69b8      	ldr	r0, [r7, #24]
 8000c08:	69f9      	ldr	r1, [r7, #28]
 8000c0a:	1812      	adds	r2, r2, r0
 8000c0c:	414b      	adcs	r3, r1
 8000c0e:	2190      	movs	r1, #144	; 0x90
 8000c10:	1879      	adds	r1, r7, r1
 8000c12:	600a      	str	r2, [r1, #0]
 8000c14:	604b      	str	r3, [r1, #4]
 8000c16:	2250      	movs	r2, #80	; 0x50
 8000c18:	18bb      	adds	r3, r7, r2
 8000c1a:	191b      	adds	r3, r3, r4
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	18ba      	adds	r2, r7, r2
 8000c20:	1912      	adds	r2, r2, r4
 8000c22:	3301      	adds	r3, #1
 8000c24:	8013      	strh	r3, [r2, #0]
 8000c26:	233a      	movs	r3, #58	; 0x3a
 8000c28:	2250      	movs	r2, #80	; 0x50
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	44bc      	add	ip, r7
 8000c2e:	4463      	add	r3, ip
 8000c30:	881a      	ldrh	r2, [r3, #0]
 8000c32:	4b3e      	ldr	r3, [pc, #248]	; (8000d2c <main+0x86c>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	3b0f      	subs	r3, #15
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dbd5      	blt.n	8000be8 <main+0x728>
					  for(uint8_t i=0; i<4; i++) sum += received_frame.command_status[i];
 8000c3c:	2339      	movs	r3, #57	; 0x39
 8000c3e:	2250      	movs	r2, #80	; 0x50
 8000c40:	18ba      	adds	r2, r7, r2
 8000c42:	18d2      	adds	r2, r2, r3
 8000c44:	2300      	movs	r3, #0
 8000c46:	7013      	strb	r3, [r2, #0]
 8000c48:	e021      	b.n	8000c8e <main+0x7ce>
 8000c4a:	2439      	movs	r4, #57	; 0x39
 8000c4c:	2250      	movs	r2, #80	; 0x50
 8000c4e:	18bb      	adds	r3, r7, r2
 8000c50:	191b      	adds	r3, r3, r4
 8000c52:	7818      	ldrb	r0, [r3, #0]
 8000c54:	4935      	ldr	r1, [pc, #212]	; (8000d2c <main+0x86c>)
 8000c56:	238a      	movs	r3, #138	; 0x8a
 8000c58:	005a      	lsls	r2, r3, #1
 8000c5a:	180b      	adds	r3, r1, r0
 8000c5c:	189b      	adds	r3, r3, r2
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	2190      	movs	r1, #144	; 0x90
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	6938      	ldr	r0, [r7, #16]
 8000c70:	6979      	ldr	r1, [r7, #20]
 8000c72:	1812      	adds	r2, r2, r0
 8000c74:	414b      	adcs	r3, r1
 8000c76:	2190      	movs	r1, #144	; 0x90
 8000c78:	1879      	adds	r1, r7, r1
 8000c7a:	600a      	str	r2, [r1, #0]
 8000c7c:	604b      	str	r3, [r1, #4]
 8000c7e:	2250      	movs	r2, #80	; 0x50
 8000c80:	18bb      	adds	r3, r7, r2
 8000c82:	191b      	adds	r3, r3, r4
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	18ba      	adds	r2, r7, r2
 8000c88:	1912      	adds	r2, r2, r4
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	7013      	strb	r3, [r2, #0]
 8000c8e:	2339      	movs	r3, #57	; 0x39
 8000c90:	2250      	movs	r2, #80	; 0x50
 8000c92:	4694      	mov	ip, r2
 8000c94:	44bc      	add	ip, r7
 8000c96:	4463      	add	r3, ip
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d9d5      	bls.n	8000c4a <main+0x78a>
				  }
				  sum += received_frame.type + received_frame.option + received_frame.id + received_frame.check_sum;
 8000c9e:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <main+0x86c>)
 8000ca0:	789b      	ldrb	r3, [r3, #2]
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <main+0x86c>)
 8000ca6:	7c9b      	ldrb	r3, [r3, #18]
 8000ca8:	18d2      	adds	r2, r2, r3
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <main+0x86c>)
 8000cac:	78db      	ldrb	r3, [r3, #3]
 8000cae:	18d1      	adds	r1, r2, r3
 8000cb0:	4a1e      	ldr	r2, [pc, #120]	; (8000d2c <main+0x86c>)
 8000cb2:	238c      	movs	r3, #140	; 0x8c
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	5cd3      	ldrb	r3, [r2, r3]
 8000cb8:	18cb      	adds	r3, r1, r3
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	17db      	asrs	r3, r3, #31
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	2490      	movs	r4, #144	; 0x90
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	68b8      	ldr	r0, [r7, #8]
 8000cca:	68f9      	ldr	r1, [r7, #12]
 8000ccc:	1812      	adds	r2, r2, r0
 8000cce:	414b      	adcs	r3, r1
 8000cd0:	1939      	adds	r1, r7, r4
 8000cd2:	600a      	str	r2, [r1, #0]
 8000cd4:	604b      	str	r3, [r1, #4]
				  received_frame.check_sum_ok = (sum & 0xFF) == 0xFF;
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	23ff      	movs	r3, #255	; 0xff
 8000cdc:	401a      	ands	r2, r3
 8000cde:	603a      	str	r2, [r7, #0]
 8000ce0:	2394      	movs	r3, #148	; 0x94
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	401a      	ands	r2, r3
 8000cea:	607a      	str	r2, [r7, #4]
 8000cec:	2301      	movs	r3, #1
 8000cee:	6839      	ldr	r1, [r7, #0]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	0008      	movs	r0, r1
 8000cf4:	28ff      	cmp	r0, #255	; 0xff
 8000cf6:	d101      	bne.n	8000cfc <main+0x83c>
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	d000      	beq.n	8000cfe <main+0x83e>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	0018      	movs	r0, r3
 8000d02:	490a      	ldr	r1, [pc, #40]	; (8000d2c <main+0x86c>)
 8000d04:	231a      	movs	r3, #26
 8000d06:	33ff      	adds	r3, #255	; 0xff
 8000d08:	001a      	movs	r2, r3
 8000d0a:	1c03      	adds	r3, r0, #0
 8000d0c:	548b      	strb	r3, [r1, r2]
				  xbee_receive_state = idle;
 8000d0e:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <main+0x870>)
 8000d10:	2300      	movs	r3, #0
 8000d12:	7013      	strb	r3, [r2, #0]
			  break;
 8000d14:	e002      	b.n	8000d1c <main+0x85c>

			  case process_content:
				  0;
			  break;
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	e000      	b.n	8000d1c <main+0x85c>
			  break;
 8000d1a:	46c0      	nop			; (mov r8, r8)
		  }

		  xbee_rx_read_index += 1;
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <main+0x874>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	4a03      	ldr	r2, [pc, #12]	; (8000d34 <main+0x874>)
 8000d26:	7013      	strb	r3, [r2, #0]
	  if(xbee_rx_read_index<xbee_rx_write_index){
 8000d28:	e4dc      	b.n	80006e4 <main+0x224>
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	20000240 	.word	0x20000240
 8000d30:	20000239 	.word	0x20000239
 8000d34:	20000224 	.word	0x20000224

08000d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b09f      	sub	sp, #124	; 0x7c
 8000d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3e:	2440      	movs	r4, #64	; 0x40
 8000d40:	193b      	adds	r3, r7, r4
 8000d42:	0018      	movs	r0, r3
 8000d44:	2338      	movs	r3, #56	; 0x38
 8000d46:	001a      	movs	r2, r3
 8000d48:	2100      	movs	r1, #0
 8000d4a:	f003 f943 	bl	8003fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d4e:	232c      	movs	r3, #44	; 0x2c
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	0018      	movs	r0, r3
 8000d54:	2314      	movs	r3, #20
 8000d56:	001a      	movs	r2, r3
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f003 f93b 	bl	8003fd4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	0018      	movs	r0, r3
 8000d62:	2328      	movs	r3, #40	; 0x28
 8000d64:	001a      	movs	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	f003 f934 	bl	8003fd4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6c:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <SystemClock_Config+0xe4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a2b      	ldr	r2, [pc, #172]	; (8000e20 <SystemClock_Config+0xe8>)
 8000d72:	401a      	ands	r2, r3
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <SystemClock_Config+0xe4>)
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	0109      	lsls	r1, r1, #4
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d7e:	0021      	movs	r1, r4
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	2202      	movs	r2, #2
 8000d84:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	2201      	movs	r2, #1
 8000d8a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2210      	movs	r2, #16
 8000d90:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2202      	movs	r2, #2
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	02d2      	lsls	r2, r2, #11
 8000da4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2280      	movs	r2, #128	; 0x80
 8000daa:	03d2      	lsls	r2, r2, #15
 8000dac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 fddd 	bl	8001970 <HAL_RCC_OscConfig>
 8000db6:	1e03      	subs	r3, r0, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000dba:	f000 f921 	bl	8001000 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	212c      	movs	r1, #44	; 0x2c
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2101      	movs	r1, #1
 8000de2:	0018      	movs	r0, r3
 8000de4:	f001 f998 	bl	8002118 <HAL_RCC_ClockConfig>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000dec:	f000 f908 	bl	8001000 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2203      	movs	r2, #3
 8000df4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	0018      	movs	r0, r3
 8000e06:	f001 fbab 	bl	8002560 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	1e03      	subs	r3, r0, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000e0e:	f000 f8f7 	bl	8001000 <Error_Handler>
  }
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b01f      	add	sp, #124	; 0x7c
 8000e18:	bd90      	pop	{r4, r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	40007000 	.word	0x40007000
 8000e20:	ffffe7ff 	.word	0xffffe7ff

08000e24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e2a:	4a15      	ldr	r2, [pc, #84]	; (8000e80 <MX_USART1_UART_Init+0x5c>)
 8000e2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e30:	2296      	movs	r2, #150	; 0x96
 8000e32:	0192      	lsls	r2, r2, #6
 8000e34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f001 fced 	bl	8002848 <HAL_UART_Init>
 8000e6e:	1e03      	subs	r3, r0, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e72:	f000 f8c5 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000360 	.word	0x20000360
 8000e80:	40013800 	.word	0x40013800

08000e84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000e8a:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <MX_USART2_UART_Init+0x5c>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000e90:	22e1      	movs	r2, #225	; 0xe1
 8000e92:	0252      	lsls	r2, r2, #9
 8000e94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f001 fcbd 	bl	8002848 <HAL_UART_Init>
 8000ece:	1e03      	subs	r3, r0, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ed2:	f000 f895 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200003e8 	.word	0x200003e8
 8000ee0:	40004400 	.word	0x40004400

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	240c      	movs	r4, #12
 8000eec:	193b      	adds	r3, r7, r4
 8000eee:	0018      	movs	r0, r3
 8000ef0:	2314      	movs	r3, #20
 8000ef2:	001a      	movs	r2, r3
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	f003 f86d 	bl	8003fd4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000efe:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f00:	2104      	movs	r1, #4
 8000f02:	430a      	orrs	r2, r1
 8000f04:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f16:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	4013      	ands	r3, r2
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f30:	2101      	movs	r1, #1
 8000f32:	430a      	orrs	r2, r1
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_GPIO_Init+0xc0>)
 8000f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f42:	23a0      	movs	r3, #160	; 0xa0
 8000f44:	05db      	lsls	r3, r3, #23
 8000f46:	2200      	movs	r2, #0
 8000f48:	2120      	movs	r1, #32
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 fcf2 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f50:	193b      	adds	r3, r7, r4
 8000f52:	2280      	movs	r2, #128	; 0x80
 8000f54:	0192      	lsls	r2, r2, #6
 8000f56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f58:	193b      	adds	r3, r7, r4
 8000f5a:	2284      	movs	r2, #132	; 0x84
 8000f5c:	0392      	lsls	r2, r2, #14
 8000f5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	193b      	adds	r3, r7, r4
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f6a:	0019      	movs	r1, r3
 8000f6c:	0010      	movs	r0, r2
 8000f6e:	f000 fb63 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f72:	0021      	movs	r1, r4
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2220      	movs	r2, #32
 8000f78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	187a      	adds	r2, r7, r1
 8000f8e:	23a0      	movs	r3, #160	; 0xa0
 8000f90:	05db      	lsls	r3, r3, #23
 8000f92:	0011      	movs	r1, r2
 8000f94:	0018      	movs	r0, r3
 8000f96:	f000 fb4f 	bl	8001638 <HAL_GPIO_Init>

}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b009      	add	sp, #36	; 0x24
 8000fa0:	bd90      	pop	{r4, r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	50000800 	.word	0x50000800

08000fac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <HAL_UART_RxCpltCallback+0x40>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d112      	bne.n	8000fe4 <HAL_UART_RxCpltCallback+0x38>
	    xbee_rx_buffer[xbee_rx_write_index] = xbee_rx_last_byte;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_UART_RxCpltCallback+0x44>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	001a      	movs	r2, r3
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_UART_RxCpltCallback+0x48>)
 8000fc6:	7819      	ldrb	r1, [r3, #0]
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_UART_RxCpltCallback+0x4c>)
 8000fca:	5499      	strb	r1, [r3, r2]
	    xbee_rx_write_index++;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_UART_RxCpltCallback+0x44>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_UART_RxCpltCallback+0x44>)
 8000fd6:	701a      	strb	r2, [r3, #0]
	    HAL_UART_Receive_IT(&huart1, &xbee_rx_last_byte, 1);
 8000fd8:	4906      	ldr	r1, [pc, #24]	; (8000ff4 <HAL_UART_RxCpltCallback+0x48>)
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_UART_RxCpltCallback+0x50>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f001 fd2e 	bl	8002a40 <HAL_UART_Receive_IT>
	}

}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	20000225 	.word	0x20000225
 8000ff4:	200003e4 	.word	0x200003e4
 8000ff8:	2000046c 	.word	0x2000046c
 8000ffc:	20000360 	.word	0x20000360

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	e7fe      	b.n	8001008 <Error_Handler+0x8>
	...

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <HAL_MspInit+0x24>)
 8001012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_MspInit+0x24>)
 8001016:	2101      	movs	r1, #1
 8001018:	430a      	orrs	r2, r1
 800101a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <HAL_MspInit+0x24>)
 800101e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <HAL_MspInit+0x24>)
 8001022:	2180      	movs	r1, #128	; 0x80
 8001024:	0549      	lsls	r1, r1, #21
 8001026:	430a      	orrs	r2, r1
 8001028:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b08b      	sub	sp, #44	; 0x2c
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	2414      	movs	r4, #20
 800103e:	193b      	adds	r3, r7, r4
 8001040:	0018      	movs	r0, r3
 8001042:	2314      	movs	r3, #20
 8001044:	001a      	movs	r2, r3
 8001046:	2100      	movs	r1, #0
 8001048:	f002 ffc4 	bl	8003fd4 <memset>
  if(huart->Instance==USART1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a34      	ldr	r2, [pc, #208]	; (8001124 <HAL_UART_MspInit+0xf0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d133      	bne.n	80010be <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001056:	4b34      	ldr	r3, [pc, #208]	; (8001128 <HAL_UART_MspInit+0xf4>)
 8001058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <HAL_UART_MspInit+0xf4>)
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	01c9      	lsls	r1, r1, #7
 8001060:	430a      	orrs	r2, r1
 8001062:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b30      	ldr	r3, [pc, #192]	; (8001128 <HAL_UART_MspInit+0xf4>)
 8001066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001068:	4b2f      	ldr	r3, [pc, #188]	; (8001128 <HAL_UART_MspInit+0xf4>)
 800106a:	2101      	movs	r1, #1
 800106c:	430a      	orrs	r2, r1
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001070:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <HAL_UART_MspInit+0xf4>)
 8001072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001074:	2201      	movs	r2, #1
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800107c:	193b      	adds	r3, r7, r4
 800107e:	22c0      	movs	r2, #192	; 0xc0
 8001080:	00d2      	lsls	r2, r2, #3
 8001082:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	0021      	movs	r1, r4
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2202      	movs	r2, #2
 800108a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2203      	movs	r2, #3
 8001096:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001098:	187b      	adds	r3, r7, r1
 800109a:	2204      	movs	r2, #4
 800109c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	187a      	adds	r2, r7, r1
 80010a0:	23a0      	movs	r3, #160	; 0xa0
 80010a2:	05db      	lsls	r3, r3, #23
 80010a4:	0011      	movs	r1, r2
 80010a6:	0018      	movs	r0, r3
 80010a8:	f000 fac6 	bl	8001638 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	201b      	movs	r0, #27
 80010b2:	f000 fa07 	bl	80014c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010b6:	201b      	movs	r0, #27
 80010b8:	f000 fa19 	bl	80014ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010bc:	e02e      	b.n	800111c <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a1a      	ldr	r2, [pc, #104]	; (800112c <HAL_UART_MspInit+0xf8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d129      	bne.n	800111c <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_UART_MspInit+0xf4>)
 80010ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_UART_MspInit+0xf4>)
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	0289      	lsls	r1, r1, #10
 80010d2:	430a      	orrs	r2, r1
 80010d4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_UART_MspInit+0xf4>)
 80010d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_UART_MspInit+0xf4>)
 80010dc:	2101      	movs	r1, #1
 80010de:	430a      	orrs	r2, r1
 80010e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_UART_MspInit+0xf4>)
 80010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e6:	2201      	movs	r2, #1
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010ee:	2114      	movs	r1, #20
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2202      	movs	r2, #2
 80010fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2203      	movs	r2, #3
 8001106:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001108:	187b      	adds	r3, r7, r1
 800110a:	2204      	movs	r2, #4
 800110c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	187a      	adds	r2, r7, r1
 8001110:	23a0      	movs	r3, #160	; 0xa0
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	0011      	movs	r1, r2
 8001116:	0018      	movs	r0, r3
 8001118:	f000 fa8e 	bl	8001638 <HAL_GPIO_Init>
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b00b      	add	sp, #44	; 0x2c
 8001122:	bd90      	pop	{r4, r7, pc}
 8001124:	40013800 	.word	0x40013800
 8001128:	40021000 	.word	0x40021000
 800112c:	40004400 	.word	0x40004400

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <NMI_Handler+0x4>

08001136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f000 f8ca 	bl	80012ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <USART1_IRQHandler+0x14>)
 8001166:	0018      	movs	r0, r3
 8001168:	f001 fcd2 	bl	8002b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	20000360 	.word	0x20000360

08001178 <_sbrk>:
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <_sbrk+0x5c>)
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <_sbrk+0x60>)
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x22>
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <_sbrk+0x64>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <_sbrk+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	18d3      	adds	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <_sbrk+0x40>
 80011a8:	f002 feea 	bl	8003f80 <__errno>
 80011ac:	0003      	movs	r3, r0
 80011ae:	220c      	movs	r2, #12
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	425b      	negs	r3, r3
 80011b6:	e009      	b.n	80011cc <_sbrk+0x54>
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	18d2      	adds	r2, r2, r3
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <_sbrk+0x64>)
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b006      	add	sp, #24
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20005000 	.word	0x20005000
 80011d8:	00000400 	.word	0x00000400
 80011dc:	2000022c 	.word	0x2000022c
 80011e0:	20000588 	.word	0x20000588

080011e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <Reset_Handler>:
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <LoopForever+0x2>)
 80011f2:	4685      	mov	sp, r0
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <LoopForever+0x6>)
 80011f6:	490e      	ldr	r1, [pc, #56]	; (8001230 <LoopForever+0xa>)
 80011f8:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <LoopForever+0xe>)
 80011fa:	2300      	movs	r3, #0
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:
 80011fe:	58d4      	ldr	r4, [r2, r3]
 8001200:	50c4      	str	r4, [r0, r3]
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:
 8001204:	18c4      	adds	r4, r0, r3
 8001206:	428c      	cmp	r4, r1
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <LoopForever+0x12>)
 800120c:	4c0b      	ldr	r4, [pc, #44]	; (800123c <LoopForever+0x16>)
 800120e:	2300      	movs	r3, #0
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:
 8001216:	42a2      	cmp	r2, r4
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>
 800121a:	f7ff ffe3 	bl	80011e4 <SystemInit>
 800121e:	f002 feb5 	bl	8003f8c <__libc_init_array>
 8001222:	f7ff f94d 	bl	80004c0 <main>

08001226 <LoopForever>:
 8001226:	e7fe      	b.n	8001226 <LoopForever>
 8001228:	20005000 	.word	0x20005000
 800122c:	20000000 	.word	0x20000000
 8001230:	20000204 	.word	0x20000204
 8001234:	08004958 	.word	0x08004958
 8001238:	20000208 	.word	0x20000208
 800123c:	20000584 	.word	0x20000584

08001240 <ADC1_COMP_IRQHandler>:
 8001240:	e7fe      	b.n	8001240 <ADC1_COMP_IRQHandler>
	...

08001244 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_Init+0x3c>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_Init+0x3c>)
 8001256:	2140      	movs	r1, #64	; 0x40
 8001258:	430a      	orrs	r2, r1
 800125a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f811 	bl	8001284 <HAL_InitTick>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d003      	beq.n	800126e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
 800126c:	e001      	b.n	8001272 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800126e:	f7ff fecd 	bl	800100c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781b      	ldrb	r3, [r3, #0]
}
 8001276:	0018      	movs	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	b002      	add	sp, #8
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	40022000 	.word	0x40022000

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_InitTick+0x5c>)
 800128e:	681c      	ldr	r4, [r3, #0]
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_InitTick+0x60>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	0019      	movs	r1, r3
 8001296:	23fa      	movs	r3, #250	; 0xfa
 8001298:	0098      	lsls	r0, r3, #2
 800129a:	f7fe ff47 	bl	800012c <__udivsi3>
 800129e:	0003      	movs	r3, r0
 80012a0:	0019      	movs	r1, r3
 80012a2:	0020      	movs	r0, r4
 80012a4:	f7fe ff42 	bl	800012c <__udivsi3>
 80012a8:	0003      	movs	r3, r0
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 f92f 	bl	800150e <HAL_SYSTICK_Config>
 80012b0:	1e03      	subs	r3, r0, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e00f      	b.n	80012d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d80b      	bhi.n	80012d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	2301      	movs	r3, #1
 80012c2:	425b      	negs	r3, r3
 80012c4:	2200      	movs	r2, #0
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 f8fc 	bl	80014c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_InitTick+0x64>)
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e000      	b.n	80012d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b003      	add	sp, #12
 80012de:	bd90      	pop	{r4, r7, pc}
 80012e0:	20000194 	.word	0x20000194
 80012e4:	2000019c 	.word	0x2000019c
 80012e8:	20000198 	.word	0x20000198

080012ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_IncTick+0x1c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	001a      	movs	r2, r3
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_IncTick+0x20>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	18d2      	adds	r2, r2, r3
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <HAL_IncTick+0x20>)
 80012fe:	601a      	str	r2, [r3, #0]
}
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	2000019c 	.word	0x2000019c
 800130c:	20000570 	.word	0x20000570

08001310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b02      	ldr	r3, [pc, #8]	; (8001320 <HAL_GetTick+0x10>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	0018      	movs	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	20000570 	.word	0x20000570

08001324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800132c:	f7ff fff0 	bl	8001310 <HAL_GetTick>
 8001330:	0003      	movs	r3, r0
 8001332:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3301      	adds	r3, #1
 800133c:	d005      	beq.n	800134a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_Delay+0x44>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	001a      	movs	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	189b      	adds	r3, r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	f7ff ffe0 	bl	8001310 <HAL_GetTick>
 8001350:	0002      	movs	r2, r0
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	429a      	cmp	r2, r3
 800135a:	d8f7      	bhi.n	800134c <HAL_Delay+0x28>
  {
  }
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b004      	add	sp, #16
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	2000019c 	.word	0x2000019c

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	0002      	movs	r2, r0
 8001374:	1dfb      	adds	r3, r7, #7
 8001376:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001378:	1dfb      	adds	r3, r7, #7
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b7f      	cmp	r3, #127	; 0x7f
 800137e:	d809      	bhi.n	8001394 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	001a      	movs	r2, r3
 8001386:	231f      	movs	r3, #31
 8001388:	401a      	ands	r2, r3
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <__NVIC_EnableIRQ+0x30>)
 800138c:	2101      	movs	r1, #1
 800138e:	4091      	lsls	r1, r2
 8001390:	000a      	movs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
  }
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	0002      	movs	r2, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b7f      	cmp	r3, #127	; 0x7f
 80013b4:	d828      	bhi.n	8001408 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b6:	4a2f      	ldr	r2, [pc, #188]	; (8001474 <__NVIC_SetPriority+0xd4>)
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	33c0      	adds	r3, #192	; 0xc0
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	589b      	ldr	r3, [r3, r2]
 80013c6:	1dfa      	adds	r2, r7, #7
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	0011      	movs	r1, r2
 80013cc:	2203      	movs	r2, #3
 80013ce:	400a      	ands	r2, r1
 80013d0:	00d2      	lsls	r2, r2, #3
 80013d2:	21ff      	movs	r1, #255	; 0xff
 80013d4:	4091      	lsls	r1, r2
 80013d6:	000a      	movs	r2, r1
 80013d8:	43d2      	mvns	r2, r2
 80013da:	401a      	ands	r2, r3
 80013dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	019b      	lsls	r3, r3, #6
 80013e2:	22ff      	movs	r2, #255	; 0xff
 80013e4:	401a      	ands	r2, r3
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	0018      	movs	r0, r3
 80013ec:	2303      	movs	r3, #3
 80013ee:	4003      	ands	r3, r0
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f4:	481f      	ldr	r0, [pc, #124]	; (8001474 <__NVIC_SetPriority+0xd4>)
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	430a      	orrs	r2, r1
 8001400:	33c0      	adds	r3, #192	; 0xc0
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001406:	e031      	b.n	800146c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001408:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <__NVIC_SetPriority+0xd8>)
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	0019      	movs	r1, r3
 8001410:	230f      	movs	r3, #15
 8001412:	400b      	ands	r3, r1
 8001414:	3b08      	subs	r3, #8
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3306      	adds	r3, #6
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	18d3      	adds	r3, r2, r3
 800141e:	3304      	adds	r3, #4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	1dfa      	adds	r2, r7, #7
 8001424:	7812      	ldrb	r2, [r2, #0]
 8001426:	0011      	movs	r1, r2
 8001428:	2203      	movs	r2, #3
 800142a:	400a      	ands	r2, r1
 800142c:	00d2      	lsls	r2, r2, #3
 800142e:	21ff      	movs	r1, #255	; 0xff
 8001430:	4091      	lsls	r1, r2
 8001432:	000a      	movs	r2, r1
 8001434:	43d2      	mvns	r2, r2
 8001436:	401a      	ands	r2, r3
 8001438:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	019b      	lsls	r3, r3, #6
 800143e:	22ff      	movs	r2, #255	; 0xff
 8001440:	401a      	ands	r2, r3
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	0018      	movs	r0, r3
 8001448:	2303      	movs	r3, #3
 800144a:	4003      	ands	r3, r0
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001450:	4809      	ldr	r0, [pc, #36]	; (8001478 <__NVIC_SetPriority+0xd8>)
 8001452:	1dfb      	adds	r3, r7, #7
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	001c      	movs	r4, r3
 8001458:	230f      	movs	r3, #15
 800145a:	4023      	ands	r3, r4
 800145c:	3b08      	subs	r3, #8
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	430a      	orrs	r2, r1
 8001462:	3306      	adds	r3, #6
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	18c3      	adds	r3, r0, r3
 8001468:	3304      	adds	r3, #4
 800146a:	601a      	str	r2, [r3, #0]
}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b003      	add	sp, #12
 8001472:	bd90      	pop	{r4, r7, pc}
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	1e5a      	subs	r2, r3, #1
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	045b      	lsls	r3, r3, #17
 800148c:	429a      	cmp	r2, r3
 800148e:	d301      	bcc.n	8001494 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001490:	2301      	movs	r3, #1
 8001492:	e010      	b.n	80014b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <SysTick_Config+0x44>)
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	3a01      	subs	r2, #1
 800149a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149c:	2301      	movs	r3, #1
 800149e:	425b      	negs	r3, r3
 80014a0:	2103      	movs	r1, #3
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7ff ff7c 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x44>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x44>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b002      	add	sp, #8
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	210f      	movs	r1, #15
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	1c02      	adds	r2, r0, #0
 80014d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	0011      	movs	r1, r2
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff ff5d 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b004      	add	sp, #16
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	0002      	movs	r2, r0
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff ff33 	bl	800136c <__NVIC_EnableIRQ>
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff ffaf 	bl	800147c <SysTick_Config>
 800151e:	0003      	movs	r3, r0
}
 8001520:	0018      	movs	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	b002      	add	sp, #8
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001530:	230f      	movs	r3, #15
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2225      	movs	r2, #37	; 0x25
 800153c:	5c9b      	ldrb	r3, [r3, r2]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d008      	beq.n	8001556 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2204      	movs	r2, #4
 8001548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2224      	movs	r2, #36	; 0x24
 800154e:	2100      	movs	r1, #0
 8001550:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e024      	b.n	80015a0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	210e      	movs	r1, #14
 8001562:	438a      	bics	r2, r1
 8001564:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2101      	movs	r1, #1
 8001572:	438a      	bics	r2, r1
 8001574:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	221c      	movs	r2, #28
 800157c:	401a      	ands	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	2101      	movs	r1, #1
 8001584:	4091      	lsls	r1, r2
 8001586:	000a      	movs	r2, r1
 8001588:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2225      	movs	r2, #37	; 0x25
 800158e:	2101      	movs	r1, #1
 8001590:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2224      	movs	r2, #36	; 0x24
 8001596:	2100      	movs	r1, #0
 8001598:	5499      	strb	r1, [r3, r2]

    return status;
 800159a:	230f      	movs	r3, #15
 800159c:	18fb      	adds	r3, r7, r3
 800159e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80015a0:	0018      	movs	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b004      	add	sp, #16
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015b0:	210f      	movs	r1, #15
 80015b2:	187b      	adds	r3, r7, r1
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2225      	movs	r2, #37	; 0x25
 80015bc:	5c9b      	ldrb	r3, [r3, r2]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d006      	beq.n	80015d2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2204      	movs	r2, #4
 80015c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e02a      	b.n	8001628 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	210e      	movs	r1, #14
 80015de:	438a      	bics	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	438a      	bics	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	221c      	movs	r2, #28
 80015f8:	401a      	ands	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	2101      	movs	r1, #1
 8001600:	4091      	lsls	r1, r2
 8001602:	000a      	movs	r2, r1
 8001604:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2225      	movs	r2, #37	; 0x25
 800160a:	2101      	movs	r1, #1
 800160c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2224      	movs	r2, #36	; 0x24
 8001612:	2100      	movs	r1, #0
 8001614:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161a:	2b00      	cmp	r3, #0
 800161c:	d004      	beq.n	8001628 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	0010      	movs	r0, r2
 8001626:	4798      	blx	r3
    }
  }
  return status;
 8001628:	230f      	movs	r3, #15
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	781b      	ldrb	r3, [r3, #0]
}
 800162e:	0018      	movs	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	b004      	add	sp, #16
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800164e:	e155      	b.n	80018fc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2101      	movs	r1, #1
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4091      	lsls	r1, r2
 800165a:	000a      	movs	r2, r1
 800165c:	4013      	ands	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d100      	bne.n	8001668 <HAL_GPIO_Init+0x30>
 8001666:	e146      	b.n	80018f6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2203      	movs	r2, #3
 800166e:	4013      	ands	r3, r2
 8001670:	2b01      	cmp	r3, #1
 8001672:	d005      	beq.n	8001680 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2203      	movs	r2, #3
 800167a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800167c:	2b02      	cmp	r3, #2
 800167e:	d130      	bne.n	80016e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	409a      	lsls	r2, r3
 800168e:	0013      	movs	r3, r2
 8001690:	43da      	mvns	r2, r3
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	409a      	lsls	r2, r3
 80016a2:	0013      	movs	r3, r2
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b6:	2201      	movs	r2, #1
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	43da      	mvns	r2, r3
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	2201      	movs	r2, #1
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
 80016d4:	0013      	movs	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2203      	movs	r2, #3
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d017      	beq.n	800171e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	409a      	lsls	r2, r3
 80016fc:	0013      	movs	r3, r2
 80016fe:	43da      	mvns	r2, r3
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	409a      	lsls	r2, r3
 8001710:	0013      	movs	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2203      	movs	r2, #3
 8001724:	4013      	ands	r3, r2
 8001726:	2b02      	cmp	r3, #2
 8001728:	d123      	bne.n	8001772 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	08da      	lsrs	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3208      	adds	r2, #8
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	58d3      	ldr	r3, [r2, r3]
 8001736:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	2207      	movs	r2, #7
 800173c:	4013      	ands	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	220f      	movs	r2, #15
 8001742:	409a      	lsls	r2, r3
 8001744:	0013      	movs	r3, r2
 8001746:	43da      	mvns	r2, r3
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2107      	movs	r1, #7
 8001756:	400b      	ands	r3, r1
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	409a      	lsls	r2, r3
 800175c:	0013      	movs	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	08da      	lsrs	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3208      	adds	r2, #8
 800176c:	0092      	lsls	r2, r2, #2
 800176e:	6939      	ldr	r1, [r7, #16]
 8001770:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	409a      	lsls	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	43da      	mvns	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2203      	movs	r2, #3
 8001790:	401a      	ands	r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	409a      	lsls	r2, r3
 8001798:	0013      	movs	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	23c0      	movs	r3, #192	; 0xc0
 80017ac:	029b      	lsls	r3, r3, #10
 80017ae:	4013      	ands	r3, r2
 80017b0:	d100      	bne.n	80017b4 <HAL_GPIO_Init+0x17c>
 80017b2:	e0a0      	b.n	80018f6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b4:	4b57      	ldr	r3, [pc, #348]	; (8001914 <HAL_GPIO_Init+0x2dc>)
 80017b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b8:	4b56      	ldr	r3, [pc, #344]	; (8001914 <HAL_GPIO_Init+0x2dc>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	430a      	orrs	r2, r1
 80017be:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c0:	4a55      	ldr	r2, [pc, #340]	; (8001918 <HAL_GPIO_Init+0x2e0>)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	3302      	adds	r3, #2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	589b      	ldr	r3, [r3, r2]
 80017cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2203      	movs	r2, #3
 80017d2:	4013      	ands	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	220f      	movs	r2, #15
 80017d8:	409a      	lsls	r2, r3
 80017da:	0013      	movs	r3, r2
 80017dc:	43da      	mvns	r2, r3
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	23a0      	movs	r3, #160	; 0xa0
 80017e8:	05db      	lsls	r3, r3, #23
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d01f      	beq.n	800182e <HAL_GPIO_Init+0x1f6>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4a      	ldr	r2, [pc, #296]	; (800191c <HAL_GPIO_Init+0x2e4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d019      	beq.n	800182a <HAL_GPIO_Init+0x1f2>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a49      	ldr	r2, [pc, #292]	; (8001920 <HAL_GPIO_Init+0x2e8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_Init+0x1ee>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a48      	ldr	r2, [pc, #288]	; (8001924 <HAL_GPIO_Init+0x2ec>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00d      	beq.n	8001822 <HAL_GPIO_Init+0x1ea>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a47      	ldr	r2, [pc, #284]	; (8001928 <HAL_GPIO_Init+0x2f0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d007      	beq.n	800181e <HAL_GPIO_Init+0x1e6>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a46      	ldr	r2, [pc, #280]	; (800192c <HAL_GPIO_Init+0x2f4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_GPIO_Init+0x1e2>
 8001816:	2305      	movs	r3, #5
 8001818:	e00a      	b.n	8001830 <HAL_GPIO_Init+0x1f8>
 800181a:	2306      	movs	r3, #6
 800181c:	e008      	b.n	8001830 <HAL_GPIO_Init+0x1f8>
 800181e:	2304      	movs	r3, #4
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x1f8>
 8001822:	2303      	movs	r3, #3
 8001824:	e004      	b.n	8001830 <HAL_GPIO_Init+0x1f8>
 8001826:	2302      	movs	r3, #2
 8001828:	e002      	b.n	8001830 <HAL_GPIO_Init+0x1f8>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_GPIO_Init+0x1f8>
 800182e:	2300      	movs	r3, #0
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	2103      	movs	r1, #3
 8001834:	400a      	ands	r2, r1
 8001836:	0092      	lsls	r2, r2, #2
 8001838:	4093      	lsls	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001840:	4935      	ldr	r1, [pc, #212]	; (8001918 <HAL_GPIO_Init+0x2e0>)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800184e:	4b38      	ldr	r3, [pc, #224]	; (8001930 <HAL_GPIO_Init+0x2f8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43da      	mvns	r2, r3
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	025b      	lsls	r3, r3, #9
 8001866:	4013      	ands	r3, r2
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001872:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_GPIO_Init+0x2f8>)
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001878:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_GPIO_Init+0x2f8>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43da      	mvns	r2, r3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	029b      	lsls	r3, r3, #10
 8001890:	4013      	ands	r3, r2
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800189c:	4b24      	ldr	r3, [pc, #144]	; (8001930 <HAL_GPIO_Init+0x2f8>)
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <HAL_GPIO_Init+0x2f8>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43da      	mvns	r2, r3
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	035b      	lsls	r3, r3, #13
 80018ba:	4013      	ands	r3, r2
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_GPIO_Init+0x2f8>)
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_GPIO_Init+0x2f8>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	43da      	mvns	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	039b      	lsls	r3, r3, #14
 80018e4:	4013      	ands	r3, r2
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_GPIO_Init+0x2f8>)
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	40da      	lsrs	r2, r3
 8001904:	1e13      	subs	r3, r2, #0
 8001906:	d000      	beq.n	800190a <HAL_GPIO_Init+0x2d2>
 8001908:	e6a2      	b.n	8001650 <HAL_GPIO_Init+0x18>
  }
}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	b006      	add	sp, #24
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	40010000 	.word	0x40010000
 800191c:	50000400 	.word	0x50000400
 8001920:	50000800 	.word	0x50000800
 8001924:	50000c00 	.word	0x50000c00
 8001928:	50001000 	.word	0x50001000
 800192c:	50001c00 	.word	0x50001c00
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	0008      	movs	r0, r1
 800193e:	0011      	movs	r1, r2
 8001940:	1cbb      	adds	r3, r7, #2
 8001942:	1c02      	adds	r2, r0, #0
 8001944:	801a      	strh	r2, [r3, #0]
 8001946:	1c7b      	adds	r3, r7, #1
 8001948:	1c0a      	adds	r2, r1, #0
 800194a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800194c:	1c7b      	adds	r3, r7, #1
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001954:	1cbb      	adds	r3, r7, #2
 8001956:	881a      	ldrh	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800195c:	e003      	b.n	8001966 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800195e:	1cbb      	adds	r3, r7, #2
 8001960:	881a      	ldrh	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	b002      	add	sp, #8
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	b5b0      	push	{r4, r5, r7, lr}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d102      	bne.n	8001984 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	f000 fbbf 	bl	8002102 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001984:	4bc9      	ldr	r3, [pc, #804]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	220c      	movs	r2, #12
 800198a:	4013      	ands	r3, r2
 800198c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800198e:	4bc7      	ldr	r3, [pc, #796]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	025b      	lsls	r3, r3, #9
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2201      	movs	r2, #1
 80019a0:	4013      	ands	r3, r2
 80019a2:	d100      	bne.n	80019a6 <HAL_RCC_OscConfig+0x36>
 80019a4:	e07e      	b.n	8001aa4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d007      	beq.n	80019bc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	d112      	bne.n	80019d8 <HAL_RCC_OscConfig+0x68>
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	025b      	lsls	r3, r3, #9
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d10d      	bne.n	80019d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	4bbb      	ldr	r3, [pc, #748]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	029b      	lsls	r3, r3, #10
 80019c4:	4013      	ands	r3, r2
 80019c6:	d100      	bne.n	80019ca <HAL_RCC_OscConfig+0x5a>
 80019c8:	e06b      	b.n	8001aa2 <HAL_RCC_OscConfig+0x132>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d167      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	f000 fb95 	bl	8002102 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	025b      	lsls	r3, r3, #9
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_OscConfig+0x84>
 80019e4:	4bb1      	ldr	r3, [pc, #708]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4bb0      	ldr	r3, [pc, #704]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	0249      	lsls	r1, r1, #9
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e027      	b.n	8001a44 <HAL_RCC_OscConfig+0xd4>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	23a0      	movs	r3, #160	; 0xa0
 80019fa:	02db      	lsls	r3, r3, #11
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d10e      	bne.n	8001a1e <HAL_RCC_OscConfig+0xae>
 8001a00:	4baa      	ldr	r3, [pc, #680]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4ba9      	ldr	r3, [pc, #676]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	02c9      	lsls	r1, r1, #11
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	4ba7      	ldr	r3, [pc, #668]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4ba6      	ldr	r3, [pc, #664]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	0249      	lsls	r1, r1, #9
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e012      	b.n	8001a44 <HAL_RCC_OscConfig+0xd4>
 8001a1e:	4ba3      	ldr	r3, [pc, #652]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4ba2      	ldr	r3, [pc, #648]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001a24:	49a2      	ldr	r1, [pc, #648]	; (8001cb0 <HAL_RCC_OscConfig+0x340>)
 8001a26:	400a      	ands	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	4ba0      	ldr	r3, [pc, #640]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	025b      	lsls	r3, r3, #9
 8001a32:	4013      	ands	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4b9c      	ldr	r3, [pc, #624]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b9b      	ldr	r3, [pc, #620]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001a3e:	499d      	ldr	r1, [pc, #628]	; (8001cb4 <HAL_RCC_OscConfig+0x344>)
 8001a40:	400a      	ands	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d015      	beq.n	8001a78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fc60 	bl	8001310 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a54:	e009      	b.n	8001a6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a56:	f7ff fc5b 	bl	8001310 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b64      	cmp	r3, #100	; 0x64
 8001a62:	d902      	bls.n	8001a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	f000 fb4c 	bl	8002102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a6a:	4b90      	ldr	r3, [pc, #576]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	029b      	lsls	r3, r3, #10
 8001a72:	4013      	ands	r3, r2
 8001a74:	d0ef      	beq.n	8001a56 <HAL_RCC_OscConfig+0xe6>
 8001a76:	e015      	b.n	8001aa4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff fc4a 	bl	8001310 <HAL_GetTick>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a82:	f7ff fc45 	bl	8001310 <HAL_GetTick>
 8001a86:	0002      	movs	r2, r0
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b64      	cmp	r3, #100	; 0x64
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e336      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a94:	4b85      	ldr	r3, [pc, #532]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	029b      	lsls	r3, r3, #10
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x112>
 8001aa0:	e000      	b.n	8001aa4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d100      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x140>
 8001aae:	e099      	b.n	8001be4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	2220      	movs	r2, #32
 8001aba:	4013      	ands	r3, r2
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001abe:	4b7b      	ldr	r3, [pc, #492]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4b7a      	ldr	r3, [pc, #488]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001ac4:	2120      	movs	r1, #32
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	2220      	movs	r2, #32
 8001ace:	4393      	bics	r3, r2
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	2b0c      	cmp	r3, #12
 8001adc:	d13e      	bne.n	8001b5c <HAL_RCC_OscConfig+0x1ec>
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d13b      	bne.n	8001b5c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001ae4:	4b71      	ldr	r3, [pc, #452]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2204      	movs	r2, #4
 8001aea:	4013      	ands	r3, r2
 8001aec:	d004      	beq.n	8001af8 <HAL_RCC_OscConfig+0x188>
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e304      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af8:	4b6c      	ldr	r3, [pc, #432]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a6e      	ldr	r2, [pc, #440]	; (8001cb8 <HAL_RCC_OscConfig+0x348>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	0019      	movs	r1, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	021a      	lsls	r2, r3, #8
 8001b08:	4b68      	ldr	r3, [pc, #416]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b0e:	4b67      	ldr	r3, [pc, #412]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2209      	movs	r2, #9
 8001b14:	4393      	bics	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	4b64      	ldr	r3, [pc, #400]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b20:	f000 fc42 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8001b24:	0001      	movs	r1, r0
 8001b26:	4b61      	ldr	r3, [pc, #388]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	4a62      	ldr	r2, [pc, #392]	; (8001cbc <HAL_RCC_OscConfig+0x34c>)
 8001b32:	5cd3      	ldrb	r3, [r2, r3]
 8001b34:	000a      	movs	r2, r1
 8001b36:	40da      	lsrs	r2, r3
 8001b38:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <HAL_RCC_OscConfig+0x350>)
 8001b3a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001b3c:	4b61      	ldr	r3, [pc, #388]	; (8001cc4 <HAL_RCC_OscConfig+0x354>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2513      	movs	r5, #19
 8001b42:	197c      	adds	r4, r7, r5
 8001b44:	0018      	movs	r0, r3
 8001b46:	f7ff fb9d 	bl	8001284 <HAL_InitTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001b4e:	197b      	adds	r3, r7, r5
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d046      	beq.n	8001be4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001b56:	197b      	adds	r3, r7, r5
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	e2d2      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d027      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b62:	4b52      	ldr	r3, [pc, #328]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2209      	movs	r2, #9
 8001b68:	4393      	bics	r3, r2
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	4b4f      	ldr	r3, [pc, #316]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fbcc 	bl	8001310 <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b7e:	f7ff fbc7 	bl	8001310 <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e2b8      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b90:	4b46      	ldr	r3, [pc, #280]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2204      	movs	r2, #4
 8001b96:	4013      	ands	r3, r2
 8001b98:	d0f1      	beq.n	8001b7e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9a:	4b44      	ldr	r3, [pc, #272]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4a46      	ldr	r2, [pc, #280]	; (8001cb8 <HAL_RCC_OscConfig+0x348>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	021a      	lsls	r2, r3, #8
 8001baa:	4b40      	ldr	r3, [pc, #256]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001bac:	430a      	orrs	r2, r1
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	e018      	b.n	8001be4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb2:	4b3e      	ldr	r3, [pc, #248]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001bb8:	2101      	movs	r1, #1
 8001bba:	438a      	bics	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7ff fba7 	bl	8001310 <HAL_GetTick>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc8:	f7ff fba2 	bl	8001310 <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e293      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bda:	4b34      	ldr	r3, [pc, #208]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2204      	movs	r2, #4
 8001be0:	4013      	ands	r3, r2
 8001be2:	d1f1      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2210      	movs	r2, #16
 8001bea:	4013      	ands	r3, r2
 8001bec:	d100      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x280>
 8001bee:	e0a2      	b.n	8001d36 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d140      	bne.n	8001c78 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d005      	beq.n	8001c0e <HAL_RCC_OscConfig+0x29e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e279      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c0e:	4b27      	ldr	r3, [pc, #156]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4a2d      	ldr	r2, [pc, #180]	; (8001cc8 <HAL_RCC_OscConfig+0x358>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c1c:	4b23      	ldr	r3, [pc, #140]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	0a19      	lsrs	r1, r3, #8
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	061a      	lsls	r2, r3, #24
 8001c30:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	0b5b      	lsrs	r3, r3, #13
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	0212      	lsls	r2, r2, #8
 8001c42:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	400b      	ands	r3, r1
 8001c4e:	491b      	ldr	r1, [pc, #108]	; (8001cbc <HAL_RCC_OscConfig+0x34c>)
 8001c50:	5ccb      	ldrb	r3, [r1, r3]
 8001c52:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <HAL_RCC_OscConfig+0x350>)
 8001c56:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001c58:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <HAL_RCC_OscConfig+0x354>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2513      	movs	r5, #19
 8001c5e:	197c      	adds	r4, r7, r5
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7ff fb0f 	bl	8001284 <HAL_InitTick>
 8001c66:	0003      	movs	r3, r0
 8001c68:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001c6a:	197b      	adds	r3, r7, r5
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d061      	beq.n	8001d36 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001c72:	197b      	adds	r3, r7, r5
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	e244      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d040      	beq.n	8001d02 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	0049      	lsls	r1, r1, #1
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fb3f 	bl	8001310 <HAL_GetTick>
 8001c92:	0003      	movs	r3, r0
 8001c94:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c96:	e019      	b.n	8001ccc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c98:	f7ff fb3a 	bl	8001310 <HAL_GetTick>
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d912      	bls.n	8001ccc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e22b      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	fffeffff 	.word	0xfffeffff
 8001cb4:	fffbffff 	.word	0xfffbffff
 8001cb8:	ffffe0ff 	.word	0xffffe0ff
 8001cbc:	080048a8 	.word	0x080048a8
 8001cc0:	20000194 	.word	0x20000194
 8001cc4:	20000198 	.word	0x20000198
 8001cc8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ccc:	4bca      	ldr	r3, [pc, #808]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d0df      	beq.n	8001c98 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd8:	4bc7      	ldr	r3, [pc, #796]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4ac7      	ldr	r2, [pc, #796]	; (8001ffc <HAL_RCC_OscConfig+0x68c>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ce6:	4bc4      	ldr	r3, [pc, #784]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cec:	4bc2      	ldr	r3, [pc, #776]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	0a19      	lsrs	r1, r3, #8
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	061a      	lsls	r2, r3, #24
 8001cfa:	4bbf      	ldr	r3, [pc, #764]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	e019      	b.n	8001d36 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d02:	4bbd      	ldr	r3, [pc, #756]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	4bbc      	ldr	r3, [pc, #752]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001d08:	49bd      	ldr	r1, [pc, #756]	; (8002000 <HAL_RCC_OscConfig+0x690>)
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff faff 	bl	8001310 <HAL_GetTick>
 8001d12:	0003      	movs	r3, r0
 8001d14:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d18:	f7ff fafa 	bl	8001310 <HAL_GetTick>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e1eb      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d2a:	4bb3      	ldr	r3, [pc, #716]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4013      	ands	r3, r2
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2208      	movs	r2, #8
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d036      	beq.n	8001dae <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d019      	beq.n	8001d7c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d48:	4bab      	ldr	r3, [pc, #684]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001d4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d4c:	4baa      	ldr	r3, [pc, #680]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001d4e:	2101      	movs	r1, #1
 8001d50:	430a      	orrs	r2, r1
 8001d52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d54:	f7ff fadc 	bl	8001310 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d5e:	f7ff fad7 	bl	8001310 <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e1c8      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d70:	4ba1      	ldr	r3, [pc, #644]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d74:	2202      	movs	r2, #2
 8001d76:	4013      	ands	r3, r2
 8001d78:	d0f1      	beq.n	8001d5e <HAL_RCC_OscConfig+0x3ee>
 8001d7a:	e018      	b.n	8001dae <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7c:	4b9e      	ldr	r3, [pc, #632]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001d7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d80:	4b9d      	ldr	r3, [pc, #628]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001d82:	2101      	movs	r1, #1
 8001d84:	438a      	bics	r2, r1
 8001d86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d88:	f7ff fac2 	bl	8001310 <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d92:	f7ff fabd 	bl	8001310 <HAL_GetTick>
 8001d96:	0002      	movs	r2, r0
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e1ae      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001da4:	4b94      	ldr	r3, [pc, #592]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da8:	2202      	movs	r2, #2
 8001daa:	4013      	ands	r3, r2
 8001dac:	d1f1      	bne.n	8001d92 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2204      	movs	r2, #4
 8001db4:	4013      	ands	r3, r2
 8001db6:	d100      	bne.n	8001dba <HAL_RCC_OscConfig+0x44a>
 8001db8:	e0ae      	b.n	8001f18 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dba:	2023      	movs	r0, #35	; 0x23
 8001dbc:	183b      	adds	r3, r7, r0
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc2:	4b8d      	ldr	r3, [pc, #564]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	055b      	lsls	r3, r3, #21
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d109      	bne.n	8001de2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	4b8a      	ldr	r3, [pc, #552]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dd2:	4b89      	ldr	r3, [pc, #548]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	0549      	lsls	r1, r1, #21
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001ddc:	183b      	adds	r3, r7, r0
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de2:	4b88      	ldr	r3, [pc, #544]	; (8002004 <HAL_RCC_OscConfig+0x694>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4013      	ands	r3, r2
 8001dec:	d11a      	bne.n	8001e24 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dee:	4b85      	ldr	r3, [pc, #532]	; (8002004 <HAL_RCC_OscConfig+0x694>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b84      	ldr	r3, [pc, #528]	; (8002004 <HAL_RCC_OscConfig+0x694>)
 8001df4:	2180      	movs	r1, #128	; 0x80
 8001df6:	0049      	lsls	r1, r1, #1
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfc:	f7ff fa88 	bl	8001310 <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e06:	f7ff fa83 	bl	8001310 <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b64      	cmp	r3, #100	; 0x64
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e174      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	4b7a      	ldr	r3, [pc, #488]	; (8002004 <HAL_RCC_OscConfig+0x694>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_OscConfig+0x4d0>
 8001e30:	4b71      	ldr	r3, [pc, #452]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001e32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e34:	4b70      	ldr	r3, [pc, #448]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	0049      	lsls	r1, r1, #1
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	651a      	str	r2, [r3, #80]	; 0x50
 8001e3e:	e031      	b.n	8001ea4 <HAL_RCC_OscConfig+0x534>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10c      	bne.n	8001e62 <HAL_RCC_OscConfig+0x4f2>
 8001e48:	4b6b      	ldr	r3, [pc, #428]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001e4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001e4e:	496c      	ldr	r1, [pc, #432]	; (8002000 <HAL_RCC_OscConfig+0x690>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	651a      	str	r2, [r3, #80]	; 0x50
 8001e54:	4b68      	ldr	r3, [pc, #416]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001e56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e58:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001e5a:	496b      	ldr	r1, [pc, #428]	; (8002008 <HAL_RCC_OscConfig+0x698>)
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	651a      	str	r2, [r3, #80]	; 0x50
 8001e60:	e020      	b.n	8001ea4 <HAL_RCC_OscConfig+0x534>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	23a0      	movs	r3, #160	; 0xa0
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d10e      	bne.n	8001e8c <HAL_RCC_OscConfig+0x51c>
 8001e6e:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001e70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e72:	4b61      	ldr	r3, [pc, #388]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001e74:	2180      	movs	r1, #128	; 0x80
 8001e76:	00c9      	lsls	r1, r1, #3
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	651a      	str	r2, [r3, #80]	; 0x50
 8001e7c:	4b5e      	ldr	r3, [pc, #376]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001e7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e80:	4b5d      	ldr	r3, [pc, #372]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001e82:	2180      	movs	r1, #128	; 0x80
 8001e84:	0049      	lsls	r1, r1, #1
 8001e86:	430a      	orrs	r2, r1
 8001e88:	651a      	str	r2, [r3, #80]	; 0x50
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x534>
 8001e8c:	4b5a      	ldr	r3, [pc, #360]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001e8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e90:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001e92:	495b      	ldr	r1, [pc, #364]	; (8002000 <HAL_RCC_OscConfig+0x690>)
 8001e94:	400a      	ands	r2, r1
 8001e96:	651a      	str	r2, [r3, #80]	; 0x50
 8001e98:	4b57      	ldr	r3, [pc, #348]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001e9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e9c:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001e9e:	495a      	ldr	r1, [pc, #360]	; (8002008 <HAL_RCC_OscConfig+0x698>)
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d015      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eac:	f7ff fa30 	bl	8001310 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eb4:	e009      	b.n	8001eca <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7ff fa2b 	bl	8001310 <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_RCC_OscConfig+0x69c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e11b      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eca:	4b4b      	ldr	r3, [pc, #300]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001ecc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d0ef      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x546>
 8001ed6:	e014      	b.n	8001f02 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fa1a 	bl	8001310 <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ee0:	e009      	b.n	8001ef6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7ff fa15 	bl	8001310 <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	4a47      	ldr	r2, [pc, #284]	; (800200c <HAL_RCC_OscConfig+0x69c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e105      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ef6:	4b40      	ldr	r3, [pc, #256]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001ef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4013      	ands	r3, r2
 8001f00:	d1ef      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f02:	2323      	movs	r3, #35	; 0x23
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d105      	bne.n	8001f18 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0c:	4b3a      	ldr	r3, [pc, #232]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f10:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001f12:	493f      	ldr	r1, [pc, #252]	; (8002010 <HAL_RCC_OscConfig+0x6a0>)
 8001f14:	400a      	ands	r2, r1
 8001f16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d049      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d026      	beq.n	8001f78 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001f2a:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	4b32      	ldr	r3, [pc, #200]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001f30:	2101      	movs	r1, #1
 8001f32:	430a      	orrs	r2, r1
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	635a      	str	r2, [r3, #52]	; 0x34
 8001f42:	4b34      	ldr	r3, [pc, #208]	; (8002014 <HAL_RCC_OscConfig+0x6a4>)
 8001f44:	6a1a      	ldr	r2, [r3, #32]
 8001f46:	4b33      	ldr	r3, [pc, #204]	; (8002014 <HAL_RCC_OscConfig+0x6a4>)
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	0189      	lsls	r1, r1, #6
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff f9de 	bl	8001310 <HAL_GetTick>
 8001f54:	0003      	movs	r3, r0
 8001f56:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f5a:	f7ff f9d9 	bl	8001310 <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e0ca      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f6c:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2202      	movs	r2, #2
 8001f72:	4013      	ands	r3, r2
 8001f74:	d0f1      	beq.n	8001f5a <HAL_RCC_OscConfig+0x5ea>
 8001f76:	e01e      	b.n	8001fb6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001f78:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001f7e:	2101      	movs	r1, #1
 8001f80:	438a      	bics	r2, r1
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	4b23      	ldr	r3, [pc, #140]	; (8002014 <HAL_RCC_OscConfig+0x6a4>)
 8001f86:	6a1a      	ldr	r2, [r3, #32]
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <HAL_RCC_OscConfig+0x6a4>)
 8001f8a:	4923      	ldr	r1, [pc, #140]	; (8002018 <HAL_RCC_OscConfig+0x6a8>)
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff f9be 	bl	8001310 <HAL_GetTick>
 8001f94:	0003      	movs	r3, r0
 8001f96:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f9a:	f7ff f9b9 	bl	8001310 <HAL_GetTick>
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0aa      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d1f1      	bne.n	8001f9a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d100      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x650>
 8001fbe:	e09f      	b.n	8002100 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	d100      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x658>
 8001fc6:	e078      	b.n	80020ba <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d159      	bne.n	8002084 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001fd6:	4911      	ldr	r1, [pc, #68]	; (800201c <HAL_RCC_OscConfig+0x6ac>)
 8001fd8:	400a      	ands	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f998 	bl	8001310 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fe4:	e01c      	b.n	8002020 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7ff f993 	bl	8001310 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d915      	bls.n	8002020 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e084      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	ffff1fff 	.word	0xffff1fff
 8002000:	fffffeff 	.word	0xfffffeff
 8002004:	40007000 	.word	0x40007000
 8002008:	fffffbff 	.word	0xfffffbff
 800200c:	00001388 	.word	0x00001388
 8002010:	efffffff 	.word	0xefffffff
 8002014:	40010000 	.word	0x40010000
 8002018:	ffffdfff 	.word	0xffffdfff
 800201c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002020:	4b3a      	ldr	r3, [pc, #232]	; (800210c <HAL_RCC_OscConfig+0x79c>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	049b      	lsls	r3, r3, #18
 8002028:	4013      	ands	r3, r2
 800202a:	d1dc      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202c:	4b37      	ldr	r3, [pc, #220]	; (800210c <HAL_RCC_OscConfig+0x79c>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a37      	ldr	r2, [pc, #220]	; (8002110 <HAL_RCC_OscConfig+0x7a0>)
 8002032:	4013      	ands	r3, r2
 8002034:	0019      	movs	r1, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002044:	431a      	orrs	r2, r3
 8002046:	4b31      	ldr	r3, [pc, #196]	; (800210c <HAL_RCC_OscConfig+0x79c>)
 8002048:	430a      	orrs	r2, r1
 800204a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800204c:	4b2f      	ldr	r3, [pc, #188]	; (800210c <HAL_RCC_OscConfig+0x79c>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b2e      	ldr	r3, [pc, #184]	; (800210c <HAL_RCC_OscConfig+0x79c>)
 8002052:	2180      	movs	r1, #128	; 0x80
 8002054:	0449      	lsls	r1, r1, #17
 8002056:	430a      	orrs	r2, r1
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205a:	f7ff f959 	bl	8001310 <HAL_GetTick>
 800205e:	0003      	movs	r3, r0
 8002060:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff f954 	bl	8001310 <HAL_GetTick>
 8002068:	0002      	movs	r2, r0
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e045      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002076:	4b25      	ldr	r3, [pc, #148]	; (800210c <HAL_RCC_OscConfig+0x79c>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	049b      	lsls	r3, r3, #18
 800207e:	4013      	ands	r3, r2
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x6f4>
 8002082:	e03d      	b.n	8002100 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <HAL_RCC_OscConfig+0x79c>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b20      	ldr	r3, [pc, #128]	; (800210c <HAL_RCC_OscConfig+0x79c>)
 800208a:	4922      	ldr	r1, [pc, #136]	; (8002114 <HAL_RCC_OscConfig+0x7a4>)
 800208c:	400a      	ands	r2, r1
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7ff f93e 	bl	8001310 <HAL_GetTick>
 8002094:	0003      	movs	r3, r0
 8002096:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209a:	f7ff f939 	bl	8001310 <HAL_GetTick>
 800209e:	0002      	movs	r2, r0
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e02a      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020ac:	4b17      	ldr	r3, [pc, #92]	; (800210c <HAL_RCC_OscConfig+0x79c>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	049b      	lsls	r3, r3, #18
 80020b4:	4013      	ands	r3, r2
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x72a>
 80020b8:	e022      	b.n	8002100 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e01d      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_RCC_OscConfig+0x79c>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	025b      	lsls	r3, r3, #9
 80020d2:	401a      	ands	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	429a      	cmp	r2, r3
 80020da:	d10f      	bne.n	80020fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	23f0      	movs	r3, #240	; 0xf0
 80020e0:	039b      	lsls	r3, r3, #14
 80020e2:	401a      	ands	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d107      	bne.n	80020fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	23c0      	movs	r3, #192	; 0xc0
 80020f0:	041b      	lsls	r3, r3, #16
 80020f2:	401a      	ands	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	0018      	movs	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	b00a      	add	sp, #40	; 0x28
 8002108:	bdb0      	pop	{r4, r5, r7, pc}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	40021000 	.word	0x40021000
 8002110:	ff02ffff 	.word	0xff02ffff
 8002114:	feffffff 	.word	0xfeffffff

08002118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002118:	b5b0      	push	{r4, r5, r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e128      	b.n	800237e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800212c:	4b96      	ldr	r3, [pc, #600]	; (8002388 <HAL_RCC_ClockConfig+0x270>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2201      	movs	r2, #1
 8002132:	4013      	ands	r3, r2
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d91e      	bls.n	8002178 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b93      	ldr	r3, [pc, #588]	; (8002388 <HAL_RCC_ClockConfig+0x270>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2201      	movs	r2, #1
 8002140:	4393      	bics	r3, r2
 8002142:	0019      	movs	r1, r3
 8002144:	4b90      	ldr	r3, [pc, #576]	; (8002388 <HAL_RCC_ClockConfig+0x270>)
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800214c:	f7ff f8e0 	bl	8001310 <HAL_GetTick>
 8002150:	0003      	movs	r3, r0
 8002152:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002154:	e009      	b.n	800216a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002156:	f7ff f8db 	bl	8001310 <HAL_GetTick>
 800215a:	0002      	movs	r2, r0
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	4a8a      	ldr	r2, [pc, #552]	; (800238c <HAL_RCC_ClockConfig+0x274>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e109      	b.n	800237e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b87      	ldr	r3, [pc, #540]	; (8002388 <HAL_RCC_ClockConfig+0x270>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2201      	movs	r2, #1
 8002170:	4013      	ands	r3, r2
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d1ee      	bne.n	8002156 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2202      	movs	r2, #2
 800217e:	4013      	ands	r3, r2
 8002180:	d009      	beq.n	8002196 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002182:	4b83      	ldr	r3, [pc, #524]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	22f0      	movs	r2, #240	; 0xf0
 8002188:	4393      	bics	r3, r2
 800218a:	0019      	movs	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	4b7f      	ldr	r3, [pc, #508]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 8002192:	430a      	orrs	r2, r1
 8002194:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2201      	movs	r2, #1
 800219c:	4013      	ands	r3, r2
 800219e:	d100      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x8a>
 80021a0:	e089      	b.n	80022b6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021aa:	4b79      	ldr	r3, [pc, #484]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	029b      	lsls	r3, r3, #10
 80021b2:	4013      	ands	r3, r2
 80021b4:	d120      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0e1      	b.n	800237e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021c2:	4b73      	ldr	r3, [pc, #460]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	049b      	lsls	r3, r3, #18
 80021ca:	4013      	ands	r3, r2
 80021cc:	d114      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0d5      	b.n	800237e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d106      	bne.n	80021e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021da:	4b6d      	ldr	r3, [pc, #436]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2204      	movs	r2, #4
 80021e0:	4013      	ands	r3, r2
 80021e2:	d109      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0ca      	b.n	800237e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021e8:	4b69      	ldr	r3, [pc, #420]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4013      	ands	r3, r2
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0c2      	b.n	800237e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f8:	4b65      	ldr	r3, [pc, #404]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2203      	movs	r2, #3
 80021fe:	4393      	bics	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	4b62      	ldr	r3, [pc, #392]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 8002208:	430a      	orrs	r2, r1
 800220a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800220c:	f7ff f880 	bl	8001310 <HAL_GetTick>
 8002210:	0003      	movs	r3, r0
 8002212:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d111      	bne.n	8002240 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800221c:	e009      	b.n	8002232 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221e:	f7ff f877 	bl	8001310 <HAL_GetTick>
 8002222:	0002      	movs	r2, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	4a58      	ldr	r2, [pc, #352]	; (800238c <HAL_RCC_ClockConfig+0x274>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e0a5      	b.n	800237e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002232:	4b57      	ldr	r3, [pc, #348]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	220c      	movs	r2, #12
 8002238:	4013      	ands	r3, r2
 800223a:	2b08      	cmp	r3, #8
 800223c:	d1ef      	bne.n	800221e <HAL_RCC_ClockConfig+0x106>
 800223e:	e03a      	b.n	80022b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d111      	bne.n	800226c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002248:	e009      	b.n	800225e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224a:	f7ff f861 	bl	8001310 <HAL_GetTick>
 800224e:	0002      	movs	r2, r0
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	4a4d      	ldr	r2, [pc, #308]	; (800238c <HAL_RCC_ClockConfig+0x274>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e08f      	b.n	800237e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800225e:	4b4c      	ldr	r3, [pc, #304]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	220c      	movs	r2, #12
 8002264:	4013      	ands	r3, r2
 8002266:	2b0c      	cmp	r3, #12
 8002268:	d1ef      	bne.n	800224a <HAL_RCC_ClockConfig+0x132>
 800226a:	e024      	b.n	80022b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d11b      	bne.n	80022ac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002274:	e009      	b.n	800228a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002276:	f7ff f84b 	bl	8001310 <HAL_GetTick>
 800227a:	0002      	movs	r2, r0
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	4a42      	ldr	r2, [pc, #264]	; (800238c <HAL_RCC_ClockConfig+0x274>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e079      	b.n	800237e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800228a:	4b41      	ldr	r3, [pc, #260]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	220c      	movs	r2, #12
 8002290:	4013      	ands	r3, r2
 8002292:	2b04      	cmp	r3, #4
 8002294:	d1ef      	bne.n	8002276 <HAL_RCC_ClockConfig+0x15e>
 8002296:	e00e      	b.n	80022b6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002298:	f7ff f83a 	bl	8001310 <HAL_GetTick>
 800229c:	0002      	movs	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	4a3a      	ldr	r2, [pc, #232]	; (800238c <HAL_RCC_ClockConfig+0x274>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e068      	b.n	800237e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80022ac:	4b38      	ldr	r3, [pc, #224]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	220c      	movs	r2, #12
 80022b2:	4013      	ands	r3, r2
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022b6:	4b34      	ldr	r3, [pc, #208]	; (8002388 <HAL_RCC_ClockConfig+0x270>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2201      	movs	r2, #1
 80022bc:	4013      	ands	r3, r2
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d21e      	bcs.n	8002302 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c4:	4b30      	ldr	r3, [pc, #192]	; (8002388 <HAL_RCC_ClockConfig+0x270>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2201      	movs	r2, #1
 80022ca:	4393      	bics	r3, r2
 80022cc:	0019      	movs	r1, r3
 80022ce:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <HAL_RCC_ClockConfig+0x270>)
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022d6:	f7ff f81b 	bl	8001310 <HAL_GetTick>
 80022da:	0003      	movs	r3, r0
 80022dc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	e009      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e0:	f7ff f816 	bl	8001310 <HAL_GetTick>
 80022e4:	0002      	movs	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	4a28      	ldr	r2, [pc, #160]	; (800238c <HAL_RCC_ClockConfig+0x274>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e044      	b.n	800237e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f4:	4b24      	ldr	r3, [pc, #144]	; (8002388 <HAL_RCC_ClockConfig+0x270>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2201      	movs	r2, #1
 80022fa:	4013      	ands	r3, r2
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d1ee      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2204      	movs	r2, #4
 8002308:	4013      	ands	r3, r2
 800230a:	d009      	beq.n	8002320 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800230c:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4a20      	ldr	r2, [pc, #128]	; (8002394 <HAL_RCC_ClockConfig+0x27c>)
 8002312:	4013      	ands	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 800231c:	430a      	orrs	r2, r1
 800231e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2208      	movs	r2, #8
 8002326:	4013      	ands	r3, r2
 8002328:	d00a      	beq.n	8002340 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800232a:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	4a1a      	ldr	r2, [pc, #104]	; (8002398 <HAL_RCC_ClockConfig+0x280>)
 8002330:	4013      	ands	r3, r2
 8002332:	0019      	movs	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	00da      	lsls	r2, r3, #3
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 800233c:	430a      	orrs	r2, r1
 800233e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002340:	f000 f832 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8002344:	0001      	movs	r1, r0
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_RCC_ClockConfig+0x278>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	220f      	movs	r2, #15
 800234e:	4013      	ands	r3, r2
 8002350:	4a12      	ldr	r2, [pc, #72]	; (800239c <HAL_RCC_ClockConfig+0x284>)
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	000a      	movs	r2, r1
 8002356:	40da      	lsrs	r2, r3
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_RCC_ClockConfig+0x288>)
 800235a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_RCC_ClockConfig+0x28c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	250b      	movs	r5, #11
 8002362:	197c      	adds	r4, r7, r5
 8002364:	0018      	movs	r0, r3
 8002366:	f7fe ff8d 	bl	8001284 <HAL_InitTick>
 800236a:	0003      	movs	r3, r0
 800236c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800236e:	197b      	adds	r3, r7, r5
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002376:	197b      	adds	r3, r7, r5
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	e000      	b.n	800237e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b004      	add	sp, #16
 8002384:	bdb0      	pop	{r4, r5, r7, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	40022000 	.word	0x40022000
 800238c:	00001388 	.word	0x00001388
 8002390:	40021000 	.word	0x40021000
 8002394:	fffff8ff 	.word	0xfffff8ff
 8002398:	ffffc7ff 	.word	0xffffc7ff
 800239c:	080048a8 	.word	0x080048a8
 80023a0:	20000194 	.word	0x20000194
 80023a4:	20000198 	.word	0x20000198

080023a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a8:	b5b0      	push	{r4, r5, r7, lr}
 80023aa:	b08e      	sub	sp, #56	; 0x38
 80023ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80023ae:	4b4c      	ldr	r3, [pc, #304]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023b6:	230c      	movs	r3, #12
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d014      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x40>
 80023be:	d900      	bls.n	80023c2 <HAL_RCC_GetSysClockFreq+0x1a>
 80023c0:	e07b      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0x112>
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d002      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x24>
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d00b      	beq.n	80023e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ca:	e076      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80023cc:	4b44      	ldr	r3, [pc, #272]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2210      	movs	r2, #16
 80023d2:	4013      	ands	r3, r2
 80023d4:	d002      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80023da:	e07c      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80023dc:	4b42      	ldr	r3, [pc, #264]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x140>)
 80023de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023e0:	e079      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023e2:	4b42      	ldr	r3, [pc, #264]	; (80024ec <HAL_RCC_GetSysClockFreq+0x144>)
 80023e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023e6:	e076      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80023e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ea:	0c9a      	lsrs	r2, r3, #18
 80023ec:	230f      	movs	r3, #15
 80023ee:	401a      	ands	r2, r3
 80023f0:	4b3f      	ldr	r3, [pc, #252]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x148>)
 80023f2:	5c9b      	ldrb	r3, [r3, r2]
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f8:	0d9a      	lsrs	r2, r3, #22
 80023fa:	2303      	movs	r3, #3
 80023fc:	4013      	ands	r3, r2
 80023fe:	3301      	adds	r3, #1
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002402:	4b37      	ldr	r3, [pc, #220]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	025b      	lsls	r3, r3, #9
 800240a:	4013      	ands	r3, r2
 800240c:	d01a      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	4a35      	ldr	r2, [pc, #212]	; (80024ec <HAL_RCC_GetSysClockFreq+0x144>)
 8002418:	2300      	movs	r3, #0
 800241a:	69b8      	ldr	r0, [r7, #24]
 800241c:	69f9      	ldr	r1, [r7, #28]
 800241e:	f7fd ff31 	bl	8000284 <__aeabi_lmul>
 8002422:	0002      	movs	r2, r0
 8002424:	000b      	movs	r3, r1
 8002426:	0010      	movs	r0, r2
 8002428:	0019      	movs	r1, r3
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f7fd ff05 	bl	8000244 <__aeabi_uldivmod>
 800243a:	0002      	movs	r2, r0
 800243c:	000b      	movs	r3, r1
 800243e:	0013      	movs	r3, r2
 8002440:	637b      	str	r3, [r7, #52]	; 0x34
 8002442:	e037      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002444:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2210      	movs	r2, #16
 800244a:	4013      	ands	r3, r2
 800244c:	d01a      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	4a23      	ldr	r2, [pc, #140]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002458:	2300      	movs	r3, #0
 800245a:	68b8      	ldr	r0, [r7, #8]
 800245c:	68f9      	ldr	r1, [r7, #12]
 800245e:	f7fd ff11 	bl	8000284 <__aeabi_lmul>
 8002462:	0002      	movs	r2, r0
 8002464:	000b      	movs	r3, r1
 8002466:	0010      	movs	r0, r2
 8002468:	0019      	movs	r1, r3
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	2300      	movs	r3, #0
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f7fd fee5 	bl	8000244 <__aeabi_uldivmod>
 800247a:	0002      	movs	r2, r0
 800247c:	000b      	movs	r3, r1
 800247e:	0013      	movs	r3, r2
 8002480:	637b      	str	r3, [r7, #52]	; 0x34
 8002482:	e017      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	0018      	movs	r0, r3
 8002488:	2300      	movs	r3, #0
 800248a:	0019      	movs	r1, r3
 800248c:	4a16      	ldr	r2, [pc, #88]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x140>)
 800248e:	2300      	movs	r3, #0
 8002490:	f7fd fef8 	bl	8000284 <__aeabi_lmul>
 8002494:	0002      	movs	r2, r0
 8002496:	000b      	movs	r3, r1
 8002498:	0010      	movs	r0, r2
 800249a:	0019      	movs	r1, r3
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	001c      	movs	r4, r3
 80024a0:	2300      	movs	r3, #0
 80024a2:	001d      	movs	r5, r3
 80024a4:	0022      	movs	r2, r4
 80024a6:	002b      	movs	r3, r5
 80024a8:	f7fd fecc 	bl	8000244 <__aeabi_uldivmod>
 80024ac:	0002      	movs	r2, r0
 80024ae:	000b      	movs	r3, r1
 80024b0:	0013      	movs	r3, r2
 80024b2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80024b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024b8:	e00d      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	0b5b      	lsrs	r3, r3, #13
 80024c0:	2207      	movs	r2, #7
 80024c2:	4013      	ands	r3, r2
 80024c4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	3301      	adds	r3, #1
 80024ca:	2280      	movs	r2, #128	; 0x80
 80024cc:	0212      	lsls	r2, r2, #8
 80024ce:	409a      	lsls	r2, r3
 80024d0:	0013      	movs	r3, r2
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b00e      	add	sp, #56	; 0x38
 80024de:	bdb0      	pop	{r4, r5, r7, pc}
 80024e0:	40021000 	.word	0x40021000
 80024e4:	003d0900 	.word	0x003d0900
 80024e8:	00f42400 	.word	0x00f42400
 80024ec:	007a1200 	.word	0x007a1200
 80024f0:	080048c0 	.word	0x080048c0

080024f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f8:	4b02      	ldr	r3, [pc, #8]	; (8002504 <HAL_RCC_GetHCLKFreq+0x10>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	20000194 	.word	0x20000194

08002508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800250c:	f7ff fff2 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002510:	0001      	movs	r1, r0
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	0a1b      	lsrs	r3, r3, #8
 8002518:	2207      	movs	r2, #7
 800251a:	4013      	ands	r3, r2
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800251e:	5cd3      	ldrb	r3, [r2, r3]
 8002520:	40d9      	lsrs	r1, r3
 8002522:	000b      	movs	r3, r1
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	40021000 	.word	0x40021000
 8002530:	080048b8 	.word	0x080048b8

08002534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002538:	f7ff ffdc 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 800253c:	0001      	movs	r1, r0
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	0adb      	lsrs	r3, r3, #11
 8002544:	2207      	movs	r2, #7
 8002546:	4013      	ands	r3, r2
 8002548:	4a04      	ldr	r2, [pc, #16]	; (800255c <HAL_RCC_GetPCLK2Freq+0x28>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	40d9      	lsrs	r1, r3
 800254e:	000b      	movs	r3, r1
}
 8002550:	0018      	movs	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	40021000 	.word	0x40021000
 800255c:	080048b8 	.word	0x080048b8

08002560 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002568:	2317      	movs	r3, #23
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2220      	movs	r2, #32
 8002576:	4013      	ands	r3, r2
 8002578:	d106      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	4013      	ands	r3, r2
 8002584:	d100      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002586:	e0d9      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002588:	4ba4      	ldr	r3, [pc, #656]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800258a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	055b      	lsls	r3, r3, #21
 8002590:	4013      	ands	r3, r2
 8002592:	d10a      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002594:	4ba1      	ldr	r3, [pc, #644]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002598:	4ba0      	ldr	r3, [pc, #640]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800259a:	2180      	movs	r1, #128	; 0x80
 800259c:	0549      	lsls	r1, r1, #21
 800259e:	430a      	orrs	r2, r1
 80025a0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80025a2:	2317      	movs	r3, #23
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025aa:	4b9d      	ldr	r3, [pc, #628]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4013      	ands	r3, r2
 80025b4:	d11a      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b6:	4b9a      	ldr	r3, [pc, #616]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b99      	ldr	r3, [pc, #612]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	0049      	lsls	r1, r1, #1
 80025c0:	430a      	orrs	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c4:	f7fe fea4 	bl	8001310 <HAL_GetTick>
 80025c8:	0003      	movs	r3, r0
 80025ca:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025cc:	e008      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ce:	f7fe fe9f 	bl	8001310 <HAL_GetTick>
 80025d2:	0002      	movs	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b64      	cmp	r3, #100	; 0x64
 80025da:	d901      	bls.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e118      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	4b8f      	ldr	r3, [pc, #572]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4013      	ands	r3, r2
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80025ec:	4b8b      	ldr	r3, [pc, #556]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	23c0      	movs	r3, #192	; 0xc0
 80025f2:	039b      	lsls	r3, r3, #14
 80025f4:	4013      	ands	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	23c0      	movs	r3, #192	; 0xc0
 80025fe:	039b      	lsls	r3, r3, #14
 8002600:	4013      	ands	r3, r2
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	429a      	cmp	r2, r3
 8002606:	d107      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	23c0      	movs	r3, #192	; 0xc0
 800260e:	039b      	lsls	r3, r3, #14
 8002610:	4013      	ands	r3, r2
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	429a      	cmp	r2, r3
 8002616:	d013      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	23c0      	movs	r3, #192	; 0xc0
 800261e:	029b      	lsls	r3, r3, #10
 8002620:	401a      	ands	r2, r3
 8002622:	23c0      	movs	r3, #192	; 0xc0
 8002624:	029b      	lsls	r3, r3, #10
 8002626:	429a      	cmp	r2, r3
 8002628:	d10a      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800262a:	4b7c      	ldr	r3, [pc, #496]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	029b      	lsls	r3, r3, #10
 8002632:	401a      	ands	r2, r3
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	029b      	lsls	r3, r3, #10
 8002638:	429a      	cmp	r2, r3
 800263a:	d101      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0e8      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002640:	4b76      	ldr	r3, [pc, #472]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002642:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002644:	23c0      	movs	r3, #192	; 0xc0
 8002646:	029b      	lsls	r3, r3, #10
 8002648:	4013      	ands	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d049      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	23c0      	movs	r3, #192	; 0xc0
 8002658:	029b      	lsls	r3, r3, #10
 800265a:	4013      	ands	r3, r2
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	429a      	cmp	r2, r3
 8002660:	d004      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2220      	movs	r2, #32
 8002668:	4013      	ands	r3, r2
 800266a:	d10d      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	23c0      	movs	r3, #192	; 0xc0
 8002672:	029b      	lsls	r3, r3, #10
 8002674:	4013      	ands	r3, r2
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	429a      	cmp	r2, r3
 800267a:	d034      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	4013      	ands	r3, r2
 8002686:	d02e      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002688:	4b64      	ldr	r3, [pc, #400]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800268a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268c:	4a65      	ldr	r2, [pc, #404]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800268e:	4013      	ands	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002692:	4b62      	ldr	r3, [pc, #392]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002696:	4b61      	ldr	r3, [pc, #388]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	0309      	lsls	r1, r1, #12
 800269c:	430a      	orrs	r2, r1
 800269e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026a0:	4b5e      	ldr	r3, [pc, #376]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026a4:	4b5d      	ldr	r3, [pc, #372]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026a6:	4960      	ldr	r1, [pc, #384]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80026a8:	400a      	ands	r2, r1
 80026aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80026ac:	4b5b      	ldr	r3, [pc, #364]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4013      	ands	r3, r2
 80026ba:	d014      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7fe fe28 	bl	8001310 <HAL_GetTick>
 80026c0:	0003      	movs	r3, r0
 80026c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026c4:	e009      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fe fe23 	bl	8001310 <HAL_GetTick>
 80026ca:	0002      	movs	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	4a56      	ldr	r2, [pc, #344]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e09b      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026da:	4b50      	ldr	r3, [pc, #320]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4013      	ands	r3, r2
 80026e4:	d0ef      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	23c0      	movs	r3, #192	; 0xc0
 80026ec:	029b      	lsls	r3, r3, #10
 80026ee:	401a      	ands	r2, r3
 80026f0:	23c0      	movs	r3, #192	; 0xc0
 80026f2:	029b      	lsls	r3, r3, #10
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d10c      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80026f8:	4b48      	ldr	r3, [pc, #288]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a4c      	ldr	r2, [pc, #304]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80026fe:	4013      	ands	r3, r2
 8002700:	0019      	movs	r1, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	23c0      	movs	r3, #192	; 0xc0
 8002708:	039b      	lsls	r3, r3, #14
 800270a:	401a      	ands	r2, r3
 800270c:	4b43      	ldr	r3, [pc, #268]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	4b42      	ldr	r3, [pc, #264]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002714:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	23c0      	movs	r3, #192	; 0xc0
 800271c:	029b      	lsls	r3, r3, #10
 800271e:	401a      	ands	r2, r3
 8002720:	4b3e      	ldr	r3, [pc, #248]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002722:	430a      	orrs	r2, r1
 8002724:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002726:	2317      	movs	r3, #23
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d105      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002730:	4b3a      	ldr	r3, [pc, #232]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002734:	4b39      	ldr	r3, [pc, #228]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002736:	493f      	ldr	r1, [pc, #252]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002738:	400a      	ands	r2, r1
 800273a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2201      	movs	r2, #1
 8002742:	4013      	ands	r3, r2
 8002744:	d009      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002746:	4b35      	ldr	r3, [pc, #212]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	2203      	movs	r2, #3
 800274c:	4393      	bics	r3, r2
 800274e:	0019      	movs	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002756:	430a      	orrs	r2, r1
 8002758:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2202      	movs	r2, #2
 8002760:	4013      	ands	r3, r2
 8002762:	d009      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002764:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002768:	220c      	movs	r2, #12
 800276a:	4393      	bics	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	4b2a      	ldr	r3, [pc, #168]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002774:	430a      	orrs	r2, r1
 8002776:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2204      	movs	r2, #4
 800277e:	4013      	ands	r3, r2
 8002780:	d009      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002782:	4b26      	ldr	r3, [pc, #152]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	4a2c      	ldr	r2, [pc, #176]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002788:	4013      	ands	r3, r2
 800278a:	0019      	movs	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	4b22      	ldr	r3, [pc, #136]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002792:	430a      	orrs	r2, r1
 8002794:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2208      	movs	r2, #8
 800279c:	4013      	ands	r3, r2
 800279e:	d009      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027a0:	4b1e      	ldr	r3, [pc, #120]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a4:	4a25      	ldr	r2, [pc, #148]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027b0:	430a      	orrs	r2, r1
 80027b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4013      	ands	r3, r2
 80027be:	d009      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027c0:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c4:	4a17      	ldr	r2, [pc, #92]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69da      	ldr	r2, [r3, #28]
 80027ce:	4b13      	ldr	r3, [pc, #76]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027d0:	430a      	orrs	r2, r1
 80027d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2240      	movs	r2, #64	; 0x40
 80027da:	4013      	ands	r3, r2
 80027dc:	d009      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	4a17      	ldr	r2, [pc, #92]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	0019      	movs	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027ee:	430a      	orrs	r2, r1
 80027f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	4013      	ands	r3, r2
 80027fa:	d009      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80027fc:	4b07      	ldr	r3, [pc, #28]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002800:	4a10      	ldr	r2, [pc, #64]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002802:	4013      	ands	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	4b04      	ldr	r3, [pc, #16]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800280c:	430a      	orrs	r2, r1
 800280e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	0018      	movs	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	b006      	add	sp, #24
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	40021000 	.word	0x40021000
 8002820:	40007000 	.word	0x40007000
 8002824:	fffcffff 	.word	0xfffcffff
 8002828:	fff7ffff 	.word	0xfff7ffff
 800282c:	00001388 	.word	0x00001388
 8002830:	ffcfffff 	.word	0xffcfffff
 8002834:	efffffff 	.word	0xefffffff
 8002838:	fffff3ff 	.word	0xfffff3ff
 800283c:	ffffcfff 	.word	0xffffcfff
 8002840:	fbffffff 	.word	0xfbffffff
 8002844:	fff3ffff 	.word	0xfff3ffff

08002848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e044      	b.n	80028e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800285e:	2b00      	cmp	r3, #0
 8002860:	d107      	bne.n	8002872 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2274      	movs	r2, #116	; 0x74
 8002866:	2100      	movs	r1, #0
 8002868:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	0018      	movs	r0, r3
 800286e:	f7fe fbe1 	bl	8001034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2224      	movs	r2, #36	; 0x24
 8002876:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2101      	movs	r1, #1
 8002884:	438a      	bics	r2, r1
 8002886:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	0018      	movs	r0, r3
 800288c:	f000 fc36 	bl	80030fc <UART_SetConfig>
 8002890:	0003      	movs	r3, r0
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e024      	b.n	80028e4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	0018      	movs	r0, r3
 80028a6:	f000 fee7 	bl	8003678 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	490d      	ldr	r1, [pc, #52]	; (80028ec <HAL_UART_Init+0xa4>)
 80028b6:	400a      	ands	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	212a      	movs	r1, #42	; 0x2a
 80028c6:	438a      	bics	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2101      	movs	r1, #1
 80028d6:	430a      	orrs	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f000 ff7f 	bl	80037e0 <UART_CheckIdleState>
 80028e2:	0003      	movs	r3, r0
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	ffffb7ff 	.word	0xffffb7ff

080028f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	; 0x28
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	1dbb      	adds	r3, r7, #6
 80028fe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002904:	2b20      	cmp	r3, #32
 8002906:	d000      	beq.n	800290a <HAL_UART_Transmit+0x1a>
 8002908:	e095      	b.n	8002a36 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_UART_Transmit+0x28>
 8002910:	1dbb      	adds	r3, r7, #6
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e08d      	b.n	8002a38 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	015b      	lsls	r3, r3, #5
 8002924:	429a      	cmp	r2, r3
 8002926:	d109      	bne.n	800293c <HAL_UART_Transmit+0x4c>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2201      	movs	r2, #1
 8002934:	4013      	ands	r3, r2
 8002936:	d001      	beq.n	800293c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e07d      	b.n	8002a38 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2274      	movs	r2, #116	; 0x74
 8002940:	5c9b      	ldrb	r3, [r3, r2]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_UART_Transmit+0x5a>
 8002946:	2302      	movs	r3, #2
 8002948:	e076      	b.n	8002a38 <HAL_UART_Transmit+0x148>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2274      	movs	r2, #116	; 0x74
 800294e:	2101      	movs	r1, #1
 8002950:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	2100      	movs	r1, #0
 8002958:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2221      	movs	r2, #33	; 0x21
 800295e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002960:	f7fe fcd6 	bl	8001310 <HAL_GetTick>
 8002964:	0003      	movs	r3, r0
 8002966:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1dba      	adds	r2, r7, #6
 800296c:	2150      	movs	r1, #80	; 0x50
 800296e:	8812      	ldrh	r2, [r2, #0]
 8002970:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1dba      	adds	r2, r7, #6
 8002976:	2152      	movs	r1, #82	; 0x52
 8002978:	8812      	ldrh	r2, [r2, #0]
 800297a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	015b      	lsls	r3, r3, #5
 8002984:	429a      	cmp	r2, r3
 8002986:	d108      	bne.n	800299a <HAL_UART_Transmit+0xaa>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d104      	bne.n	800299a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002990:	2300      	movs	r3, #0
 8002992:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	61bb      	str	r3, [r7, #24]
 8002998:	e003      	b.n	80029a2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2274      	movs	r2, #116	; 0x74
 80029a6:	2100      	movs	r1, #0
 80029a8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80029aa:	e02c      	b.n	8002a06 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	0013      	movs	r3, r2
 80029b6:	2200      	movs	r2, #0
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	f000 ff59 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 80029be:	1e03      	subs	r3, r0, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e038      	b.n	8002a38 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10b      	bne.n	80029e4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	001a      	movs	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	05d2      	lsls	r2, r2, #23
 80029d8:	0dd2      	lsrs	r2, r2, #23
 80029da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	3302      	adds	r3, #2
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	e007      	b.n	80029f4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	781a      	ldrb	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3301      	adds	r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2252      	movs	r2, #82	; 0x52
 80029f8:	5a9b      	ldrh	r3, [r3, r2]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b299      	uxth	r1, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2252      	movs	r2, #82	; 0x52
 8002a04:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2252      	movs	r2, #82	; 0x52
 8002a0a:	5a9b      	ldrh	r3, [r3, r2]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1cc      	bne.n	80029ac <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	0013      	movs	r3, r2
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2140      	movs	r1, #64	; 0x40
 8002a20:	f000 ff26 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 8002a24:	1e03      	subs	r3, r0, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e005      	b.n	8002a38 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
  }
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b008      	add	sp, #32
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	1dbb      	adds	r3, r7, #6
 8002a4c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	d155      	bne.n	8002b02 <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_UART_Receive_IT+0x24>
 8002a5c:	1dbb      	adds	r3, r7, #6
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e04d      	b.n	8002b04 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	015b      	lsls	r3, r3, #5
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d109      	bne.n	8002a88 <HAL_UART_Receive_IT+0x48>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d105      	bne.n	8002a88 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4013      	ands	r3, r2
 8002a82:	d001      	beq.n	8002a88 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e03d      	b.n	8002b04 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2274      	movs	r2, #116	; 0x74
 8002a8c:	5c9b      	ldrb	r3, [r3, r2]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_UART_Receive_IT+0x56>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e036      	b.n	8002b04 <HAL_UART_Receive_IT+0xc4>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2274      	movs	r2, #116	; 0x74
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a18      	ldr	r2, [pc, #96]	; (8002b0c <HAL_UART_Receive_IT+0xcc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d020      	beq.n	8002af0 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	041b      	lsls	r3, r3, #16
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d019      	beq.n	8002af0 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002abc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac0:	613b      	str	r3, [r7, #16]
  return(result);
 8002ac2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f383 8810 	msr	PRIMASK, r3
}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2180      	movs	r1, #128	; 0x80
 8002ade:	04c9      	lsls	r1, r1, #19
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f383 8810 	msr	PRIMASK, r3
}
 8002aee:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002af0:	1dbb      	adds	r3, r7, #6
 8002af2:	881a      	ldrh	r2, [r3, #0]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f000 ff7d 	bl	80039f8 <UART_Start_Receive_IT>
 8002afe:	0003      	movs	r3, r0
 8002b00:	e000      	b.n	8002b04 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002b02:	2302      	movs	r3, #2
  }
}
 8002b04:	0018      	movs	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b008      	add	sp, #32
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40004800 	.word	0x40004800

08002b10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b0ab      	sub	sp, #172	; 0xac
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	22a4      	movs	r2, #164	; 0xa4
 8002b20:	18b9      	adds	r1, r7, r2
 8002b22:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	20a0      	movs	r0, #160	; 0xa0
 8002b2c:	1839      	adds	r1, r7, r0
 8002b2e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	219c      	movs	r1, #156	; 0x9c
 8002b38:	1879      	adds	r1, r7, r1
 8002b3a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b3c:	0011      	movs	r1, r2
 8002b3e:	18bb      	adds	r3, r7, r2
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a99      	ldr	r2, [pc, #612]	; (8002da8 <HAL_UART_IRQHandler+0x298>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	2298      	movs	r2, #152	; 0x98
 8002b48:	18bc      	adds	r4, r7, r2
 8002b4a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002b4c:	18bb      	adds	r3, r7, r2
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d114      	bne.n	8002b7e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d00f      	beq.n	8002b7e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b5e:	183b      	adds	r3, r7, r0
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2220      	movs	r2, #32
 8002b64:	4013      	ands	r3, r2
 8002b66:	d00a      	beq.n	8002b7e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d100      	bne.n	8002b72 <HAL_UART_IRQHandler+0x62>
 8002b70:	e298      	b.n	80030a4 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	0010      	movs	r0, r2
 8002b7a:	4798      	blx	r3
      }
      return;
 8002b7c:	e292      	b.n	80030a4 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b7e:	2398      	movs	r3, #152	; 0x98
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d100      	bne.n	8002b8a <HAL_UART_IRQHandler+0x7a>
 8002b88:	e114      	b.n	8002db4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b8a:	239c      	movs	r3, #156	; 0x9c
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2201      	movs	r2, #1
 8002b92:	4013      	ands	r3, r2
 8002b94:	d106      	bne.n	8002ba4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b96:	23a0      	movs	r3, #160	; 0xa0
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a83      	ldr	r2, [pc, #524]	; (8002dac <HAL_UART_IRQHandler+0x29c>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d100      	bne.n	8002ba4 <HAL_UART_IRQHandler+0x94>
 8002ba2:	e107      	b.n	8002db4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ba4:	23a4      	movs	r3, #164	; 0xa4
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2201      	movs	r2, #1
 8002bac:	4013      	ands	r3, r2
 8002bae:	d012      	beq.n	8002bd6 <HAL_UART_IRQHandler+0xc6>
 8002bb0:	23a0      	movs	r3, #160	; 0xa0
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	2380      	movs	r3, #128	; 0x80
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d00b      	beq.n	8002bd6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2280      	movs	r2, #128	; 0x80
 8002bca:	589b      	ldr	r3, [r3, r2]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2180      	movs	r1, #128	; 0x80
 8002bd4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bd6:	23a4      	movs	r3, #164	; 0xa4
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	4013      	ands	r3, r2
 8002be0:	d011      	beq.n	8002c06 <HAL_UART_IRQHandler+0xf6>
 8002be2:	239c      	movs	r3, #156	; 0x9c
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2201      	movs	r2, #1
 8002bea:	4013      	ands	r3, r2
 8002bec:	d00b      	beq.n	8002c06 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2280      	movs	r2, #128	; 0x80
 8002bfa:	589b      	ldr	r3, [r3, r2]
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2180      	movs	r1, #128	; 0x80
 8002c04:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c06:	23a4      	movs	r3, #164	; 0xa4
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d011      	beq.n	8002c36 <HAL_UART_IRQHandler+0x126>
 8002c12:	239c      	movs	r3, #156	; 0x9c
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d00b      	beq.n	8002c36 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2204      	movs	r2, #4
 8002c24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2280      	movs	r2, #128	; 0x80
 8002c2a:	589b      	ldr	r3, [r3, r2]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2180      	movs	r1, #128	; 0x80
 8002c34:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c36:	23a4      	movs	r3, #164	; 0xa4
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d017      	beq.n	8002c72 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c42:	23a0      	movs	r3, #160	; 0xa0
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d105      	bne.n	8002c5a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c4e:	239c      	movs	r3, #156	; 0x9c
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2201      	movs	r2, #1
 8002c56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c58:	d00b      	beq.n	8002c72 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2208      	movs	r2, #8
 8002c60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2280      	movs	r2, #128	; 0x80
 8002c66:	589b      	ldr	r3, [r3, r2]
 8002c68:	2208      	movs	r2, #8
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2180      	movs	r1, #128	; 0x80
 8002c70:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c72:	23a4      	movs	r3, #164	; 0xa4
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2380      	movs	r3, #128	; 0x80
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d013      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x198>
 8002c80:	23a0      	movs	r3, #160	; 0xa0
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	04db      	lsls	r3, r3, #19
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d00c      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2280      	movs	r2, #128	; 0x80
 8002c94:	0112      	lsls	r2, r2, #4
 8002c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2280      	movs	r2, #128	; 0x80
 8002c9c:	589b      	ldr	r3, [r3, r2]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2180      	movs	r1, #128	; 0x80
 8002ca6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2280      	movs	r2, #128	; 0x80
 8002cac:	589b      	ldr	r3, [r3, r2]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d100      	bne.n	8002cb4 <HAL_UART_IRQHandler+0x1a4>
 8002cb2:	e1f9      	b.n	80030a8 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cb4:	23a4      	movs	r3, #164	; 0xa4
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d00e      	beq.n	8002cde <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cc0:	23a0      	movs	r3, #160	; 0xa0
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d008      	beq.n	8002cde <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d004      	beq.n	8002cde <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	0010      	movs	r0, r2
 8002cdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	589b      	ldr	r3, [r3, r2]
 8002ce4:	2194      	movs	r1, #148	; 0x94
 8002ce6:	187a      	adds	r2, r7, r1
 8002ce8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2240      	movs	r2, #64	; 0x40
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b40      	cmp	r3, #64	; 0x40
 8002cf6:	d004      	beq.n	8002d02 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002cf8:	187b      	adds	r3, r7, r1
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2228      	movs	r2, #40	; 0x28
 8002cfe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d00:	d047      	beq.n	8002d92 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 ff27 	bl	8003b58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2240      	movs	r2, #64	; 0x40
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b40      	cmp	r3, #64	; 0x40
 8002d16:	d137      	bne.n	8002d88 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d18:	f3ef 8310 	mrs	r3, PRIMASK
 8002d1c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d20:	2090      	movs	r0, #144	; 0x90
 8002d22:	183a      	adds	r2, r7, r0
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	2301      	movs	r3, #1
 8002d28:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d2c:	f383 8810 	msr	PRIMASK, r3
}
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2140      	movs	r1, #64	; 0x40
 8002d3e:	438a      	bics	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	183b      	adds	r3, r7, r0
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d4a:	f383 8810 	msr	PRIMASK, r3
}
 8002d4e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d012      	beq.n	8002d7e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a14      	ldr	r2, [pc, #80]	; (8002db0 <HAL_UART_IRQHandler+0x2a0>)
 8002d5e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7fe fc1f 	bl	80015a8 <HAL_DMA_Abort_IT>
 8002d6a:	1e03      	subs	r3, r0, #0
 8002d6c:	d01a      	beq.n	8002da4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d78:	0018      	movs	r0, r3
 8002d7a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7c:	e012      	b.n	8002da4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f000 f9a7 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d86:	e00d      	b.n	8002da4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f000 f9a2 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d90:	e008      	b.n	8002da4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	0018      	movs	r0, r3
 8002d96:	f000 f99d 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2280      	movs	r2, #128	; 0x80
 8002d9e:	2100      	movs	r1, #0
 8002da0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002da2:	e181      	b.n	80030a8 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da4:	46c0      	nop			; (mov r8, r8)
    return;
 8002da6:	e17f      	b.n	80030a8 <HAL_UART_IRQHandler+0x598>
 8002da8:	0000080f 	.word	0x0000080f
 8002dac:	04000120 	.word	0x04000120
 8002db0:	08003c1d 	.word	0x08003c1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d000      	beq.n	8002dbe <HAL_UART_IRQHandler+0x2ae>
 8002dbc:	e133      	b.n	8003026 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002dbe:	23a4      	movs	r3, #164	; 0xa4
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d100      	bne.n	8002dcc <HAL_UART_IRQHandler+0x2bc>
 8002dca:	e12c      	b.n	8003026 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002dcc:	23a0      	movs	r3, #160	; 0xa0
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2210      	movs	r2, #16
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d100      	bne.n	8002dda <HAL_UART_IRQHandler+0x2ca>
 8002dd8:	e125      	b.n	8003026 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2210      	movs	r2, #16
 8002de0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2240      	movs	r2, #64	; 0x40
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d000      	beq.n	8002df2 <HAL_UART_IRQHandler+0x2e2>
 8002df0:	e09d      	b.n	8002f2e <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	217e      	movs	r1, #126	; 0x7e
 8002dfc:	187b      	adds	r3, r7, r1
 8002dfe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002e00:	187b      	adds	r3, r7, r1
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d100      	bne.n	8002e0a <HAL_UART_IRQHandler+0x2fa>
 8002e08:	e150      	b.n	80030ac <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2258      	movs	r2, #88	; 0x58
 8002e0e:	5a9b      	ldrh	r3, [r3, r2]
 8002e10:	187a      	adds	r2, r7, r1
 8002e12:	8812      	ldrh	r2, [r2, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d300      	bcc.n	8002e1a <HAL_UART_IRQHandler+0x30a>
 8002e18:	e148      	b.n	80030ac <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	187a      	adds	r2, r7, r1
 8002e1e:	215a      	movs	r1, #90	; 0x5a
 8002e20:	8812      	ldrh	r2, [r2, #0]
 8002e22:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d16e      	bne.n	8002f10 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e32:	f3ef 8310 	mrs	r3, PRIMASK
 8002e36:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e42:	f383 8810 	msr	PRIMASK, r3
}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	499a      	ldr	r1, [pc, #616]	; (80030bc <HAL_UART_IRQHandler+0x5ac>)
 8002e54:	400a      	ands	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5e:	f383 8810 	msr	PRIMASK, r3
}
 8002e62:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e64:	f3ef 8310 	mrs	r3, PRIMASK
 8002e68:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6c:	677b      	str	r3, [r7, #116]	; 0x74
 8002e6e:	2301      	movs	r3, #1
 8002e70:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e74:	f383 8810 	msr	PRIMASK, r3
}
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2101      	movs	r1, #1
 8002e86:	438a      	bics	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e8c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e90:	f383 8810 	msr	PRIMASK, r3
}
 8002e94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e96:	f3ef 8310 	mrs	r3, PRIMASK
 8002e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9e:	673b      	str	r3, [r7, #112]	; 0x70
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea6:	f383 8810 	msr	PRIMASK, r3
}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2140      	movs	r1, #64	; 0x40
 8002eb8:	438a      	bics	r2, r1
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ebe:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec2:	f383 8810 	msr	PRIMASK, r3
}
 8002ec6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002edc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ede:	2301      	movs	r3, #1
 8002ee0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee4:	f383 8810 	msr	PRIMASK, r3
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2110      	movs	r1, #16
 8002ef6:	438a      	bics	r2, r1
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f00:	f383 8810 	msr	PRIMASK, r3
}
 8002f04:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7fe fb0c 	bl	8001528 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2258      	movs	r2, #88	; 0x58
 8002f14:	5a9a      	ldrh	r2, [r3, r2]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	215a      	movs	r1, #90	; 0x5a
 8002f1a:	5a5b      	ldrh	r3, [r3, r1]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	0011      	movs	r1, r2
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 f8dc 	bl	80030e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f2c:	e0be      	b.n	80030ac <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2258      	movs	r2, #88	; 0x58
 8002f32:	5a99      	ldrh	r1, [r3, r2]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	225a      	movs	r2, #90	; 0x5a
 8002f38:	5a9b      	ldrh	r3, [r3, r2]
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	208e      	movs	r0, #142	; 0x8e
 8002f3e:	183b      	adds	r3, r7, r0
 8002f40:	1a8a      	subs	r2, r1, r2
 8002f42:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	225a      	movs	r2, #90	; 0x5a
 8002f48:	5a9b      	ldrh	r3, [r3, r2]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d100      	bne.n	8002f52 <HAL_UART_IRQHandler+0x442>
 8002f50:	e0ae      	b.n	80030b0 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8002f52:	183b      	adds	r3, r7, r0
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d100      	bne.n	8002f5c <HAL_UART_IRQHandler+0x44c>
 8002f5a:	e0a9      	b.n	80030b0 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f60:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f62:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f64:	2488      	movs	r4, #136	; 0x88
 8002f66:	193a      	adds	r2, r7, r4
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f383 8810 	msr	PRIMASK, r3
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	494f      	ldr	r1, [pc, #316]	; (80030c0 <HAL_UART_IRQHandler+0x5b0>)
 8002f82:	400a      	ands	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	193b      	adds	r3, r7, r4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f383 8810 	msr	PRIMASK, r3
}
 8002f92:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f94:	f3ef 8310 	mrs	r3, PRIMASK
 8002f98:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f9a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9c:	2484      	movs	r4, #132	; 0x84
 8002f9e:	193a      	adds	r2, r7, r4
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f383 8810 	msr	PRIMASK, r3
}
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	438a      	bics	r2, r1
 8002fbc:	609a      	str	r2, [r3, #8]
 8002fbe:	193b      	adds	r3, r7, r4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	f383 8810 	msr	PRIMASK, r3
}
 8002fca:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fde:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe6:	2480      	movs	r4, #128	; 0x80
 8002fe8:	193a      	adds	r2, r7, r4
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	2301      	movs	r3, #1
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	f383 8810 	msr	PRIMASK, r3
}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2110      	movs	r1, #16
 8003004:	438a      	bics	r2, r1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	193b      	adds	r3, r7, r4
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	f383 8810 	msr	PRIMASK, r3
}
 8003014:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003016:	183b      	adds	r3, r7, r0
 8003018:	881a      	ldrh	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	0011      	movs	r1, r2
 800301e:	0018      	movs	r0, r3
 8003020:	f000 f860 	bl	80030e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003024:	e044      	b.n	80030b0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003026:	23a4      	movs	r3, #164	; 0xa4
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	035b      	lsls	r3, r3, #13
 8003030:	4013      	ands	r3, r2
 8003032:	d010      	beq.n	8003056 <HAL_UART_IRQHandler+0x546>
 8003034:	239c      	movs	r3, #156	; 0x9c
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	03db      	lsls	r3, r3, #15
 800303e:	4013      	ands	r3, r2
 8003040:	d009      	beq.n	8003056 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2280      	movs	r2, #128	; 0x80
 8003048:	0352      	lsls	r2, r2, #13
 800304a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	0018      	movs	r0, r3
 8003050:	f000 ff8e 	bl	8003f70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003054:	e02f      	b.n	80030b6 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003056:	23a4      	movs	r3, #164	; 0xa4
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2280      	movs	r2, #128	; 0x80
 800305e:	4013      	ands	r3, r2
 8003060:	d00f      	beq.n	8003082 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003062:	23a0      	movs	r3, #160	; 0xa0
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2280      	movs	r2, #128	; 0x80
 800306a:	4013      	ands	r3, r2
 800306c:	d009      	beq.n	8003082 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01e      	beq.n	80030b4 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	0010      	movs	r0, r2
 800307e:	4798      	blx	r3
    }
    return;
 8003080:	e018      	b.n	80030b4 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003082:	23a4      	movs	r3, #164	; 0xa4
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2240      	movs	r2, #64	; 0x40
 800308a:	4013      	ands	r3, r2
 800308c:	d013      	beq.n	80030b6 <HAL_UART_IRQHandler+0x5a6>
 800308e:	23a0      	movs	r3, #160	; 0xa0
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2240      	movs	r2, #64	; 0x40
 8003096:	4013      	ands	r3, r2
 8003098:	d00d      	beq.n	80030b6 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	0018      	movs	r0, r3
 800309e:	f000 fdd4 	bl	8003c4a <UART_EndTransmit_IT>
    return;
 80030a2:	e008      	b.n	80030b6 <HAL_UART_IRQHandler+0x5a6>
      return;
 80030a4:	46c0      	nop			; (mov r8, r8)
 80030a6:	e006      	b.n	80030b6 <HAL_UART_IRQHandler+0x5a6>
    return;
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	e004      	b.n	80030b6 <HAL_UART_IRQHandler+0x5a6>
      return;
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	e002      	b.n	80030b6 <HAL_UART_IRQHandler+0x5a6>
      return;
 80030b0:	46c0      	nop			; (mov r8, r8)
 80030b2:	e000      	b.n	80030b6 <HAL_UART_IRQHandler+0x5a6>
    return;
 80030b4:	46c0      	nop			; (mov r8, r8)
  }

}
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b02b      	add	sp, #172	; 0xac
 80030ba:	bd90      	pop	{r4, r7, pc}
 80030bc:	fffffeff 	.word	0xfffffeff
 80030c0:	fffffedf 	.word	0xfffffedf

080030c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b002      	add	sp, #8
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	000a      	movs	r2, r1
 80030ee:	1cbb      	adds	r3, r7, #2
 80030f0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b002      	add	sp, #8
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030fc:	b5b0      	push	{r4, r5, r7, lr}
 80030fe:	b08e      	sub	sp, #56	; 0x38
 8003100:	af00      	add	r7, sp, #0
 8003102:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003104:	231a      	movs	r3, #26
 8003106:	2218      	movs	r2, #24
 8003108:	4694      	mov	ip, r2
 800310a:	44bc      	add	ip, r7
 800310c:	4463      	add	r3, ip
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	431a      	orrs	r2, r3
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	431a      	orrs	r2, r3
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	4313      	orrs	r3, r2
 8003128:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4ab0      	ldr	r2, [pc, #704]	; (80033f4 <UART_SetConfig+0x2f8>)
 8003132:	4013      	ands	r3, r2
 8003134:	0019      	movs	r1, r3
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800313c:	430a      	orrs	r2, r1
 800313e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4aac      	ldr	r2, [pc, #688]	; (80033f8 <UART_SetConfig+0x2fc>)
 8003148:	4013      	ands	r3, r2
 800314a:	0019      	movs	r1, r3
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4aa6      	ldr	r2, [pc, #664]	; (80033fc <UART_SetConfig+0x300>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d004      	beq.n	8003172 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800316e:	4313      	orrs	r3, r2
 8003170:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4aa1      	ldr	r2, [pc, #644]	; (8003400 <UART_SetConfig+0x304>)
 800317a:	4013      	ands	r3, r2
 800317c:	0019      	movs	r1, r3
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003184:	430a      	orrs	r2, r1
 8003186:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a9d      	ldr	r2, [pc, #628]	; (8003404 <UART_SetConfig+0x308>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d136      	bne.n	8003200 <UART_SetConfig+0x104>
 8003192:	4b9d      	ldr	r3, [pc, #628]	; (8003408 <UART_SetConfig+0x30c>)
 8003194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003196:	2203      	movs	r2, #3
 8003198:	4013      	ands	r3, r2
 800319a:	2b03      	cmp	r3, #3
 800319c:	d020      	beq.n	80031e0 <UART_SetConfig+0xe4>
 800319e:	d827      	bhi.n	80031f0 <UART_SetConfig+0xf4>
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d00d      	beq.n	80031c0 <UART_SetConfig+0xc4>
 80031a4:	d824      	bhi.n	80031f0 <UART_SetConfig+0xf4>
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <UART_SetConfig+0xb4>
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d010      	beq.n	80031d0 <UART_SetConfig+0xd4>
 80031ae:	e01f      	b.n	80031f0 <UART_SetConfig+0xf4>
 80031b0:	231b      	movs	r3, #27
 80031b2:	2218      	movs	r2, #24
 80031b4:	4694      	mov	ip, r2
 80031b6:	44bc      	add	ip, r7
 80031b8:	4463      	add	r3, ip
 80031ba:	2201      	movs	r2, #1
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	e0c5      	b.n	800334c <UART_SetConfig+0x250>
 80031c0:	231b      	movs	r3, #27
 80031c2:	2218      	movs	r2, #24
 80031c4:	4694      	mov	ip, r2
 80031c6:	44bc      	add	ip, r7
 80031c8:	4463      	add	r3, ip
 80031ca:	2202      	movs	r2, #2
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e0bd      	b.n	800334c <UART_SetConfig+0x250>
 80031d0:	231b      	movs	r3, #27
 80031d2:	2218      	movs	r2, #24
 80031d4:	4694      	mov	ip, r2
 80031d6:	44bc      	add	ip, r7
 80031d8:	4463      	add	r3, ip
 80031da:	2204      	movs	r2, #4
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e0b5      	b.n	800334c <UART_SetConfig+0x250>
 80031e0:	231b      	movs	r3, #27
 80031e2:	2218      	movs	r2, #24
 80031e4:	4694      	mov	ip, r2
 80031e6:	44bc      	add	ip, r7
 80031e8:	4463      	add	r3, ip
 80031ea:	2208      	movs	r2, #8
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e0ad      	b.n	800334c <UART_SetConfig+0x250>
 80031f0:	231b      	movs	r3, #27
 80031f2:	2218      	movs	r2, #24
 80031f4:	4694      	mov	ip, r2
 80031f6:	44bc      	add	ip, r7
 80031f8:	4463      	add	r3, ip
 80031fa:	2210      	movs	r2, #16
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	e0a5      	b.n	800334c <UART_SetConfig+0x250>
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a81      	ldr	r2, [pc, #516]	; (800340c <UART_SetConfig+0x310>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d136      	bne.n	8003278 <UART_SetConfig+0x17c>
 800320a:	4b7f      	ldr	r3, [pc, #508]	; (8003408 <UART_SetConfig+0x30c>)
 800320c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320e:	220c      	movs	r2, #12
 8003210:	4013      	ands	r3, r2
 8003212:	2b0c      	cmp	r3, #12
 8003214:	d020      	beq.n	8003258 <UART_SetConfig+0x15c>
 8003216:	d827      	bhi.n	8003268 <UART_SetConfig+0x16c>
 8003218:	2b08      	cmp	r3, #8
 800321a:	d00d      	beq.n	8003238 <UART_SetConfig+0x13c>
 800321c:	d824      	bhi.n	8003268 <UART_SetConfig+0x16c>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <UART_SetConfig+0x12c>
 8003222:	2b04      	cmp	r3, #4
 8003224:	d010      	beq.n	8003248 <UART_SetConfig+0x14c>
 8003226:	e01f      	b.n	8003268 <UART_SetConfig+0x16c>
 8003228:	231b      	movs	r3, #27
 800322a:	2218      	movs	r2, #24
 800322c:	4694      	mov	ip, r2
 800322e:	44bc      	add	ip, r7
 8003230:	4463      	add	r3, ip
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	e089      	b.n	800334c <UART_SetConfig+0x250>
 8003238:	231b      	movs	r3, #27
 800323a:	2218      	movs	r2, #24
 800323c:	4694      	mov	ip, r2
 800323e:	44bc      	add	ip, r7
 8003240:	4463      	add	r3, ip
 8003242:	2202      	movs	r2, #2
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e081      	b.n	800334c <UART_SetConfig+0x250>
 8003248:	231b      	movs	r3, #27
 800324a:	2218      	movs	r2, #24
 800324c:	4694      	mov	ip, r2
 800324e:	44bc      	add	ip, r7
 8003250:	4463      	add	r3, ip
 8003252:	2204      	movs	r2, #4
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	e079      	b.n	800334c <UART_SetConfig+0x250>
 8003258:	231b      	movs	r3, #27
 800325a:	2218      	movs	r2, #24
 800325c:	4694      	mov	ip, r2
 800325e:	44bc      	add	ip, r7
 8003260:	4463      	add	r3, ip
 8003262:	2208      	movs	r2, #8
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e071      	b.n	800334c <UART_SetConfig+0x250>
 8003268:	231b      	movs	r3, #27
 800326a:	2218      	movs	r2, #24
 800326c:	4694      	mov	ip, r2
 800326e:	44bc      	add	ip, r7
 8003270:	4463      	add	r3, ip
 8003272:	2210      	movs	r2, #16
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e069      	b.n	800334c <UART_SetConfig+0x250>
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a64      	ldr	r2, [pc, #400]	; (8003410 <UART_SetConfig+0x314>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d107      	bne.n	8003292 <UART_SetConfig+0x196>
 8003282:	231b      	movs	r3, #27
 8003284:	2218      	movs	r2, #24
 8003286:	4694      	mov	ip, r2
 8003288:	44bc      	add	ip, r7
 800328a:	4463      	add	r3, ip
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	e05c      	b.n	800334c <UART_SetConfig+0x250>
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a5f      	ldr	r2, [pc, #380]	; (8003414 <UART_SetConfig+0x318>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d107      	bne.n	80032ac <UART_SetConfig+0x1b0>
 800329c:	231b      	movs	r3, #27
 800329e:	2218      	movs	r2, #24
 80032a0:	4694      	mov	ip, r2
 80032a2:	44bc      	add	ip, r7
 80032a4:	4463      	add	r3, ip
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e04f      	b.n	800334c <UART_SetConfig+0x250>
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a52      	ldr	r2, [pc, #328]	; (80033fc <UART_SetConfig+0x300>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d143      	bne.n	800333e <UART_SetConfig+0x242>
 80032b6:	4b54      	ldr	r3, [pc, #336]	; (8003408 <UART_SetConfig+0x30c>)
 80032b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032ba:	23c0      	movs	r3, #192	; 0xc0
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	4013      	ands	r3, r2
 80032c0:	22c0      	movs	r2, #192	; 0xc0
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d02a      	beq.n	800331e <UART_SetConfig+0x222>
 80032c8:	22c0      	movs	r2, #192	; 0xc0
 80032ca:	0112      	lsls	r2, r2, #4
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d82e      	bhi.n	800332e <UART_SetConfig+0x232>
 80032d0:	2280      	movs	r2, #128	; 0x80
 80032d2:	0112      	lsls	r2, r2, #4
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d012      	beq.n	80032fe <UART_SetConfig+0x202>
 80032d8:	2280      	movs	r2, #128	; 0x80
 80032da:	0112      	lsls	r2, r2, #4
 80032dc:	4293      	cmp	r3, r2
 80032de:	d826      	bhi.n	800332e <UART_SetConfig+0x232>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d004      	beq.n	80032ee <UART_SetConfig+0x1f2>
 80032e4:	2280      	movs	r2, #128	; 0x80
 80032e6:	00d2      	lsls	r2, r2, #3
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d010      	beq.n	800330e <UART_SetConfig+0x212>
 80032ec:	e01f      	b.n	800332e <UART_SetConfig+0x232>
 80032ee:	231b      	movs	r3, #27
 80032f0:	2218      	movs	r2, #24
 80032f2:	4694      	mov	ip, r2
 80032f4:	44bc      	add	ip, r7
 80032f6:	4463      	add	r3, ip
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	e026      	b.n	800334c <UART_SetConfig+0x250>
 80032fe:	231b      	movs	r3, #27
 8003300:	2218      	movs	r2, #24
 8003302:	4694      	mov	ip, r2
 8003304:	44bc      	add	ip, r7
 8003306:	4463      	add	r3, ip
 8003308:	2202      	movs	r2, #2
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	e01e      	b.n	800334c <UART_SetConfig+0x250>
 800330e:	231b      	movs	r3, #27
 8003310:	2218      	movs	r2, #24
 8003312:	4694      	mov	ip, r2
 8003314:	44bc      	add	ip, r7
 8003316:	4463      	add	r3, ip
 8003318:	2204      	movs	r2, #4
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e016      	b.n	800334c <UART_SetConfig+0x250>
 800331e:	231b      	movs	r3, #27
 8003320:	2218      	movs	r2, #24
 8003322:	4694      	mov	ip, r2
 8003324:	44bc      	add	ip, r7
 8003326:	4463      	add	r3, ip
 8003328:	2208      	movs	r2, #8
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	e00e      	b.n	800334c <UART_SetConfig+0x250>
 800332e:	231b      	movs	r3, #27
 8003330:	2218      	movs	r2, #24
 8003332:	4694      	mov	ip, r2
 8003334:	44bc      	add	ip, r7
 8003336:	4463      	add	r3, ip
 8003338:	2210      	movs	r2, #16
 800333a:	701a      	strb	r2, [r3, #0]
 800333c:	e006      	b.n	800334c <UART_SetConfig+0x250>
 800333e:	231b      	movs	r3, #27
 8003340:	2218      	movs	r2, #24
 8003342:	4694      	mov	ip, r2
 8003344:	44bc      	add	ip, r7
 8003346:	4463      	add	r3, ip
 8003348:	2210      	movs	r2, #16
 800334a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a2a      	ldr	r2, [pc, #168]	; (80033fc <UART_SetConfig+0x300>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d000      	beq.n	8003358 <UART_SetConfig+0x25c>
 8003356:	e09e      	b.n	8003496 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003358:	231b      	movs	r3, #27
 800335a:	2218      	movs	r2, #24
 800335c:	4694      	mov	ip, r2
 800335e:	44bc      	add	ip, r7
 8003360:	4463      	add	r3, ip
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d01d      	beq.n	80033a4 <UART_SetConfig+0x2a8>
 8003368:	dc20      	bgt.n	80033ac <UART_SetConfig+0x2b0>
 800336a:	2b04      	cmp	r3, #4
 800336c:	d015      	beq.n	800339a <UART_SetConfig+0x29e>
 800336e:	dc1d      	bgt.n	80033ac <UART_SetConfig+0x2b0>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <UART_SetConfig+0x27e>
 8003374:	2b02      	cmp	r3, #2
 8003376:	d005      	beq.n	8003384 <UART_SetConfig+0x288>
 8003378:	e018      	b.n	80033ac <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800337a:	f7ff f8c5 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 800337e:	0003      	movs	r3, r0
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003382:	e01d      	b.n	80033c0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003384:	4b20      	ldr	r3, [pc, #128]	; (8003408 <UART_SetConfig+0x30c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2210      	movs	r2, #16
 800338a:	4013      	ands	r3, r2
 800338c:	d002      	beq.n	8003394 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800338e:	4b22      	ldr	r3, [pc, #136]	; (8003418 <UART_SetConfig+0x31c>)
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003392:	e015      	b.n	80033c0 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <UART_SetConfig+0x320>)
 8003396:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003398:	e012      	b.n	80033c0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800339a:	f7ff f805 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 800339e:	0003      	movs	r3, r0
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033a2:	e00d      	b.n	80033c0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033aa:	e009      	b.n	80033c0 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80033b0:	231a      	movs	r3, #26
 80033b2:	2218      	movs	r2, #24
 80033b4:	4694      	mov	ip, r2
 80033b6:	44bc      	add	ip, r7
 80033b8:	4463      	add	r3, ip
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
        break;
 80033be:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d100      	bne.n	80033c8 <UART_SetConfig+0x2cc>
 80033c6:	e13c      	b.n	8003642 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	0013      	movs	r3, r2
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	189b      	adds	r3, r3, r2
 80033d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d305      	bcc.n	80033e4 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d91d      	bls.n	8003420 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 80033e4:	231a      	movs	r3, #26
 80033e6:	2218      	movs	r2, #24
 80033e8:	4694      	mov	ip, r2
 80033ea:	44bc      	add	ip, r7
 80033ec:	4463      	add	r3, ip
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	e126      	b.n	8003642 <UART_SetConfig+0x546>
 80033f4:	efff69f3 	.word	0xefff69f3
 80033f8:	ffffcfff 	.word	0xffffcfff
 80033fc:	40004800 	.word	0x40004800
 8003400:	fffff4ff 	.word	0xfffff4ff
 8003404:	40013800 	.word	0x40013800
 8003408:	40021000 	.word	0x40021000
 800340c:	40004400 	.word	0x40004400
 8003410:	40004c00 	.word	0x40004c00
 8003414:	40005000 	.word	0x40005000
 8003418:	003d0900 	.word	0x003d0900
 800341c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	6939      	ldr	r1, [r7, #16]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	000b      	movs	r3, r1
 800342e:	0e1b      	lsrs	r3, r3, #24
 8003430:	0010      	movs	r0, r2
 8003432:	0205      	lsls	r5, r0, #8
 8003434:	431d      	orrs	r5, r3
 8003436:	000b      	movs	r3, r1
 8003438:	021c      	lsls	r4, r3, #8
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	085b      	lsrs	r3, r3, #1
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68b8      	ldr	r0, [r7, #8]
 8003448:	68f9      	ldr	r1, [r7, #12]
 800344a:	1900      	adds	r0, r0, r4
 800344c:	4169      	adcs	r1, r5
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	2300      	movs	r3, #0
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f7fc fef2 	bl	8000244 <__aeabi_uldivmod>
 8003460:	0002      	movs	r2, r0
 8003462:	000b      	movs	r3, r1
 8003464:	0013      	movs	r3, r2
 8003466:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800346a:	23c0      	movs	r3, #192	; 0xc0
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	429a      	cmp	r2, r3
 8003470:	d309      	bcc.n	8003486 <UART_SetConfig+0x38a>
 8003472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	035b      	lsls	r3, r3, #13
 8003478:	429a      	cmp	r2, r3
 800347a:	d204      	bcs.n	8003486 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	e0dd      	b.n	8003642 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003486:	231a      	movs	r3, #26
 8003488:	2218      	movs	r2, #24
 800348a:	4694      	mov	ip, r2
 800348c:	44bc      	add	ip, r7
 800348e:	4463      	add	r3, ip
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
 8003494:	e0d5      	b.n	8003642 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	69da      	ldr	r2, [r3, #28]
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	429a      	cmp	r2, r3
 80034a0:	d000      	beq.n	80034a4 <UART_SetConfig+0x3a8>
 80034a2:	e074      	b.n	800358e <UART_SetConfig+0x492>
  {
    switch (clocksource)
 80034a4:	231b      	movs	r3, #27
 80034a6:	2218      	movs	r2, #24
 80034a8:	4694      	mov	ip, r2
 80034aa:	44bc      	add	ip, r7
 80034ac:	4463      	add	r3, ip
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d822      	bhi.n	80034fa <UART_SetConfig+0x3fe>
 80034b4:	009a      	lsls	r2, r3, #2
 80034b6:	4b6b      	ldr	r3, [pc, #428]	; (8003664 <UART_SetConfig+0x568>)
 80034b8:	18d3      	adds	r3, r2, r3
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034be:	f7ff f823 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 80034c2:	0003      	movs	r3, r0
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034c6:	e022      	b.n	800350e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034c8:	f7ff f834 	bl	8002534 <HAL_RCC_GetPCLK2Freq>
 80034cc:	0003      	movs	r3, r0
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034d0:	e01d      	b.n	800350e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034d2:	4b65      	ldr	r3, [pc, #404]	; (8003668 <UART_SetConfig+0x56c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2210      	movs	r2, #16
 80034d8:	4013      	ands	r3, r2
 80034da:	d002      	beq.n	80034e2 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80034dc:	4b63      	ldr	r3, [pc, #396]	; (800366c <UART_SetConfig+0x570>)
 80034de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80034e0:	e015      	b.n	800350e <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 80034e2:	4b63      	ldr	r3, [pc, #396]	; (8003670 <UART_SetConfig+0x574>)
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034e6:	e012      	b.n	800350e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034e8:	f7fe ff5e 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 80034ec:	0003      	movs	r3, r0
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034f0:	e00d      	b.n	800350e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034f8:	e009      	b.n	800350e <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80034fe:	231a      	movs	r3, #26
 8003500:	2218      	movs	r2, #24
 8003502:	4694      	mov	ip, r2
 8003504:	44bc      	add	ip, r7
 8003506:	4463      	add	r3, ip
 8003508:	2201      	movs	r2, #1
 800350a:	701a      	strb	r2, [r3, #0]
        break;
 800350c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d100      	bne.n	8003516 <UART_SetConfig+0x41a>
 8003514:	e095      	b.n	8003642 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	005a      	lsls	r2, r3, #1
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	085b      	lsrs	r3, r3, #1
 8003520:	18d2      	adds	r2, r2, r3
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	0019      	movs	r1, r3
 8003528:	0010      	movs	r0, r2
 800352a:	f7fc fdff 	bl	800012c <__udivsi3>
 800352e:	0003      	movs	r3, r0
 8003530:	b29b      	uxth	r3, r3
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	2b0f      	cmp	r3, #15
 8003538:	d921      	bls.n	800357e <UART_SetConfig+0x482>
 800353a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	025b      	lsls	r3, r3, #9
 8003540:	429a      	cmp	r2, r3
 8003542:	d21c      	bcs.n	800357e <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	b29a      	uxth	r2, r3
 8003548:	200e      	movs	r0, #14
 800354a:	2418      	movs	r4, #24
 800354c:	193b      	adds	r3, r7, r4
 800354e:	181b      	adds	r3, r3, r0
 8003550:	210f      	movs	r1, #15
 8003552:	438a      	bics	r2, r1
 8003554:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	085b      	lsrs	r3, r3, #1
 800355a:	b29b      	uxth	r3, r3
 800355c:	2207      	movs	r2, #7
 800355e:	4013      	ands	r3, r2
 8003560:	b299      	uxth	r1, r3
 8003562:	193b      	adds	r3, r7, r4
 8003564:	181b      	adds	r3, r3, r0
 8003566:	193a      	adds	r2, r7, r4
 8003568:	1812      	adds	r2, r2, r0
 800356a:	8812      	ldrh	r2, [r2, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	193a      	adds	r2, r7, r4
 8003576:	1812      	adds	r2, r2, r0
 8003578:	8812      	ldrh	r2, [r2, #0]
 800357a:	60da      	str	r2, [r3, #12]
 800357c:	e061      	b.n	8003642 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800357e:	231a      	movs	r3, #26
 8003580:	2218      	movs	r2, #24
 8003582:	4694      	mov	ip, r2
 8003584:	44bc      	add	ip, r7
 8003586:	4463      	add	r3, ip
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	e059      	b.n	8003642 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800358e:	231b      	movs	r3, #27
 8003590:	2218      	movs	r2, #24
 8003592:	4694      	mov	ip, r2
 8003594:	44bc      	add	ip, r7
 8003596:	4463      	add	r3, ip
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b08      	cmp	r3, #8
 800359c:	d822      	bhi.n	80035e4 <UART_SetConfig+0x4e8>
 800359e:	009a      	lsls	r2, r3, #2
 80035a0:	4b34      	ldr	r3, [pc, #208]	; (8003674 <UART_SetConfig+0x578>)
 80035a2:	18d3      	adds	r3, r2, r3
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a8:	f7fe ffae 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 80035ac:	0003      	movs	r3, r0
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035b0:	e022      	b.n	80035f8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035b2:	f7fe ffbf 	bl	8002534 <HAL_RCC_GetPCLK2Freq>
 80035b6:	0003      	movs	r3, r0
 80035b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035ba:	e01d      	b.n	80035f8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035bc:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <UART_SetConfig+0x56c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2210      	movs	r2, #16
 80035c2:	4013      	ands	r3, r2
 80035c4:	d002      	beq.n	80035cc <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80035c6:	4b29      	ldr	r3, [pc, #164]	; (800366c <UART_SetConfig+0x570>)
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80035ca:	e015      	b.n	80035f8 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 80035cc:	4b28      	ldr	r3, [pc, #160]	; (8003670 <UART_SetConfig+0x574>)
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035d0:	e012      	b.n	80035f8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035d2:	f7fe fee9 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 80035d6:	0003      	movs	r3, r0
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035da:	e00d      	b.n	80035f8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035dc:	2380      	movs	r3, #128	; 0x80
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035e2:	e009      	b.n	80035f8 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80035e8:	231a      	movs	r3, #26
 80035ea:	2218      	movs	r2, #24
 80035ec:	4694      	mov	ip, r2
 80035ee:	44bc      	add	ip, r7
 80035f0:	4463      	add	r3, ip
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
        break;
 80035f6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d021      	beq.n	8003642 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	085a      	lsrs	r2, r3, #1
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	18d2      	adds	r2, r2, r3
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	0019      	movs	r1, r3
 800360e:	0010      	movs	r0, r2
 8003610:	f7fc fd8c 	bl	800012c <__udivsi3>
 8003614:	0003      	movs	r3, r0
 8003616:	b29b      	uxth	r3, r3
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	2b0f      	cmp	r3, #15
 800361e:	d909      	bls.n	8003634 <UART_SetConfig+0x538>
 8003620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	025b      	lsls	r3, r3, #9
 8003626:	429a      	cmp	r2, r3
 8003628:	d204      	bcs.n	8003634 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	e006      	b.n	8003642 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003634:	231a      	movs	r3, #26
 8003636:	2218      	movs	r2, #24
 8003638:	4694      	mov	ip, r2
 800363a:	44bc      	add	ip, r7
 800363c:	4463      	add	r3, ip
 800363e:	2201      	movs	r2, #1
 8003640:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	2200      	movs	r2, #0
 8003646:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2200      	movs	r2, #0
 800364c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800364e:	231a      	movs	r3, #26
 8003650:	2218      	movs	r2, #24
 8003652:	4694      	mov	ip, r2
 8003654:	44bc      	add	ip, r7
 8003656:	4463      	add	r3, ip
 8003658:	781b      	ldrb	r3, [r3, #0]
}
 800365a:	0018      	movs	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	b00e      	add	sp, #56	; 0x38
 8003660:	bdb0      	pop	{r4, r5, r7, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	080048cc 	.word	0x080048cc
 8003668:	40021000 	.word	0x40021000
 800366c:	003d0900 	.word	0x003d0900
 8003670:	00f42400 	.word	0x00f42400
 8003674:	080048f0 	.word	0x080048f0

08003678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	2201      	movs	r2, #1
 8003686:	4013      	ands	r3, r2
 8003688:	d00b      	beq.n	80036a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4a4a      	ldr	r2, [pc, #296]	; (80037bc <UART_AdvFeatureConfig+0x144>)
 8003692:	4013      	ands	r3, r2
 8003694:	0019      	movs	r1, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	2202      	movs	r2, #2
 80036a8:	4013      	ands	r3, r2
 80036aa:	d00b      	beq.n	80036c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4a43      	ldr	r2, [pc, #268]	; (80037c0 <UART_AdvFeatureConfig+0x148>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	0019      	movs	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	2204      	movs	r2, #4
 80036ca:	4013      	ands	r3, r2
 80036cc:	d00b      	beq.n	80036e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	4a3b      	ldr	r2, [pc, #236]	; (80037c4 <UART_AdvFeatureConfig+0x14c>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	0019      	movs	r1, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2208      	movs	r2, #8
 80036ec:	4013      	ands	r3, r2
 80036ee:	d00b      	beq.n	8003708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4a34      	ldr	r2, [pc, #208]	; (80037c8 <UART_AdvFeatureConfig+0x150>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	0019      	movs	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	2210      	movs	r2, #16
 800370e:	4013      	ands	r3, r2
 8003710:	d00b      	beq.n	800372a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	4a2c      	ldr	r2, [pc, #176]	; (80037cc <UART_AdvFeatureConfig+0x154>)
 800371a:	4013      	ands	r3, r2
 800371c:	0019      	movs	r1, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	2220      	movs	r2, #32
 8003730:	4013      	ands	r3, r2
 8003732:	d00b      	beq.n	800374c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	4a25      	ldr	r2, [pc, #148]	; (80037d0 <UART_AdvFeatureConfig+0x158>)
 800373c:	4013      	ands	r3, r2
 800373e:	0019      	movs	r1, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	2240      	movs	r2, #64	; 0x40
 8003752:	4013      	ands	r3, r2
 8003754:	d01d      	beq.n	8003792 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a1d      	ldr	r2, [pc, #116]	; (80037d4 <UART_AdvFeatureConfig+0x15c>)
 800375e:	4013      	ands	r3, r2
 8003760:	0019      	movs	r1, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	035b      	lsls	r3, r3, #13
 8003776:	429a      	cmp	r2, r3
 8003778:	d10b      	bne.n	8003792 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <UART_AdvFeatureConfig+0x160>)
 8003782:	4013      	ands	r3, r2
 8003784:	0019      	movs	r1, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	4013      	ands	r3, r2
 800379a:	d00b      	beq.n	80037b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4a0e      	ldr	r2, [pc, #56]	; (80037dc <UART_AdvFeatureConfig+0x164>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	0019      	movs	r1, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	605a      	str	r2, [r3, #4]
  }
}
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b002      	add	sp, #8
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	fffdffff 	.word	0xfffdffff
 80037c0:	fffeffff 	.word	0xfffeffff
 80037c4:	fffbffff 	.word	0xfffbffff
 80037c8:	ffff7fff 	.word	0xffff7fff
 80037cc:	ffffefff 	.word	0xffffefff
 80037d0:	ffffdfff 	.word	0xffffdfff
 80037d4:	ffefffff 	.word	0xffefffff
 80037d8:	ff9fffff 	.word	0xff9fffff
 80037dc:	fff7ffff 	.word	0xfff7ffff

080037e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2280      	movs	r2, #128	; 0x80
 80037ec:	2100      	movs	r1, #0
 80037ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037f0:	f7fd fd8e 	bl	8001310 <HAL_GetTick>
 80037f4:	0003      	movs	r3, r0
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2208      	movs	r2, #8
 8003800:	4013      	ands	r3, r2
 8003802:	2b08      	cmp	r3, #8
 8003804:	d10c      	bne.n	8003820 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2280      	movs	r2, #128	; 0x80
 800380a:	0391      	lsls	r1, r2, #14
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	4a17      	ldr	r2, [pc, #92]	; (800386c <UART_CheckIdleState+0x8c>)
 8003810:	9200      	str	r2, [sp, #0]
 8003812:	2200      	movs	r2, #0
 8003814:	f000 f82c 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 8003818:	1e03      	subs	r3, r0, #0
 800381a:	d001      	beq.n	8003820 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e021      	b.n	8003864 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2204      	movs	r2, #4
 8003828:	4013      	ands	r3, r2
 800382a:	2b04      	cmp	r3, #4
 800382c:	d10c      	bne.n	8003848 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2280      	movs	r2, #128	; 0x80
 8003832:	03d1      	lsls	r1, r2, #15
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4a0d      	ldr	r2, [pc, #52]	; (800386c <UART_CheckIdleState+0x8c>)
 8003838:	9200      	str	r2, [sp, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	f000 f818 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 8003840:	1e03      	subs	r3, r0, #0
 8003842:	d001      	beq.n	8003848 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e00d      	b.n	8003864 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2274      	movs	r2, #116	; 0x74
 800385e:	2100      	movs	r1, #0
 8003860:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	0018      	movs	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	b004      	add	sp, #16
 800386a:	bd80      	pop	{r7, pc}
 800386c:	01ffffff 	.word	0x01ffffff

08003870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b094      	sub	sp, #80	; 0x50
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	1dfb      	adds	r3, r7, #7
 800387e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003880:	e0a3      	b.n	80039ca <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003884:	3301      	adds	r3, #1
 8003886:	d100      	bne.n	800388a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003888:	e09f      	b.n	80039ca <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7fd fd41 	bl	8001310 <HAL_GetTick>
 800388e:	0002      	movs	r2, r0
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800389a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800389c:	2b00      	cmp	r3, #0
 800389e:	d13d      	bne.n	800391c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a0:	f3ef 8310 	mrs	r3, PRIMASK
 80038a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038a8:	647b      	str	r3, [r7, #68]	; 0x44
 80038aa:	2301      	movs	r3, #1
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b0:	f383 8810 	msr	PRIMASK, r3
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	494c      	ldr	r1, [pc, #304]	; (80039f4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80038c2:	400a      	ands	r2, r1
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038cc:	f383 8810 	msr	PRIMASK, r3
}
 80038d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d2:	f3ef 8310 	mrs	r3, PRIMASK
 80038d6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80038d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038da:	643b      	str	r3, [r7, #64]	; 0x40
 80038dc:	2301      	movs	r3, #1
 80038de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e2:	f383 8810 	msr	PRIMASK, r3
}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2101      	movs	r1, #1
 80038f4:	438a      	bics	r2, r1
 80038f6:	609a      	str	r2, [r3, #8]
 80038f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fe:	f383 8810 	msr	PRIMASK, r3
}
 8003902:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2274      	movs	r2, #116	; 0x74
 8003914:	2100      	movs	r1, #0
 8003916:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e067      	b.n	80039ec <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2204      	movs	r2, #4
 8003924:	4013      	ands	r3, r2
 8003926:	d050      	beq.n	80039ca <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69da      	ldr	r2, [r3, #28]
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	401a      	ands	r2, r3
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	429a      	cmp	r2, r3
 800393a:	d146      	bne.n	80039ca <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	0112      	lsls	r2, r2, #4
 8003944:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003946:	f3ef 8310 	mrs	r3, PRIMASK
 800394a:	613b      	str	r3, [r7, #16]
  return(result);
 800394c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800394e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003950:	2301      	movs	r3, #1
 8003952:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f383 8810 	msr	PRIMASK, r3
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4923      	ldr	r1, [pc, #140]	; (80039f4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003968:	400a      	ands	r2, r1
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f383 8810 	msr	PRIMASK, r3
}
 8003976:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003978:	f3ef 8310 	mrs	r3, PRIMASK
 800397c:	61fb      	str	r3, [r7, #28]
  return(result);
 800397e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003980:	64bb      	str	r3, [r7, #72]	; 0x48
 8003982:	2301      	movs	r3, #1
 8003984:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2101      	movs	r1, #1
 800399a:	438a      	bics	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
 800399e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	f383 8810 	msr	PRIMASK, r3
}
 80039a8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2280      	movs	r2, #128	; 0x80
 80039ba:	2120      	movs	r1, #32
 80039bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2274      	movs	r2, #116	; 0x74
 80039c2:	2100      	movs	r1, #0
 80039c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e010      	b.n	80039ec <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	4013      	ands	r3, r2
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	425a      	negs	r2, r3
 80039da:	4153      	adcs	r3, r2
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	001a      	movs	r2, r3
 80039e0:	1dfb      	adds	r3, r7, #7
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d100      	bne.n	80039ea <UART_WaitOnFlagUntilTimeout+0x17a>
 80039e8:	e74b      	b.n	8003882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	0018      	movs	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b014      	add	sp, #80	; 0x50
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	fffffe5f 	.word	0xfffffe5f

080039f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08c      	sub	sp, #48	; 0x30
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	1dbb      	adds	r3, r7, #6
 8003a04:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1dba      	adds	r2, r7, #6
 8003a10:	2158      	movs	r1, #88	; 0x58
 8003a12:	8812      	ldrh	r2, [r2, #0]
 8003a14:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1dba      	adds	r2, r7, #6
 8003a1a:	215a      	movs	r1, #90	; 0x5a
 8003a1c:	8812      	ldrh	r2, [r2, #0]
 8003a1e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	015b      	lsls	r3, r3, #5
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d10d      	bne.n	8003a4e <UART_Start_Receive_IT+0x56>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d104      	bne.n	8003a44 <UART_Start_Receive_IT+0x4c>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	225c      	movs	r2, #92	; 0x5c
 8003a3e:	4943      	ldr	r1, [pc, #268]	; (8003b4c <UART_Start_Receive_IT+0x154>)
 8003a40:	5299      	strh	r1, [r3, r2]
 8003a42:	e02e      	b.n	8003aa2 <UART_Start_Receive_IT+0xaa>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	225c      	movs	r2, #92	; 0x5c
 8003a48:	21ff      	movs	r1, #255	; 0xff
 8003a4a:	5299      	strh	r1, [r3, r2]
 8003a4c:	e029      	b.n	8003aa2 <UART_Start_Receive_IT+0xaa>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10d      	bne.n	8003a72 <UART_Start_Receive_IT+0x7a>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d104      	bne.n	8003a68 <UART_Start_Receive_IT+0x70>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	225c      	movs	r2, #92	; 0x5c
 8003a62:	21ff      	movs	r1, #255	; 0xff
 8003a64:	5299      	strh	r1, [r3, r2]
 8003a66:	e01c      	b.n	8003aa2 <UART_Start_Receive_IT+0xaa>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	225c      	movs	r2, #92	; 0x5c
 8003a6c:	217f      	movs	r1, #127	; 0x7f
 8003a6e:	5299      	strh	r1, [r3, r2]
 8003a70:	e017      	b.n	8003aa2 <UART_Start_Receive_IT+0xaa>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	055b      	lsls	r3, r3, #21
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d10d      	bne.n	8003a9a <UART_Start_Receive_IT+0xa2>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d104      	bne.n	8003a90 <UART_Start_Receive_IT+0x98>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	225c      	movs	r2, #92	; 0x5c
 8003a8a:	217f      	movs	r1, #127	; 0x7f
 8003a8c:	5299      	strh	r1, [r3, r2]
 8003a8e:	e008      	b.n	8003aa2 <UART_Start_Receive_IT+0xaa>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	225c      	movs	r2, #92	; 0x5c
 8003a94:	213f      	movs	r1, #63	; 0x3f
 8003a96:	5299      	strh	r1, [r3, r2]
 8003a98:	e003      	b.n	8003aa2 <UART_Start_Receive_IT+0xaa>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	225c      	movs	r2, #92	; 0x5c
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2280      	movs	r2, #128	; 0x80
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2222      	movs	r2, #34	; 0x22
 8003aae:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ab6:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aba:	2301      	movs	r3, #1
 8003abc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	f383 8810 	msr	PRIMASK, r3
}
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	609a      	str	r2, [r3, #8]
 8003ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	f383 8810 	msr	PRIMASK, r3
}
 8003ae0:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	2380      	movs	r3, #128	; 0x80
 8003ae8:	015b      	lsls	r3, r3, #5
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d107      	bne.n	8003afe <UART_Start_Receive_IT+0x106>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d103      	bne.n	8003afe <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <UART_Start_Receive_IT+0x158>)
 8003afa:	665a      	str	r2, [r3, #100]	; 0x64
 8003afc:	e002      	b.n	8003b04 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <UART_Start_Receive_IT+0x15c>)
 8003b02:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2274      	movs	r2, #116	; 0x74
 8003b08:	2100      	movs	r1, #0
 8003b0a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b10:	613b      	str	r3, [r7, #16]
  return(result);
 8003b12:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b16:	2301      	movs	r3, #1
 8003b18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f383 8810 	msr	PRIMASK, r3
}
 8003b20:	46c0      	nop			; (mov r8, r8)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2190      	movs	r1, #144	; 0x90
 8003b2e:	0049      	lsls	r1, r1, #1
 8003b30:	430a      	orrs	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	f383 8810 	msr	PRIMASK, r3
}
 8003b3e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	0018      	movs	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b00c      	add	sp, #48	; 0x30
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	000001ff 	.word	0x000001ff
 8003b50:	08003e09 	.word	0x08003e09
 8003b54:	08003ca1 	.word	0x08003ca1

08003b58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08e      	sub	sp, #56	; 0x38
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b60:	f3ef 8310 	mrs	r3, PRIMASK
 8003b64:	617b      	str	r3, [r7, #20]
  return(result);
 8003b66:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b68:	637b      	str	r3, [r7, #52]	; 0x34
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	f383 8810 	msr	PRIMASK, r3
}
 8003b74:	46c0      	nop			; (mov r8, r8)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4925      	ldr	r1, [pc, #148]	; (8003c18 <UART_EndRxTransfer+0xc0>)
 8003b82:	400a      	ands	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f383 8810 	msr	PRIMASK, r3
}
 8003b90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b92:	f3ef 8310 	mrs	r3, PRIMASK
 8003b96:	623b      	str	r3, [r7, #32]
  return(result);
 8003b98:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	f383 8810 	msr	PRIMASK, r3
}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	438a      	bics	r2, r1
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	f383 8810 	msr	PRIMASK, r3
}
 8003bc2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d118      	bne.n	8003bfe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bd2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f383 8810 	msr	PRIMASK, r3
}
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2110      	movs	r1, #16
 8003bee:	438a      	bics	r2, r1
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f383 8810 	msr	PRIMASK, r3
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b00e      	add	sp, #56	; 0x38
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	fffffedf 	.word	0xfffffedf

08003c1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	225a      	movs	r2, #90	; 0x5a
 8003c2e:	2100      	movs	r1, #0
 8003c30:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2252      	movs	r2, #82	; 0x52
 8003c36:	2100      	movs	r1, #0
 8003c38:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f7ff fa49 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	46bd      	mov	sp, r7
 8003c46:	b004      	add	sp, #16
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b086      	sub	sp, #24
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c52:	f3ef 8310 	mrs	r3, PRIMASK
 8003c56:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c58:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f383 8810 	msr	PRIMASK, r3
}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2140      	movs	r1, #64	; 0x40
 8003c74:	438a      	bics	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f383 8810 	msr	PRIMASK, r3
}
 8003c82:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	0018      	movs	r0, r3
 8003c94:	f7ff fa16 	bl	80030c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b006      	add	sp, #24
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b090      	sub	sp, #64	; 0x40
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003ca8:	203e      	movs	r0, #62	; 0x3e
 8003caa:	183b      	adds	r3, r7, r0
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	215c      	movs	r1, #92	; 0x5c
 8003cb0:	5a52      	ldrh	r2, [r2, r1]
 8003cb2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb8:	2b22      	cmp	r3, #34	; 0x22
 8003cba:	d000      	beq.n	8003cbe <UART_RxISR_8BIT+0x1e>
 8003cbc:	e095      	b.n	8003dea <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cc4:	213c      	movs	r1, #60	; 0x3c
 8003cc6:	187b      	adds	r3, r7, r1
 8003cc8:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cca:	187b      	adds	r3, r7, r1
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	183b      	adds	r3, r7, r0
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	b2d9      	uxtb	r1, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	400a      	ands	r2, r1
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	225a      	movs	r2, #90	; 0x5a
 8003cee:	5a9b      	ldrh	r3, [r3, r2]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b299      	uxth	r1, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	225a      	movs	r2, #90	; 0x5a
 8003cfa:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	225a      	movs	r2, #90	; 0x5a
 8003d00:	5a9b      	ldrh	r3, [r3, r2]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d178      	bne.n	8003dfa <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d08:	f3ef 8310 	mrs	r3, PRIMASK
 8003d0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d0e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d10:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d12:	2301      	movs	r3, #1
 8003d14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f383 8810 	msr	PRIMASK, r3
}
 8003d1c:	46c0      	nop			; (mov r8, r8)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4936      	ldr	r1, [pc, #216]	; (8003e04 <UART_RxISR_8BIT+0x164>)
 8003d2a:	400a      	ands	r2, r1
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	f383 8810 	msr	PRIMASK, r3
}
 8003d38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d42:	637b      	str	r3, [r7, #52]	; 0x34
 8003d44:	2301      	movs	r3, #1
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	f383 8810 	msr	PRIMASK, r3
}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	438a      	bics	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d66:	f383 8810 	msr	PRIMASK, r3
}
 8003d6a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d12f      	bne.n	8003de0 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d86:	f3ef 8310 	mrs	r3, PRIMASK
 8003d8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d8c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d90:	2301      	movs	r3, #1
 8003d92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f383 8810 	msr	PRIMASK, r3
}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2110      	movs	r1, #16
 8003da8:	438a      	bics	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f383 8810 	msr	PRIMASK, r3
}
 8003db6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	2210      	movs	r2, #16
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d103      	bne.n	8003dce <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2210      	movs	r2, #16
 8003dcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2258      	movs	r2, #88	; 0x58
 8003dd2:	5a9a      	ldrh	r2, [r3, r2]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	0011      	movs	r1, r2
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7ff f983 	bl	80030e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dde:	e00c      	b.n	8003dfa <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7fd f8e2 	bl	8000fac <HAL_UART_RxCpltCallback>
}
 8003de8:	e007      	b.n	8003dfa <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699a      	ldr	r2, [r3, #24]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2108      	movs	r1, #8
 8003df6:	430a      	orrs	r2, r1
 8003df8:	619a      	str	r2, [r3, #24]
}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b010      	add	sp, #64	; 0x40
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	fffffedf 	.word	0xfffffedf

08003e08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b090      	sub	sp, #64	; 0x40
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e10:	203e      	movs	r0, #62	; 0x3e
 8003e12:	183b      	adds	r3, r7, r0
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	215c      	movs	r1, #92	; 0x5c
 8003e18:	5a52      	ldrh	r2, [r2, r1]
 8003e1a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e20:	2b22      	cmp	r3, #34	; 0x22
 8003e22:	d000      	beq.n	8003e26 <UART_RxISR_16BIT+0x1e>
 8003e24:	e095      	b.n	8003f52 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e2c:	213c      	movs	r1, #60	; 0x3c
 8003e2e:	187b      	adds	r3, r7, r1
 8003e30:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e36:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	183a      	adds	r2, r7, r0
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	8812      	ldrh	r2, [r2, #0]
 8003e40:	4013      	ands	r3, r2
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e46:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4c:	1c9a      	adds	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	225a      	movs	r2, #90	; 0x5a
 8003e56:	5a9b      	ldrh	r3, [r3, r2]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b299      	uxth	r1, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	225a      	movs	r2, #90	; 0x5a
 8003e62:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	225a      	movs	r2, #90	; 0x5a
 8003e68:	5a9b      	ldrh	r3, [r3, r2]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d178      	bne.n	8003f62 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e70:	f3ef 8310 	mrs	r3, PRIMASK
 8003e74:	617b      	str	r3, [r7, #20]
  return(result);
 8003e76:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e78:	637b      	str	r3, [r7, #52]	; 0x34
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f383 8810 	msr	PRIMASK, r3
}
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4936      	ldr	r1, [pc, #216]	; (8003f6c <UART_RxISR_16BIT+0x164>)
 8003e92:	400a      	ands	r2, r1
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ea0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea6:	623b      	str	r3, [r7, #32]
  return(result);
 8003ea8:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8003eac:	2301      	movs	r3, #1
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	f383 8810 	msr	PRIMASK, r3
}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	438a      	bics	r2, r1
 8003ec6:	609a      	str	r2, [r3, #8]
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	f383 8810 	msr	PRIMASK, r3
}
 8003ed2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d12f      	bne.n	8003f48 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eee:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ef4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef8:	2301      	movs	r3, #1
 8003efa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f383 8810 	msr	PRIMASK, r3
}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2110      	movs	r1, #16
 8003f10:	438a      	bics	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f383 8810 	msr	PRIMASK, r3
}
 8003f1e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	2210      	movs	r2, #16
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b10      	cmp	r3, #16
 8003f2c:	d103      	bne.n	8003f36 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2210      	movs	r2, #16
 8003f34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2258      	movs	r2, #88	; 0x58
 8003f3a:	5a9a      	ldrh	r2, [r3, r2]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	0011      	movs	r1, r2
 8003f40:	0018      	movs	r0, r3
 8003f42:	f7ff f8cf 	bl	80030e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f46:	e00c      	b.n	8003f62 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7fd f82e 	bl	8000fac <HAL_UART_RxCpltCallback>
}
 8003f50:	e007      	b.n	8003f62 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699a      	ldr	r2, [r3, #24]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2108      	movs	r1, #8
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	619a      	str	r2, [r3, #24]
}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b010      	add	sp, #64	; 0x40
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	fffffedf 	.word	0xfffffedf

08003f70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f78:	46c0      	nop			; (mov r8, r8)
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b002      	add	sp, #8
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <__errno>:
 8003f80:	4b01      	ldr	r3, [pc, #4]	; (8003f88 <__errno+0x8>)
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	4770      	bx	lr
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	200001a0 	.word	0x200001a0

08003f8c <__libc_init_array>:
 8003f8c:	b570      	push	{r4, r5, r6, lr}
 8003f8e:	2600      	movs	r6, #0
 8003f90:	4d0c      	ldr	r5, [pc, #48]	; (8003fc4 <__libc_init_array+0x38>)
 8003f92:	4c0d      	ldr	r4, [pc, #52]	; (8003fc8 <__libc_init_array+0x3c>)
 8003f94:	1b64      	subs	r4, r4, r5
 8003f96:	10a4      	asrs	r4, r4, #2
 8003f98:	42a6      	cmp	r6, r4
 8003f9a:	d109      	bne.n	8003fb0 <__libc_init_array+0x24>
 8003f9c:	2600      	movs	r6, #0
 8003f9e:	f000 fc47 	bl	8004830 <_init>
 8003fa2:	4d0a      	ldr	r5, [pc, #40]	; (8003fcc <__libc_init_array+0x40>)
 8003fa4:	4c0a      	ldr	r4, [pc, #40]	; (8003fd0 <__libc_init_array+0x44>)
 8003fa6:	1b64      	subs	r4, r4, r5
 8003fa8:	10a4      	asrs	r4, r4, #2
 8003faa:	42a6      	cmp	r6, r4
 8003fac:	d105      	bne.n	8003fba <__libc_init_array+0x2e>
 8003fae:	bd70      	pop	{r4, r5, r6, pc}
 8003fb0:	00b3      	lsls	r3, r6, #2
 8003fb2:	58eb      	ldr	r3, [r5, r3]
 8003fb4:	4798      	blx	r3
 8003fb6:	3601      	adds	r6, #1
 8003fb8:	e7ee      	b.n	8003f98 <__libc_init_array+0xc>
 8003fba:	00b3      	lsls	r3, r6, #2
 8003fbc:	58eb      	ldr	r3, [r5, r3]
 8003fbe:	4798      	blx	r3
 8003fc0:	3601      	adds	r6, #1
 8003fc2:	e7f2      	b.n	8003faa <__libc_init_array+0x1e>
 8003fc4:	08004950 	.word	0x08004950
 8003fc8:	08004950 	.word	0x08004950
 8003fcc:	08004950 	.word	0x08004950
 8003fd0:	08004954 	.word	0x08004954

08003fd4 <memset>:
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	1882      	adds	r2, r0, r2
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d100      	bne.n	8003fde <memset+0xa>
 8003fdc:	4770      	bx	lr
 8003fde:	7019      	strb	r1, [r3, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	e7f9      	b.n	8003fd8 <memset+0x4>

08003fe4 <siprintf>:
 8003fe4:	b40e      	push	{r1, r2, r3}
 8003fe6:	b500      	push	{lr}
 8003fe8:	490b      	ldr	r1, [pc, #44]	; (8004018 <siprintf+0x34>)
 8003fea:	b09c      	sub	sp, #112	; 0x70
 8003fec:	ab1d      	add	r3, sp, #116	; 0x74
 8003fee:	9002      	str	r0, [sp, #8]
 8003ff0:	9006      	str	r0, [sp, #24]
 8003ff2:	9107      	str	r1, [sp, #28]
 8003ff4:	9104      	str	r1, [sp, #16]
 8003ff6:	4809      	ldr	r0, [pc, #36]	; (800401c <siprintf+0x38>)
 8003ff8:	4909      	ldr	r1, [pc, #36]	; (8004020 <siprintf+0x3c>)
 8003ffa:	cb04      	ldmia	r3!, {r2}
 8003ffc:	9105      	str	r1, [sp, #20]
 8003ffe:	6800      	ldr	r0, [r0, #0]
 8004000:	a902      	add	r1, sp, #8
 8004002:	9301      	str	r3, [sp, #4]
 8004004:	f000 f870 	bl	80040e8 <_svfiprintf_r>
 8004008:	2300      	movs	r3, #0
 800400a:	9a02      	ldr	r2, [sp, #8]
 800400c:	7013      	strb	r3, [r2, #0]
 800400e:	b01c      	add	sp, #112	; 0x70
 8004010:	bc08      	pop	{r3}
 8004012:	b003      	add	sp, #12
 8004014:	4718      	bx	r3
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	7fffffff 	.word	0x7fffffff
 800401c:	200001a0 	.word	0x200001a0
 8004020:	ffff0208 	.word	0xffff0208

08004024 <__ssputs_r>:
 8004024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004026:	688e      	ldr	r6, [r1, #8]
 8004028:	b085      	sub	sp, #20
 800402a:	0007      	movs	r7, r0
 800402c:	000c      	movs	r4, r1
 800402e:	9203      	str	r2, [sp, #12]
 8004030:	9301      	str	r3, [sp, #4]
 8004032:	429e      	cmp	r6, r3
 8004034:	d83c      	bhi.n	80040b0 <__ssputs_r+0x8c>
 8004036:	2390      	movs	r3, #144	; 0x90
 8004038:	898a      	ldrh	r2, [r1, #12]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	421a      	tst	r2, r3
 800403e:	d034      	beq.n	80040aa <__ssputs_r+0x86>
 8004040:	2503      	movs	r5, #3
 8004042:	6909      	ldr	r1, [r1, #16]
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	1a5b      	subs	r3, r3, r1
 8004048:	9302      	str	r3, [sp, #8]
 800404a:	6963      	ldr	r3, [r4, #20]
 800404c:	9802      	ldr	r0, [sp, #8]
 800404e:	435d      	muls	r5, r3
 8004050:	0feb      	lsrs	r3, r5, #31
 8004052:	195d      	adds	r5, r3, r5
 8004054:	9b01      	ldr	r3, [sp, #4]
 8004056:	106d      	asrs	r5, r5, #1
 8004058:	3301      	adds	r3, #1
 800405a:	181b      	adds	r3, r3, r0
 800405c:	42ab      	cmp	r3, r5
 800405e:	d900      	bls.n	8004062 <__ssputs_r+0x3e>
 8004060:	001d      	movs	r5, r3
 8004062:	0553      	lsls	r3, r2, #21
 8004064:	d532      	bpl.n	80040cc <__ssputs_r+0xa8>
 8004066:	0029      	movs	r1, r5
 8004068:	0038      	movs	r0, r7
 800406a:	f000 fb31 	bl	80046d0 <_malloc_r>
 800406e:	1e06      	subs	r6, r0, #0
 8004070:	d109      	bne.n	8004086 <__ssputs_r+0x62>
 8004072:	230c      	movs	r3, #12
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	2340      	movs	r3, #64	; 0x40
 8004078:	2001      	movs	r0, #1
 800407a:	89a2      	ldrh	r2, [r4, #12]
 800407c:	4240      	negs	r0, r0
 800407e:	4313      	orrs	r3, r2
 8004080:	81a3      	strh	r3, [r4, #12]
 8004082:	b005      	add	sp, #20
 8004084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004086:	9a02      	ldr	r2, [sp, #8]
 8004088:	6921      	ldr	r1, [r4, #16]
 800408a:	f000 faba 	bl	8004602 <memcpy>
 800408e:	89a3      	ldrh	r3, [r4, #12]
 8004090:	4a14      	ldr	r2, [pc, #80]	; (80040e4 <__ssputs_r+0xc0>)
 8004092:	401a      	ands	r2, r3
 8004094:	2380      	movs	r3, #128	; 0x80
 8004096:	4313      	orrs	r3, r2
 8004098:	81a3      	strh	r3, [r4, #12]
 800409a:	9b02      	ldr	r3, [sp, #8]
 800409c:	6126      	str	r6, [r4, #16]
 800409e:	18f6      	adds	r6, r6, r3
 80040a0:	6026      	str	r6, [r4, #0]
 80040a2:	6165      	str	r5, [r4, #20]
 80040a4:	9e01      	ldr	r6, [sp, #4]
 80040a6:	1aed      	subs	r5, r5, r3
 80040a8:	60a5      	str	r5, [r4, #8]
 80040aa:	9b01      	ldr	r3, [sp, #4]
 80040ac:	429e      	cmp	r6, r3
 80040ae:	d900      	bls.n	80040b2 <__ssputs_r+0x8e>
 80040b0:	9e01      	ldr	r6, [sp, #4]
 80040b2:	0032      	movs	r2, r6
 80040b4:	9903      	ldr	r1, [sp, #12]
 80040b6:	6820      	ldr	r0, [r4, #0]
 80040b8:	f000 faac 	bl	8004614 <memmove>
 80040bc:	68a3      	ldr	r3, [r4, #8]
 80040be:	2000      	movs	r0, #0
 80040c0:	1b9b      	subs	r3, r3, r6
 80040c2:	60a3      	str	r3, [r4, #8]
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	199e      	adds	r6, r3, r6
 80040c8:	6026      	str	r6, [r4, #0]
 80040ca:	e7da      	b.n	8004082 <__ssputs_r+0x5e>
 80040cc:	002a      	movs	r2, r5
 80040ce:	0038      	movs	r0, r7
 80040d0:	f000 fb5c 	bl	800478c <_realloc_r>
 80040d4:	1e06      	subs	r6, r0, #0
 80040d6:	d1e0      	bne.n	800409a <__ssputs_r+0x76>
 80040d8:	0038      	movs	r0, r7
 80040da:	6921      	ldr	r1, [r4, #16]
 80040dc:	f000 faae 	bl	800463c <_free_r>
 80040e0:	e7c7      	b.n	8004072 <__ssputs_r+0x4e>
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	fffffb7f 	.word	0xfffffb7f

080040e8 <_svfiprintf_r>:
 80040e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ea:	b0a1      	sub	sp, #132	; 0x84
 80040ec:	9003      	str	r0, [sp, #12]
 80040ee:	001d      	movs	r5, r3
 80040f0:	898b      	ldrh	r3, [r1, #12]
 80040f2:	000f      	movs	r7, r1
 80040f4:	0016      	movs	r6, r2
 80040f6:	061b      	lsls	r3, r3, #24
 80040f8:	d511      	bpl.n	800411e <_svfiprintf_r+0x36>
 80040fa:	690b      	ldr	r3, [r1, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10e      	bne.n	800411e <_svfiprintf_r+0x36>
 8004100:	2140      	movs	r1, #64	; 0x40
 8004102:	f000 fae5 	bl	80046d0 <_malloc_r>
 8004106:	6038      	str	r0, [r7, #0]
 8004108:	6138      	str	r0, [r7, #16]
 800410a:	2800      	cmp	r0, #0
 800410c:	d105      	bne.n	800411a <_svfiprintf_r+0x32>
 800410e:	230c      	movs	r3, #12
 8004110:	9a03      	ldr	r2, [sp, #12]
 8004112:	3801      	subs	r0, #1
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	b021      	add	sp, #132	; 0x84
 8004118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800411a:	2340      	movs	r3, #64	; 0x40
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	2300      	movs	r3, #0
 8004120:	ac08      	add	r4, sp, #32
 8004122:	6163      	str	r3, [r4, #20]
 8004124:	3320      	adds	r3, #32
 8004126:	7663      	strb	r3, [r4, #25]
 8004128:	3310      	adds	r3, #16
 800412a:	76a3      	strb	r3, [r4, #26]
 800412c:	9507      	str	r5, [sp, #28]
 800412e:	0035      	movs	r5, r6
 8004130:	782b      	ldrb	r3, [r5, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <_svfiprintf_r+0x52>
 8004136:	2b25      	cmp	r3, #37	; 0x25
 8004138:	d147      	bne.n	80041ca <_svfiprintf_r+0xe2>
 800413a:	1bab      	subs	r3, r5, r6
 800413c:	9305      	str	r3, [sp, #20]
 800413e:	42b5      	cmp	r5, r6
 8004140:	d00c      	beq.n	800415c <_svfiprintf_r+0x74>
 8004142:	0032      	movs	r2, r6
 8004144:	0039      	movs	r1, r7
 8004146:	9803      	ldr	r0, [sp, #12]
 8004148:	f7ff ff6c 	bl	8004024 <__ssputs_r>
 800414c:	1c43      	adds	r3, r0, #1
 800414e:	d100      	bne.n	8004152 <_svfiprintf_r+0x6a>
 8004150:	e0ae      	b.n	80042b0 <_svfiprintf_r+0x1c8>
 8004152:	6962      	ldr	r2, [r4, #20]
 8004154:	9b05      	ldr	r3, [sp, #20]
 8004156:	4694      	mov	ip, r2
 8004158:	4463      	add	r3, ip
 800415a:	6163      	str	r3, [r4, #20]
 800415c:	782b      	ldrb	r3, [r5, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d100      	bne.n	8004164 <_svfiprintf_r+0x7c>
 8004162:	e0a5      	b.n	80042b0 <_svfiprintf_r+0x1c8>
 8004164:	2201      	movs	r2, #1
 8004166:	2300      	movs	r3, #0
 8004168:	4252      	negs	r2, r2
 800416a:	6062      	str	r2, [r4, #4]
 800416c:	a904      	add	r1, sp, #16
 800416e:	3254      	adds	r2, #84	; 0x54
 8004170:	1852      	adds	r2, r2, r1
 8004172:	1c6e      	adds	r6, r5, #1
 8004174:	6023      	str	r3, [r4, #0]
 8004176:	60e3      	str	r3, [r4, #12]
 8004178:	60a3      	str	r3, [r4, #8]
 800417a:	7013      	strb	r3, [r2, #0]
 800417c:	65a3      	str	r3, [r4, #88]	; 0x58
 800417e:	2205      	movs	r2, #5
 8004180:	7831      	ldrb	r1, [r6, #0]
 8004182:	4854      	ldr	r0, [pc, #336]	; (80042d4 <_svfiprintf_r+0x1ec>)
 8004184:	f000 fa32 	bl	80045ec <memchr>
 8004188:	1c75      	adds	r5, r6, #1
 800418a:	2800      	cmp	r0, #0
 800418c:	d11f      	bne.n	80041ce <_svfiprintf_r+0xe6>
 800418e:	6822      	ldr	r2, [r4, #0]
 8004190:	06d3      	lsls	r3, r2, #27
 8004192:	d504      	bpl.n	800419e <_svfiprintf_r+0xb6>
 8004194:	2353      	movs	r3, #83	; 0x53
 8004196:	a904      	add	r1, sp, #16
 8004198:	185b      	adds	r3, r3, r1
 800419a:	2120      	movs	r1, #32
 800419c:	7019      	strb	r1, [r3, #0]
 800419e:	0713      	lsls	r3, r2, #28
 80041a0:	d504      	bpl.n	80041ac <_svfiprintf_r+0xc4>
 80041a2:	2353      	movs	r3, #83	; 0x53
 80041a4:	a904      	add	r1, sp, #16
 80041a6:	185b      	adds	r3, r3, r1
 80041a8:	212b      	movs	r1, #43	; 0x2b
 80041aa:	7019      	strb	r1, [r3, #0]
 80041ac:	7833      	ldrb	r3, [r6, #0]
 80041ae:	2b2a      	cmp	r3, #42	; 0x2a
 80041b0:	d016      	beq.n	80041e0 <_svfiprintf_r+0xf8>
 80041b2:	0035      	movs	r5, r6
 80041b4:	2100      	movs	r1, #0
 80041b6:	200a      	movs	r0, #10
 80041b8:	68e3      	ldr	r3, [r4, #12]
 80041ba:	782a      	ldrb	r2, [r5, #0]
 80041bc:	1c6e      	adds	r6, r5, #1
 80041be:	3a30      	subs	r2, #48	; 0x30
 80041c0:	2a09      	cmp	r2, #9
 80041c2:	d94e      	bls.n	8004262 <_svfiprintf_r+0x17a>
 80041c4:	2900      	cmp	r1, #0
 80041c6:	d111      	bne.n	80041ec <_svfiprintf_r+0x104>
 80041c8:	e017      	b.n	80041fa <_svfiprintf_r+0x112>
 80041ca:	3501      	adds	r5, #1
 80041cc:	e7b0      	b.n	8004130 <_svfiprintf_r+0x48>
 80041ce:	4b41      	ldr	r3, [pc, #260]	; (80042d4 <_svfiprintf_r+0x1ec>)
 80041d0:	6822      	ldr	r2, [r4, #0]
 80041d2:	1ac0      	subs	r0, r0, r3
 80041d4:	2301      	movs	r3, #1
 80041d6:	4083      	lsls	r3, r0
 80041d8:	4313      	orrs	r3, r2
 80041da:	002e      	movs	r6, r5
 80041dc:	6023      	str	r3, [r4, #0]
 80041de:	e7ce      	b.n	800417e <_svfiprintf_r+0x96>
 80041e0:	9b07      	ldr	r3, [sp, #28]
 80041e2:	1d19      	adds	r1, r3, #4
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	9107      	str	r1, [sp, #28]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	db01      	blt.n	80041f0 <_svfiprintf_r+0x108>
 80041ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80041ee:	e004      	b.n	80041fa <_svfiprintf_r+0x112>
 80041f0:	425b      	negs	r3, r3
 80041f2:	60e3      	str	r3, [r4, #12]
 80041f4:	2302      	movs	r3, #2
 80041f6:	4313      	orrs	r3, r2
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	782b      	ldrb	r3, [r5, #0]
 80041fc:	2b2e      	cmp	r3, #46	; 0x2e
 80041fe:	d10a      	bne.n	8004216 <_svfiprintf_r+0x12e>
 8004200:	786b      	ldrb	r3, [r5, #1]
 8004202:	2b2a      	cmp	r3, #42	; 0x2a
 8004204:	d135      	bne.n	8004272 <_svfiprintf_r+0x18a>
 8004206:	9b07      	ldr	r3, [sp, #28]
 8004208:	3502      	adds	r5, #2
 800420a:	1d1a      	adds	r2, r3, #4
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	9207      	str	r2, [sp, #28]
 8004210:	2b00      	cmp	r3, #0
 8004212:	db2b      	blt.n	800426c <_svfiprintf_r+0x184>
 8004214:	9309      	str	r3, [sp, #36]	; 0x24
 8004216:	4e30      	ldr	r6, [pc, #192]	; (80042d8 <_svfiprintf_r+0x1f0>)
 8004218:	2203      	movs	r2, #3
 800421a:	0030      	movs	r0, r6
 800421c:	7829      	ldrb	r1, [r5, #0]
 800421e:	f000 f9e5 	bl	80045ec <memchr>
 8004222:	2800      	cmp	r0, #0
 8004224:	d006      	beq.n	8004234 <_svfiprintf_r+0x14c>
 8004226:	2340      	movs	r3, #64	; 0x40
 8004228:	1b80      	subs	r0, r0, r6
 800422a:	4083      	lsls	r3, r0
 800422c:	6822      	ldr	r2, [r4, #0]
 800422e:	3501      	adds	r5, #1
 8004230:	4313      	orrs	r3, r2
 8004232:	6023      	str	r3, [r4, #0]
 8004234:	7829      	ldrb	r1, [r5, #0]
 8004236:	2206      	movs	r2, #6
 8004238:	4828      	ldr	r0, [pc, #160]	; (80042dc <_svfiprintf_r+0x1f4>)
 800423a:	1c6e      	adds	r6, r5, #1
 800423c:	7621      	strb	r1, [r4, #24]
 800423e:	f000 f9d5 	bl	80045ec <memchr>
 8004242:	2800      	cmp	r0, #0
 8004244:	d03c      	beq.n	80042c0 <_svfiprintf_r+0x1d8>
 8004246:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <_svfiprintf_r+0x1f8>)
 8004248:	2b00      	cmp	r3, #0
 800424a:	d125      	bne.n	8004298 <_svfiprintf_r+0x1b0>
 800424c:	2207      	movs	r2, #7
 800424e:	9b07      	ldr	r3, [sp, #28]
 8004250:	3307      	adds	r3, #7
 8004252:	4393      	bics	r3, r2
 8004254:	3308      	adds	r3, #8
 8004256:	9307      	str	r3, [sp, #28]
 8004258:	6963      	ldr	r3, [r4, #20]
 800425a:	9a04      	ldr	r2, [sp, #16]
 800425c:	189b      	adds	r3, r3, r2
 800425e:	6163      	str	r3, [r4, #20]
 8004260:	e765      	b.n	800412e <_svfiprintf_r+0x46>
 8004262:	4343      	muls	r3, r0
 8004264:	0035      	movs	r5, r6
 8004266:	2101      	movs	r1, #1
 8004268:	189b      	adds	r3, r3, r2
 800426a:	e7a6      	b.n	80041ba <_svfiprintf_r+0xd2>
 800426c:	2301      	movs	r3, #1
 800426e:	425b      	negs	r3, r3
 8004270:	e7d0      	b.n	8004214 <_svfiprintf_r+0x12c>
 8004272:	2300      	movs	r3, #0
 8004274:	200a      	movs	r0, #10
 8004276:	001a      	movs	r2, r3
 8004278:	3501      	adds	r5, #1
 800427a:	6063      	str	r3, [r4, #4]
 800427c:	7829      	ldrb	r1, [r5, #0]
 800427e:	1c6e      	adds	r6, r5, #1
 8004280:	3930      	subs	r1, #48	; 0x30
 8004282:	2909      	cmp	r1, #9
 8004284:	d903      	bls.n	800428e <_svfiprintf_r+0x1a6>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0c5      	beq.n	8004216 <_svfiprintf_r+0x12e>
 800428a:	9209      	str	r2, [sp, #36]	; 0x24
 800428c:	e7c3      	b.n	8004216 <_svfiprintf_r+0x12e>
 800428e:	4342      	muls	r2, r0
 8004290:	0035      	movs	r5, r6
 8004292:	2301      	movs	r3, #1
 8004294:	1852      	adds	r2, r2, r1
 8004296:	e7f1      	b.n	800427c <_svfiprintf_r+0x194>
 8004298:	ab07      	add	r3, sp, #28
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	003a      	movs	r2, r7
 800429e:	0021      	movs	r1, r4
 80042a0:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <_svfiprintf_r+0x1fc>)
 80042a2:	9803      	ldr	r0, [sp, #12]
 80042a4:	e000      	b.n	80042a8 <_svfiprintf_r+0x1c0>
 80042a6:	bf00      	nop
 80042a8:	9004      	str	r0, [sp, #16]
 80042aa:	9b04      	ldr	r3, [sp, #16]
 80042ac:	3301      	adds	r3, #1
 80042ae:	d1d3      	bne.n	8004258 <_svfiprintf_r+0x170>
 80042b0:	89bb      	ldrh	r3, [r7, #12]
 80042b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80042b4:	065b      	lsls	r3, r3, #25
 80042b6:	d400      	bmi.n	80042ba <_svfiprintf_r+0x1d2>
 80042b8:	e72d      	b.n	8004116 <_svfiprintf_r+0x2e>
 80042ba:	2001      	movs	r0, #1
 80042bc:	4240      	negs	r0, r0
 80042be:	e72a      	b.n	8004116 <_svfiprintf_r+0x2e>
 80042c0:	ab07      	add	r3, sp, #28
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	003a      	movs	r2, r7
 80042c6:	0021      	movs	r1, r4
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <_svfiprintf_r+0x1fc>)
 80042ca:	9803      	ldr	r0, [sp, #12]
 80042cc:	f000 f87c 	bl	80043c8 <_printf_i>
 80042d0:	e7ea      	b.n	80042a8 <_svfiprintf_r+0x1c0>
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	08004914 	.word	0x08004914
 80042d8:	0800491a 	.word	0x0800491a
 80042dc:	0800491e 	.word	0x0800491e
 80042e0:	00000000 	.word	0x00000000
 80042e4:	08004025 	.word	0x08004025

080042e8 <_printf_common>:
 80042e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042ea:	0015      	movs	r5, r2
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	688a      	ldr	r2, [r1, #8]
 80042f0:	690b      	ldr	r3, [r1, #16]
 80042f2:	000c      	movs	r4, r1
 80042f4:	9000      	str	r0, [sp, #0]
 80042f6:	4293      	cmp	r3, r2
 80042f8:	da00      	bge.n	80042fc <_printf_common+0x14>
 80042fa:	0013      	movs	r3, r2
 80042fc:	0022      	movs	r2, r4
 80042fe:	602b      	str	r3, [r5, #0]
 8004300:	3243      	adds	r2, #67	; 0x43
 8004302:	7812      	ldrb	r2, [r2, #0]
 8004304:	2a00      	cmp	r2, #0
 8004306:	d001      	beq.n	800430c <_printf_common+0x24>
 8004308:	3301      	adds	r3, #1
 800430a:	602b      	str	r3, [r5, #0]
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	069b      	lsls	r3, r3, #26
 8004310:	d502      	bpl.n	8004318 <_printf_common+0x30>
 8004312:	682b      	ldr	r3, [r5, #0]
 8004314:	3302      	adds	r3, #2
 8004316:	602b      	str	r3, [r5, #0]
 8004318:	6822      	ldr	r2, [r4, #0]
 800431a:	2306      	movs	r3, #6
 800431c:	0017      	movs	r7, r2
 800431e:	401f      	ands	r7, r3
 8004320:	421a      	tst	r2, r3
 8004322:	d027      	beq.n	8004374 <_printf_common+0x8c>
 8004324:	0023      	movs	r3, r4
 8004326:	3343      	adds	r3, #67	; 0x43
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	1e5a      	subs	r2, r3, #1
 800432c:	4193      	sbcs	r3, r2
 800432e:	6822      	ldr	r2, [r4, #0]
 8004330:	0692      	lsls	r2, r2, #26
 8004332:	d430      	bmi.n	8004396 <_printf_common+0xae>
 8004334:	0022      	movs	r2, r4
 8004336:	9901      	ldr	r1, [sp, #4]
 8004338:	9800      	ldr	r0, [sp, #0]
 800433a:	9e08      	ldr	r6, [sp, #32]
 800433c:	3243      	adds	r2, #67	; 0x43
 800433e:	47b0      	blx	r6
 8004340:	1c43      	adds	r3, r0, #1
 8004342:	d025      	beq.n	8004390 <_printf_common+0xa8>
 8004344:	2306      	movs	r3, #6
 8004346:	6820      	ldr	r0, [r4, #0]
 8004348:	682a      	ldr	r2, [r5, #0]
 800434a:	68e1      	ldr	r1, [r4, #12]
 800434c:	2500      	movs	r5, #0
 800434e:	4003      	ands	r3, r0
 8004350:	2b04      	cmp	r3, #4
 8004352:	d103      	bne.n	800435c <_printf_common+0x74>
 8004354:	1a8d      	subs	r5, r1, r2
 8004356:	43eb      	mvns	r3, r5
 8004358:	17db      	asrs	r3, r3, #31
 800435a:	401d      	ands	r5, r3
 800435c:	68a3      	ldr	r3, [r4, #8]
 800435e:	6922      	ldr	r2, [r4, #16]
 8004360:	4293      	cmp	r3, r2
 8004362:	dd01      	ble.n	8004368 <_printf_common+0x80>
 8004364:	1a9b      	subs	r3, r3, r2
 8004366:	18ed      	adds	r5, r5, r3
 8004368:	2700      	movs	r7, #0
 800436a:	42bd      	cmp	r5, r7
 800436c:	d120      	bne.n	80043b0 <_printf_common+0xc8>
 800436e:	2000      	movs	r0, #0
 8004370:	e010      	b.n	8004394 <_printf_common+0xac>
 8004372:	3701      	adds	r7, #1
 8004374:	68e3      	ldr	r3, [r4, #12]
 8004376:	682a      	ldr	r2, [r5, #0]
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	42bb      	cmp	r3, r7
 800437c:	ddd2      	ble.n	8004324 <_printf_common+0x3c>
 800437e:	0022      	movs	r2, r4
 8004380:	2301      	movs	r3, #1
 8004382:	9901      	ldr	r1, [sp, #4]
 8004384:	9800      	ldr	r0, [sp, #0]
 8004386:	9e08      	ldr	r6, [sp, #32]
 8004388:	3219      	adds	r2, #25
 800438a:	47b0      	blx	r6
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	d1f0      	bne.n	8004372 <_printf_common+0x8a>
 8004390:	2001      	movs	r0, #1
 8004392:	4240      	negs	r0, r0
 8004394:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004396:	2030      	movs	r0, #48	; 0x30
 8004398:	18e1      	adds	r1, r4, r3
 800439a:	3143      	adds	r1, #67	; 0x43
 800439c:	7008      	strb	r0, [r1, #0]
 800439e:	0021      	movs	r1, r4
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	3145      	adds	r1, #69	; 0x45
 80043a4:	7809      	ldrb	r1, [r1, #0]
 80043a6:	18a2      	adds	r2, r4, r2
 80043a8:	3243      	adds	r2, #67	; 0x43
 80043aa:	3302      	adds	r3, #2
 80043ac:	7011      	strb	r1, [r2, #0]
 80043ae:	e7c1      	b.n	8004334 <_printf_common+0x4c>
 80043b0:	0022      	movs	r2, r4
 80043b2:	2301      	movs	r3, #1
 80043b4:	9901      	ldr	r1, [sp, #4]
 80043b6:	9800      	ldr	r0, [sp, #0]
 80043b8:	9e08      	ldr	r6, [sp, #32]
 80043ba:	321a      	adds	r2, #26
 80043bc:	47b0      	blx	r6
 80043be:	1c43      	adds	r3, r0, #1
 80043c0:	d0e6      	beq.n	8004390 <_printf_common+0xa8>
 80043c2:	3701      	adds	r7, #1
 80043c4:	e7d1      	b.n	800436a <_printf_common+0x82>
	...

080043c8 <_printf_i>:
 80043c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ca:	b08b      	sub	sp, #44	; 0x2c
 80043cc:	9206      	str	r2, [sp, #24]
 80043ce:	000a      	movs	r2, r1
 80043d0:	3243      	adds	r2, #67	; 0x43
 80043d2:	9307      	str	r3, [sp, #28]
 80043d4:	9005      	str	r0, [sp, #20]
 80043d6:	9204      	str	r2, [sp, #16]
 80043d8:	7e0a      	ldrb	r2, [r1, #24]
 80043da:	000c      	movs	r4, r1
 80043dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80043de:	2a78      	cmp	r2, #120	; 0x78
 80043e0:	d806      	bhi.n	80043f0 <_printf_i+0x28>
 80043e2:	2a62      	cmp	r2, #98	; 0x62
 80043e4:	d808      	bhi.n	80043f8 <_printf_i+0x30>
 80043e6:	2a00      	cmp	r2, #0
 80043e8:	d100      	bne.n	80043ec <_printf_i+0x24>
 80043ea:	e0c0      	b.n	800456e <_printf_i+0x1a6>
 80043ec:	2a58      	cmp	r2, #88	; 0x58
 80043ee:	d052      	beq.n	8004496 <_printf_i+0xce>
 80043f0:	0026      	movs	r6, r4
 80043f2:	3642      	adds	r6, #66	; 0x42
 80043f4:	7032      	strb	r2, [r6, #0]
 80043f6:	e022      	b.n	800443e <_printf_i+0x76>
 80043f8:	0010      	movs	r0, r2
 80043fa:	3863      	subs	r0, #99	; 0x63
 80043fc:	2815      	cmp	r0, #21
 80043fe:	d8f7      	bhi.n	80043f0 <_printf_i+0x28>
 8004400:	f7fb fe8a 	bl	8000118 <__gnu_thumb1_case_shi>
 8004404:	001f0016 	.word	0x001f0016
 8004408:	fff6fff6 	.word	0xfff6fff6
 800440c:	fff6fff6 	.word	0xfff6fff6
 8004410:	fff6001f 	.word	0xfff6001f
 8004414:	fff6fff6 	.word	0xfff6fff6
 8004418:	00a8fff6 	.word	0x00a8fff6
 800441c:	009a0036 	.word	0x009a0036
 8004420:	fff6fff6 	.word	0xfff6fff6
 8004424:	fff600b9 	.word	0xfff600b9
 8004428:	fff60036 	.word	0xfff60036
 800442c:	009efff6 	.word	0x009efff6
 8004430:	0026      	movs	r6, r4
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	3642      	adds	r6, #66	; 0x42
 8004436:	1d11      	adds	r1, r2, #4
 8004438:	6019      	str	r1, [r3, #0]
 800443a:	6813      	ldr	r3, [r2, #0]
 800443c:	7033      	strb	r3, [r6, #0]
 800443e:	2301      	movs	r3, #1
 8004440:	e0a7      	b.n	8004592 <_printf_i+0x1ca>
 8004442:	6808      	ldr	r0, [r1, #0]
 8004444:	6819      	ldr	r1, [r3, #0]
 8004446:	1d0a      	adds	r2, r1, #4
 8004448:	0605      	lsls	r5, r0, #24
 800444a:	d50b      	bpl.n	8004464 <_printf_i+0x9c>
 800444c:	680d      	ldr	r5, [r1, #0]
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	2d00      	cmp	r5, #0
 8004452:	da03      	bge.n	800445c <_printf_i+0x94>
 8004454:	232d      	movs	r3, #45	; 0x2d
 8004456:	9a04      	ldr	r2, [sp, #16]
 8004458:	426d      	negs	r5, r5
 800445a:	7013      	strb	r3, [r2, #0]
 800445c:	4b61      	ldr	r3, [pc, #388]	; (80045e4 <_printf_i+0x21c>)
 800445e:	270a      	movs	r7, #10
 8004460:	9303      	str	r3, [sp, #12]
 8004462:	e032      	b.n	80044ca <_printf_i+0x102>
 8004464:	680d      	ldr	r5, [r1, #0]
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	0641      	lsls	r1, r0, #25
 800446a:	d5f1      	bpl.n	8004450 <_printf_i+0x88>
 800446c:	b22d      	sxth	r5, r5
 800446e:	e7ef      	b.n	8004450 <_printf_i+0x88>
 8004470:	680d      	ldr	r5, [r1, #0]
 8004472:	6819      	ldr	r1, [r3, #0]
 8004474:	1d08      	adds	r0, r1, #4
 8004476:	6018      	str	r0, [r3, #0]
 8004478:	062e      	lsls	r6, r5, #24
 800447a:	d501      	bpl.n	8004480 <_printf_i+0xb8>
 800447c:	680d      	ldr	r5, [r1, #0]
 800447e:	e003      	b.n	8004488 <_printf_i+0xc0>
 8004480:	066d      	lsls	r5, r5, #25
 8004482:	d5fb      	bpl.n	800447c <_printf_i+0xb4>
 8004484:	680d      	ldr	r5, [r1, #0]
 8004486:	b2ad      	uxth	r5, r5
 8004488:	4b56      	ldr	r3, [pc, #344]	; (80045e4 <_printf_i+0x21c>)
 800448a:	270a      	movs	r7, #10
 800448c:	9303      	str	r3, [sp, #12]
 800448e:	2a6f      	cmp	r2, #111	; 0x6f
 8004490:	d117      	bne.n	80044c2 <_printf_i+0xfa>
 8004492:	2708      	movs	r7, #8
 8004494:	e015      	b.n	80044c2 <_printf_i+0xfa>
 8004496:	3145      	adds	r1, #69	; 0x45
 8004498:	700a      	strb	r2, [r1, #0]
 800449a:	4a52      	ldr	r2, [pc, #328]	; (80045e4 <_printf_i+0x21c>)
 800449c:	9203      	str	r2, [sp, #12]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	6821      	ldr	r1, [r4, #0]
 80044a2:	ca20      	ldmia	r2!, {r5}
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	0608      	lsls	r0, r1, #24
 80044a8:	d550      	bpl.n	800454c <_printf_i+0x184>
 80044aa:	07cb      	lsls	r3, r1, #31
 80044ac:	d502      	bpl.n	80044b4 <_printf_i+0xec>
 80044ae:	2320      	movs	r3, #32
 80044b0:	4319      	orrs	r1, r3
 80044b2:	6021      	str	r1, [r4, #0]
 80044b4:	2710      	movs	r7, #16
 80044b6:	2d00      	cmp	r5, #0
 80044b8:	d103      	bne.n	80044c2 <_printf_i+0xfa>
 80044ba:	2320      	movs	r3, #32
 80044bc:	6822      	ldr	r2, [r4, #0]
 80044be:	439a      	bics	r2, r3
 80044c0:	6022      	str	r2, [r4, #0]
 80044c2:	0023      	movs	r3, r4
 80044c4:	2200      	movs	r2, #0
 80044c6:	3343      	adds	r3, #67	; 0x43
 80044c8:	701a      	strb	r2, [r3, #0]
 80044ca:	6863      	ldr	r3, [r4, #4]
 80044cc:	60a3      	str	r3, [r4, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	db03      	blt.n	80044da <_printf_i+0x112>
 80044d2:	2204      	movs	r2, #4
 80044d4:	6821      	ldr	r1, [r4, #0]
 80044d6:	4391      	bics	r1, r2
 80044d8:	6021      	str	r1, [r4, #0]
 80044da:	2d00      	cmp	r5, #0
 80044dc:	d102      	bne.n	80044e4 <_printf_i+0x11c>
 80044de:	9e04      	ldr	r6, [sp, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00c      	beq.n	80044fe <_printf_i+0x136>
 80044e4:	9e04      	ldr	r6, [sp, #16]
 80044e6:	0028      	movs	r0, r5
 80044e8:	0039      	movs	r1, r7
 80044ea:	f7fb fea5 	bl	8000238 <__aeabi_uidivmod>
 80044ee:	9b03      	ldr	r3, [sp, #12]
 80044f0:	3e01      	subs	r6, #1
 80044f2:	5c5b      	ldrb	r3, [r3, r1]
 80044f4:	7033      	strb	r3, [r6, #0]
 80044f6:	002b      	movs	r3, r5
 80044f8:	0005      	movs	r5, r0
 80044fa:	429f      	cmp	r7, r3
 80044fc:	d9f3      	bls.n	80044e6 <_printf_i+0x11e>
 80044fe:	2f08      	cmp	r7, #8
 8004500:	d109      	bne.n	8004516 <_printf_i+0x14e>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	07db      	lsls	r3, r3, #31
 8004506:	d506      	bpl.n	8004516 <_printf_i+0x14e>
 8004508:	6863      	ldr	r3, [r4, #4]
 800450a:	6922      	ldr	r2, [r4, #16]
 800450c:	4293      	cmp	r3, r2
 800450e:	dc02      	bgt.n	8004516 <_printf_i+0x14e>
 8004510:	2330      	movs	r3, #48	; 0x30
 8004512:	3e01      	subs	r6, #1
 8004514:	7033      	strb	r3, [r6, #0]
 8004516:	9b04      	ldr	r3, [sp, #16]
 8004518:	1b9b      	subs	r3, r3, r6
 800451a:	6123      	str	r3, [r4, #16]
 800451c:	9b07      	ldr	r3, [sp, #28]
 800451e:	0021      	movs	r1, r4
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	9805      	ldr	r0, [sp, #20]
 8004524:	9b06      	ldr	r3, [sp, #24]
 8004526:	aa09      	add	r2, sp, #36	; 0x24
 8004528:	f7ff fede 	bl	80042e8 <_printf_common>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	d135      	bne.n	800459c <_printf_i+0x1d4>
 8004530:	2001      	movs	r0, #1
 8004532:	4240      	negs	r0, r0
 8004534:	b00b      	add	sp, #44	; 0x2c
 8004536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004538:	2220      	movs	r2, #32
 800453a:	6809      	ldr	r1, [r1, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	6022      	str	r2, [r4, #0]
 8004540:	0022      	movs	r2, r4
 8004542:	2178      	movs	r1, #120	; 0x78
 8004544:	3245      	adds	r2, #69	; 0x45
 8004546:	7011      	strb	r1, [r2, #0]
 8004548:	4a27      	ldr	r2, [pc, #156]	; (80045e8 <_printf_i+0x220>)
 800454a:	e7a7      	b.n	800449c <_printf_i+0xd4>
 800454c:	0648      	lsls	r0, r1, #25
 800454e:	d5ac      	bpl.n	80044aa <_printf_i+0xe2>
 8004550:	b2ad      	uxth	r5, r5
 8004552:	e7aa      	b.n	80044aa <_printf_i+0xe2>
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	680d      	ldr	r5, [r1, #0]
 8004558:	1d10      	adds	r0, r2, #4
 800455a:	6949      	ldr	r1, [r1, #20]
 800455c:	6018      	str	r0, [r3, #0]
 800455e:	6813      	ldr	r3, [r2, #0]
 8004560:	062e      	lsls	r6, r5, #24
 8004562:	d501      	bpl.n	8004568 <_printf_i+0x1a0>
 8004564:	6019      	str	r1, [r3, #0]
 8004566:	e002      	b.n	800456e <_printf_i+0x1a6>
 8004568:	066d      	lsls	r5, r5, #25
 800456a:	d5fb      	bpl.n	8004564 <_printf_i+0x19c>
 800456c:	8019      	strh	r1, [r3, #0]
 800456e:	2300      	movs	r3, #0
 8004570:	9e04      	ldr	r6, [sp, #16]
 8004572:	6123      	str	r3, [r4, #16]
 8004574:	e7d2      	b.n	800451c <_printf_i+0x154>
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	1d11      	adds	r1, r2, #4
 800457a:	6019      	str	r1, [r3, #0]
 800457c:	6816      	ldr	r6, [r2, #0]
 800457e:	2100      	movs	r1, #0
 8004580:	0030      	movs	r0, r6
 8004582:	6862      	ldr	r2, [r4, #4]
 8004584:	f000 f832 	bl	80045ec <memchr>
 8004588:	2800      	cmp	r0, #0
 800458a:	d001      	beq.n	8004590 <_printf_i+0x1c8>
 800458c:	1b80      	subs	r0, r0, r6
 800458e:	6060      	str	r0, [r4, #4]
 8004590:	6863      	ldr	r3, [r4, #4]
 8004592:	6123      	str	r3, [r4, #16]
 8004594:	2300      	movs	r3, #0
 8004596:	9a04      	ldr	r2, [sp, #16]
 8004598:	7013      	strb	r3, [r2, #0]
 800459a:	e7bf      	b.n	800451c <_printf_i+0x154>
 800459c:	6923      	ldr	r3, [r4, #16]
 800459e:	0032      	movs	r2, r6
 80045a0:	9906      	ldr	r1, [sp, #24]
 80045a2:	9805      	ldr	r0, [sp, #20]
 80045a4:	9d07      	ldr	r5, [sp, #28]
 80045a6:	47a8      	blx	r5
 80045a8:	1c43      	adds	r3, r0, #1
 80045aa:	d0c1      	beq.n	8004530 <_printf_i+0x168>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	079b      	lsls	r3, r3, #30
 80045b0:	d415      	bmi.n	80045de <_printf_i+0x216>
 80045b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b4:	68e0      	ldr	r0, [r4, #12]
 80045b6:	4298      	cmp	r0, r3
 80045b8:	dabc      	bge.n	8004534 <_printf_i+0x16c>
 80045ba:	0018      	movs	r0, r3
 80045bc:	e7ba      	b.n	8004534 <_printf_i+0x16c>
 80045be:	0022      	movs	r2, r4
 80045c0:	2301      	movs	r3, #1
 80045c2:	9906      	ldr	r1, [sp, #24]
 80045c4:	9805      	ldr	r0, [sp, #20]
 80045c6:	9e07      	ldr	r6, [sp, #28]
 80045c8:	3219      	adds	r2, #25
 80045ca:	47b0      	blx	r6
 80045cc:	1c43      	adds	r3, r0, #1
 80045ce:	d0af      	beq.n	8004530 <_printf_i+0x168>
 80045d0:	3501      	adds	r5, #1
 80045d2:	68e3      	ldr	r3, [r4, #12]
 80045d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	42ab      	cmp	r3, r5
 80045da:	dcf0      	bgt.n	80045be <_printf_i+0x1f6>
 80045dc:	e7e9      	b.n	80045b2 <_printf_i+0x1ea>
 80045de:	2500      	movs	r5, #0
 80045e0:	e7f7      	b.n	80045d2 <_printf_i+0x20a>
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	08004925 	.word	0x08004925
 80045e8:	08004936 	.word	0x08004936

080045ec <memchr>:
 80045ec:	b2c9      	uxtb	r1, r1
 80045ee:	1882      	adds	r2, r0, r2
 80045f0:	4290      	cmp	r0, r2
 80045f2:	d101      	bne.n	80045f8 <memchr+0xc>
 80045f4:	2000      	movs	r0, #0
 80045f6:	4770      	bx	lr
 80045f8:	7803      	ldrb	r3, [r0, #0]
 80045fa:	428b      	cmp	r3, r1
 80045fc:	d0fb      	beq.n	80045f6 <memchr+0xa>
 80045fe:	3001      	adds	r0, #1
 8004600:	e7f6      	b.n	80045f0 <memchr+0x4>

08004602 <memcpy>:
 8004602:	2300      	movs	r3, #0
 8004604:	b510      	push	{r4, lr}
 8004606:	429a      	cmp	r2, r3
 8004608:	d100      	bne.n	800460c <memcpy+0xa>
 800460a:	bd10      	pop	{r4, pc}
 800460c:	5ccc      	ldrb	r4, [r1, r3]
 800460e:	54c4      	strb	r4, [r0, r3]
 8004610:	3301      	adds	r3, #1
 8004612:	e7f8      	b.n	8004606 <memcpy+0x4>

08004614 <memmove>:
 8004614:	b510      	push	{r4, lr}
 8004616:	4288      	cmp	r0, r1
 8004618:	d902      	bls.n	8004620 <memmove+0xc>
 800461a:	188b      	adds	r3, r1, r2
 800461c:	4298      	cmp	r0, r3
 800461e:	d303      	bcc.n	8004628 <memmove+0x14>
 8004620:	2300      	movs	r3, #0
 8004622:	e007      	b.n	8004634 <memmove+0x20>
 8004624:	5c8b      	ldrb	r3, [r1, r2]
 8004626:	5483      	strb	r3, [r0, r2]
 8004628:	3a01      	subs	r2, #1
 800462a:	d2fb      	bcs.n	8004624 <memmove+0x10>
 800462c:	bd10      	pop	{r4, pc}
 800462e:	5ccc      	ldrb	r4, [r1, r3]
 8004630:	54c4      	strb	r4, [r0, r3]
 8004632:	3301      	adds	r3, #1
 8004634:	429a      	cmp	r2, r3
 8004636:	d1fa      	bne.n	800462e <memmove+0x1a>
 8004638:	e7f8      	b.n	800462c <memmove+0x18>
	...

0800463c <_free_r>:
 800463c:	b570      	push	{r4, r5, r6, lr}
 800463e:	0005      	movs	r5, r0
 8004640:	2900      	cmp	r1, #0
 8004642:	d010      	beq.n	8004666 <_free_r+0x2a>
 8004644:	1f0c      	subs	r4, r1, #4
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	da00      	bge.n	800464e <_free_r+0x12>
 800464c:	18e4      	adds	r4, r4, r3
 800464e:	0028      	movs	r0, r5
 8004650:	f000 f8d4 	bl	80047fc <__malloc_lock>
 8004654:	4a1d      	ldr	r2, [pc, #116]	; (80046cc <_free_r+0x90>)
 8004656:	6813      	ldr	r3, [r2, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <_free_r+0x2c>
 800465c:	6063      	str	r3, [r4, #4]
 800465e:	6014      	str	r4, [r2, #0]
 8004660:	0028      	movs	r0, r5
 8004662:	f000 f8d3 	bl	800480c <__malloc_unlock>
 8004666:	bd70      	pop	{r4, r5, r6, pc}
 8004668:	42a3      	cmp	r3, r4
 800466a:	d908      	bls.n	800467e <_free_r+0x42>
 800466c:	6821      	ldr	r1, [r4, #0]
 800466e:	1860      	adds	r0, r4, r1
 8004670:	4283      	cmp	r3, r0
 8004672:	d1f3      	bne.n	800465c <_free_r+0x20>
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	1841      	adds	r1, r0, r1
 800467a:	6021      	str	r1, [r4, #0]
 800467c:	e7ee      	b.n	800465c <_free_r+0x20>
 800467e:	001a      	movs	r2, r3
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <_free_r+0x4e>
 8004686:	42a3      	cmp	r3, r4
 8004688:	d9f9      	bls.n	800467e <_free_r+0x42>
 800468a:	6811      	ldr	r1, [r2, #0]
 800468c:	1850      	adds	r0, r2, r1
 800468e:	42a0      	cmp	r0, r4
 8004690:	d10b      	bne.n	80046aa <_free_r+0x6e>
 8004692:	6820      	ldr	r0, [r4, #0]
 8004694:	1809      	adds	r1, r1, r0
 8004696:	1850      	adds	r0, r2, r1
 8004698:	6011      	str	r1, [r2, #0]
 800469a:	4283      	cmp	r3, r0
 800469c:	d1e0      	bne.n	8004660 <_free_r+0x24>
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	1841      	adds	r1, r0, r1
 80046a4:	6011      	str	r1, [r2, #0]
 80046a6:	6053      	str	r3, [r2, #4]
 80046a8:	e7da      	b.n	8004660 <_free_r+0x24>
 80046aa:	42a0      	cmp	r0, r4
 80046ac:	d902      	bls.n	80046b4 <_free_r+0x78>
 80046ae:	230c      	movs	r3, #12
 80046b0:	602b      	str	r3, [r5, #0]
 80046b2:	e7d5      	b.n	8004660 <_free_r+0x24>
 80046b4:	6821      	ldr	r1, [r4, #0]
 80046b6:	1860      	adds	r0, r4, r1
 80046b8:	4283      	cmp	r3, r0
 80046ba:	d103      	bne.n	80046c4 <_free_r+0x88>
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	1841      	adds	r1, r0, r1
 80046c2:	6021      	str	r1, [r4, #0]
 80046c4:	6063      	str	r3, [r4, #4]
 80046c6:	6054      	str	r4, [r2, #4]
 80046c8:	e7ca      	b.n	8004660 <_free_r+0x24>
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	20000230 	.word	0x20000230

080046d0 <_malloc_r>:
 80046d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d2:	2303      	movs	r3, #3
 80046d4:	1ccd      	adds	r5, r1, #3
 80046d6:	439d      	bics	r5, r3
 80046d8:	3508      	adds	r5, #8
 80046da:	0006      	movs	r6, r0
 80046dc:	2d0c      	cmp	r5, #12
 80046de:	d21f      	bcs.n	8004720 <_malloc_r+0x50>
 80046e0:	250c      	movs	r5, #12
 80046e2:	42a9      	cmp	r1, r5
 80046e4:	d81e      	bhi.n	8004724 <_malloc_r+0x54>
 80046e6:	0030      	movs	r0, r6
 80046e8:	f000 f888 	bl	80047fc <__malloc_lock>
 80046ec:	4925      	ldr	r1, [pc, #148]	; (8004784 <_malloc_r+0xb4>)
 80046ee:	680a      	ldr	r2, [r1, #0]
 80046f0:	0014      	movs	r4, r2
 80046f2:	2c00      	cmp	r4, #0
 80046f4:	d11a      	bne.n	800472c <_malloc_r+0x5c>
 80046f6:	4f24      	ldr	r7, [pc, #144]	; (8004788 <_malloc_r+0xb8>)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <_malloc_r+0x38>
 80046fe:	0021      	movs	r1, r4
 8004700:	0030      	movs	r0, r6
 8004702:	f000 f869 	bl	80047d8 <_sbrk_r>
 8004706:	6038      	str	r0, [r7, #0]
 8004708:	0029      	movs	r1, r5
 800470a:	0030      	movs	r0, r6
 800470c:	f000 f864 	bl	80047d8 <_sbrk_r>
 8004710:	1c43      	adds	r3, r0, #1
 8004712:	d12b      	bne.n	800476c <_malloc_r+0x9c>
 8004714:	230c      	movs	r3, #12
 8004716:	0030      	movs	r0, r6
 8004718:	6033      	str	r3, [r6, #0]
 800471a:	f000 f877 	bl	800480c <__malloc_unlock>
 800471e:	e003      	b.n	8004728 <_malloc_r+0x58>
 8004720:	2d00      	cmp	r5, #0
 8004722:	dade      	bge.n	80046e2 <_malloc_r+0x12>
 8004724:	230c      	movs	r3, #12
 8004726:	6033      	str	r3, [r6, #0]
 8004728:	2000      	movs	r0, #0
 800472a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	1b5b      	subs	r3, r3, r5
 8004730:	d419      	bmi.n	8004766 <_malloc_r+0x96>
 8004732:	2b0b      	cmp	r3, #11
 8004734:	d903      	bls.n	800473e <_malloc_r+0x6e>
 8004736:	6023      	str	r3, [r4, #0]
 8004738:	18e4      	adds	r4, r4, r3
 800473a:	6025      	str	r5, [r4, #0]
 800473c:	e003      	b.n	8004746 <_malloc_r+0x76>
 800473e:	6863      	ldr	r3, [r4, #4]
 8004740:	42a2      	cmp	r2, r4
 8004742:	d10e      	bne.n	8004762 <_malloc_r+0x92>
 8004744:	600b      	str	r3, [r1, #0]
 8004746:	0030      	movs	r0, r6
 8004748:	f000 f860 	bl	800480c <__malloc_unlock>
 800474c:	0020      	movs	r0, r4
 800474e:	2207      	movs	r2, #7
 8004750:	300b      	adds	r0, #11
 8004752:	1d23      	adds	r3, r4, #4
 8004754:	4390      	bics	r0, r2
 8004756:	1ac2      	subs	r2, r0, r3
 8004758:	4298      	cmp	r0, r3
 800475a:	d0e6      	beq.n	800472a <_malloc_r+0x5a>
 800475c:	1a1b      	subs	r3, r3, r0
 800475e:	50a3      	str	r3, [r4, r2]
 8004760:	e7e3      	b.n	800472a <_malloc_r+0x5a>
 8004762:	6053      	str	r3, [r2, #4]
 8004764:	e7ef      	b.n	8004746 <_malloc_r+0x76>
 8004766:	0022      	movs	r2, r4
 8004768:	6864      	ldr	r4, [r4, #4]
 800476a:	e7c2      	b.n	80046f2 <_malloc_r+0x22>
 800476c:	2303      	movs	r3, #3
 800476e:	1cc4      	adds	r4, r0, #3
 8004770:	439c      	bics	r4, r3
 8004772:	42a0      	cmp	r0, r4
 8004774:	d0e1      	beq.n	800473a <_malloc_r+0x6a>
 8004776:	1a21      	subs	r1, r4, r0
 8004778:	0030      	movs	r0, r6
 800477a:	f000 f82d 	bl	80047d8 <_sbrk_r>
 800477e:	1c43      	adds	r3, r0, #1
 8004780:	d1db      	bne.n	800473a <_malloc_r+0x6a>
 8004782:	e7c7      	b.n	8004714 <_malloc_r+0x44>
 8004784:	20000230 	.word	0x20000230
 8004788:	20000234 	.word	0x20000234

0800478c <_realloc_r>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	0007      	movs	r7, r0
 8004790:	000d      	movs	r5, r1
 8004792:	0016      	movs	r6, r2
 8004794:	2900      	cmp	r1, #0
 8004796:	d105      	bne.n	80047a4 <_realloc_r+0x18>
 8004798:	0011      	movs	r1, r2
 800479a:	f7ff ff99 	bl	80046d0 <_malloc_r>
 800479e:	0004      	movs	r4, r0
 80047a0:	0020      	movs	r0, r4
 80047a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a4:	2a00      	cmp	r2, #0
 80047a6:	d103      	bne.n	80047b0 <_realloc_r+0x24>
 80047a8:	f7ff ff48 	bl	800463c <_free_r>
 80047ac:	0034      	movs	r4, r6
 80047ae:	e7f7      	b.n	80047a0 <_realloc_r+0x14>
 80047b0:	f000 f834 	bl	800481c <_malloc_usable_size_r>
 80047b4:	002c      	movs	r4, r5
 80047b6:	42b0      	cmp	r0, r6
 80047b8:	d2f2      	bcs.n	80047a0 <_realloc_r+0x14>
 80047ba:	0031      	movs	r1, r6
 80047bc:	0038      	movs	r0, r7
 80047be:	f7ff ff87 	bl	80046d0 <_malloc_r>
 80047c2:	1e04      	subs	r4, r0, #0
 80047c4:	d0ec      	beq.n	80047a0 <_realloc_r+0x14>
 80047c6:	0029      	movs	r1, r5
 80047c8:	0032      	movs	r2, r6
 80047ca:	f7ff ff1a 	bl	8004602 <memcpy>
 80047ce:	0029      	movs	r1, r5
 80047d0:	0038      	movs	r0, r7
 80047d2:	f7ff ff33 	bl	800463c <_free_r>
 80047d6:	e7e3      	b.n	80047a0 <_realloc_r+0x14>

080047d8 <_sbrk_r>:
 80047d8:	2300      	movs	r3, #0
 80047da:	b570      	push	{r4, r5, r6, lr}
 80047dc:	4d06      	ldr	r5, [pc, #24]	; (80047f8 <_sbrk_r+0x20>)
 80047de:	0004      	movs	r4, r0
 80047e0:	0008      	movs	r0, r1
 80047e2:	602b      	str	r3, [r5, #0]
 80047e4:	f7fc fcc8 	bl	8001178 <_sbrk>
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	d103      	bne.n	80047f4 <_sbrk_r+0x1c>
 80047ec:	682b      	ldr	r3, [r5, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d000      	beq.n	80047f4 <_sbrk_r+0x1c>
 80047f2:	6023      	str	r3, [r4, #0]
 80047f4:	bd70      	pop	{r4, r5, r6, pc}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	20000574 	.word	0x20000574

080047fc <__malloc_lock>:
 80047fc:	b510      	push	{r4, lr}
 80047fe:	4802      	ldr	r0, [pc, #8]	; (8004808 <__malloc_lock+0xc>)
 8004800:	f000 f814 	bl	800482c <__retarget_lock_acquire_recursive>
 8004804:	bd10      	pop	{r4, pc}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	2000057c 	.word	0x2000057c

0800480c <__malloc_unlock>:
 800480c:	b510      	push	{r4, lr}
 800480e:	4802      	ldr	r0, [pc, #8]	; (8004818 <__malloc_unlock+0xc>)
 8004810:	f000 f80d 	bl	800482e <__retarget_lock_release_recursive>
 8004814:	bd10      	pop	{r4, pc}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	2000057c 	.word	0x2000057c

0800481c <_malloc_usable_size_r>:
 800481c:	1f0b      	subs	r3, r1, #4
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	1f18      	subs	r0, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	da01      	bge.n	800482a <_malloc_usable_size_r+0xe>
 8004826:	580b      	ldr	r3, [r1, r0]
 8004828:	18c0      	adds	r0, r0, r3
 800482a:	4770      	bx	lr

0800482c <__retarget_lock_acquire_recursive>:
 800482c:	4770      	bx	lr

0800482e <__retarget_lock_release_recursive>:
 800482e:	4770      	bx	lr

08004830 <_init>:
 8004830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004836:	bc08      	pop	{r3}
 8004838:	469e      	mov	lr, r3
 800483a:	4770      	bx	lr

0800483c <_fini>:
 800483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004842:	bc08      	pop	{r3}
 8004844:	469e      	mov	lr, r3
 8004846:	4770      	bx	lr
