
SysBee_Test_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a74  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002b34  08002b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bc4  08002bc4  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  08002bc4  08002bc4  00012bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002bcc  08002bcc  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bcc  08002bcc  00012bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bd0  08002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08002bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000110  08002ce4  00020110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08002ce4  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088c8  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000147e  00000000  00000000  00028a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  00029e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  0002a528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013609  00000000  00000000  0002ab58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a1c  00000000  00000000  0003e161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007944c  00000000  00000000  00046b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bffc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016f4  00000000  00000000  000c001c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000110 	.word	0x20000110
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b1c 	.word	0x08002b1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000114 	.word	0x20000114
 8000104:	08002b1c 	.word	0x08002b1c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049e:	b095      	sub	sp, #84	; 0x54
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f000 fc11 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f9ff 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004aa:	f000 fad3 	bl	8000a54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ae:	f000 faa1 	bl	80009f4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004b2:	f000 fa6f 	bl	8000994 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(xbee_rx_read_index<xbee_rx_write_index){
 80004b6:	4bc4      	ldr	r3, [pc, #784]	; (80007c8 <main+0x32c>)
 80004b8:	781a      	ldrb	r2, [r3, #0]
 80004ba:	4bc4      	ldr	r3, [pc, #784]	; (80007cc <main+0x330>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d2f9      	bcs.n	80004b6 <main+0x1a>
		  uint64_t sum = 0;
 80004c2:	2200      	movs	r2, #0
 80004c4:	2300      	movs	r3, #0
 80004c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80004c8:	64fb      	str	r3, [r7, #76]	; 0x4c
		  static uint8_t multiple_byte_step;

		  switch (state){
 80004ca:	4bc1      	ldr	r3, [pc, #772]	; (80007d0 <main+0x334>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b08      	cmp	r3, #8
 80004d0:	d900      	bls.n	80004d4 <main+0x38>
 80004d2:	e1db      	b.n	800088c <main+0x3f0>
 80004d4:	009a      	lsls	r2, r3, #2
 80004d6:	4bbf      	ldr	r3, [pc, #764]	; (80007d4 <main+0x338>)
 80004d8:	18d3      	adds	r3, r2, r3
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	469f      	mov	pc, r3
			  case idle:
				  if(xbee_rx_buffer[xbee_rx_read_index] == 0x7E) state = frame_length;
 80004de:	4bba      	ldr	r3, [pc, #744]	; (80007c8 <main+0x32c>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	001a      	movs	r2, r3
 80004e4:	4bbc      	ldr	r3, [pc, #752]	; (80007d8 <main+0x33c>)
 80004e6:	5c9b      	ldrb	r3, [r3, r2]
 80004e8:	2b7e      	cmp	r3, #126	; 0x7e
 80004ea:	d000      	beq.n	80004ee <main+0x52>
 80004ec:	e1cd      	b.n	800088a <main+0x3ee>
 80004ee:	4ab8      	ldr	r2, [pc, #736]	; (80007d0 <main+0x334>)
 80004f0:	2301      	movs	r3, #1
 80004f2:	7013      	strb	r3, [r2, #0]
				  /*else if (lora_requested && xbee_rx_buffer[xbee_rx_read_index] == 0xAA){
					  is_coordinator = True;
					  lora_requested = False;
				  }*/
			  break;
 80004f4:	e1c9      	b.n	800088a <main+0x3ee>

			  case frame_length:
				  recieved_frame.length += ((uint16_t)(xbee_rx_buffer[xbee_rx_read_index])) << (8-8*multiple_byte_step) ;
 80004f6:	4bb9      	ldr	r3, [pc, #740]	; (80007dc <main+0x340>)
 80004f8:	8818      	ldrh	r0, [r3, #0]
 80004fa:	4bb3      	ldr	r3, [pc, #716]	; (80007c8 <main+0x32c>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	001a      	movs	r2, r3
 8000500:	4bb5      	ldr	r3, [pc, #724]	; (80007d8 <main+0x33c>)
 8000502:	5c9b      	ldrb	r3, [r3, r2]
 8000504:	0019      	movs	r1, r3
 8000506:	4bb6      	ldr	r3, [pc, #728]	; (80007e0 <main+0x344>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	001a      	movs	r2, r3
 800050c:	2301      	movs	r3, #1
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	4099      	lsls	r1, r3
 8000514:	000b      	movs	r3, r1
 8000516:	b29b      	uxth	r3, r3
 8000518:	18c3      	adds	r3, r0, r3
 800051a:	b29b      	uxth	r3, r3
 800051c:	4aaf      	ldr	r2, [pc, #700]	; (80007dc <main+0x340>)
 800051e:	8013      	strh	r3, [r2, #0]
				  if(multiple_byte_step){
 8000520:	4baf      	ldr	r3, [pc, #700]	; (80007e0 <main+0x344>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d006      	beq.n	8000536 <main+0x9a>
					  multiple_byte_step = 0;
 8000528:	4aad      	ldr	r2, [pc, #692]	; (80007e0 <main+0x344>)
 800052a:	2300      	movs	r3, #0
 800052c:	7013      	strb	r3, [r2, #0]
					  state = frame_type;
 800052e:	4aa8      	ldr	r2, [pc, #672]	; (80007d0 <main+0x334>)
 8000530:	2302      	movs	r3, #2
 8000532:	7013      	strb	r3, [r2, #0]
				  }
				  else{
					  multiple_byte_step++;
				  }
			  break;
 8000534:	e1aa      	b.n	800088c <main+0x3f0>
					  multiple_byte_step++;
 8000536:	4baa      	ldr	r3, [pc, #680]	; (80007e0 <main+0x344>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	b2db      	uxtb	r3, r3
 800053e:	4aa8      	ldr	r2, [pc, #672]	; (80007e0 <main+0x344>)
 8000540:	7013      	strb	r3, [r2, #0]
			  break;
 8000542:	e1a3      	b.n	800088c <main+0x3f0>

			  case frame_type:
				  recieved_frame.type = xbee_rx_buffer[xbee_rx_read_index];
 8000544:	4ba0      	ldr	r3, [pc, #640]	; (80007c8 <main+0x32c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	001a      	movs	r2, r3
 800054a:	4ba3      	ldr	r3, [pc, #652]	; (80007d8 <main+0x33c>)
 800054c:	5c9b      	ldrb	r3, [r3, r2]
 800054e:	4aa3      	ldr	r2, [pc, #652]	; (80007dc <main+0x340>)
 8000550:	7093      	strb	r3, [r2, #2]
				  state = frame_address64;
 8000552:	4a9f      	ldr	r2, [pc, #636]	; (80007d0 <main+0x334>)
 8000554:	2303      	movs	r3, #3
 8000556:	7013      	strb	r3, [r2, #0]
				  multiple_byte_step = 0;
 8000558:	4aa1      	ldr	r2, [pc, #644]	; (80007e0 <main+0x344>)
 800055a:	2300      	movs	r3, #0
 800055c:	7013      	strb	r3, [r2, #0]
			  break;
 800055e:	e195      	b.n	800088c <main+0x3f0>

			  case frame_address64:
				  recieved_frame.address64 += ((uint64_t)xbee_rx_buffer[xbee_rx_read_index]) << (56-8*multiple_byte_step);
 8000560:	4b9e      	ldr	r3, [pc, #632]	; (80007dc <main+0x340>)
 8000562:	6898      	ldr	r0, [r3, #8]
 8000564:	68d9      	ldr	r1, [r3, #12]
 8000566:	4b98      	ldr	r3, [pc, #608]	; (80007c8 <main+0x32c>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	001a      	movs	r2, r3
 800056c:	4b9a      	ldr	r3, [pc, #616]	; (80007d8 <main+0x33c>)
 800056e:	5c9b      	ldrb	r3, [r3, r2]
 8000570:	633b      	str	r3, [r7, #48]	; 0x30
 8000572:	2300      	movs	r3, #0
 8000574:	637b      	str	r3, [r7, #52]	; 0x34
 8000576:	4b9a      	ldr	r3, [pc, #616]	; (80007e0 <main+0x344>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	001a      	movs	r2, r3
 800057c:	2307      	movs	r3, #7
 800057e:	1a9b      	subs	r3, r3, r2
 8000580:	00da      	lsls	r2, r3, #3
 8000582:	0013      	movs	r3, r2
 8000584:	3b20      	subs	r3, #32
 8000586:	2b00      	cmp	r3, #0
 8000588:	db03      	blt.n	8000592 <main+0xf6>
 800058a:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800058c:	409e      	lsls	r6, r3
 800058e:	0035      	movs	r5, r6
 8000590:	e008      	b.n	80005a4 <main+0x108>
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8000598:	40de      	lsrs	r6, r3
 800059a:	0033      	movs	r3, r6
 800059c:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800059e:	4096      	lsls	r6, r2
 80005a0:	0035      	movs	r5, r6
 80005a2:	431d      	orrs	r5, r3
 80005a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005a6:	4093      	lsls	r3, r2
 80005a8:	001c      	movs	r4, r3
 80005aa:	0002      	movs	r2, r0
 80005ac:	000b      	movs	r3, r1
 80005ae:	1912      	adds	r2, r2, r4
 80005b0:	416b      	adcs	r3, r5
 80005b2:	498a      	ldr	r1, [pc, #552]	; (80007dc <main+0x340>)
 80005b4:	608a      	str	r2, [r1, #8]
 80005b6:	60cb      	str	r3, [r1, #12]

				  if(multiple_byte_step == 7){
 80005b8:	4b89      	ldr	r3, [pc, #548]	; (80007e0 <main+0x344>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b07      	cmp	r3, #7
 80005be:	d106      	bne.n	80005ce <main+0x132>
					  state = frame_address16;
 80005c0:	4a83      	ldr	r2, [pc, #524]	; (80007d0 <main+0x334>)
 80005c2:	2304      	movs	r3, #4
 80005c4:	7013      	strb	r3, [r2, #0]
					  multiple_byte_step = 0;
 80005c6:	4a86      	ldr	r2, [pc, #536]	; (80007e0 <main+0x344>)
 80005c8:	2300      	movs	r3, #0
 80005ca:	7013      	strb	r3, [r2, #0]
				  }
				  else multiple_byte_step++;
			  break;
 80005cc:	e15e      	b.n	800088c <main+0x3f0>
				  else multiple_byte_step++;
 80005ce:	4b84      	ldr	r3, [pc, #528]	; (80007e0 <main+0x344>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4a82      	ldr	r2, [pc, #520]	; (80007e0 <main+0x344>)
 80005d8:	7013      	strb	r3, [r2, #0]
			  break;
 80005da:	e157      	b.n	800088c <main+0x3f0>

			  case frame_address16:
				  recieved_frame.type += ((uint16_t)xbee_rx_buffer[xbee_rx_read_index]) << (8-8*multiple_byte_step);
 80005dc:	4b7f      	ldr	r3, [pc, #508]	; (80007dc <main+0x340>)
 80005de:	7898      	ldrb	r0, [r3, #2]
 80005e0:	4b79      	ldr	r3, [pc, #484]	; (80007c8 <main+0x32c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	001a      	movs	r2, r3
 80005e6:	4b7c      	ldr	r3, [pc, #496]	; (80007d8 <main+0x33c>)
 80005e8:	5c9b      	ldrb	r3, [r3, r2]
 80005ea:	0019      	movs	r1, r3
 80005ec:	4b7c      	ldr	r3, [pc, #496]	; (80007e0 <main+0x344>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	001a      	movs	r2, r3
 80005f2:	2301      	movs	r3, #1
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	4099      	lsls	r1, r3
 80005fa:	000b      	movs	r3, r1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	18c3      	adds	r3, r0, r3
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4a76      	ldr	r2, [pc, #472]	; (80007dc <main+0x340>)
 8000604:	7093      	strb	r3, [r2, #2]
				  if(multiple_byte_step == 1){
 8000606:	4b76      	ldr	r3, [pc, #472]	; (80007e0 <main+0x344>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d106      	bne.n	800061c <main+0x180>
					  state = frame_option;
 800060e:	4a70      	ldr	r2, [pc, #448]	; (80007d0 <main+0x334>)
 8000610:	2305      	movs	r3, #5
 8000612:	7013      	strb	r3, [r2, #0]
					  multiple_byte_step = 0;
 8000614:	4a72      	ldr	r2, [pc, #456]	; (80007e0 <main+0x344>)
 8000616:	2300      	movs	r3, #0
 8000618:	7013      	strb	r3, [r2, #0]
				  }
				  else multiple_byte_step++;
			  break;
 800061a:	e137      	b.n	800088c <main+0x3f0>
				  else multiple_byte_step++;
 800061c:	4b70      	ldr	r3, [pc, #448]	; (80007e0 <main+0x344>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4a6e      	ldr	r2, [pc, #440]	; (80007e0 <main+0x344>)
 8000626:	7013      	strb	r3, [r2, #0]
			  break;
 8000628:	e130      	b.n	800088c <main+0x3f0>

			  case frame_option:
				  recieved_frame.option = xbee_rx_buffer[xbee_rx_read_index];
 800062a:	4b67      	ldr	r3, [pc, #412]	; (80007c8 <main+0x32c>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	001a      	movs	r2, r3
 8000630:	4b69      	ldr	r3, [pc, #420]	; (80007d8 <main+0x33c>)
 8000632:	5c9b      	ldrb	r3, [r3, r2]
 8000634:	4a69      	ldr	r2, [pc, #420]	; (80007dc <main+0x340>)
 8000636:	7493      	strb	r3, [r2, #18]
				  state = frame_content;
 8000638:	4a65      	ldr	r2, [pc, #404]	; (80007d0 <main+0x334>)
 800063a:	2306      	movs	r3, #6
 800063c:	7013      	strb	r3, [r2, #0]
			  break;
 800063e:	e125      	b.n	800088c <main+0x3f0>

			  case frame_content:
				  recieved_frame.content[recieved_frame.content_index] = xbee_rx_buffer[xbee_rx_read_index];
 8000640:	4b61      	ldr	r3, [pc, #388]	; (80007c8 <main+0x32c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	0019      	movs	r1, r3
 8000646:	4a65      	ldr	r2, [pc, #404]	; (80007dc <main+0x340>)
 8000648:	2314      	movs	r3, #20
 800064a:	33ff      	adds	r3, #255	; 0xff
 800064c:	5cd3      	ldrb	r3, [r2, r3]
 800064e:	001a      	movs	r2, r3
 8000650:	4b61      	ldr	r3, [pc, #388]	; (80007d8 <main+0x33c>)
 8000652:	5c59      	ldrb	r1, [r3, r1]
 8000654:	4b61      	ldr	r3, [pc, #388]	; (80007dc <main+0x340>)
 8000656:	189a      	adds	r2, r3, r2
 8000658:	1c0b      	adds	r3, r1, #0
 800065a:	74d3      	strb	r3, [r2, #19]
				  if(recieved_frame.content_index == recieved_frame.length-13)
 800065c:	4a5f      	ldr	r2, [pc, #380]	; (80007dc <main+0x340>)
 800065e:	2314      	movs	r3, #20
 8000660:	33ff      	adds	r3, #255	; 0xff
 8000662:	5cd3      	ldrb	r3, [r2, r3]
 8000664:	001a      	movs	r2, r3
 8000666:	4b5d      	ldr	r3, [pc, #372]	; (80007dc <main+0x340>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	3b0d      	subs	r3, #13
 800066c:	429a      	cmp	r2, r3
 800066e:	d103      	bne.n	8000678 <main+0x1dc>
					  state = check_sum;
 8000670:	4a57      	ldr	r2, [pc, #348]	; (80007d0 <main+0x334>)
 8000672:	2307      	movs	r3, #7
 8000674:	7013      	strb	r3, [r2, #0]
				  else
					  recieved_frame.content_index++;
			  break;
 8000676:	e109      	b.n	800088c <main+0x3f0>
					  recieved_frame.content_index++;
 8000678:	4a58      	ldr	r2, [pc, #352]	; (80007dc <main+0x340>)
 800067a:	2314      	movs	r3, #20
 800067c:	33ff      	adds	r3, #255	; 0xff
 800067e:	5cd3      	ldrb	r3, [r2, r3]
 8000680:	3301      	adds	r3, #1
 8000682:	b2d8      	uxtb	r0, r3
 8000684:	4955      	ldr	r1, [pc, #340]	; (80007dc <main+0x340>)
 8000686:	2314      	movs	r3, #20
 8000688:	33ff      	adds	r3, #255	; 0xff
 800068a:	001a      	movs	r2, r3
 800068c:	1c03      	adds	r3, r0, #0
 800068e:	548b      	strb	r3, [r1, r2]
			  break;
 8000690:	e0fc      	b.n	800088c <main+0x3f0>

			  case check_sum:
				  recieved_frame.check_sum = xbee_rx_buffer[xbee_rx_read_index];
 8000692:	4b4d      	ldr	r3, [pc, #308]	; (80007c8 <main+0x32c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	001a      	movs	r2, r3
 8000698:	4b4f      	ldr	r3, [pc, #316]	; (80007d8 <main+0x33c>)
 800069a:	5c98      	ldrb	r0, [r3, r2]
 800069c:	494f      	ldr	r1, [pc, #316]	; (80007dc <main+0x340>)
 800069e:	238a      	movs	r3, #138	; 0x8a
 80006a0:	005a      	lsls	r2, r3, #1
 80006a2:	1c03      	adds	r3, r0, #0
 80006a4:	548b      	strb	r3, [r1, r2]
				  for(uint8_t i=0; i<8; i++) sum+= (((uint64_t)0xFF<<(56-8*i)) & recieved_frame.address64)>>(56-8*i);
 80006a6:	2347      	movs	r3, #71	; 0x47
 80006a8:	18fa      	adds	r2, r7, r3
 80006aa:	2300      	movs	r3, #0
 80006ac:	7013      	strb	r3, [r2, #0]
 80006ae:	e051      	b.n	8000754 <main+0x2b8>
 80006b0:	2347      	movs	r3, #71	; 0x47
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	781a      	ldrb	r2, [r3, #0]
 80006b6:	2307      	movs	r3, #7
 80006b8:	1a9b      	subs	r3, r3, r2
 80006ba:	00d9      	lsls	r1, r3, #3
 80006bc:	000a      	movs	r2, r1
 80006be:	3a20      	subs	r2, #32
 80006c0:	2a00      	cmp	r2, #0
 80006c2:	db03      	blt.n	80006cc <main+0x230>
 80006c4:	23ff      	movs	r3, #255	; 0xff
 80006c6:	4093      	lsls	r3, r2
 80006c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006ca:	e00a      	b.n	80006e2 <main+0x246>
 80006cc:	2320      	movs	r3, #32
 80006ce:	1a5a      	subs	r2, r3, r1
 80006d0:	23ff      	movs	r3, #255	; 0xff
 80006d2:	40d3      	lsrs	r3, r2
 80006d4:	001a      	movs	r2, r3
 80006d6:	2300      	movs	r3, #0
 80006d8:	408b      	lsls	r3, r1
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006de:	4313      	orrs	r3, r2
 80006e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006e2:	23ff      	movs	r3, #255	; 0xff
 80006e4:	408b      	lsls	r3, r1
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80006e8:	4b3c      	ldr	r3, [pc, #240]	; (80007dc <main+0x340>)
 80006ea:	689a      	ldr	r2, [r3, #8]
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	0011      	movs	r1, r2
 80006f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80006f2:	4008      	ands	r0, r1
 80006f4:	6238      	str	r0, [r7, #32]
 80006f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006f8:	401a      	ands	r2, r3
 80006fa:	627a      	str	r2, [r7, #36]	; 0x24
 80006fc:	2347      	movs	r3, #71	; 0x47
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	781a      	ldrb	r2, [r3, #0]
 8000702:	2307      	movs	r3, #7
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	00da      	lsls	r2, r3, #3
 8000708:	0013      	movs	r3, r2
 800070a:	3b20      	subs	r3, #32
 800070c:	2b00      	cmp	r3, #0
 800070e:	db03      	blt.n	8000718 <main+0x27c>
 8000710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000712:	40d9      	lsrs	r1, r3
 8000714:	62b9      	str	r1, [r7, #40]	; 0x28
 8000716:	e00c      	b.n	8000732 <main+0x296>
 8000718:	2320      	movs	r3, #32
 800071a:	1a9b      	subs	r3, r3, r2
 800071c:	6a38      	ldr	r0, [r7, #32]
 800071e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000720:	000e      	movs	r6, r1
 8000722:	409e      	lsls	r6, r3
 8000724:	0033      	movs	r3, r6
 8000726:	0001      	movs	r1, r0
 8000728:	40d1      	lsrs	r1, r2
 800072a:	62b9      	str	r1, [r7, #40]	; 0x28
 800072c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800072e:	4319      	orrs	r1, r3
 8000730:	62b9      	str	r1, [r7, #40]	; 0x28
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	40d3      	lsrs	r3, r2
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000738:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800073a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800073c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800073e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000740:	1812      	adds	r2, r2, r0
 8000742:	414b      	adcs	r3, r1
 8000744:	64ba      	str	r2, [r7, #72]	; 0x48
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000748:	2247      	movs	r2, #71	; 0x47
 800074a:	18bb      	adds	r3, r7, r2
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	18ba      	adds	r2, r7, r2
 8000750:	3301      	adds	r3, #1
 8000752:	7013      	strb	r3, [r2, #0]
 8000754:	2347      	movs	r3, #71	; 0x47
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b07      	cmp	r3, #7
 800075c:	d9a8      	bls.n	80006b0 <main+0x214>
				  for(uint8_t i=0; i<2; i++) sum+= (((uint16_t)0xFF<<(8-8*i)) & recieved_frame.address16)>>(8-i*8);
 800075e:	2346      	movs	r3, #70	; 0x46
 8000760:	18fa      	adds	r2, r7, r3
 8000762:	2300      	movs	r3, #0
 8000764:	7013      	strb	r3, [r2, #0]
 8000766:	e024      	b.n	80007b2 <main+0x316>
 8000768:	2046      	movs	r0, #70	; 0x46
 800076a:	183b      	adds	r3, r7, r0
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	2301      	movs	r3, #1
 8000770:	1a9b      	subs	r3, r3, r2
 8000772:	00da      	lsls	r2, r3, #3
 8000774:	23ff      	movs	r3, #255	; 0xff
 8000776:	4093      	lsls	r3, r2
 8000778:	001a      	movs	r2, r3
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <main+0x340>)
 800077c:	8a1b      	ldrh	r3, [r3, #16]
 800077e:	4013      	ands	r3, r2
 8000780:	0019      	movs	r1, r3
 8000782:	0006      	movs	r6, r0
 8000784:	183b      	adds	r3, r7, r0
 8000786:	781a      	ldrb	r2, [r3, #0]
 8000788:	2301      	movs	r3, #1
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	4119      	asrs	r1, r3
 8000790:	000b      	movs	r3, r1
 8000792:	61bb      	str	r3, [r7, #24]
 8000794:	17db      	asrs	r3, r3, #31
 8000796:	61fb      	str	r3, [r7, #28]
 8000798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800079a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800079c:	69b8      	ldr	r0, [r7, #24]
 800079e:	69f9      	ldr	r1, [r7, #28]
 80007a0:	1812      	adds	r2, r2, r0
 80007a2:	414b      	adcs	r3, r1
 80007a4:	64ba      	str	r2, [r7, #72]	; 0x48
 80007a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80007a8:	19bb      	adds	r3, r7, r6
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	19ba      	adds	r2, r7, r6
 80007ae:	3301      	adds	r3, #1
 80007b0:	7013      	strb	r3, [r2, #0]
 80007b2:	2346      	movs	r3, #70	; 0x46
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d9d5      	bls.n	8000768 <main+0x2cc>
				  for(uint16_t i=0; i<recieved_frame.length-12; i++) sum += recieved_frame.content[i];
 80007bc:	2344      	movs	r3, #68	; 0x44
 80007be:	18fa      	adds	r2, r7, r3
 80007c0:	2300      	movs	r3, #0
 80007c2:	8013      	strh	r3, [r2, #0]
 80007c4:	e024      	b.n	8000810 <main+0x374>
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	2000012c 	.word	0x2000012c
 80007cc:	20000100 	.word	0x20000100
 80007d0:	20000130 	.word	0x20000130
 80007d4:	08002b34 	.word	0x08002b34
 80007d8:	20000000 	.word	0x20000000
 80007dc:	200001b8 	.word	0x200001b8
 80007e0:	2000012d 	.word	0x2000012d
 80007e4:	2644      	movs	r6, #68	; 0x44
 80007e6:	19bb      	adds	r3, r7, r6
 80007e8:	881a      	ldrh	r2, [r3, #0]
 80007ea:	4b2c      	ldr	r3, [pc, #176]	; (800089c <main+0x400>)
 80007ec:	189b      	adds	r3, r3, r2
 80007ee:	7cdb      	ldrb	r3, [r3, #19]
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007fa:	6938      	ldr	r0, [r7, #16]
 80007fc:	6979      	ldr	r1, [r7, #20]
 80007fe:	1812      	adds	r2, r2, r0
 8000800:	414b      	adcs	r3, r1
 8000802:	64ba      	str	r2, [r7, #72]	; 0x48
 8000804:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000806:	19bb      	adds	r3, r7, r6
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	19ba      	adds	r2, r7, r6
 800080c:	3301      	adds	r3, #1
 800080e:	8013      	strh	r3, [r2, #0]
 8000810:	2344      	movs	r3, #68	; 0x44
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	881a      	ldrh	r2, [r3, #0]
 8000816:	4b21      	ldr	r3, [pc, #132]	; (800089c <main+0x400>)
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	3b0c      	subs	r3, #12
 800081c:	429a      	cmp	r2, r3
 800081e:	dbe1      	blt.n	80007e4 <main+0x348>
				  sum += recieved_frame.type + recieved_frame.option + recieved_frame.check_sum;
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <main+0x400>)
 8000822:	789b      	ldrb	r3, [r3, #2]
 8000824:	001a      	movs	r2, r3
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <main+0x400>)
 8000828:	7c9b      	ldrb	r3, [r3, #18]
 800082a:	18d1      	adds	r1, r2, r3
 800082c:	4a1b      	ldr	r2, [pc, #108]	; (800089c <main+0x400>)
 800082e:	238a      	movs	r3, #138	; 0x8a
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	5cd3      	ldrb	r3, [r2, r3]
 8000834:	18cb      	adds	r3, r1, r3
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	17db      	asrs	r3, r3, #31
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800083e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000840:	68b8      	ldr	r0, [r7, #8]
 8000842:	68f9      	ldr	r1, [r7, #12]
 8000844:	1812      	adds	r2, r2, r0
 8000846:	414b      	adcs	r3, r1
 8000848:	64ba      	str	r2, [r7, #72]	; 0x48
 800084a:	64fb      	str	r3, [r7, #76]	; 0x4c
				  recieved_frame.check_sum_ok = (sum & 0xFF) == 0xFF;
 800084c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800084e:	23ff      	movs	r3, #255	; 0xff
 8000850:	401a      	ands	r2, r3
 8000852:	603a      	str	r2, [r7, #0]
 8000854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000856:	2300      	movs	r3, #0
 8000858:	401a      	ands	r2, r3
 800085a:	607a      	str	r2, [r7, #4]
 800085c:	2301      	movs	r3, #1
 800085e:	6839      	ldr	r1, [r7, #0]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	0008      	movs	r0, r1
 8000864:	28ff      	cmp	r0, #255	; 0xff
 8000866:	d101      	bne.n	800086c <main+0x3d0>
 8000868:	2a00      	cmp	r2, #0
 800086a:	d000      	beq.n	800086e <main+0x3d2>
 800086c:	2300      	movs	r3, #0
 800086e:	b2db      	uxtb	r3, r3
 8000870:	0018      	movs	r0, r3
 8000872:	490a      	ldr	r1, [pc, #40]	; (800089c <main+0x400>)
 8000874:	2316      	movs	r3, #22
 8000876:	33ff      	adds	r3, #255	; 0xff
 8000878:	001a      	movs	r2, r3
 800087a:	1c03      	adds	r3, r0, #0
 800087c:	548b      	strb	r3, [r1, r2]
				  state = idle;
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <main+0x404>)
 8000880:	2300      	movs	r3, #0
 8000882:	7013      	strb	r3, [r2, #0]
			  break;
 8000884:	e002      	b.n	800088c <main+0x3f0>

			  case process_content:
				  0;
			  break;
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	e000      	b.n	800088c <main+0x3f0>
			  break;
 800088a:	46c0      	nop			; (mov r8, r8)
		  }

		  xbee_rx_read_index += 1;
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <main+0x408>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4a03      	ldr	r2, [pc, #12]	; (80008a4 <main+0x408>)
 8000896:	7013      	strb	r3, [r2, #0]
	  if(xbee_rx_read_index<xbee_rx_write_index){
 8000898:	e60d      	b.n	80004b6 <main+0x1a>
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	200001b8 	.word	0x200001b8
 80008a0:	20000130 	.word	0x20000130
 80008a4:	2000012c 	.word	0x2000012c

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b09f      	sub	sp, #124	; 0x7c
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	2440      	movs	r4, #64	; 0x40
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	0018      	movs	r0, r3
 80008b4:	2338      	movs	r3, #56	; 0x38
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f002 f927 	bl	8002b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008be:	232c      	movs	r3, #44	; 0x2c
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	0018      	movs	r0, r3
 80008c4:	2314      	movs	r3, #20
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f002 f91f 	bl	8002b0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	0018      	movs	r0, r3
 80008d2:	2328      	movs	r3, #40	; 0x28
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f002 f918 	bl	8002b0c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008dc:	4b2b      	ldr	r3, [pc, #172]	; (800098c <SystemClock_Config+0xe4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a2b      	ldr	r2, [pc, #172]	; (8000990 <SystemClock_Config+0xe8>)
 80008e2:	401a      	ands	r2, r3
 80008e4:	4b29      	ldr	r3, [pc, #164]	; (800098c <SystemClock_Config+0xe4>)
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	0109      	lsls	r1, r1, #4
 80008ea:	430a      	orrs	r2, r1
 80008ec:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ee:	0021      	movs	r1, r4
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2202      	movs	r2, #2
 80008f4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2201      	movs	r2, #1
 80008fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2210      	movs	r2, #16
 8000900:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2202      	movs	r2, #2
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2280      	movs	r2, #128	; 0x80
 8000912:	02d2      	lsls	r2, r2, #11
 8000914:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	03d2      	lsls	r2, r2, #15
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091e:	187b      	adds	r3, r7, r1
 8000920:	0018      	movs	r0, r3
 8000922:	f000 fc91 	bl	8001248 <HAL_RCC_OscConfig>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800092a:	f000 f8f7 	bl	8000b1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	212c      	movs	r1, #44	; 0x2c
 8000930:	187b      	adds	r3, r7, r1
 8000932:	220f      	movs	r2, #15
 8000934:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2203      	movs	r2, #3
 800093a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2101      	movs	r1, #1
 8000952:	0018      	movs	r0, r3
 8000954:	f001 f84c 	bl	80019f0 <HAL_RCC_ClockConfig>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800095c:	f000 f8de 	bl	8000b1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2203      	movs	r2, #3
 8000964:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	0018      	movs	r0, r3
 8000976:	f001 fa5f 	bl	8001e38 <HAL_RCCEx_PeriphCLKConfig>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800097e:	f000 f8cd 	bl	8000b1c <Error_Handler>
  }
}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	b01f      	add	sp, #124	; 0x7c
 8000988:	bd90      	pop	{r4, r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	40007000 	.word	0x40007000
 8000990:	ffffe7ff 	.word	0xffffe7ff

08000994 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_USART1_UART_Init+0x58>)
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <MX_USART1_UART_Init+0x5c>)
 800099c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_USART1_UART_Init+0x58>)
 80009a0:	2296      	movs	r2, #150	; 0x96
 80009a2:	0192      	lsls	r2, r2, #6
 80009a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART1_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_USART1_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART1_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART1_UART_Init+0x58>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART1_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART1_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART1_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART1_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <MX_USART1_UART_Init+0x58>)
 80009d8:	0018      	movs	r0, r3
 80009da:	f001 fba1 	bl	8002120 <HAL_UART_Init>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009e2:	f000 f89b 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000134 	.word	0x20000134
 80009f0:	40013800 	.word	0x40013800

080009f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 80009fa:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <MX_USART2_UART_Init+0x5c>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a00:	22e1      	movs	r2, #225	; 0xe1
 8000a02:	0252      	lsls	r2, r2, #9
 8000a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f001 fb71 	bl	8002120 <HAL_UART_Init>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a42:	f000 f86b 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200002d0 	.word	0x200002d0
 8000a50:	40004400 	.word	0x40004400

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	240c      	movs	r4, #12
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	0018      	movs	r0, r3
 8000a60:	2314      	movs	r3, #20
 8000a62:	001a      	movs	r2, r3
 8000a64:	2100      	movs	r1, #0
 8000a66:	f002 f851 	bl	8002b0c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <MX_GPIO_Init+0xc0>)
 8000a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a6e:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <MX_GPIO_Init+0xc0>)
 8000a70:	2104      	movs	r1, #4
 8000a72:	430a      	orrs	r2, r1
 8000a74:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a76:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <MX_GPIO_Init+0xc0>)
 8000a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <MX_GPIO_Init+0xc0>)
 8000a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <MX_GPIO_Init+0xc0>)
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <MX_GPIO_Init+0xc0>)
 8000a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	4013      	ands	r3, r2
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <MX_GPIO_Init+0xc0>)
 8000a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <MX_GPIO_Init+0xc0>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_GPIO_Init+0xc0>)
 8000aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4013      	ands	r3, r2
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ab2:	23a0      	movs	r3, #160	; 0xa0
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2120      	movs	r1, #32
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fba6 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	2280      	movs	r2, #128	; 0x80
 8000ac4:	0192      	lsls	r2, r2, #6
 8000ac6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2284      	movs	r2, #132	; 0x84
 8000acc:	0392      	lsls	r2, r2, #14
 8000ace:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <MX_GPIO_Init+0xc4>)
 8000ada:	0019      	movs	r1, r3
 8000adc:	0010      	movs	r0, r2
 8000ade:	f000 fa17 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ae2:	0021      	movs	r1, r4
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2220      	movs	r2, #32
 8000ae8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2201      	movs	r2, #1
 8000aee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000afc:	187a      	adds	r2, r7, r1
 8000afe:	23a0      	movs	r3, #160	; 0xa0
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 fa03 	bl	8000f10 <HAL_GPIO_Init>

}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b009      	add	sp, #36	; 0x24
 8000b10:	bd90      	pop	{r4, r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	40021000 	.word	0x40021000
 8000b18:	50000800 	.word	0x50000800

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <Error_Handler+0x8>
	...

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <HAL_MspInit+0x24>)
 8000b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x24>)
 8000b32:	2101      	movs	r1, #1
 8000b34:	430a      	orrs	r2, r1
 8000b36:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <HAL_MspInit+0x24>)
 8000b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_MspInit+0x24>)
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	0549      	lsls	r1, r1, #21
 8000b42:	430a      	orrs	r2, r1
 8000b44:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b08b      	sub	sp, #44	; 0x2c
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	2414      	movs	r4, #20
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	2314      	movs	r3, #20
 8000b60:	001a      	movs	r2, r3
 8000b62:	2100      	movs	r1, #0
 8000b64:	f001 ffd2 	bl	8002b0c <memset>
  if(huart->Instance==USART1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a30      	ldr	r2, [pc, #192]	; (8000c30 <HAL_UART_MspInit+0xe0>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12b      	bne.n	8000bca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b72:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <HAL_UART_MspInit+0xe4>)
 8000b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b76:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <HAL_UART_MspInit+0xe4>)
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	01c9      	lsls	r1, r1, #7
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <HAL_UART_MspInit+0xe4>)
 8000b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b84:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <HAL_UART_MspInit+0xe4>)
 8000b86:	2101      	movs	r1, #1
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b8c:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <HAL_UART_MspInit+0xe4>)
 8000b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b90:	2201      	movs	r2, #1
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	22c0      	movs	r2, #192	; 0xc0
 8000b9c:	00d2      	lsls	r2, r2, #3
 8000b9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	0021      	movs	r1, r4
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	187a      	adds	r2, r7, r1
 8000bbc:	23a0      	movs	r3, #160	; 0xa0
 8000bbe:	05db      	lsls	r3, r3, #23
 8000bc0:	0011      	movs	r1, r2
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f000 f9a4 	bl	8000f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bc8:	e02e      	b.n	8000c28 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a1a      	ldr	r2, [pc, #104]	; (8000c38 <HAL_UART_MspInit+0xe8>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d129      	bne.n	8000c28 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_UART_MspInit+0xe4>)
 8000bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_UART_MspInit+0xe4>)
 8000bda:	2180      	movs	r1, #128	; 0x80
 8000bdc:	0289      	lsls	r1, r1, #10
 8000bde:	430a      	orrs	r2, r1
 8000be0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_UART_MspInit+0xe4>)
 8000be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_UART_MspInit+0xe4>)
 8000be8:	2101      	movs	r1, #1
 8000bea:	430a      	orrs	r2, r1
 8000bec:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_UART_MspInit+0xe4>)
 8000bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bfa:	2114      	movs	r1, #20
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2202      	movs	r2, #2
 8000c06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2203      	movs	r2, #3
 8000c12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2204      	movs	r2, #4
 8000c18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	187a      	adds	r2, r7, r1
 8000c1c:	23a0      	movs	r3, #160	; 0xa0
 8000c1e:	05db      	lsls	r3, r3, #23
 8000c20:	0011      	movs	r1, r2
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 f974 	bl	8000f10 <HAL_GPIO_Init>
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b00b      	add	sp, #44	; 0x2c
 8000c2e:	bd90      	pop	{r4, r7, pc}
 8000c30:	40013800 	.word	0x40013800
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40004400 	.word	0x40004400

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 f886 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c76:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7a:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <LoopForever+0xe>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c90:	4c0b      	ldr	r4, [pc, #44]	; (8000cc0 <LoopForever+0x16>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c9e:	f7ff ffe4 	bl	8000c6a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f001 ff0f 	bl	8002ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fbf9 	bl	800049c <main>

08000caa <LoopForever>:

LoopForever:
    b LoopForever
 8000caa:	e7fe      	b.n	8000caa <LoopForever>
   ldr   r0, =_estack
 8000cac:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8000cb8:	08002bd4 	.word	0x08002bd4
  ldr r2, =_sbss
 8000cbc:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8000cc0:	2000035c 	.word	0x2000035c

08000cc4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC1_COMP_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_Init+0x3c>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_Init+0x3c>)
 8000cda:	2140      	movs	r1, #64	; 0x40
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f000 f811 	bl	8000d08 <HAL_InitTick>
 8000ce6:	1e03      	subs	r3, r0, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	e001      	b.n	8000cf6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf2:	f7ff ff19 	bl	8000b28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
}
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b002      	add	sp, #8
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	40022000 	.word	0x40022000

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_InitTick+0x5c>)
 8000d12:	681c      	ldr	r4, [r3, #0]
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <HAL_InitTick+0x60>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	0019      	movs	r1, r3
 8000d1a:	23fa      	movs	r3, #250	; 0xfa
 8000d1c:	0098      	lsls	r0, r3, #2
 8000d1e:	f7ff f9f3 	bl	8000108 <__udivsi3>
 8000d22:	0003      	movs	r3, r0
 8000d24:	0019      	movs	r1, r3
 8000d26:	0020      	movs	r0, r4
 8000d28:	f7ff f9ee 	bl	8000108 <__udivsi3>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 f8e1 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000d34:	1e03      	subs	r3, r0, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e00f      	b.n	8000d5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d80b      	bhi.n	8000d5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	2301      	movs	r3, #1
 8000d46:	425b      	negs	r3, r3
 8000d48:	2200      	movs	r2, #0
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 f8be 	bl	8000ecc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_InitTick+0x64>)
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b003      	add	sp, #12
 8000d62:	bd90      	pop	{r4, r7, pc}
 8000d64:	20000104 	.word	0x20000104
 8000d68:	2000010c 	.word	0x2000010c
 8000d6c:	20000108 	.word	0x20000108

08000d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_IncTick+0x1c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	001a      	movs	r2, r3
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x20>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	18d2      	adds	r2, r2, r3
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_IncTick+0x20>)
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	2000010c 	.word	0x2000010c
 8000d90:	20000358 	.word	0x20000358

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b02      	ldr	r3, [pc, #8]	; (8000da4 <HAL_GetTick+0x10>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	20000358 	.word	0x20000358

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	0002      	movs	r2, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b7f      	cmp	r3, #127	; 0x7f
 8000dbc:	d828      	bhi.n	8000e10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dbe:	4a2f      	ldr	r2, [pc, #188]	; (8000e7c <__NVIC_SetPriority+0xd4>)
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	33c0      	adds	r3, #192	; 0xc0
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	589b      	ldr	r3, [r3, r2]
 8000dce:	1dfa      	adds	r2, r7, #7
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	400a      	ands	r2, r1
 8000dd8:	00d2      	lsls	r2, r2, #3
 8000dda:	21ff      	movs	r1, #255	; 0xff
 8000ddc:	4091      	lsls	r1, r2
 8000dde:	000a      	movs	r2, r1
 8000de0:	43d2      	mvns	r2, r2
 8000de2:	401a      	ands	r2, r3
 8000de4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	019b      	lsls	r3, r3, #6
 8000dea:	22ff      	movs	r2, #255	; 0xff
 8000dec:	401a      	ands	r2, r3
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	0018      	movs	r0, r3
 8000df4:	2303      	movs	r3, #3
 8000df6:	4003      	ands	r3, r0
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dfc:	481f      	ldr	r0, [pc, #124]	; (8000e7c <__NVIC_SetPriority+0xd4>)
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	430a      	orrs	r2, r1
 8000e08:	33c0      	adds	r3, #192	; 0xc0
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e0e:	e031      	b.n	8000e74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e10:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <__NVIC_SetPriority+0xd8>)
 8000e12:	1dfb      	adds	r3, r7, #7
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	0019      	movs	r1, r3
 8000e18:	230f      	movs	r3, #15
 8000e1a:	400b      	ands	r3, r1
 8000e1c:	3b08      	subs	r3, #8
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	3306      	adds	r3, #6
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	18d3      	adds	r3, r2, r3
 8000e26:	3304      	adds	r3, #4
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	1dfa      	adds	r2, r7, #7
 8000e2c:	7812      	ldrb	r2, [r2, #0]
 8000e2e:	0011      	movs	r1, r2
 8000e30:	2203      	movs	r2, #3
 8000e32:	400a      	ands	r2, r1
 8000e34:	00d2      	lsls	r2, r2, #3
 8000e36:	21ff      	movs	r1, #255	; 0xff
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	000a      	movs	r2, r1
 8000e3c:	43d2      	mvns	r2, r2
 8000e3e:	401a      	ands	r2, r3
 8000e40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	019b      	lsls	r3, r3, #6
 8000e46:	22ff      	movs	r2, #255	; 0xff
 8000e48:	401a      	ands	r2, r3
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	0018      	movs	r0, r3
 8000e50:	2303      	movs	r3, #3
 8000e52:	4003      	ands	r3, r0
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e58:	4809      	ldr	r0, [pc, #36]	; (8000e80 <__NVIC_SetPriority+0xd8>)
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	001c      	movs	r4, r3
 8000e60:	230f      	movs	r3, #15
 8000e62:	4023      	ands	r3, r4
 8000e64:	3b08      	subs	r3, #8
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	3306      	adds	r3, #6
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	18c3      	adds	r3, r0, r3
 8000e70:	3304      	adds	r3, #4
 8000e72:	601a      	str	r2, [r3, #0]
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b003      	add	sp, #12
 8000e7a:	bd90      	pop	{r4, r7, pc}
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	1e5a      	subs	r2, r3, #1
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	045b      	lsls	r3, r3, #17
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d301      	bcc.n	8000e9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e010      	b.n	8000ebe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <SysTick_Config+0x44>)
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	3a01      	subs	r2, #1
 8000ea2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	425b      	negs	r3, r3
 8000ea8:	2103      	movs	r1, #3
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f7ff ff7c 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <SysTick_Config+0x44>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <SysTick_Config+0x44>)
 8000eb8:	2207      	movs	r2, #7
 8000eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	e000e010 	.word	0xe000e010

08000ecc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	1c02      	adds	r2, r0, #0
 8000edc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff ff5d 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b004      	add	sp, #16
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff ffbf 	bl	8000e84 <SysTick_Config>
 8000f06:	0003      	movs	r3, r0
}
 8000f08:	0018      	movs	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f26:	e155      	b.n	80011d4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4091      	lsls	r1, r2
 8000f32:	000a      	movs	r2, r1
 8000f34:	4013      	ands	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d100      	bne.n	8000f40 <HAL_GPIO_Init+0x30>
 8000f3e:	e146      	b.n	80011ce <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2203      	movs	r2, #3
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d005      	beq.n	8000f58 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2203      	movs	r2, #3
 8000f52:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d130      	bne.n	8000fba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	409a      	lsls	r2, r3
 8000f66:	0013      	movs	r3, r2
 8000f68:	43da      	mvns	r2, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	0013      	movs	r3, r2
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8e:	2201      	movs	r2, #1
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
 8000f94:	0013      	movs	r3, r2
 8000f96:	43da      	mvns	r2, r3
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d017      	beq.n	8000ff6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d123      	bne.n	800104a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	58d3      	ldr	r3, [r2, r3]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	2207      	movs	r2, #7
 8001014:	4013      	ands	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	691a      	ldr	r2, [r3, #16]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	2107      	movs	r1, #7
 800102e:	400b      	ands	r3, r1
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	08da      	lsrs	r2, r3, #3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3208      	adds	r2, #8
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	6939      	ldr	r1, [r7, #16]
 8001048:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	43da      	mvns	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	401a      	ands	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	23c0      	movs	r3, #192	; 0xc0
 8001084:	029b      	lsls	r3, r3, #10
 8001086:	4013      	ands	r3, r2
 8001088:	d100      	bne.n	800108c <HAL_GPIO_Init+0x17c>
 800108a:	e0a0      	b.n	80011ce <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108c:	4b57      	ldr	r3, [pc, #348]	; (80011ec <HAL_GPIO_Init+0x2dc>)
 800108e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001090:	4b56      	ldr	r3, [pc, #344]	; (80011ec <HAL_GPIO_Init+0x2dc>)
 8001092:	2101      	movs	r1, #1
 8001094:	430a      	orrs	r2, r1
 8001096:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001098:	4a55      	ldr	r2, [pc, #340]	; (80011f0 <HAL_GPIO_Init+0x2e0>)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	589b      	ldr	r3, [r3, r2]
 80010a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	2203      	movs	r2, #3
 80010aa:	4013      	ands	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	409a      	lsls	r2, r3
 80010b2:	0013      	movs	r3, r2
 80010b4:	43da      	mvns	r2, r3
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	23a0      	movs	r3, #160	; 0xa0
 80010c0:	05db      	lsls	r3, r3, #23
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d01f      	beq.n	8001106 <HAL_GPIO_Init+0x1f6>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4a      	ldr	r2, [pc, #296]	; (80011f4 <HAL_GPIO_Init+0x2e4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0x1f2>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a49      	ldr	r2, [pc, #292]	; (80011f8 <HAL_GPIO_Init+0x2e8>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x1ee>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a48      	ldr	r2, [pc, #288]	; (80011fc <HAL_GPIO_Init+0x2ec>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x1ea>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a47      	ldr	r2, [pc, #284]	; (8001200 <HAL_GPIO_Init+0x2f0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x1e6>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a46      	ldr	r2, [pc, #280]	; (8001204 <HAL_GPIO_Init+0x2f4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x1e2>
 80010ee:	2305      	movs	r3, #5
 80010f0:	e00a      	b.n	8001108 <HAL_GPIO_Init+0x1f8>
 80010f2:	2306      	movs	r3, #6
 80010f4:	e008      	b.n	8001108 <HAL_GPIO_Init+0x1f8>
 80010f6:	2304      	movs	r3, #4
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x1f8>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e004      	b.n	8001108 <HAL_GPIO_Init+0x1f8>
 80010fe:	2302      	movs	r3, #2
 8001100:	e002      	b.n	8001108 <HAL_GPIO_Init+0x1f8>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x1f8>
 8001106:	2300      	movs	r3, #0
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	2103      	movs	r1, #3
 800110c:	400a      	ands	r2, r1
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4093      	lsls	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001118:	4935      	ldr	r1, [pc, #212]	; (80011f0 <HAL_GPIO_Init+0x2e0>)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <HAL_GPIO_Init+0x2f8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43da      	mvns	r2, r3
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	025b      	lsls	r3, r3, #9
 800113e:	4013      	ands	r3, r2
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800114a:	4b2f      	ldr	r3, [pc, #188]	; (8001208 <HAL_GPIO_Init+0x2f8>)
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_GPIO_Init+0x2f8>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	43da      	mvns	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	029b      	lsls	r3, r3, #10
 8001168:	4013      	ands	r3, r2
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <HAL_GPIO_Init+0x2f8>)
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <HAL_GPIO_Init+0x2f8>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	43da      	mvns	r2, r3
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	035b      	lsls	r3, r3, #13
 8001192:	4013      	ands	r3, r2
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_GPIO_Init+0x2f8>)
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_GPIO_Init+0x2f8>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	43da      	mvns	r2, r3
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	039b      	lsls	r3, r3, #14
 80011bc:	4013      	ands	r3, r2
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_GPIO_Init+0x2f8>)
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3301      	adds	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	40da      	lsrs	r2, r3
 80011dc:	1e13      	subs	r3, r2, #0
 80011de:	d000      	beq.n	80011e2 <HAL_GPIO_Init+0x2d2>
 80011e0:	e6a2      	b.n	8000f28 <HAL_GPIO_Init+0x18>
  }
}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b006      	add	sp, #24
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010000 	.word	0x40010000
 80011f4:	50000400 	.word	0x50000400
 80011f8:	50000800 	.word	0x50000800
 80011fc:	50000c00 	.word	0x50000c00
 8001200:	50001000 	.word	0x50001000
 8001204:	50001c00 	.word	0x50001c00
 8001208:	40010400 	.word	0x40010400

0800120c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	0008      	movs	r0, r1
 8001216:	0011      	movs	r1, r2
 8001218:	1cbb      	adds	r3, r7, #2
 800121a:	1c02      	adds	r2, r0, #0
 800121c:	801a      	strh	r2, [r3, #0]
 800121e:	1c7b      	adds	r3, r7, #1
 8001220:	1c0a      	adds	r2, r1, #0
 8001222:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001224:	1c7b      	adds	r3, r7, #1
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d004      	beq.n	8001236 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122c:	1cbb      	adds	r3, r7, #2
 800122e:	881a      	ldrh	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001234:	e003      	b.n	800123e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001236:	1cbb      	adds	r3, r7, #2
 8001238:	881a      	ldrh	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b002      	add	sp, #8
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	f000 fbbf 	bl	80019da <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800125c:	4bc9      	ldr	r3, [pc, #804]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	220c      	movs	r2, #12
 8001262:	4013      	ands	r3, r2
 8001264:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001266:	4bc7      	ldr	r3, [pc, #796]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	025b      	lsls	r3, r3, #9
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2201      	movs	r2, #1
 8001278:	4013      	ands	r3, r2
 800127a:	d100      	bne.n	800127e <HAL_RCC_OscConfig+0x36>
 800127c:	e07e      	b.n	800137c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	2b08      	cmp	r3, #8
 8001282:	d007      	beq.n	8001294 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b0c      	cmp	r3, #12
 8001288:	d112      	bne.n	80012b0 <HAL_RCC_OscConfig+0x68>
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	025b      	lsls	r3, r3, #9
 8001290:	429a      	cmp	r2, r3
 8001292:	d10d      	bne.n	80012b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	4bbb      	ldr	r3, [pc, #748]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	029b      	lsls	r3, r3, #10
 800129c:	4013      	ands	r3, r2
 800129e:	d100      	bne.n	80012a2 <HAL_RCC_OscConfig+0x5a>
 80012a0:	e06b      	b.n	800137a <HAL_RCC_OscConfig+0x132>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d167      	bne.n	800137a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f000 fb95 	bl	80019da <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	025b      	lsls	r3, r3, #9
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d107      	bne.n	80012cc <HAL_RCC_OscConfig+0x84>
 80012bc:	4bb1      	ldr	r3, [pc, #708]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4bb0      	ldr	r3, [pc, #704]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80012c2:	2180      	movs	r1, #128	; 0x80
 80012c4:	0249      	lsls	r1, r1, #9
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	e027      	b.n	800131c <HAL_RCC_OscConfig+0xd4>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	23a0      	movs	r3, #160	; 0xa0
 80012d2:	02db      	lsls	r3, r3, #11
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d10e      	bne.n	80012f6 <HAL_RCC_OscConfig+0xae>
 80012d8:	4baa      	ldr	r3, [pc, #680]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4ba9      	ldr	r3, [pc, #676]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	02c9      	lsls	r1, r1, #11
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	4ba7      	ldr	r3, [pc, #668]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4ba6      	ldr	r3, [pc, #664]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80012ec:	2180      	movs	r1, #128	; 0x80
 80012ee:	0249      	lsls	r1, r1, #9
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	e012      	b.n	800131c <HAL_RCC_OscConfig+0xd4>
 80012f6:	4ba3      	ldr	r3, [pc, #652]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4ba2      	ldr	r3, [pc, #648]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80012fc:	49a2      	ldr	r1, [pc, #648]	; (8001588 <HAL_RCC_OscConfig+0x340>)
 80012fe:	400a      	ands	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	4ba0      	ldr	r3, [pc, #640]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	025b      	lsls	r3, r3, #9
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4b9c      	ldr	r3, [pc, #624]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b9b      	ldr	r3, [pc, #620]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 8001316:	499d      	ldr	r1, [pc, #628]	; (800158c <HAL_RCC_OscConfig+0x344>)
 8001318:	400a      	ands	r2, r1
 800131a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d015      	beq.n	8001350 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fd36 	bl	8000d94 <HAL_GetTick>
 8001328:	0003      	movs	r3, r0
 800132a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800132c:	e009      	b.n	8001342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132e:	f7ff fd31 	bl	8000d94 <HAL_GetTick>
 8001332:	0002      	movs	r2, r0
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b64      	cmp	r3, #100	; 0x64
 800133a:	d902      	bls.n	8001342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	f000 fb4c 	bl	80019da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001342:	4b90      	ldr	r3, [pc, #576]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	029b      	lsls	r3, r3, #10
 800134a:	4013      	ands	r3, r2
 800134c:	d0ef      	beq.n	800132e <HAL_RCC_OscConfig+0xe6>
 800134e:	e015      	b.n	800137c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fd20 	bl	8000d94 <HAL_GetTick>
 8001354:	0003      	movs	r3, r0
 8001356:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800135a:	f7ff fd1b 	bl	8000d94 <HAL_GetTick>
 800135e:	0002      	movs	r2, r0
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b64      	cmp	r3, #100	; 0x64
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e336      	b.n	80019da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800136c:	4b85      	ldr	r3, [pc, #532]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	029b      	lsls	r3, r3, #10
 8001374:	4013      	ands	r3, r2
 8001376:	d1f0      	bne.n	800135a <HAL_RCC_OscConfig+0x112>
 8001378:	e000      	b.n	800137c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2202      	movs	r2, #2
 8001382:	4013      	ands	r3, r2
 8001384:	d100      	bne.n	8001388 <HAL_RCC_OscConfig+0x140>
 8001386:	e099      	b.n	80014bc <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	2220      	movs	r2, #32
 8001392:	4013      	ands	r3, r2
 8001394:	d009      	beq.n	80013aa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001396:	4b7b      	ldr	r3, [pc, #492]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4b7a      	ldr	r3, [pc, #488]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 800139c:	2120      	movs	r1, #32
 800139e:	430a      	orrs	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	2220      	movs	r2, #32
 80013a6:	4393      	bics	r3, r2
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	d13e      	bne.n	8001434 <HAL_RCC_OscConfig+0x1ec>
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d13b      	bne.n	8001434 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80013bc:	4b71      	ldr	r3, [pc, #452]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2204      	movs	r2, #4
 80013c2:	4013      	ands	r3, r2
 80013c4:	d004      	beq.n	80013d0 <HAL_RCC_OscConfig+0x188>
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e304      	b.n	80019da <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b6c      	ldr	r3, [pc, #432]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4a6e      	ldr	r2, [pc, #440]	; (8001590 <HAL_RCC_OscConfig+0x348>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	0019      	movs	r1, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	021a      	lsls	r2, r3, #8
 80013e0:	4b68      	ldr	r3, [pc, #416]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80013e2:	430a      	orrs	r2, r1
 80013e4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013e6:	4b67      	ldr	r3, [pc, #412]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2209      	movs	r2, #9
 80013ec:	4393      	bics	r3, r2
 80013ee:	0019      	movs	r1, r3
 80013f0:	4b64      	ldr	r3, [pc, #400]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80013f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013f8:	f000 fc42 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 80013fc:	0001      	movs	r1, r0
 80013fe:	4b61      	ldr	r3, [pc, #388]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	220f      	movs	r2, #15
 8001406:	4013      	ands	r3, r2
 8001408:	4a62      	ldr	r2, [pc, #392]	; (8001594 <HAL_RCC_OscConfig+0x34c>)
 800140a:	5cd3      	ldrb	r3, [r2, r3]
 800140c:	000a      	movs	r2, r1
 800140e:	40da      	lsrs	r2, r3
 8001410:	4b61      	ldr	r3, [pc, #388]	; (8001598 <HAL_RCC_OscConfig+0x350>)
 8001412:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001414:	4b61      	ldr	r3, [pc, #388]	; (800159c <HAL_RCC_OscConfig+0x354>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2513      	movs	r5, #19
 800141a:	197c      	adds	r4, r7, r5
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff fc73 	bl	8000d08 <HAL_InitTick>
 8001422:	0003      	movs	r3, r0
 8001424:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001426:	197b      	adds	r3, r7, r5
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d046      	beq.n	80014bc <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800142e:	197b      	adds	r3, r7, r5
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	e2d2      	b.n	80019da <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	2b00      	cmp	r3, #0
 8001438:	d027      	beq.n	800148a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800143a:	4b52      	ldr	r3, [pc, #328]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2209      	movs	r2, #9
 8001440:	4393      	bics	r3, r2
 8001442:	0019      	movs	r1, r3
 8001444:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 8001446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fca2 	bl	8000d94 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001456:	f7ff fc9d 	bl	8000d94 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e2b8      	b.n	80019da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001468:	4b46      	ldr	r3, [pc, #280]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2204      	movs	r2, #4
 800146e:	4013      	ands	r3, r2
 8001470:	d0f1      	beq.n	8001456 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001472:	4b44      	ldr	r3, [pc, #272]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4a46      	ldr	r2, [pc, #280]	; (8001590 <HAL_RCC_OscConfig+0x348>)
 8001478:	4013      	ands	r3, r2
 800147a:	0019      	movs	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	021a      	lsls	r2, r3, #8
 8001482:	4b40      	ldr	r3, [pc, #256]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 8001484:	430a      	orrs	r2, r1
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	e018      	b.n	80014bc <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148a:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 8001490:	2101      	movs	r1, #1
 8001492:	438a      	bics	r2, r1
 8001494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fc7d 	bl	8000d94 <HAL_GetTick>
 800149a:	0003      	movs	r3, r0
 800149c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc78 	bl	8000d94 <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e293      	b.n	80019da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2204      	movs	r2, #4
 80014b8:	4013      	ands	r3, r2
 80014ba:	d1f1      	bne.n	80014a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2210      	movs	r2, #16
 80014c2:	4013      	ands	r3, r2
 80014c4:	d100      	bne.n	80014c8 <HAL_RCC_OscConfig+0x280>
 80014c6:	e0a2      	b.n	800160e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d140      	bne.n	8001550 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ce:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4013      	ands	r3, r2
 80014d8:	d005      	beq.n	80014e6 <HAL_RCC_OscConfig+0x29e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e279      	b.n	80019da <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4a2d      	ldr	r2, [pc, #180]	; (80015a0 <HAL_RCC_OscConfig+0x358>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80014f6:	430a      	orrs	r2, r1
 80014f8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	0a19      	lsrs	r1, r3, #8
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	061a      	lsls	r2, r3, #24
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 800150a:	430a      	orrs	r2, r1
 800150c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	0b5b      	lsrs	r3, r3, #13
 8001514:	3301      	adds	r3, #1
 8001516:	2280      	movs	r2, #128	; 0x80
 8001518:	0212      	lsls	r2, r2, #8
 800151a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	210f      	movs	r1, #15
 8001524:	400b      	ands	r3, r1
 8001526:	491b      	ldr	r1, [pc, #108]	; (8001594 <HAL_RCC_OscConfig+0x34c>)
 8001528:	5ccb      	ldrb	r3, [r1, r3]
 800152a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <HAL_RCC_OscConfig+0x350>)
 800152e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <HAL_RCC_OscConfig+0x354>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2513      	movs	r5, #19
 8001536:	197c      	adds	r4, r7, r5
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff fbe5 	bl	8000d08 <HAL_InitTick>
 800153e:	0003      	movs	r3, r0
 8001540:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001542:	197b      	adds	r3, r7, r5
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d061      	beq.n	800160e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800154a:	197b      	adds	r3, r7, r5
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	e244      	b.n	80019da <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d040      	beq.n	80015da <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_RCC_OscConfig+0x33c>)
 800155e:	2180      	movs	r1, #128	; 0x80
 8001560:	0049      	lsls	r1, r1, #1
 8001562:	430a      	orrs	r2, r1
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7ff fc15 	bl	8000d94 <HAL_GetTick>
 800156a:	0003      	movs	r3, r0
 800156c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800156e:	e019      	b.n	80015a4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001570:	f7ff fc10 	bl	8000d94 <HAL_GetTick>
 8001574:	0002      	movs	r2, r0
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d912      	bls.n	80015a4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e22b      	b.n	80019da <HAL_RCC_OscConfig+0x792>
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	40021000 	.word	0x40021000
 8001588:	fffeffff 	.word	0xfffeffff
 800158c:	fffbffff 	.word	0xfffbffff
 8001590:	ffffe0ff 	.word	0xffffe0ff
 8001594:	08002b58 	.word	0x08002b58
 8001598:	20000104 	.word	0x20000104
 800159c:	20000108 	.word	0x20000108
 80015a0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015a4:	4bca      	ldr	r3, [pc, #808]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4013      	ands	r3, r2
 80015ae:	d0df      	beq.n	8001570 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b0:	4bc7      	ldr	r3, [pc, #796]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	4ac7      	ldr	r2, [pc, #796]	; (80018d4 <HAL_RCC_OscConfig+0x68c>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	0019      	movs	r1, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015be:	4bc4      	ldr	r3, [pc, #784]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 80015c0:	430a      	orrs	r2, r1
 80015c2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c4:	4bc2      	ldr	r3, [pc, #776]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	0a19      	lsrs	r1, r3, #8
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	061a      	lsls	r2, r3, #24
 80015d2:	4bbf      	ldr	r3, [pc, #764]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 80015d4:	430a      	orrs	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	e019      	b.n	800160e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015da:	4bbd      	ldr	r3, [pc, #756]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4bbc      	ldr	r3, [pc, #752]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 80015e0:	49bd      	ldr	r1, [pc, #756]	; (80018d8 <HAL_RCC_OscConfig+0x690>)
 80015e2:	400a      	ands	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fbd5 	bl	8000d94 <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015f0:	f7ff fbd0 	bl	8000d94 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1eb      	b.n	80019da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001602:	4bb3      	ldr	r3, [pc, #716]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4013      	ands	r3, r2
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2208      	movs	r2, #8
 8001614:	4013      	ands	r3, r2
 8001616:	d036      	beq.n	8001686 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d019      	beq.n	8001654 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001620:	4bab      	ldr	r3, [pc, #684]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001622:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001624:	4baa      	ldr	r3, [pc, #680]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001626:	2101      	movs	r1, #1
 8001628:	430a      	orrs	r2, r1
 800162a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162c:	f7ff fbb2 	bl	8000d94 <HAL_GetTick>
 8001630:	0003      	movs	r3, r0
 8001632:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001636:	f7ff fbad 	bl	8000d94 <HAL_GetTick>
 800163a:	0002      	movs	r2, r0
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e1c8      	b.n	80019da <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001648:	4ba1      	ldr	r3, [pc, #644]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 800164a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800164c:	2202      	movs	r2, #2
 800164e:	4013      	ands	r3, r2
 8001650:	d0f1      	beq.n	8001636 <HAL_RCC_OscConfig+0x3ee>
 8001652:	e018      	b.n	8001686 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001654:	4b9e      	ldr	r3, [pc, #632]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001658:	4b9d      	ldr	r3, [pc, #628]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 800165a:	2101      	movs	r1, #1
 800165c:	438a      	bics	r2, r1
 800165e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff fb98 	bl	8000d94 <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff fb93 	bl	8000d94 <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e1ae      	b.n	80019da <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800167c:	4b94      	ldr	r3, [pc, #592]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 800167e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001680:	2202      	movs	r2, #2
 8001682:	4013      	ands	r3, r2
 8001684:	d1f1      	bne.n	800166a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2204      	movs	r2, #4
 800168c:	4013      	ands	r3, r2
 800168e:	d100      	bne.n	8001692 <HAL_RCC_OscConfig+0x44a>
 8001690:	e0ae      	b.n	80017f0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001692:	2023      	movs	r0, #35	; 0x23
 8001694:	183b      	adds	r3, r7, r0
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169a:	4b8d      	ldr	r3, [pc, #564]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 800169c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	055b      	lsls	r3, r3, #21
 80016a2:	4013      	ands	r3, r2
 80016a4:	d109      	bne.n	80016ba <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b8a      	ldr	r3, [pc, #552]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 80016a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016aa:	4b89      	ldr	r3, [pc, #548]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	0549      	lsls	r1, r1, #21
 80016b0:	430a      	orrs	r2, r1
 80016b2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80016b4:	183b      	adds	r3, r7, r0
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	4b88      	ldr	r3, [pc, #544]	; (80018dc <HAL_RCC_OscConfig+0x694>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4013      	ands	r3, r2
 80016c4:	d11a      	bne.n	80016fc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c6:	4b85      	ldr	r3, [pc, #532]	; (80018dc <HAL_RCC_OscConfig+0x694>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b84      	ldr	r3, [pc, #528]	; (80018dc <HAL_RCC_OscConfig+0x694>)
 80016cc:	2180      	movs	r1, #128	; 0x80
 80016ce:	0049      	lsls	r1, r1, #1
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d4:	f7ff fb5e 	bl	8000d94 <HAL_GetTick>
 80016d8:	0003      	movs	r3, r0
 80016da:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016de:	f7ff fb59 	bl	8000d94 <HAL_GetTick>
 80016e2:	0002      	movs	r2, r0
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b64      	cmp	r3, #100	; 0x64
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e174      	b.n	80019da <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	4b7a      	ldr	r3, [pc, #488]	; (80018dc <HAL_RCC_OscConfig+0x694>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4013      	ands	r3, r2
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	429a      	cmp	r2, r3
 8001706:	d107      	bne.n	8001718 <HAL_RCC_OscConfig+0x4d0>
 8001708:	4b71      	ldr	r3, [pc, #452]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 800170a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800170c:	4b70      	ldr	r3, [pc, #448]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	0049      	lsls	r1, r1, #1
 8001712:	430a      	orrs	r2, r1
 8001714:	651a      	str	r2, [r3, #80]	; 0x50
 8001716:	e031      	b.n	800177c <HAL_RCC_OscConfig+0x534>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10c      	bne.n	800173a <HAL_RCC_OscConfig+0x4f2>
 8001720:	4b6b      	ldr	r3, [pc, #428]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001722:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001724:	4b6a      	ldr	r3, [pc, #424]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001726:	496c      	ldr	r1, [pc, #432]	; (80018d8 <HAL_RCC_OscConfig+0x690>)
 8001728:	400a      	ands	r2, r1
 800172a:	651a      	str	r2, [r3, #80]	; 0x50
 800172c:	4b68      	ldr	r3, [pc, #416]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 800172e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001730:	4b67      	ldr	r3, [pc, #412]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001732:	496b      	ldr	r1, [pc, #428]	; (80018e0 <HAL_RCC_OscConfig+0x698>)
 8001734:	400a      	ands	r2, r1
 8001736:	651a      	str	r2, [r3, #80]	; 0x50
 8001738:	e020      	b.n	800177c <HAL_RCC_OscConfig+0x534>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	23a0      	movs	r3, #160	; 0xa0
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	429a      	cmp	r2, r3
 8001744:	d10e      	bne.n	8001764 <HAL_RCC_OscConfig+0x51c>
 8001746:	4b62      	ldr	r3, [pc, #392]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001748:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800174a:	4b61      	ldr	r3, [pc, #388]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	00c9      	lsls	r1, r1, #3
 8001750:	430a      	orrs	r2, r1
 8001752:	651a      	str	r2, [r3, #80]	; 0x50
 8001754:	4b5e      	ldr	r3, [pc, #376]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001756:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001758:	4b5d      	ldr	r3, [pc, #372]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 800175a:	2180      	movs	r1, #128	; 0x80
 800175c:	0049      	lsls	r1, r1, #1
 800175e:	430a      	orrs	r2, r1
 8001760:	651a      	str	r2, [r3, #80]	; 0x50
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0x534>
 8001764:	4b5a      	ldr	r3, [pc, #360]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001766:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001768:	4b59      	ldr	r3, [pc, #356]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 800176a:	495b      	ldr	r1, [pc, #364]	; (80018d8 <HAL_RCC_OscConfig+0x690>)
 800176c:	400a      	ands	r2, r1
 800176e:	651a      	str	r2, [r3, #80]	; 0x50
 8001770:	4b57      	ldr	r3, [pc, #348]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001772:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001774:	4b56      	ldr	r3, [pc, #344]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001776:	495a      	ldr	r1, [pc, #360]	; (80018e0 <HAL_RCC_OscConfig+0x698>)
 8001778:	400a      	ands	r2, r1
 800177a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d015      	beq.n	80017b0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001784:	f7ff fb06 	bl	8000d94 <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800178c:	e009      	b.n	80017a2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff fb01 	bl	8000d94 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_RCC_OscConfig+0x69c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e11b      	b.n	80019da <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017a2:	4b4b      	ldr	r3, [pc, #300]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 80017a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4013      	ands	r3, r2
 80017ac:	d0ef      	beq.n	800178e <HAL_RCC_OscConfig+0x546>
 80017ae:	e014      	b.n	80017da <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b0:	f7ff faf0 	bl	8000d94 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017b8:	e009      	b.n	80017ce <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ba:	f7ff faeb 	bl	8000d94 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	4a47      	ldr	r2, [pc, #284]	; (80018e4 <HAL_RCC_OscConfig+0x69c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e105      	b.n	80019da <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017ce:	4b40      	ldr	r3, [pc, #256]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 80017d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4013      	ands	r3, r2
 80017d8:	d1ef      	bne.n	80017ba <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017da:	2323      	movs	r3, #35	; 0x23
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e4:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 80017e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017e8:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 80017ea:	493f      	ldr	r1, [pc, #252]	; (80018e8 <HAL_RCC_OscConfig+0x6a0>)
 80017ec:	400a      	ands	r2, r1
 80017ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2220      	movs	r2, #32
 80017f6:	4013      	ands	r3, r2
 80017f8:	d049      	beq.n	800188e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d026      	beq.n	8001850 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001802:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001808:	2101      	movs	r1, #1
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001812:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001814:	2101      	movs	r1, #1
 8001816:	430a      	orrs	r2, r1
 8001818:	635a      	str	r2, [r3, #52]	; 0x34
 800181a:	4b34      	ldr	r3, [pc, #208]	; (80018ec <HAL_RCC_OscConfig+0x6a4>)
 800181c:	6a1a      	ldr	r2, [r3, #32]
 800181e:	4b33      	ldr	r3, [pc, #204]	; (80018ec <HAL_RCC_OscConfig+0x6a4>)
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	0189      	lsls	r1, r1, #6
 8001824:	430a      	orrs	r2, r1
 8001826:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fab4 	bl	8000d94 <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001832:	f7ff faaf 	bl	8000d94 <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e0ca      	b.n	80019da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001844:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2202      	movs	r2, #2
 800184a:	4013      	ands	r3, r2
 800184c:	d0f1      	beq.n	8001832 <HAL_RCC_OscConfig+0x5ea>
 800184e:	e01e      	b.n	800188e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001850:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001856:	2101      	movs	r1, #1
 8001858:	438a      	bics	r2, r1
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <HAL_RCC_OscConfig+0x6a4>)
 800185e:	6a1a      	ldr	r2, [r3, #32]
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_RCC_OscConfig+0x6a4>)
 8001862:	4923      	ldr	r1, [pc, #140]	; (80018f0 <HAL_RCC_OscConfig+0x6a8>)
 8001864:	400a      	ands	r2, r1
 8001866:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fa94 	bl	8000d94 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001872:	f7ff fa8f 	bl	8000d94 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e0aa      	b.n	80019da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2202      	movs	r2, #2
 800188a:	4013      	ands	r3, r2
 800188c:	d1f1      	bne.n	8001872 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001892:	2b00      	cmp	r3, #0
 8001894:	d100      	bne.n	8001898 <HAL_RCC_OscConfig+0x650>
 8001896:	e09f      	b.n	80019d8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d100      	bne.n	80018a0 <HAL_RCC_OscConfig+0x658>
 800189e:	e078      	b.n	8001992 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d159      	bne.n	800195c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_RCC_OscConfig+0x688>)
 80018ae:	4911      	ldr	r1, [pc, #68]	; (80018f4 <HAL_RCC_OscConfig+0x6ac>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fa6e 	bl	8000d94 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018bc:	e01c      	b.n	80018f8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018be:	f7ff fa69 	bl	8000d94 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d915      	bls.n	80018f8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e084      	b.n	80019da <HAL_RCC_OscConfig+0x792>
 80018d0:	40021000 	.word	0x40021000
 80018d4:	ffff1fff 	.word	0xffff1fff
 80018d8:	fffffeff 	.word	0xfffffeff
 80018dc:	40007000 	.word	0x40007000
 80018e0:	fffffbff 	.word	0xfffffbff
 80018e4:	00001388 	.word	0x00001388
 80018e8:	efffffff 	.word	0xefffffff
 80018ec:	40010000 	.word	0x40010000
 80018f0:	ffffdfff 	.word	0xffffdfff
 80018f4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018f8:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <HAL_RCC_OscConfig+0x79c>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	049b      	lsls	r3, r3, #18
 8001900:	4013      	ands	r3, r2
 8001902:	d1dc      	bne.n	80018be <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001904:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <HAL_RCC_OscConfig+0x79c>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4a37      	ldr	r2, [pc, #220]	; (80019e8 <HAL_RCC_OscConfig+0x7a0>)
 800190a:	4013      	ands	r3, r2
 800190c:	0019      	movs	r1, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191c:	431a      	orrs	r2, r3
 800191e:	4b31      	ldr	r3, [pc, #196]	; (80019e4 <HAL_RCC_OscConfig+0x79c>)
 8001920:	430a      	orrs	r2, r1
 8001922:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001924:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <HAL_RCC_OscConfig+0x79c>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <HAL_RCC_OscConfig+0x79c>)
 800192a:	2180      	movs	r1, #128	; 0x80
 800192c:	0449      	lsls	r1, r1, #17
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001932:	f7ff fa2f 	bl	8000d94 <HAL_GetTick>
 8001936:	0003      	movs	r3, r0
 8001938:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff fa2a 	bl	8000d94 <HAL_GetTick>
 8001940:	0002      	movs	r2, r0
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e045      	b.n	80019da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_RCC_OscConfig+0x79c>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	049b      	lsls	r3, r3, #18
 8001956:	4013      	ands	r3, r2
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x6f4>
 800195a:	e03d      	b.n	80019d8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195c:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <HAL_RCC_OscConfig+0x79c>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_RCC_OscConfig+0x79c>)
 8001962:	4922      	ldr	r1, [pc, #136]	; (80019ec <HAL_RCC_OscConfig+0x7a4>)
 8001964:	400a      	ands	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fa14 	bl	8000d94 <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001972:	f7ff fa0f 	bl	8000d94 <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e02a      	b.n	80019da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <HAL_RCC_OscConfig+0x79c>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	049b      	lsls	r3, r3, #18
 800198c:	4013      	ands	r3, r2
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x72a>
 8001990:	e022      	b.n	80019d8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e01d      	b.n	80019da <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <HAL_RCC_OscConfig+0x79c>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	025b      	lsls	r3, r3, #9
 80019aa:	401a      	ands	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d10f      	bne.n	80019d4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	23f0      	movs	r3, #240	; 0xf0
 80019b8:	039b      	lsls	r3, r3, #14
 80019ba:	401a      	ands	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	23c0      	movs	r3, #192	; 0xc0
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	401a      	ands	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b00a      	add	sp, #40	; 0x28
 80019e0:	bdb0      	pop	{r4, r5, r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	40021000 	.word	0x40021000
 80019e8:	ff02ffff 	.word	0xff02ffff
 80019ec:	feffffff 	.word	0xfeffffff

080019f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f0:	b5b0      	push	{r4, r5, r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e128      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a04:	4b96      	ldr	r3, [pc, #600]	; (8001c60 <HAL_RCC_ClockConfig+0x270>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d91e      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b93      	ldr	r3, [pc, #588]	; (8001c60 <HAL_RCC_ClockConfig+0x270>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2201      	movs	r2, #1
 8001a18:	4393      	bics	r3, r2
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	4b90      	ldr	r3, [pc, #576]	; (8001c60 <HAL_RCC_ClockConfig+0x270>)
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a24:	f7ff f9b6 	bl	8000d94 <HAL_GetTick>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2c:	e009      	b.n	8001a42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2e:	f7ff f9b1 	bl	8000d94 <HAL_GetTick>
 8001a32:	0002      	movs	r2, r0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	4a8a      	ldr	r2, [pc, #552]	; (8001c64 <HAL_RCC_ClockConfig+0x274>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e109      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b87      	ldr	r3, [pc, #540]	; (8001c60 <HAL_RCC_ClockConfig+0x270>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	4013      	ands	r3, r2
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d1ee      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2202      	movs	r2, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	d009      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a5a:	4b83      	ldr	r3, [pc, #524]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	22f0      	movs	r2, #240	; 0xf0
 8001a60:	4393      	bics	r3, r2
 8001a62:	0019      	movs	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	4b7f      	ldr	r3, [pc, #508]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2201      	movs	r2, #1
 8001a74:	4013      	ands	r3, r2
 8001a76:	d100      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x8a>
 8001a78:	e089      	b.n	8001b8e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a82:	4b79      	ldr	r3, [pc, #484]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	029b      	lsls	r3, r3, #10
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d120      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0e1      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a9a:	4b73      	ldr	r3, [pc, #460]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	049b      	lsls	r3, r3, #18
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d114      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0d5      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d106      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ab2:	4b6d      	ldr	r3, [pc, #436]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d109      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0ca      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ac0:	4b69      	ldr	r3, [pc, #420]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0c2      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad0:	4b65      	ldr	r3, [pc, #404]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	4393      	bics	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	4b62      	ldr	r3, [pc, #392]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae4:	f7ff f956 	bl	8000d94 <HAL_GetTick>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d111      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af4:	e009      	b.n	8001b0a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af6:	f7ff f94d 	bl	8000d94 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	4a58      	ldr	r2, [pc, #352]	; (8001c64 <HAL_RCC_ClockConfig+0x274>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e0a5      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b0a:	4b57      	ldr	r3, [pc, #348]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	220c      	movs	r2, #12
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d1ef      	bne.n	8001af6 <HAL_RCC_ClockConfig+0x106>
 8001b16:	e03a      	b.n	8001b8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d111      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b20:	e009      	b.n	8001b36 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b22:	f7ff f937 	bl	8000d94 <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	4a4d      	ldr	r2, [pc, #308]	; (8001c64 <HAL_RCC_ClockConfig+0x274>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e08f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b36:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	d1ef      	bne.n	8001b22 <HAL_RCC_ClockConfig+0x132>
 8001b42:	e024      	b.n	8001b8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d11b      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b4c:	e009      	b.n	8001b62 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4e:	f7ff f921 	bl	8000d94 <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	4a42      	ldr	r2, [pc, #264]	; (8001c64 <HAL_RCC_ClockConfig+0x274>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e079      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b62:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	220c      	movs	r2, #12
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d1ef      	bne.n	8001b4e <HAL_RCC_ClockConfig+0x15e>
 8001b6e:	e00e      	b.n	8001b8e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7ff f910 	bl	8000d94 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	4a3a      	ldr	r2, [pc, #232]	; (8001c64 <HAL_RCC_ClockConfig+0x274>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e068      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b84:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	220c      	movs	r2, #12
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <HAL_RCC_ClockConfig+0x270>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2201      	movs	r2, #1
 8001b94:	4013      	ands	r3, r2
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d21e      	bcs.n	8001bda <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9c:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_RCC_ClockConfig+0x270>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4393      	bics	r3, r2
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_RCC_ClockConfig+0x270>)
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bae:	f7ff f8f1 	bl	8000d94 <HAL_GetTick>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	e009      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb8:	f7ff f8ec 	bl	8000d94 <HAL_GetTick>
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	4a28      	ldr	r2, [pc, #160]	; (8001c64 <HAL_RCC_ClockConfig+0x274>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e044      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bcc:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <HAL_RCC_ClockConfig+0x270>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d1ee      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2204      	movs	r2, #4
 8001be0:	4013      	ands	r3, r2
 8001be2:	d009      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be4:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	4a20      	ldr	r2, [pc, #128]	; (8001c6c <HAL_RCC_ClockConfig+0x27c>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	0019      	movs	r1, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d00a      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c02:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	4a1a      	ldr	r2, [pc, #104]	; (8001c70 <HAL_RCC_ClockConfig+0x280>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	00da      	lsls	r2, r3, #3
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001c14:	430a      	orrs	r2, r1
 8001c16:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c18:	f000 f832 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001c1c:	0001      	movs	r1, r0
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	220f      	movs	r2, #15
 8001c26:	4013      	ands	r3, r2
 8001c28:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <HAL_RCC_ClockConfig+0x284>)
 8001c2a:	5cd3      	ldrb	r3, [r2, r3]
 8001c2c:	000a      	movs	r2, r1
 8001c2e:	40da      	lsrs	r2, r3
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_RCC_ClockConfig+0x288>)
 8001c32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_RCC_ClockConfig+0x28c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	250b      	movs	r5, #11
 8001c3a:	197c      	adds	r4, r7, r5
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff f863 	bl	8000d08 <HAL_InitTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001c46:	197b      	adds	r3, r7, r5
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c4e:	197b      	adds	r3, r7, r5
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	e000      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b004      	add	sp, #16
 8001c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	40022000 	.word	0x40022000
 8001c64:	00001388 	.word	0x00001388
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	fffff8ff 	.word	0xfffff8ff
 8001c70:	ffffc7ff 	.word	0xffffc7ff
 8001c74:	08002b58 	.word	0x08002b58
 8001c78:	20000104 	.word	0x20000104
 8001c7c:	20000108 	.word	0x20000108

08001c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	b08e      	sub	sp, #56	; 0x38
 8001c84:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c86:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c8e:	230c      	movs	r3, #12
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d014      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001c96:	d900      	bls.n	8001c9a <HAL_RCC_GetSysClockFreq+0x1a>
 8001c98:	e07b      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x112>
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d002      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x24>
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d00b      	beq.n	8001cba <HAL_RCC_GetSysClockFreq+0x3a>
 8001ca2:	e076      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ca4:	4b44      	ldr	r3, [pc, #272]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	4013      	ands	r3, r2
 8001cac:	d002      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001cae:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001cb2:	e07c      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001cb4:	4b42      	ldr	r3, [pc, #264]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001cb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cb8:	e079      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cba:	4b42      	ldr	r3, [pc, #264]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001cbc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cbe:	e076      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc2:	0c9a      	lsrs	r2, r3, #18
 8001cc4:	230f      	movs	r3, #15
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x148>)
 8001cca:	5c9b      	ldrb	r3, [r3, r2]
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	0d9a      	lsrs	r2, r3, #22
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cda:	4b37      	ldr	r3, [pc, #220]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	025b      	lsls	r3, r3, #9
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d01a      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	4a35      	ldr	r2, [pc, #212]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	69b8      	ldr	r0, [r7, #24]
 8001cf4:	69f9      	ldr	r1, [r7, #28]
 8001cf6:	f7fe fab3 	bl	8000260 <__aeabi_lmul>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	000b      	movs	r3, r1
 8001cfe:	0010      	movs	r0, r2
 8001d00:	0019      	movs	r1, r3
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f7fe fa87 	bl	8000220 <__aeabi_uldivmod>
 8001d12:	0002      	movs	r2, r0
 8001d14:	000b      	movs	r3, r1
 8001d16:	0013      	movs	r3, r2
 8001d18:	637b      	str	r3, [r7, #52]	; 0x34
 8001d1a:	e037      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d1c:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2210      	movs	r2, #16
 8001d22:	4013      	ands	r3, r2
 8001d24:	d01a      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d30:	2300      	movs	r3, #0
 8001d32:	68b8      	ldr	r0, [r7, #8]
 8001d34:	68f9      	ldr	r1, [r7, #12]
 8001d36:	f7fe fa93 	bl	8000260 <__aeabi_lmul>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	000b      	movs	r3, r1
 8001d3e:	0010      	movs	r0, r2
 8001d40:	0019      	movs	r1, r3
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f7fe fa67 	bl	8000220 <__aeabi_uldivmod>
 8001d52:	0002      	movs	r2, r0
 8001d54:	000b      	movs	r3, r1
 8001d56:	0013      	movs	r3, r2
 8001d58:	637b      	str	r3, [r7, #52]	; 0x34
 8001d5a:	e017      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5e:	0018      	movs	r0, r3
 8001d60:	2300      	movs	r3, #0
 8001d62:	0019      	movs	r1, r3
 8001d64:	4a16      	ldr	r2, [pc, #88]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d66:	2300      	movs	r3, #0
 8001d68:	f7fe fa7a 	bl	8000260 <__aeabi_lmul>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	000b      	movs	r3, r1
 8001d70:	0010      	movs	r0, r2
 8001d72:	0019      	movs	r1, r3
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	001c      	movs	r4, r3
 8001d78:	2300      	movs	r3, #0
 8001d7a:	001d      	movs	r5, r3
 8001d7c:	0022      	movs	r2, r4
 8001d7e:	002b      	movs	r3, r5
 8001d80:	f7fe fa4e 	bl	8000220 <__aeabi_uldivmod>
 8001d84:	0002      	movs	r2, r0
 8001d86:	000b      	movs	r3, r1
 8001d88:	0013      	movs	r3, r2
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d90:	e00d      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	0b5b      	lsrs	r3, r3, #13
 8001d98:	2207      	movs	r2, #7
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	3301      	adds	r3, #1
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	0212      	lsls	r2, r2, #8
 8001da6:	409a      	lsls	r2, r3
 8001da8:	0013      	movs	r3, r2
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b00e      	add	sp, #56	; 0x38
 8001db6:	bdb0      	pop	{r4, r5, r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	003d0900 	.word	0x003d0900
 8001dc0:	00f42400 	.word	0x00f42400
 8001dc4:	007a1200 	.word	0x007a1200
 8001dc8:	08002b70 	.word	0x08002b70

08001dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <HAL_RCC_GetHCLKFreq+0x10>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	20000104 	.word	0x20000104

08001de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001de4:	f7ff fff2 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001de8:	0001      	movs	r1, r0
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	2207      	movs	r2, #7
 8001df2:	4013      	ands	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001df6:	5cd3      	ldrb	r3, [r2, r3]
 8001df8:	40d9      	lsrs	r1, r3
 8001dfa:	000b      	movs	r3, r1
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08002b68 	.word	0x08002b68

08001e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e10:	f7ff ffdc 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001e14:	0001      	movs	r1, r0
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	0adb      	lsrs	r3, r3, #11
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	4013      	ands	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e22:	5cd3      	ldrb	r3, [r2, r3]
 8001e24:	40d9      	lsrs	r1, r3
 8001e26:	000b      	movs	r3, r1
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	40021000 	.word	0x40021000
 8001e34:	08002b68 	.word	0x08002b68

08001e38 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001e40:	2317      	movs	r3, #23
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d106      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d100      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001e5e:	e0d9      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e60:	4ba4      	ldr	r3, [pc, #656]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	055b      	lsls	r3, r3, #21
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d10a      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	4ba1      	ldr	r3, [pc, #644]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e70:	4ba0      	ldr	r3, [pc, #640]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e72:	2180      	movs	r1, #128	; 0x80
 8001e74:	0549      	lsls	r1, r1, #21
 8001e76:	430a      	orrs	r2, r1
 8001e78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e7a:	2317      	movs	r3, #23
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e82:	4b9d      	ldr	r3, [pc, #628]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d11a      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8e:	4b9a      	ldr	r3, [pc, #616]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4b99      	ldr	r3, [pc, #612]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	0049      	lsls	r1, r1, #1
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9c:	f7fe ff7a 	bl	8000d94 <HAL_GetTick>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea6:	f7fe ff75 	bl	8000d94 <HAL_GetTick>
 8001eaa:	0002      	movs	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b64      	cmp	r3, #100	; 0x64
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e118      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	4b8f      	ldr	r3, [pc, #572]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001ec4:	4b8b      	ldr	r3, [pc, #556]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	23c0      	movs	r3, #192	; 0xc0
 8001eca:	039b      	lsls	r3, r3, #14
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	23c0      	movs	r3, #192	; 0xc0
 8001ed6:	039b      	lsls	r3, r3, #14
 8001ed8:	4013      	ands	r3, r2
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	23c0      	movs	r3, #192	; 0xc0
 8001ee6:	039b      	lsls	r3, r3, #14
 8001ee8:	4013      	ands	r3, r2
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d013      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	23c0      	movs	r3, #192	; 0xc0
 8001ef6:	029b      	lsls	r3, r3, #10
 8001ef8:	401a      	ands	r2, r3
 8001efa:	23c0      	movs	r3, #192	; 0xc0
 8001efc:	029b      	lsls	r3, r3, #10
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d10a      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001f02:	4b7c      	ldr	r3, [pc, #496]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	029b      	lsls	r3, r3, #10
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	029b      	lsls	r3, r3, #10
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d101      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0e8      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f18:	4b76      	ldr	r3, [pc, #472]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f1c:	23c0      	movs	r3, #192	; 0xc0
 8001f1e:	029b      	lsls	r3, r3, #10
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d049      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	23c0      	movs	r3, #192	; 0xc0
 8001f30:	029b      	lsls	r3, r3, #10
 8001f32:	4013      	ands	r3, r2
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d004      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	4013      	ands	r3, r2
 8001f42:	d10d      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	23c0      	movs	r3, #192	; 0xc0
 8001f4a:	029b      	lsls	r3, r3, #10
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d034      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d02e      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001f60:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f64:	4a65      	ldr	r2, [pc, #404]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f6a:	4b62      	ldr	r3, [pc, #392]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f6e:	4b61      	ldr	r3, [pc, #388]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	0309      	lsls	r1, r1, #12
 8001f74:	430a      	orrs	r2, r1
 8001f76:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f78:	4b5e      	ldr	r3, [pc, #376]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f7c:	4b5d      	ldr	r3, [pc, #372]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f7e:	4960      	ldr	r1, [pc, #384]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001f80:	400a      	ands	r2, r1
 8001f82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001f84:	4b5b      	ldr	r3, [pc, #364]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	d014      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7fe fefe 	bl	8000d94 <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f9c:	e009      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7fe fef9 	bl	8000d94 <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	4a56      	ldr	r2, [pc, #344]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e09b      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fb2:	4b50      	ldr	r3, [pc, #320]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d0ef      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	23c0      	movs	r3, #192	; 0xc0
 8001fc4:	029b      	lsls	r3, r3, #10
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	23c0      	movs	r3, #192	; 0xc0
 8001fca:	029b      	lsls	r3, r3, #10
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d10c      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001fd0:	4b48      	ldr	r3, [pc, #288]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a4c      	ldr	r2, [pc, #304]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	23c0      	movs	r3, #192	; 0xc0
 8001fe0:	039b      	lsls	r3, r3, #14
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	4b43      	ldr	r3, [pc, #268]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	4b42      	ldr	r3, [pc, #264]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	23c0      	movs	r3, #192	; 0xc0
 8001ff4:	029b      	lsls	r3, r3, #10
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	4b3e      	ldr	r3, [pc, #248]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ffe:	2317      	movs	r3, #23
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d105      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002008:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800200a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800200c:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800200e:	493f      	ldr	r1, [pc, #252]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002010:	400a      	ands	r2, r1
 8002012:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2201      	movs	r2, #1
 800201a:	4013      	ands	r3, r2
 800201c:	d009      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800201e:	4b35      	ldr	r3, [pc, #212]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	2203      	movs	r2, #3
 8002024:	4393      	bics	r3, r2
 8002026:	0019      	movs	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800202e:	430a      	orrs	r2, r1
 8002030:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2202      	movs	r2, #2
 8002038:	4013      	ands	r3, r2
 800203a:	d009      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800203c:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800203e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002040:	220c      	movs	r2, #12
 8002042:	4393      	bics	r3, r2
 8002044:	0019      	movs	r1, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800204c:	430a      	orrs	r2, r1
 800204e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2204      	movs	r2, #4
 8002056:	4013      	ands	r3, r2
 8002058:	d009      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800205a:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	4a2c      	ldr	r2, [pc, #176]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002060:	4013      	ands	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800206a:	430a      	orrs	r2, r1
 800206c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2208      	movs	r2, #8
 8002074:	4013      	ands	r3, r2
 8002076:	d009      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002078:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800207a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207c:	4a25      	ldr	r2, [pc, #148]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800207e:	4013      	ands	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002088:	430a      	orrs	r2, r1
 800208a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4013      	ands	r3, r2
 8002096:	d009      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209c:	4a17      	ldr	r2, [pc, #92]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800209e:	4013      	ands	r3, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69da      	ldr	r2, [r3, #28]
 80020a6:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020a8:	430a      	orrs	r2, r1
 80020aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2240      	movs	r2, #64	; 0x40
 80020b2:	4013      	ands	r3, r2
 80020b4:	d009      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	4a17      	ldr	r2, [pc, #92]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80020bc:	4013      	ands	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2280      	movs	r2, #128	; 0x80
 80020d0:	4013      	ands	r3, r2
 80020d2:	d009      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	4a10      	ldr	r2, [pc, #64]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1a      	ldr	r2, [r3, #32]
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020e4:	430a      	orrs	r2, r1
 80020e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b006      	add	sp, #24
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40007000 	.word	0x40007000
 80020fc:	fffcffff 	.word	0xfffcffff
 8002100:	fff7ffff 	.word	0xfff7ffff
 8002104:	00001388 	.word	0x00001388
 8002108:	ffcfffff 	.word	0xffcfffff
 800210c:	efffffff 	.word	0xefffffff
 8002110:	fffff3ff 	.word	0xfffff3ff
 8002114:	ffffcfff 	.word	0xffffcfff
 8002118:	fbffffff 	.word	0xfbffffff
 800211c:	fff3ffff 	.word	0xfff3ffff

08002120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e044      	b.n	80021bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002136:	2b00      	cmp	r3, #0
 8002138:	d107      	bne.n	800214a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2274      	movs	r2, #116	; 0x74
 800213e:	2100      	movs	r1, #0
 8002140:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	0018      	movs	r0, r3
 8002146:	f7fe fd03 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2224      	movs	r2, #36	; 0x24
 800214e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2101      	movs	r1, #1
 800215c:	438a      	bics	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	0018      	movs	r0, r3
 8002164:	f000 f830 	bl	80021c8 <UART_SetConfig>
 8002168:	0003      	movs	r3, r0
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e024      	b.n	80021bc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	0018      	movs	r0, r3
 800217e:	f000 fae1 	bl	8002744 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	490d      	ldr	r1, [pc, #52]	; (80021c4 <HAL_UART_Init+0xa4>)
 800218e:	400a      	ands	r2, r1
 8002190:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	212a      	movs	r1, #42	; 0x2a
 800219e:	438a      	bics	r2, r1
 80021a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2101      	movs	r1, #1
 80021ae:	430a      	orrs	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	0018      	movs	r0, r3
 80021b6:	f000 fb79 	bl	80028ac <UART_CheckIdleState>
 80021ba:	0003      	movs	r3, r0
}
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	b002      	add	sp, #8
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	ffffb7ff 	.word	0xffffb7ff

080021c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021c8:	b5b0      	push	{r4, r5, r7, lr}
 80021ca:	b08e      	sub	sp, #56	; 0x38
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021d0:	231a      	movs	r3, #26
 80021d2:	2218      	movs	r2, #24
 80021d4:	4694      	mov	ip, r2
 80021d6:	44bc      	add	ip, r7
 80021d8:	4463      	add	r3, ip
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4ab0      	ldr	r2, [pc, #704]	; (80024c0 <UART_SetConfig+0x2f8>)
 80021fe:	4013      	ands	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4aac      	ldr	r2, [pc, #688]	; (80024c4 <UART_SetConfig+0x2fc>)
 8002214:	4013      	ands	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4aa6      	ldr	r2, [pc, #664]	; (80024c8 <UART_SetConfig+0x300>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d004      	beq.n	800223e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800223a:	4313      	orrs	r3, r2
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4aa1      	ldr	r2, [pc, #644]	; (80024cc <UART_SetConfig+0x304>)
 8002246:	4013      	ands	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002250:	430a      	orrs	r2, r1
 8002252:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a9d      	ldr	r2, [pc, #628]	; (80024d0 <UART_SetConfig+0x308>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d136      	bne.n	80022cc <UART_SetConfig+0x104>
 800225e:	4b9d      	ldr	r3, [pc, #628]	; (80024d4 <UART_SetConfig+0x30c>)
 8002260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002262:	2203      	movs	r2, #3
 8002264:	4013      	ands	r3, r2
 8002266:	2b03      	cmp	r3, #3
 8002268:	d020      	beq.n	80022ac <UART_SetConfig+0xe4>
 800226a:	d827      	bhi.n	80022bc <UART_SetConfig+0xf4>
 800226c:	2b02      	cmp	r3, #2
 800226e:	d00d      	beq.n	800228c <UART_SetConfig+0xc4>
 8002270:	d824      	bhi.n	80022bc <UART_SetConfig+0xf4>
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <UART_SetConfig+0xb4>
 8002276:	2b01      	cmp	r3, #1
 8002278:	d010      	beq.n	800229c <UART_SetConfig+0xd4>
 800227a:	e01f      	b.n	80022bc <UART_SetConfig+0xf4>
 800227c:	231b      	movs	r3, #27
 800227e:	2218      	movs	r2, #24
 8002280:	4694      	mov	ip, r2
 8002282:	44bc      	add	ip, r7
 8002284:	4463      	add	r3, ip
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	e0c5      	b.n	8002418 <UART_SetConfig+0x250>
 800228c:	231b      	movs	r3, #27
 800228e:	2218      	movs	r2, #24
 8002290:	4694      	mov	ip, r2
 8002292:	44bc      	add	ip, r7
 8002294:	4463      	add	r3, ip
 8002296:	2202      	movs	r2, #2
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e0bd      	b.n	8002418 <UART_SetConfig+0x250>
 800229c:	231b      	movs	r3, #27
 800229e:	2218      	movs	r2, #24
 80022a0:	4694      	mov	ip, r2
 80022a2:	44bc      	add	ip, r7
 80022a4:	4463      	add	r3, ip
 80022a6:	2204      	movs	r2, #4
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	e0b5      	b.n	8002418 <UART_SetConfig+0x250>
 80022ac:	231b      	movs	r3, #27
 80022ae:	2218      	movs	r2, #24
 80022b0:	4694      	mov	ip, r2
 80022b2:	44bc      	add	ip, r7
 80022b4:	4463      	add	r3, ip
 80022b6:	2208      	movs	r2, #8
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e0ad      	b.n	8002418 <UART_SetConfig+0x250>
 80022bc:	231b      	movs	r3, #27
 80022be:	2218      	movs	r2, #24
 80022c0:	4694      	mov	ip, r2
 80022c2:	44bc      	add	ip, r7
 80022c4:	4463      	add	r3, ip
 80022c6:	2210      	movs	r2, #16
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	e0a5      	b.n	8002418 <UART_SetConfig+0x250>
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a81      	ldr	r2, [pc, #516]	; (80024d8 <UART_SetConfig+0x310>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d136      	bne.n	8002344 <UART_SetConfig+0x17c>
 80022d6:	4b7f      	ldr	r3, [pc, #508]	; (80024d4 <UART_SetConfig+0x30c>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	220c      	movs	r2, #12
 80022dc:	4013      	ands	r3, r2
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d020      	beq.n	8002324 <UART_SetConfig+0x15c>
 80022e2:	d827      	bhi.n	8002334 <UART_SetConfig+0x16c>
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d00d      	beq.n	8002304 <UART_SetConfig+0x13c>
 80022e8:	d824      	bhi.n	8002334 <UART_SetConfig+0x16c>
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <UART_SetConfig+0x12c>
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d010      	beq.n	8002314 <UART_SetConfig+0x14c>
 80022f2:	e01f      	b.n	8002334 <UART_SetConfig+0x16c>
 80022f4:	231b      	movs	r3, #27
 80022f6:	2218      	movs	r2, #24
 80022f8:	4694      	mov	ip, r2
 80022fa:	44bc      	add	ip, r7
 80022fc:	4463      	add	r3, ip
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	e089      	b.n	8002418 <UART_SetConfig+0x250>
 8002304:	231b      	movs	r3, #27
 8002306:	2218      	movs	r2, #24
 8002308:	4694      	mov	ip, r2
 800230a:	44bc      	add	ip, r7
 800230c:	4463      	add	r3, ip
 800230e:	2202      	movs	r2, #2
 8002310:	701a      	strb	r2, [r3, #0]
 8002312:	e081      	b.n	8002418 <UART_SetConfig+0x250>
 8002314:	231b      	movs	r3, #27
 8002316:	2218      	movs	r2, #24
 8002318:	4694      	mov	ip, r2
 800231a:	44bc      	add	ip, r7
 800231c:	4463      	add	r3, ip
 800231e:	2204      	movs	r2, #4
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	e079      	b.n	8002418 <UART_SetConfig+0x250>
 8002324:	231b      	movs	r3, #27
 8002326:	2218      	movs	r2, #24
 8002328:	4694      	mov	ip, r2
 800232a:	44bc      	add	ip, r7
 800232c:	4463      	add	r3, ip
 800232e:	2208      	movs	r2, #8
 8002330:	701a      	strb	r2, [r3, #0]
 8002332:	e071      	b.n	8002418 <UART_SetConfig+0x250>
 8002334:	231b      	movs	r3, #27
 8002336:	2218      	movs	r2, #24
 8002338:	4694      	mov	ip, r2
 800233a:	44bc      	add	ip, r7
 800233c:	4463      	add	r3, ip
 800233e:	2210      	movs	r2, #16
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e069      	b.n	8002418 <UART_SetConfig+0x250>
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a64      	ldr	r2, [pc, #400]	; (80024dc <UART_SetConfig+0x314>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d107      	bne.n	800235e <UART_SetConfig+0x196>
 800234e:	231b      	movs	r3, #27
 8002350:	2218      	movs	r2, #24
 8002352:	4694      	mov	ip, r2
 8002354:	44bc      	add	ip, r7
 8002356:	4463      	add	r3, ip
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
 800235c:	e05c      	b.n	8002418 <UART_SetConfig+0x250>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a5f      	ldr	r2, [pc, #380]	; (80024e0 <UART_SetConfig+0x318>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d107      	bne.n	8002378 <UART_SetConfig+0x1b0>
 8002368:	231b      	movs	r3, #27
 800236a:	2218      	movs	r2, #24
 800236c:	4694      	mov	ip, r2
 800236e:	44bc      	add	ip, r7
 8002370:	4463      	add	r3, ip
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
 8002376:	e04f      	b.n	8002418 <UART_SetConfig+0x250>
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <UART_SetConfig+0x300>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d143      	bne.n	800240a <UART_SetConfig+0x242>
 8002382:	4b54      	ldr	r3, [pc, #336]	; (80024d4 <UART_SetConfig+0x30c>)
 8002384:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002386:	23c0      	movs	r3, #192	; 0xc0
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	4013      	ands	r3, r2
 800238c:	22c0      	movs	r2, #192	; 0xc0
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	4293      	cmp	r3, r2
 8002392:	d02a      	beq.n	80023ea <UART_SetConfig+0x222>
 8002394:	22c0      	movs	r2, #192	; 0xc0
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	4293      	cmp	r3, r2
 800239a:	d82e      	bhi.n	80023fa <UART_SetConfig+0x232>
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	0112      	lsls	r2, r2, #4
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d012      	beq.n	80023ca <UART_SetConfig+0x202>
 80023a4:	2280      	movs	r2, #128	; 0x80
 80023a6:	0112      	lsls	r2, r2, #4
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d826      	bhi.n	80023fa <UART_SetConfig+0x232>
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d004      	beq.n	80023ba <UART_SetConfig+0x1f2>
 80023b0:	2280      	movs	r2, #128	; 0x80
 80023b2:	00d2      	lsls	r2, r2, #3
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d010      	beq.n	80023da <UART_SetConfig+0x212>
 80023b8:	e01f      	b.n	80023fa <UART_SetConfig+0x232>
 80023ba:	231b      	movs	r3, #27
 80023bc:	2218      	movs	r2, #24
 80023be:	4694      	mov	ip, r2
 80023c0:	44bc      	add	ip, r7
 80023c2:	4463      	add	r3, ip
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e026      	b.n	8002418 <UART_SetConfig+0x250>
 80023ca:	231b      	movs	r3, #27
 80023cc:	2218      	movs	r2, #24
 80023ce:	4694      	mov	ip, r2
 80023d0:	44bc      	add	ip, r7
 80023d2:	4463      	add	r3, ip
 80023d4:	2202      	movs	r2, #2
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	e01e      	b.n	8002418 <UART_SetConfig+0x250>
 80023da:	231b      	movs	r3, #27
 80023dc:	2218      	movs	r2, #24
 80023de:	4694      	mov	ip, r2
 80023e0:	44bc      	add	ip, r7
 80023e2:	4463      	add	r3, ip
 80023e4:	2204      	movs	r2, #4
 80023e6:	701a      	strb	r2, [r3, #0]
 80023e8:	e016      	b.n	8002418 <UART_SetConfig+0x250>
 80023ea:	231b      	movs	r3, #27
 80023ec:	2218      	movs	r2, #24
 80023ee:	4694      	mov	ip, r2
 80023f0:	44bc      	add	ip, r7
 80023f2:	4463      	add	r3, ip
 80023f4:	2208      	movs	r2, #8
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	e00e      	b.n	8002418 <UART_SetConfig+0x250>
 80023fa:	231b      	movs	r3, #27
 80023fc:	2218      	movs	r2, #24
 80023fe:	4694      	mov	ip, r2
 8002400:	44bc      	add	ip, r7
 8002402:	4463      	add	r3, ip
 8002404:	2210      	movs	r2, #16
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e006      	b.n	8002418 <UART_SetConfig+0x250>
 800240a:	231b      	movs	r3, #27
 800240c:	2218      	movs	r2, #24
 800240e:	4694      	mov	ip, r2
 8002410:	44bc      	add	ip, r7
 8002412:	4463      	add	r3, ip
 8002414:	2210      	movs	r2, #16
 8002416:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a2a      	ldr	r2, [pc, #168]	; (80024c8 <UART_SetConfig+0x300>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d000      	beq.n	8002424 <UART_SetConfig+0x25c>
 8002422:	e09e      	b.n	8002562 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002424:	231b      	movs	r3, #27
 8002426:	2218      	movs	r2, #24
 8002428:	4694      	mov	ip, r2
 800242a:	44bc      	add	ip, r7
 800242c:	4463      	add	r3, ip
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b08      	cmp	r3, #8
 8002432:	d01d      	beq.n	8002470 <UART_SetConfig+0x2a8>
 8002434:	dc20      	bgt.n	8002478 <UART_SetConfig+0x2b0>
 8002436:	2b04      	cmp	r3, #4
 8002438:	d015      	beq.n	8002466 <UART_SetConfig+0x29e>
 800243a:	dc1d      	bgt.n	8002478 <UART_SetConfig+0x2b0>
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <UART_SetConfig+0x27e>
 8002440:	2b02      	cmp	r3, #2
 8002442:	d005      	beq.n	8002450 <UART_SetConfig+0x288>
 8002444:	e018      	b.n	8002478 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002446:	f7ff fccb 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 800244a:	0003      	movs	r3, r0
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800244e:	e01d      	b.n	800248c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002450:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <UART_SetConfig+0x30c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2210      	movs	r2, #16
 8002456:	4013      	ands	r3, r2
 8002458:	d002      	beq.n	8002460 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <UART_SetConfig+0x31c>)
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800245e:	e015      	b.n	800248c <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8002460:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <UART_SetConfig+0x320>)
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002464:	e012      	b.n	800248c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002466:	f7ff fc0b 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 800246a:	0003      	movs	r3, r0
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800246e:	e00d      	b.n	800248c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002476:	e009      	b.n	800248c <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800247c:	231a      	movs	r3, #26
 800247e:	2218      	movs	r2, #24
 8002480:	4694      	mov	ip, r2
 8002482:	44bc      	add	ip, r7
 8002484:	4463      	add	r3, ip
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
        break;
 800248a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d100      	bne.n	8002494 <UART_SetConfig+0x2cc>
 8002492:	e13c      	b.n	800270e <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	0013      	movs	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	189b      	adds	r3, r3, r2
 800249e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d305      	bcc.n	80024b0 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80024aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d91d      	bls.n	80024ec <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 80024b0:	231a      	movs	r3, #26
 80024b2:	2218      	movs	r2, #24
 80024b4:	4694      	mov	ip, r2
 80024b6:	44bc      	add	ip, r7
 80024b8:	4463      	add	r3, ip
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	e126      	b.n	800270e <UART_SetConfig+0x546>
 80024c0:	efff69f3 	.word	0xefff69f3
 80024c4:	ffffcfff 	.word	0xffffcfff
 80024c8:	40004800 	.word	0x40004800
 80024cc:	fffff4ff 	.word	0xfffff4ff
 80024d0:	40013800 	.word	0x40013800
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40004400 	.word	0x40004400
 80024dc:	40004c00 	.word	0x40004c00
 80024e0:	40005000 	.word	0x40005000
 80024e4:	003d0900 	.word	0x003d0900
 80024e8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80024ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	6939      	ldr	r1, [r7, #16]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	000b      	movs	r3, r1
 80024fa:	0e1b      	lsrs	r3, r3, #24
 80024fc:	0010      	movs	r0, r2
 80024fe:	0205      	lsls	r5, r0, #8
 8002500:	431d      	orrs	r5, r3
 8002502:	000b      	movs	r3, r1
 8002504:	021c      	lsls	r4, r3, #8
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	085b      	lsrs	r3, r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68b8      	ldr	r0, [r7, #8]
 8002514:	68f9      	ldr	r1, [r7, #12]
 8002516:	1900      	adds	r0, r0, r4
 8002518:	4169      	adcs	r1, r5
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	2300      	movs	r3, #0
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f7fd fe7a 	bl	8000220 <__aeabi_uldivmod>
 800252c:	0002      	movs	r2, r0
 800252e:	000b      	movs	r3, r1
 8002530:	0013      	movs	r3, r2
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002536:	23c0      	movs	r3, #192	; 0xc0
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	429a      	cmp	r2, r3
 800253c:	d309      	bcc.n	8002552 <UART_SetConfig+0x38a>
 800253e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	035b      	lsls	r3, r3, #13
 8002544:	429a      	cmp	r2, r3
 8002546:	d204      	bcs.n	8002552 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800254e:	60da      	str	r2, [r3, #12]
 8002550:	e0dd      	b.n	800270e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002552:	231a      	movs	r3, #26
 8002554:	2218      	movs	r2, #24
 8002556:	4694      	mov	ip, r2
 8002558:	44bc      	add	ip, r7
 800255a:	4463      	add	r3, ip
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
 8002560:	e0d5      	b.n	800270e <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	429a      	cmp	r2, r3
 800256c:	d000      	beq.n	8002570 <UART_SetConfig+0x3a8>
 800256e:	e074      	b.n	800265a <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8002570:	231b      	movs	r3, #27
 8002572:	2218      	movs	r2, #24
 8002574:	4694      	mov	ip, r2
 8002576:	44bc      	add	ip, r7
 8002578:	4463      	add	r3, ip
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d822      	bhi.n	80025c6 <UART_SetConfig+0x3fe>
 8002580:	009a      	lsls	r2, r3, #2
 8002582:	4b6b      	ldr	r3, [pc, #428]	; (8002730 <UART_SetConfig+0x568>)
 8002584:	18d3      	adds	r3, r2, r3
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800258a:	f7ff fc29 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 800258e:	0003      	movs	r3, r0
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002592:	e022      	b.n	80025da <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002594:	f7ff fc3a 	bl	8001e0c <HAL_RCC_GetPCLK2Freq>
 8002598:	0003      	movs	r3, r0
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800259c:	e01d      	b.n	80025da <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800259e:	4b65      	ldr	r3, [pc, #404]	; (8002734 <UART_SetConfig+0x56c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2210      	movs	r2, #16
 80025a4:	4013      	ands	r3, r2
 80025a6:	d002      	beq.n	80025ae <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80025a8:	4b63      	ldr	r3, [pc, #396]	; (8002738 <UART_SetConfig+0x570>)
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80025ac:	e015      	b.n	80025da <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 80025ae:	4b63      	ldr	r3, [pc, #396]	; (800273c <UART_SetConfig+0x574>)
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80025b2:	e012      	b.n	80025da <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025b4:	f7ff fb64 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 80025b8:	0003      	movs	r3, r0
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80025bc:	e00d      	b.n	80025da <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80025c4:	e009      	b.n	80025da <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80025ca:	231a      	movs	r3, #26
 80025cc:	2218      	movs	r2, #24
 80025ce:	4694      	mov	ip, r2
 80025d0:	44bc      	add	ip, r7
 80025d2:	4463      	add	r3, ip
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
        break;
 80025d8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d100      	bne.n	80025e2 <UART_SetConfig+0x41a>
 80025e0:	e095      	b.n	800270e <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	005a      	lsls	r2, r3, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	085b      	lsrs	r3, r3, #1
 80025ec:	18d2      	adds	r2, r2, r3
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	0019      	movs	r1, r3
 80025f4:	0010      	movs	r0, r2
 80025f6:	f7fd fd87 	bl	8000108 <__udivsi3>
 80025fa:	0003      	movs	r3, r0
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002602:	2b0f      	cmp	r3, #15
 8002604:	d921      	bls.n	800264a <UART_SetConfig+0x482>
 8002606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	025b      	lsls	r3, r3, #9
 800260c:	429a      	cmp	r2, r3
 800260e:	d21c      	bcs.n	800264a <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002612:	b29a      	uxth	r2, r3
 8002614:	200e      	movs	r0, #14
 8002616:	2418      	movs	r4, #24
 8002618:	193b      	adds	r3, r7, r4
 800261a:	181b      	adds	r3, r3, r0
 800261c:	210f      	movs	r1, #15
 800261e:	438a      	bics	r2, r1
 8002620:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	b29b      	uxth	r3, r3
 8002628:	2207      	movs	r2, #7
 800262a:	4013      	ands	r3, r2
 800262c:	b299      	uxth	r1, r3
 800262e:	193b      	adds	r3, r7, r4
 8002630:	181b      	adds	r3, r3, r0
 8002632:	193a      	adds	r2, r7, r4
 8002634:	1812      	adds	r2, r2, r0
 8002636:	8812      	ldrh	r2, [r2, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	193a      	adds	r2, r7, r4
 8002642:	1812      	adds	r2, r2, r0
 8002644:	8812      	ldrh	r2, [r2, #0]
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	e061      	b.n	800270e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800264a:	231a      	movs	r3, #26
 800264c:	2218      	movs	r2, #24
 800264e:	4694      	mov	ip, r2
 8002650:	44bc      	add	ip, r7
 8002652:	4463      	add	r3, ip
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e059      	b.n	800270e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800265a:	231b      	movs	r3, #27
 800265c:	2218      	movs	r2, #24
 800265e:	4694      	mov	ip, r2
 8002660:	44bc      	add	ip, r7
 8002662:	4463      	add	r3, ip
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b08      	cmp	r3, #8
 8002668:	d822      	bhi.n	80026b0 <UART_SetConfig+0x4e8>
 800266a:	009a      	lsls	r2, r3, #2
 800266c:	4b34      	ldr	r3, [pc, #208]	; (8002740 <UART_SetConfig+0x578>)
 800266e:	18d3      	adds	r3, r2, r3
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002674:	f7ff fbb4 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002678:	0003      	movs	r3, r0
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800267c:	e022      	b.n	80026c4 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800267e:	f7ff fbc5 	bl	8001e0c <HAL_RCC_GetPCLK2Freq>
 8002682:	0003      	movs	r3, r0
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002686:	e01d      	b.n	80026c4 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <UART_SetConfig+0x56c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2210      	movs	r2, #16
 800268e:	4013      	ands	r3, r2
 8002690:	d002      	beq.n	8002698 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002692:	4b29      	ldr	r3, [pc, #164]	; (8002738 <UART_SetConfig+0x570>)
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002696:	e015      	b.n	80026c4 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8002698:	4b28      	ldr	r3, [pc, #160]	; (800273c <UART_SetConfig+0x574>)
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800269c:	e012      	b.n	80026c4 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800269e:	f7ff faef 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 80026a2:	0003      	movs	r3, r0
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026a6:	e00d      	b.n	80026c4 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026ae:	e009      	b.n	80026c4 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80026b4:	231a      	movs	r3, #26
 80026b6:	2218      	movs	r2, #24
 80026b8:	4694      	mov	ip, r2
 80026ba:	44bc      	add	ip, r7
 80026bc:	4463      	add	r3, ip
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
        break;
 80026c2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80026c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d021      	beq.n	800270e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	085a      	lsrs	r2, r3, #1
 80026d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d2:	18d2      	adds	r2, r2, r3
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	0019      	movs	r1, r3
 80026da:	0010      	movs	r0, r2
 80026dc:	f7fd fd14 	bl	8000108 <__udivsi3>
 80026e0:	0003      	movs	r3, r0
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	2b0f      	cmp	r3, #15
 80026ea:	d909      	bls.n	8002700 <UART_SetConfig+0x538>
 80026ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	025b      	lsls	r3, r3, #9
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d204      	bcs.n	8002700 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	e006      	b.n	800270e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002700:	231a      	movs	r3, #26
 8002702:	2218      	movs	r2, #24
 8002704:	4694      	mov	ip, r2
 8002706:	44bc      	add	ip, r7
 8002708:	4463      	add	r3, ip
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	2200      	movs	r2, #0
 8002712:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2200      	movs	r2, #0
 8002718:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800271a:	231a      	movs	r3, #26
 800271c:	2218      	movs	r2, #24
 800271e:	4694      	mov	ip, r2
 8002720:	44bc      	add	ip, r7
 8002722:	4463      	add	r3, ip
 8002724:	781b      	ldrb	r3, [r3, #0]
}
 8002726:	0018      	movs	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	b00e      	add	sp, #56	; 0x38
 800272c:	bdb0      	pop	{r4, r5, r7, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	08002b7c 	.word	0x08002b7c
 8002734:	40021000 	.word	0x40021000
 8002738:	003d0900 	.word	0x003d0900
 800273c:	00f42400 	.word	0x00f42400
 8002740:	08002ba0 	.word	0x08002ba0

08002744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2201      	movs	r2, #1
 8002752:	4013      	ands	r3, r2
 8002754:	d00b      	beq.n	800276e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a4a      	ldr	r2, [pc, #296]	; (8002888 <UART_AdvFeatureConfig+0x144>)
 800275e:	4013      	ands	r3, r2
 8002760:	0019      	movs	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	2202      	movs	r2, #2
 8002774:	4013      	ands	r3, r2
 8002776:	d00b      	beq.n	8002790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4a43      	ldr	r2, [pc, #268]	; (800288c <UART_AdvFeatureConfig+0x148>)
 8002780:	4013      	ands	r3, r2
 8002782:	0019      	movs	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2204      	movs	r2, #4
 8002796:	4013      	ands	r3, r2
 8002798:	d00b      	beq.n	80027b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4a3b      	ldr	r2, [pc, #236]	; (8002890 <UART_AdvFeatureConfig+0x14c>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	2208      	movs	r2, #8
 80027b8:	4013      	ands	r3, r2
 80027ba:	d00b      	beq.n	80027d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4a34      	ldr	r2, [pc, #208]	; (8002894 <UART_AdvFeatureConfig+0x150>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	2210      	movs	r2, #16
 80027da:	4013      	ands	r3, r2
 80027dc:	d00b      	beq.n	80027f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a2c      	ldr	r2, [pc, #176]	; (8002898 <UART_AdvFeatureConfig+0x154>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	0019      	movs	r1, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	2220      	movs	r2, #32
 80027fc:	4013      	ands	r3, r2
 80027fe:	d00b      	beq.n	8002818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	4a25      	ldr	r2, [pc, #148]	; (800289c <UART_AdvFeatureConfig+0x158>)
 8002808:	4013      	ands	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	2240      	movs	r2, #64	; 0x40
 800281e:	4013      	ands	r3, r2
 8002820:	d01d      	beq.n	800285e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <UART_AdvFeatureConfig+0x15c>)
 800282a:	4013      	ands	r3, r2
 800282c:	0019      	movs	r1, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	035b      	lsls	r3, r3, #13
 8002842:	429a      	cmp	r2, r3
 8002844:	d10b      	bne.n	800285e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a15      	ldr	r2, [pc, #84]	; (80028a4 <UART_AdvFeatureConfig+0x160>)
 800284e:	4013      	ands	r3, r2
 8002850:	0019      	movs	r1, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	2280      	movs	r2, #128	; 0x80
 8002864:	4013      	ands	r3, r2
 8002866:	d00b      	beq.n	8002880 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4a0e      	ldr	r2, [pc, #56]	; (80028a8 <UART_AdvFeatureConfig+0x164>)
 8002870:	4013      	ands	r3, r2
 8002872:	0019      	movs	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
  }
}
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b002      	add	sp, #8
 8002886:	bd80      	pop	{r7, pc}
 8002888:	fffdffff 	.word	0xfffdffff
 800288c:	fffeffff 	.word	0xfffeffff
 8002890:	fffbffff 	.word	0xfffbffff
 8002894:	ffff7fff 	.word	0xffff7fff
 8002898:	ffffefff 	.word	0xffffefff
 800289c:	ffffdfff 	.word	0xffffdfff
 80028a0:	ffefffff 	.word	0xffefffff
 80028a4:	ff9fffff 	.word	0xff9fffff
 80028a8:	fff7ffff 	.word	0xfff7ffff

080028ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	2100      	movs	r1, #0
 80028ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028bc:	f7fe fa6a 	bl	8000d94 <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2208      	movs	r2, #8
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d10c      	bne.n	80028ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2280      	movs	r2, #128	; 0x80
 80028d6:	0391      	lsls	r1, r2, #14
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4a17      	ldr	r2, [pc, #92]	; (8002938 <UART_CheckIdleState+0x8c>)
 80028dc:	9200      	str	r2, [sp, #0]
 80028de:	2200      	movs	r2, #0
 80028e0:	f000 f82c 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d001      	beq.n	80028ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e021      	b.n	8002930 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2204      	movs	r2, #4
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d10c      	bne.n	8002914 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2280      	movs	r2, #128	; 0x80
 80028fe:	03d1      	lsls	r1, r2, #15
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4a0d      	ldr	r2, [pc, #52]	; (8002938 <UART_CheckIdleState+0x8c>)
 8002904:	9200      	str	r2, [sp, #0]
 8002906:	2200      	movs	r2, #0
 8002908:	f000 f818 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 800290c:	1e03      	subs	r3, r0, #0
 800290e:	d001      	beq.n	8002914 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e00d      	b.n	8002930 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2220      	movs	r2, #32
 800291e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2274      	movs	r2, #116	; 0x74
 800292a:	2100      	movs	r1, #0
 800292c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b004      	add	sp, #16
 8002936:	bd80      	pop	{r7, pc}
 8002938:	01ffffff 	.word	0x01ffffff

0800293c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b094      	sub	sp, #80	; 0x50
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	1dfb      	adds	r3, r7, #7
 800294a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800294c:	e0a3      	b.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002950:	3301      	adds	r3, #1
 8002952:	d100      	bne.n	8002956 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002954:	e09f      	b.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002956:	f7fe fa1d 	bl	8000d94 <HAL_GetTick>
 800295a:	0002      	movs	r2, r0
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002962:	429a      	cmp	r2, r3
 8002964:	d302      	bcc.n	800296c <UART_WaitOnFlagUntilTimeout+0x30>
 8002966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002968:	2b00      	cmp	r3, #0
 800296a:	d13d      	bne.n	80029e8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800296c:	f3ef 8310 	mrs	r3, PRIMASK
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002974:	647b      	str	r3, [r7, #68]	; 0x44
 8002976:	2301      	movs	r3, #1
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	f383 8810 	msr	PRIMASK, r3
}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	494c      	ldr	r1, [pc, #304]	; (8002ac0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800298e:	400a      	ands	r2, r1
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002994:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	f383 8810 	msr	PRIMASK, r3
}
 800299c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800299e:	f3ef 8310 	mrs	r3, PRIMASK
 80029a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80029a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a6:	643b      	str	r3, [r7, #64]	; 0x40
 80029a8:	2301      	movs	r3, #1
 80029aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ae:	f383 8810 	msr	PRIMASK, r3
}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2101      	movs	r1, #1
 80029c0:	438a      	bics	r2, r1
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ca:	f383 8810 	msr	PRIMASK, r3
}
 80029ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2220      	movs	r2, #32
 80029d4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2274      	movs	r2, #116	; 0x74
 80029e0:	2100      	movs	r1, #0
 80029e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e067      	b.n	8002ab8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2204      	movs	r2, #4
 80029f0:	4013      	ands	r3, r2
 80029f2:	d050      	beq.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	401a      	ands	r2, r3
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d146      	bne.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2280      	movs	r2, #128	; 0x80
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a12:	f3ef 8310 	mrs	r3, PRIMASK
 8002a16:	613b      	str	r3, [r7, #16]
  return(result);
 8002a18:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f383 8810 	msr	PRIMASK, r3
}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4923      	ldr	r1, [pc, #140]	; (8002ac0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002a34:	400a      	ands	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f383 8810 	msr	PRIMASK, r3
}
 8002a42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a44:	f3ef 8310 	mrs	r3, PRIMASK
 8002a48:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a4a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a4e:	2301      	movs	r3, #1
 8002a50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	f383 8810 	msr	PRIMASK, r3
}
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2101      	movs	r1, #1
 8002a66:	438a      	bics	r2, r1
 8002a68:	609a      	str	r2, [r3, #8]
 8002a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	f383 8810 	msr	PRIMASK, r3
}
 8002a74:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2280      	movs	r2, #128	; 0x80
 8002a86:	2120      	movs	r1, #32
 8002a88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2274      	movs	r2, #116	; 0x74
 8002a8e:	2100      	movs	r1, #0
 8002a90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e010      	b.n	8002ab8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	425a      	negs	r2, r3
 8002aa6:	4153      	adcs	r3, r2
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	001a      	movs	r2, r3
 8002aac:	1dfb      	adds	r3, r7, #7
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d100      	bne.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002ab4:	e74b      	b.n	800294e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	0018      	movs	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b014      	add	sp, #80	; 0x50
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	fffffe5f 	.word	0xfffffe5f

08002ac4 <__libc_init_array>:
 8002ac4:	b570      	push	{r4, r5, r6, lr}
 8002ac6:	2600      	movs	r6, #0
 8002ac8:	4d0c      	ldr	r5, [pc, #48]	; (8002afc <__libc_init_array+0x38>)
 8002aca:	4c0d      	ldr	r4, [pc, #52]	; (8002b00 <__libc_init_array+0x3c>)
 8002acc:	1b64      	subs	r4, r4, r5
 8002ace:	10a4      	asrs	r4, r4, #2
 8002ad0:	42a6      	cmp	r6, r4
 8002ad2:	d109      	bne.n	8002ae8 <__libc_init_array+0x24>
 8002ad4:	2600      	movs	r6, #0
 8002ad6:	f000 f821 	bl	8002b1c <_init>
 8002ada:	4d0a      	ldr	r5, [pc, #40]	; (8002b04 <__libc_init_array+0x40>)
 8002adc:	4c0a      	ldr	r4, [pc, #40]	; (8002b08 <__libc_init_array+0x44>)
 8002ade:	1b64      	subs	r4, r4, r5
 8002ae0:	10a4      	asrs	r4, r4, #2
 8002ae2:	42a6      	cmp	r6, r4
 8002ae4:	d105      	bne.n	8002af2 <__libc_init_array+0x2e>
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}
 8002ae8:	00b3      	lsls	r3, r6, #2
 8002aea:	58eb      	ldr	r3, [r5, r3]
 8002aec:	4798      	blx	r3
 8002aee:	3601      	adds	r6, #1
 8002af0:	e7ee      	b.n	8002ad0 <__libc_init_array+0xc>
 8002af2:	00b3      	lsls	r3, r6, #2
 8002af4:	58eb      	ldr	r3, [r5, r3]
 8002af6:	4798      	blx	r3
 8002af8:	3601      	adds	r6, #1
 8002afa:	e7f2      	b.n	8002ae2 <__libc_init_array+0x1e>
 8002afc:	08002bcc 	.word	0x08002bcc
 8002b00:	08002bcc 	.word	0x08002bcc
 8002b04:	08002bcc 	.word	0x08002bcc
 8002b08:	08002bd0 	.word	0x08002bd0

08002b0c <memset>:
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	1882      	adds	r2, r0, r2
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d100      	bne.n	8002b16 <memset+0xa>
 8002b14:	4770      	bx	lr
 8002b16:	7019      	strb	r1, [r3, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	e7f9      	b.n	8002b10 <memset+0x4>

08002b1c <_init>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b22:	bc08      	pop	{r3}
 8002b24:	469e      	mov	lr, r3
 8002b26:	4770      	bx	lr

08002b28 <_fini>:
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2e:	bc08      	pop	{r3}
 8002b30:	469e      	mov	lr, r3
 8002b32:	4770      	bx	lr
