
SysBee_Test_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002824  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080028e4  080028e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002964  08002964  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  08002964  08002964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800296c  0800296c  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800296c  0800296c  0001296c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08002974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000218  08002b8c  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08002b8c  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008809  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000147e  00000000  00000000  00028a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00029ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000628  00000000  00000000  0002a568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013609  00000000  00000000  0002ab90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008921  00000000  00000000  0003e199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000793d4  00000000  00000000  00046aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bfe8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016d4  00000000  00000000  000bfee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000218 	.word	0x20000218
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080028cc 	.word	0x080028cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000021c 	.word	0x2000021c
 8000104:	080028cc 	.word	0x080028cc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f000 fae9 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f8d7 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004aa:	f000 f9ab 	bl	8000804 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ae:	f000 f979 	bl	80007a4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004b2:	f000 f947 	bl	8000744 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(xbee_rx_read_index<xbee_rx_write_index){
 80004b6:	4b61      	ldr	r3, [pc, #388]	; (800063c <main+0x1a0>)
 80004b8:	781a      	ldrb	r2, [r3, #0]
 80004ba:	4b61      	ldr	r3, [pc, #388]	; (8000640 <main+0x1a4>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d2f9      	bcs.n	80004b6 <main+0x1a>
		  uint32_t sum = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	607b      	str	r3, [r7, #4]
		  switch (state){
 80004c6:	4b5f      	ldr	r3, [pc, #380]	; (8000644 <main+0x1a8>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b04      	cmp	r3, #4
 80004cc:	d900      	bls.n	80004d0 <main+0x34>
 80004ce:	e0ae      	b.n	800062e <main+0x192>
 80004d0:	009a      	lsls	r2, r3, #2
 80004d2:	4b5d      	ldr	r3, [pc, #372]	; (8000648 <main+0x1ac>)
 80004d4:	18d3      	adds	r3, r2, r3
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	469f      	mov	pc, r3
			  case idle:
				  if(xbee_rx_buffer[xbee_rx_read_index] == 0x7E) state = frame_length;
 80004da:	4b58      	ldr	r3, [pc, #352]	; (800063c <main+0x1a0>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	001a      	movs	r2, r3
 80004e0:	4b5a      	ldr	r3, [pc, #360]	; (800064c <main+0x1b0>)
 80004e2:	5c9b      	ldrb	r3, [r3, r2]
 80004e4:	2b7e      	cmp	r3, #126	; 0x7e
 80004e6:	d000      	beq.n	80004ea <main+0x4e>
 80004e8:	e09e      	b.n	8000628 <main+0x18c>
 80004ea:	4b56      	ldr	r3, [pc, #344]	; (8000644 <main+0x1a8>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	701a      	strb	r2, [r3, #0]
			  break;
 80004f0:	e09a      	b.n	8000628 <main+0x18c>

			  case frame_length:
				  if(recieved_frame.length==0xFFFF) recieved_frame.length = ((uint16_t)(xbee_rx_buffer[xbee_rx_read_index])) <<8;
 80004f2:	4b57      	ldr	r3, [pc, #348]	; (8000650 <main+0x1b4>)
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	4a57      	ldr	r2, [pc, #348]	; (8000654 <main+0x1b8>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d10a      	bne.n	8000512 <main+0x76>
 80004fc:	4b4f      	ldr	r3, [pc, #316]	; (800063c <main+0x1a0>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	001a      	movs	r2, r3
 8000502:	4b52      	ldr	r3, [pc, #328]	; (800064c <main+0x1b0>)
 8000504:	5c9b      	ldrb	r3, [r3, r2]
 8000506:	b29b      	uxth	r3, r3
 8000508:	021b      	lsls	r3, r3, #8
 800050a:	b29a      	uxth	r2, r3
 800050c:	4b50      	ldr	r3, [pc, #320]	; (8000650 <main+0x1b4>)
 800050e:	801a      	strh	r2, [r3, #0]
				  else{
					  recieved_frame.length += xbee_rx_buffer[xbee_rx_read_index];
					  state = frame_type;
				  }
			  break;
 8000510:	e08d      	b.n	800062e <main+0x192>
					  recieved_frame.length += xbee_rx_buffer[xbee_rx_read_index];
 8000512:	4b4f      	ldr	r3, [pc, #316]	; (8000650 <main+0x1b4>)
 8000514:	881a      	ldrh	r2, [r3, #0]
 8000516:	4b49      	ldr	r3, [pc, #292]	; (800063c <main+0x1a0>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	0019      	movs	r1, r3
 800051c:	4b4b      	ldr	r3, [pc, #300]	; (800064c <main+0x1b0>)
 800051e:	5c5b      	ldrb	r3, [r3, r1]
 8000520:	b29b      	uxth	r3, r3
 8000522:	18d3      	adds	r3, r2, r3
 8000524:	b29a      	uxth	r2, r3
 8000526:	4b4a      	ldr	r3, [pc, #296]	; (8000650 <main+0x1b4>)
 8000528:	801a      	strh	r2, [r3, #0]
					  state = frame_type;
 800052a:	4b46      	ldr	r3, [pc, #280]	; (8000644 <main+0x1a8>)
 800052c:	2202      	movs	r2, #2
 800052e:	701a      	strb	r2, [r3, #0]
			  break;
 8000530:	e07d      	b.n	800062e <main+0x192>

			  case frame_type:
				  recieved_frame.type = xbee_rx_buffer[xbee_rx_read_index];
 8000532:	4b42      	ldr	r3, [pc, #264]	; (800063c <main+0x1a0>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	001a      	movs	r2, r3
 8000538:	4b44      	ldr	r3, [pc, #272]	; (800064c <main+0x1b0>)
 800053a:	5c9a      	ldrb	r2, [r3, r2]
 800053c:	4b44      	ldr	r3, [pc, #272]	; (8000650 <main+0x1b4>)
 800053e:	709a      	strb	r2, [r3, #2]
				  state = frame_content;
 8000540:	4b40      	ldr	r3, [pc, #256]	; (8000644 <main+0x1a8>)
 8000542:	2203      	movs	r2, #3
 8000544:	701a      	strb	r2, [r3, #0]
			  break;
 8000546:	e072      	b.n	800062e <main+0x192>

			  case frame_content:
				  if(recieved_frame.content_index < recieved_frame.length){
 8000548:	4a41      	ldr	r2, [pc, #260]	; (8000650 <main+0x1b4>)
 800054a:	2304      	movs	r3, #4
 800054c:	33ff      	adds	r3, #255	; 0xff
 800054e:	5cd3      	ldrb	r3, [r2, r3]
 8000550:	b29a      	uxth	r2, r3
 8000552:	4b3f      	ldr	r3, [pc, #252]	; (8000650 <main+0x1b4>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	429a      	cmp	r2, r3
 8000558:	d268      	bcs.n	800062c <main+0x190>
					  recieved_frame.content[recieved_frame.content_index] = xbee_rx_buffer[xbee_rx_read_index];
 800055a:	4b38      	ldr	r3, [pc, #224]	; (800063c <main+0x1a0>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	0018      	movs	r0, r3
 8000560:	4a3b      	ldr	r2, [pc, #236]	; (8000650 <main+0x1b4>)
 8000562:	2304      	movs	r3, #4
 8000564:	33ff      	adds	r3, #255	; 0xff
 8000566:	5cd3      	ldrb	r3, [r2, r3]
 8000568:	0019      	movs	r1, r3
 800056a:	4b38      	ldr	r3, [pc, #224]	; (800064c <main+0x1b0>)
 800056c:	5c1a      	ldrb	r2, [r3, r0]
 800056e:	4b38      	ldr	r3, [pc, #224]	; (8000650 <main+0x1b4>)
 8000570:	185b      	adds	r3, r3, r1
 8000572:	70da      	strb	r2, [r3, #3]
					  recieved_frame.content_index++;
 8000574:	4a36      	ldr	r2, [pc, #216]	; (8000650 <main+0x1b4>)
 8000576:	2304      	movs	r3, #4
 8000578:	33ff      	adds	r3, #255	; 0xff
 800057a:	5cd3      	ldrb	r3, [r2, r3]
 800057c:	3301      	adds	r3, #1
 800057e:	b2d9      	uxtb	r1, r3
 8000580:	4a33      	ldr	r2, [pc, #204]	; (8000650 <main+0x1b4>)
 8000582:	2304      	movs	r3, #4
 8000584:	33ff      	adds	r3, #255	; 0xff
 8000586:	54d1      	strb	r1, [r2, r3]
					  if(recieved_frame.content_index = recieved_frame.length) state = check_sum;
 8000588:	4b31      	ldr	r3, [pc, #196]	; (8000650 <main+0x1b4>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	b2d9      	uxtb	r1, r3
 800058e:	4a30      	ldr	r2, [pc, #192]	; (8000650 <main+0x1b4>)
 8000590:	2304      	movs	r3, #4
 8000592:	33ff      	adds	r3, #255	; 0xff
 8000594:	54d1      	strb	r1, [r2, r3]
 8000596:	4a2e      	ldr	r2, [pc, #184]	; (8000650 <main+0x1b4>)
 8000598:	2304      	movs	r3, #4
 800059a:	33ff      	adds	r3, #255	; 0xff
 800059c:	5cd3      	ldrb	r3, [r2, r3]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d044      	beq.n	800062c <main+0x190>
 80005a2:	4b28      	ldr	r3, [pc, #160]	; (8000644 <main+0x1a8>)
 80005a4:	2204      	movs	r2, #4
 80005a6:	701a      	strb	r2, [r3, #0]
				  }
			  break;
 80005a8:	e040      	b.n	800062c <main+0x190>

			  case check_sum:
				  recieved_frame.check_sum = xbee_rx_buffer[xbee_rx_read_index];
 80005aa:	4b24      	ldr	r3, [pc, #144]	; (800063c <main+0x1a0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	001a      	movs	r2, r3
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <main+0x1b0>)
 80005b2:	5c99      	ldrb	r1, [r3, r2]
 80005b4:	4a26      	ldr	r2, [pc, #152]	; (8000650 <main+0x1b4>)
 80005b6:	2382      	movs	r3, #130	; 0x82
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	54d1      	strb	r1, [r2, r3]
				  for(uint16_t i=0; i<recieved_frame.length; i++) sum += recieved_frame.content[i];
 80005bc:	1cbb      	adds	r3, r7, #2
 80005be:	2200      	movs	r2, #0
 80005c0:	801a      	strh	r2, [r3, #0]
 80005c2:	e00d      	b.n	80005e0 <main+0x144>
 80005c4:	1cbb      	adds	r3, r7, #2
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <main+0x1b4>)
 80005ca:	18d3      	adds	r3, r2, r3
 80005cc:	78db      	ldrb	r3, [r3, #3]
 80005ce:	001a      	movs	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	189b      	adds	r3, r3, r2
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	1cbb      	adds	r3, r7, #2
 80005d8:	881a      	ldrh	r2, [r3, #0]
 80005da:	1cbb      	adds	r3, r7, #2
 80005dc:	3201      	adds	r2, #1
 80005de:	801a      	strh	r2, [r3, #0]
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <main+0x1b4>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	1cba      	adds	r2, r7, #2
 80005e6:	8812      	ldrh	r2, [r2, #0]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d3eb      	bcc.n	80005c4 <main+0x128>
				  sum += recieved_frame.type + recieved_frame.check_sum;
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <main+0x1b4>)
 80005ee:	789b      	ldrb	r3, [r3, #2]
 80005f0:	0019      	movs	r1, r3
 80005f2:	4a17      	ldr	r2, [pc, #92]	; (8000650 <main+0x1b4>)
 80005f4:	2382      	movs	r3, #130	; 0x82
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	5cd3      	ldrb	r3, [r2, r3]
 80005fa:	18cb      	adds	r3, r1, r3
 80005fc:	001a      	movs	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	189b      	adds	r3, r3, r2
 8000602:	607b      	str	r3, [r7, #4]
				  recieved_frame.check_sum_ok = ((sum & 0b11110000)>>4) == (sum & 0b00001111);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	091a      	lsrs	r2, r3, #4
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4053      	eors	r3, r2
 800060c:	220f      	movs	r2, #15
 800060e:	4013      	ands	r3, r2
 8000610:	425a      	negs	r2, r3
 8000612:	4153      	adcs	r3, r2
 8000614:	b2db      	uxtb	r3, r3
 8000616:	0019      	movs	r1, r3
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <main+0x1b4>)
 800061a:	2306      	movs	r3, #6
 800061c:	33ff      	adds	r3, #255	; 0xff
 800061e:	54d1      	strb	r1, [r2, r3]
				  state = idle;
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <main+0x1a8>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
			  break;
 8000626:	e002      	b.n	800062e <main+0x192>
			  break;
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	e000      	b.n	800062e <main+0x192>
			  break;
 800062c:	46c0      	nop			; (mov r8, r8)
		  }

		  xbee_rx_read_index += 1;
 800062e:	4b03      	ldr	r3, [pc, #12]	; (800063c <main+0x1a0>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b01      	ldr	r3, [pc, #4]	; (800063c <main+0x1a0>)
 8000638:	701a      	strb	r2, [r3, #0]
	  if(xbee_rx_read_index<xbee_rx_write_index){
 800063a:	e73c      	b.n	80004b6 <main+0x1a>
 800063c:	20000234 	.word	0x20000234
 8000640:	20000100 	.word	0x20000100
 8000644:	20000238 	.word	0x20000238
 8000648:	080028e4 	.word	0x080028e4
 800064c:	20000000 	.word	0x20000000
 8000650:	20000104 	.word	0x20000104
 8000654:	0000ffff 	.word	0x0000ffff

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b09f      	sub	sp, #124	; 0x7c
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	2440      	movs	r4, #64	; 0x40
 8000660:	193b      	adds	r3, r7, r4
 8000662:	0018      	movs	r0, r3
 8000664:	2338      	movs	r3, #56	; 0x38
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f002 f927 	bl	80028bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066e:	232c      	movs	r3, #44	; 0x2c
 8000670:	18fb      	adds	r3, r7, r3
 8000672:	0018      	movs	r0, r3
 8000674:	2314      	movs	r3, #20
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f002 f91f 	bl	80028bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	0018      	movs	r0, r3
 8000682:	2328      	movs	r3, #40	; 0x28
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f002 f918 	bl	80028bc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	4b2b      	ldr	r3, [pc, #172]	; (800073c <SystemClock_Config+0xe4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a2b      	ldr	r2, [pc, #172]	; (8000740 <SystemClock_Config+0xe8>)
 8000692:	401a      	ands	r2, r3
 8000694:	4b29      	ldr	r3, [pc, #164]	; (800073c <SystemClock_Config+0xe4>)
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	0109      	lsls	r1, r1, #4
 800069a:	430a      	orrs	r2, r1
 800069c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069e:	0021      	movs	r1, r4
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2202      	movs	r2, #2
 80006a4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2201      	movs	r2, #1
 80006aa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2210      	movs	r2, #16
 80006b0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2202      	movs	r2, #2
 80006b6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	02d2      	lsls	r2, r2, #11
 80006c4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	03d2      	lsls	r2, r2, #15
 80006cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 fc91 	bl	8000ff8 <HAL_RCC_OscConfig>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006da:	f000 f8f7 	bl	80008cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	212c      	movs	r1, #44	; 0x2c
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	220f      	movs	r2, #15
 80006e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2203      	movs	r2, #3
 80006ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2101      	movs	r1, #1
 8000702:	0018      	movs	r0, r3
 8000704:	f001 f84c 	bl	80017a0 <HAL_RCC_ClockConfig>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800070c:	f000 f8de 	bl	80008cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2203      	movs	r2, #3
 8000714:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	0018      	movs	r0, r3
 8000726:	f001 fa5f 	bl	8001be8 <HAL_RCCEx_PeriphCLKConfig>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800072e:	f000 f8cd 	bl	80008cc <Error_Handler>
  }
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b01f      	add	sp, #124	; 0x7c
 8000738:	bd90      	pop	{r4, r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40007000 	.word	0x40007000
 8000740:	ffffe7ff 	.word	0xffffe7ff

08000744 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USART1_UART_Init+0x58>)
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <MX_USART1_UART_Init+0x5c>)
 800074c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000750:	2296      	movs	r2, #150	; 0x96
 8000752:	0192      	lsls	r2, r2, #6
 8000754:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USART1_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART1_UART_Init+0x58>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART1_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000788:	0018      	movs	r0, r3
 800078a:	f001 fba1 	bl	8001ed0 <HAL_UART_Init>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f89b 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000023c 	.word	0x2000023c
 80007a0:	40013800 	.word	0x40013800

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_USART2_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007b0:	22e1      	movs	r2, #225	; 0xe1
 80007b2:	0252      	lsls	r2, r2, #9
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 fb71 	bl	8001ed0 <HAL_UART_Init>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 f86b 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200002c0 	.word	0x200002c0
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b089      	sub	sp, #36	; 0x24
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	240c      	movs	r4, #12
 800080c:	193b      	adds	r3, r7, r4
 800080e:	0018      	movs	r0, r3
 8000810:	2314      	movs	r3, #20
 8000812:	001a      	movs	r2, r3
 8000814:	2100      	movs	r1, #0
 8000816:	f002 f851 	bl	80028bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <MX_GPIO_Init+0xc0>)
 800081c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081e:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <MX_GPIO_Init+0xc0>)
 8000820:	2104      	movs	r1, #4
 8000822:	430a      	orrs	r2, r1
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
 8000826:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <MX_GPIO_Init+0xc0>)
 8000828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082a:	2204      	movs	r2, #4
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <MX_GPIO_Init+0xc0>)
 8000834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <MX_GPIO_Init+0xc0>)
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	430a      	orrs	r2, r1
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <MX_GPIO_Init+0xc0>)
 8000840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	4013      	ands	r3, r2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_GPIO_Init+0xc0>)
 800084c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_GPIO_Init+0xc0>)
 8000850:	2101      	movs	r1, #1
 8000852:	430a      	orrs	r2, r1
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_GPIO_Init+0xc0>)
 8000858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085a:	2201      	movs	r2, #1
 800085c:	4013      	ands	r3, r2
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000862:	23a0      	movs	r3, #160	; 0xa0
 8000864:	05db      	lsls	r3, r3, #23
 8000866:	2200      	movs	r2, #0
 8000868:	2120      	movs	r1, #32
 800086a:	0018      	movs	r0, r3
 800086c:	f000 fba6 	bl	8000fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2280      	movs	r2, #128	; 0x80
 8000874:	0192      	lsls	r2, r2, #6
 8000876:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2284      	movs	r2, #132	; 0x84
 800087c:	0392      	lsls	r2, r2, #14
 800087e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000886:	193b      	adds	r3, r7, r4
 8000888:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <MX_GPIO_Init+0xc4>)
 800088a:	0019      	movs	r1, r3
 800088c:	0010      	movs	r0, r2
 800088e:	f000 fa17 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000892:	0021      	movs	r1, r4
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2220      	movs	r2, #32
 8000898:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2201      	movs	r2, #1
 800089e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ac:	187a      	adds	r2, r7, r1
 80008ae:	23a0      	movs	r3, #160	; 0xa0
 80008b0:	05db      	lsls	r3, r3, #23
 80008b2:	0011      	movs	r1, r2
 80008b4:	0018      	movs	r0, r3
 80008b6:	f000 fa03 	bl	8000cc0 <HAL_GPIO_Init>

}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b009      	add	sp, #36	; 0x24
 80008c0:	bd90      	pop	{r4, r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	40021000 	.word	0x40021000
 80008c8:	50000800 	.word	0x50000800

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <HAL_MspInit+0x24>)
 80008de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x24>)
 80008e2:	2101      	movs	r1, #1
 80008e4:	430a      	orrs	r2, r1
 80008e6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <HAL_MspInit+0x24>)
 80008ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <HAL_MspInit+0x24>)
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	0549      	lsls	r1, r1, #21
 80008f2:	430a      	orrs	r2, r1
 80008f4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b08b      	sub	sp, #44	; 0x2c
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	2414      	movs	r4, #20
 800090a:	193b      	adds	r3, r7, r4
 800090c:	0018      	movs	r0, r3
 800090e:	2314      	movs	r3, #20
 8000910:	001a      	movs	r2, r3
 8000912:	2100      	movs	r1, #0
 8000914:	f001 ffd2 	bl	80028bc <memset>
  if(huart->Instance==USART1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a30      	ldr	r2, [pc, #192]	; (80009e0 <HAL_UART_MspInit+0xe0>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d12b      	bne.n	800097a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000922:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <HAL_UART_MspInit+0xe4>)
 8000924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000926:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <HAL_UART_MspInit+0xe4>)
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	01c9      	lsls	r1, r1, #7
 800092c:	430a      	orrs	r2, r1
 800092e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <HAL_UART_MspInit+0xe4>)
 8000932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000934:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <HAL_UART_MspInit+0xe4>)
 8000936:	2101      	movs	r1, #1
 8000938:	430a      	orrs	r2, r1
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
 800093c:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <HAL_UART_MspInit+0xe4>)
 800093e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000940:	2201      	movs	r2, #1
 8000942:	4013      	ands	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000948:	193b      	adds	r3, r7, r4
 800094a:	22c0      	movs	r2, #192	; 0xc0
 800094c:	00d2      	lsls	r2, r2, #3
 800094e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	0021      	movs	r1, r4
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2202      	movs	r2, #2
 8000956:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2203      	movs	r2, #3
 8000962:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2204      	movs	r2, #4
 8000968:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	187a      	adds	r2, r7, r1
 800096c:	23a0      	movs	r3, #160	; 0xa0
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f000 f9a4 	bl	8000cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000978:	e02e      	b.n	80009d8 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a1a      	ldr	r2, [pc, #104]	; (80009e8 <HAL_UART_MspInit+0xe8>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d129      	bne.n	80009d8 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <HAL_UART_MspInit+0xe4>)
 8000986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <HAL_UART_MspInit+0xe4>)
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	0289      	lsls	r1, r1, #10
 800098e:	430a      	orrs	r2, r1
 8000990:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <HAL_UART_MspInit+0xe4>)
 8000994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <HAL_UART_MspInit+0xe4>)
 8000998:	2101      	movs	r1, #1
 800099a:	430a      	orrs	r2, r1
 800099c:	62da      	str	r2, [r3, #44]	; 0x2c
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <HAL_UART_MspInit+0xe4>)
 80009a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a2:	2201      	movs	r2, #1
 80009a4:	4013      	ands	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009aa:	2114      	movs	r1, #20
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	220c      	movs	r2, #12
 80009b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2202      	movs	r2, #2
 80009b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2203      	movs	r2, #3
 80009c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2204      	movs	r2, #4
 80009c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	187a      	adds	r2, r7, r1
 80009cc:	23a0      	movs	r3, #160	; 0xa0
 80009ce:	05db      	lsls	r3, r3, #23
 80009d0:	0011      	movs	r1, r2
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 f974 	bl	8000cc0 <HAL_GPIO_Init>
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b00b      	add	sp, #44	; 0x2c
 80009de:	bd90      	pop	{r4, r7, pc}
 80009e0:	40013800 	.word	0x40013800
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40004400 	.word	0x40004400

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <NMI_Handler+0x4>

080009f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler+0x4>

080009f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a10:	f000 f886 	bl	8000b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2a:	490e      	ldr	r1, [pc, #56]	; (8000a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <LoopForever+0xe>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a40:	4c0b      	ldr	r4, [pc, #44]	; (8000a70 <LoopForever+0x16>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a4e:	f7ff ffe4 	bl	8000a1a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f001 ff0f 	bl	8002874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fd21 	bl	800049c <main>

08000a5a <LoopForever>:

LoopForever:
    b LoopForever
 8000a5a:	e7fe      	b.n	8000a5a <LoopForever>
   ldr   r0, =_estack
 8000a5c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8000a68:	08002974 	.word	0x08002974
  ldr r2, =_sbss
 8000a6c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8000a70:	20000348 	.word	0x20000348

08000a74 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC1_COMP_IRQHandler>
	...

08000a78 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_Init+0x3c>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_Init+0x3c>)
 8000a8a:	2140      	movs	r1, #64	; 0x40
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a90:	2000      	movs	r0, #0
 8000a92:	f000 f811 	bl	8000ab8 <HAL_InitTick>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d003      	beq.n	8000aa2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	e001      	b.n	8000aa6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aa2:	f7ff ff19 	bl	80008d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
}
 8000aaa:	0018      	movs	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b002      	add	sp, #8
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_InitTick+0x5c>)
 8000ac2:	681c      	ldr	r4, [r3, #0]
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <HAL_InitTick+0x60>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	0019      	movs	r1, r3
 8000aca:	23fa      	movs	r3, #250	; 0xfa
 8000acc:	0098      	lsls	r0, r3, #2
 8000ace:	f7ff fb1b 	bl	8000108 <__udivsi3>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	0020      	movs	r0, r4
 8000ad8:	f7ff fb16 	bl	8000108 <__udivsi3>
 8000adc:	0003      	movs	r3, r0
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 f8e1 	bl	8000ca6 <HAL_SYSTICK_Config>
 8000ae4:	1e03      	subs	r3, r0, #0
 8000ae6:	d001      	beq.n	8000aec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e00f      	b.n	8000b0c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d80b      	bhi.n	8000b0a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	2301      	movs	r3, #1
 8000af6:	425b      	negs	r3, r3
 8000af8:	2200      	movs	r2, #0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 f8be 	bl	8000c7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_InitTick+0x64>)
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e000      	b.n	8000b0c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b003      	add	sp, #12
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	2000020c 	.word	0x2000020c
 8000b18:	20000214 	.word	0x20000214
 8000b1c:	20000210 	.word	0x20000210

08000b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_IncTick+0x1c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	001a      	movs	r2, r3
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_IncTick+0x20>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	18d2      	adds	r2, r2, r3
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_IncTick+0x20>)
 8000b32:	601a      	str	r2, [r3, #0]
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	20000214 	.word	0x20000214
 8000b40:	20000344 	.word	0x20000344

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b02      	ldr	r3, [pc, #8]	; (8000b54 <HAL_GetTick+0x10>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	20000344 	.word	0x20000344

08000b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	0002      	movs	r2, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b6c:	d828      	bhi.n	8000bc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b6e:	4a2f      	ldr	r2, [pc, #188]	; (8000c2c <__NVIC_SetPriority+0xd4>)
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	33c0      	adds	r3, #192	; 0xc0
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	589b      	ldr	r3, [r3, r2]
 8000b7e:	1dfa      	adds	r2, r7, #7
 8000b80:	7812      	ldrb	r2, [r2, #0]
 8000b82:	0011      	movs	r1, r2
 8000b84:	2203      	movs	r2, #3
 8000b86:	400a      	ands	r2, r1
 8000b88:	00d2      	lsls	r2, r2, #3
 8000b8a:	21ff      	movs	r1, #255	; 0xff
 8000b8c:	4091      	lsls	r1, r2
 8000b8e:	000a      	movs	r2, r1
 8000b90:	43d2      	mvns	r2, r2
 8000b92:	401a      	ands	r2, r3
 8000b94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	019b      	lsls	r3, r3, #6
 8000b9a:	22ff      	movs	r2, #255	; 0xff
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	4003      	ands	r3, r0
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bac:	481f      	ldr	r0, [pc, #124]	; (8000c2c <__NVIC_SetPriority+0xd4>)
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b25b      	sxtb	r3, r3
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	33c0      	adds	r3, #192	; 0xc0
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bbe:	e031      	b.n	8000c24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc0:	4a1b      	ldr	r2, [pc, #108]	; (8000c30 <__NVIC_SetPriority+0xd8>)
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	230f      	movs	r3, #15
 8000bca:	400b      	ands	r3, r1
 8000bcc:	3b08      	subs	r3, #8
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	3306      	adds	r3, #6
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	18d3      	adds	r3, r2, r3
 8000bd6:	3304      	adds	r3, #4
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	1dfa      	adds	r2, r7, #7
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	0011      	movs	r1, r2
 8000be0:	2203      	movs	r2, #3
 8000be2:	400a      	ands	r2, r1
 8000be4:	00d2      	lsls	r2, r2, #3
 8000be6:	21ff      	movs	r1, #255	; 0xff
 8000be8:	4091      	lsls	r1, r2
 8000bea:	000a      	movs	r2, r1
 8000bec:	43d2      	mvns	r2, r2
 8000bee:	401a      	ands	r2, r3
 8000bf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	019b      	lsls	r3, r3, #6
 8000bf6:	22ff      	movs	r2, #255	; 0xff
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	0018      	movs	r0, r3
 8000c00:	2303      	movs	r3, #3
 8000c02:	4003      	ands	r3, r0
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <__NVIC_SetPriority+0xd8>)
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	001c      	movs	r4, r3
 8000c10:	230f      	movs	r3, #15
 8000c12:	4023      	ands	r3, r4
 8000c14:	3b08      	subs	r3, #8
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	3306      	adds	r3, #6
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	18c3      	adds	r3, r0, r3
 8000c20:	3304      	adds	r3, #4
 8000c22:	601a      	str	r2, [r3, #0]
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b003      	add	sp, #12
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	1e5a      	subs	r2, r3, #1
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	045b      	lsls	r3, r3, #17
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d301      	bcc.n	8000c4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e010      	b.n	8000c6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <SysTick_Config+0x44>)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	3a01      	subs	r2, #1
 8000c52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c54:	2301      	movs	r3, #1
 8000c56:	425b      	negs	r3, r3
 8000c58:	2103      	movs	r1, #3
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f7ff ff7c 	bl	8000b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <SysTick_Config+0x44>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c66:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <SysTick_Config+0x44>)
 8000c68:	2207      	movs	r2, #7
 8000c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	0018      	movs	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	e000e010 	.word	0xe000e010

08000c7c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	210f      	movs	r1, #15
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	1c02      	adds	r2, r0, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff ff5d 	bl	8000b58 <__NVIC_SetPriority>
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b004      	add	sp, #16
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f7ff ffbf 	bl	8000c34 <SysTick_Config>
 8000cb6:	0003      	movs	r3, r0
}
 8000cb8:	0018      	movs	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cd6:	e155      	b.n	8000f84 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	4091      	lsls	r1, r2
 8000ce2:	000a      	movs	r2, r1
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d100      	bne.n	8000cf0 <HAL_GPIO_Init+0x30>
 8000cee:	e146      	b.n	8000f7e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d005      	beq.n	8000d08 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2203      	movs	r2, #3
 8000d02:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d130      	bne.n	8000d6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	409a      	lsls	r2, r3
 8000d16:	0013      	movs	r3, r2
 8000d18:	43da      	mvns	r2, r3
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	409a      	lsls	r2, r3
 8000d2a:	0013      	movs	r3, r2
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d3e:	2201      	movs	r2, #1
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	43da      	mvns	r2, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	091b      	lsrs	r3, r3, #4
 8000d54:	2201      	movs	r2, #1
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2203      	movs	r2, #3
 8000d70:	4013      	ands	r3, r2
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d017      	beq.n	8000da6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	409a      	lsls	r2, r3
 8000d84:	0013      	movs	r3, r2
 8000d86:	43da      	mvns	r2, r3
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	409a      	lsls	r2, r3
 8000d98:	0013      	movs	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2203      	movs	r2, #3
 8000dac:	4013      	ands	r3, r2
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d123      	bne.n	8000dfa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	08da      	lsrs	r2, r3, #3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3208      	adds	r2, #8
 8000dba:	0092      	lsls	r2, r2, #2
 8000dbc:	58d3      	ldr	r3, [r2, r3]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	2207      	movs	r2, #7
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	220f      	movs	r2, #15
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	691a      	ldr	r2, [r3, #16]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	2107      	movs	r1, #7
 8000dde:	400b      	ands	r3, r1
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	409a      	lsls	r2, r3
 8000de4:	0013      	movs	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	08da      	lsrs	r2, r3, #3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3208      	adds	r2, #8
 8000df4:	0092      	lsls	r2, r2, #2
 8000df6:	6939      	ldr	r1, [r7, #16]
 8000df8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2203      	movs	r2, #3
 8000e18:	401a      	ands	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	23c0      	movs	r3, #192	; 0xc0
 8000e34:	029b      	lsls	r3, r3, #10
 8000e36:	4013      	ands	r3, r2
 8000e38:	d100      	bne.n	8000e3c <HAL_GPIO_Init+0x17c>
 8000e3a:	e0a0      	b.n	8000f7e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3c:	4b57      	ldr	r3, [pc, #348]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e40:	4b56      	ldr	r3, [pc, #344]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000e42:	2101      	movs	r1, #1
 8000e44:	430a      	orrs	r2, r1
 8000e46:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e48:	4a55      	ldr	r2, [pc, #340]	; (8000fa0 <HAL_GPIO_Init+0x2e0>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	589b      	ldr	r3, [r3, r2]
 8000e54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2203      	movs	r2, #3
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	220f      	movs	r2, #15
 8000e60:	409a      	lsls	r2, r3
 8000e62:	0013      	movs	r3, r2
 8000e64:	43da      	mvns	r2, r3
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	23a0      	movs	r3, #160	; 0xa0
 8000e70:	05db      	lsls	r3, r3, #23
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d01f      	beq.n	8000eb6 <HAL_GPIO_Init+0x1f6>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4a      	ldr	r2, [pc, #296]	; (8000fa4 <HAL_GPIO_Init+0x2e4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d019      	beq.n	8000eb2 <HAL_GPIO_Init+0x1f2>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a49      	ldr	r2, [pc, #292]	; (8000fa8 <HAL_GPIO_Init+0x2e8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a48      	ldr	r2, [pc, #288]	; (8000fac <HAL_GPIO_Init+0x2ec>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x1ea>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a47      	ldr	r2, [pc, #284]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x1e6>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a46      	ldr	r2, [pc, #280]	; (8000fb4 <HAL_GPIO_Init+0x2f4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x1e2>
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	e00a      	b.n	8000eb8 <HAL_GPIO_Init+0x1f8>
 8000ea2:	2306      	movs	r3, #6
 8000ea4:	e008      	b.n	8000eb8 <HAL_GPIO_Init+0x1f8>
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	e006      	b.n	8000eb8 <HAL_GPIO_Init+0x1f8>
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e004      	b.n	8000eb8 <HAL_GPIO_Init+0x1f8>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	e002      	b.n	8000eb8 <HAL_GPIO_Init+0x1f8>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e000      	b.n	8000eb8 <HAL_GPIO_Init+0x1f8>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	2103      	movs	r1, #3
 8000ebc:	400a      	ands	r2, r1
 8000ebe:	0092      	lsls	r2, r2, #2
 8000ec0:	4093      	lsls	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec8:	4935      	ldr	r1, [pc, #212]	; (8000fa0 <HAL_GPIO_Init+0x2e0>)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	3302      	adds	r3, #2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed6:	4b38      	ldr	r3, [pc, #224]	; (8000fb8 <HAL_GPIO_Init+0x2f8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	025b      	lsls	r3, r3, #9
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000efa:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <HAL_GPIO_Init+0x2f8>)
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f00:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <HAL_GPIO_Init+0x2f8>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	43da      	mvns	r2, r3
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	029b      	lsls	r3, r3, #10
 8000f18:	4013      	ands	r3, r2
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f24:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <HAL_GPIO_Init+0x2f8>)
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f2a:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <HAL_GPIO_Init+0x2f8>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43da      	mvns	r2, r3
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	035b      	lsls	r3, r3, #13
 8000f42:	4013      	ands	r3, r2
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <HAL_GPIO_Init+0x2f8>)
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_GPIO_Init+0x2f8>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	43da      	mvns	r2, r3
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	039b      	lsls	r3, r3, #14
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_GPIO_Init+0x2f8>)
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	40da      	lsrs	r2, r3
 8000f8c:	1e13      	subs	r3, r2, #0
 8000f8e:	d000      	beq.n	8000f92 <HAL_GPIO_Init+0x2d2>
 8000f90:	e6a2      	b.n	8000cd8 <HAL_GPIO_Init+0x18>
  }
}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b006      	add	sp, #24
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	50000400 	.word	0x50000400
 8000fa8:	50000800 	.word	0x50000800
 8000fac:	50000c00 	.word	0x50000c00
 8000fb0:	50001000 	.word	0x50001000
 8000fb4:	50001c00 	.word	0x50001c00
 8000fb8:	40010400 	.word	0x40010400

08000fbc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	0008      	movs	r0, r1
 8000fc6:	0011      	movs	r1, r2
 8000fc8:	1cbb      	adds	r3, r7, #2
 8000fca:	1c02      	adds	r2, r0, #0
 8000fcc:	801a      	strh	r2, [r3, #0]
 8000fce:	1c7b      	adds	r3, r7, #1
 8000fd0:	1c0a      	adds	r2, r1, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd4:	1c7b      	adds	r3, r7, #1
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d004      	beq.n	8000fe6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fdc:	1cbb      	adds	r3, r7, #2
 8000fde:	881a      	ldrh	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000fe4:	e003      	b.n	8000fee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000fe6:	1cbb      	adds	r3, r7, #2
 8000fe8:	881a      	ldrh	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b002      	add	sp, #8
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	f000 fbbf 	bl	800178a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800100c:	4bc9      	ldr	r3, [pc, #804]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	220c      	movs	r2, #12
 8001012:	4013      	ands	r3, r2
 8001014:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001016:	4bc7      	ldr	r3, [pc, #796]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	025b      	lsls	r3, r3, #9
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2201      	movs	r2, #1
 8001028:	4013      	ands	r3, r2
 800102a:	d100      	bne.n	800102e <HAL_RCC_OscConfig+0x36>
 800102c:	e07e      	b.n	800112c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	2b08      	cmp	r3, #8
 8001032:	d007      	beq.n	8001044 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	2b0c      	cmp	r3, #12
 8001038:	d112      	bne.n	8001060 <HAL_RCC_OscConfig+0x68>
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	025b      	lsls	r3, r3, #9
 8001040:	429a      	cmp	r2, r3
 8001042:	d10d      	bne.n	8001060 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	4bbb      	ldr	r3, [pc, #748]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	029b      	lsls	r3, r3, #10
 800104c:	4013      	ands	r3, r2
 800104e:	d100      	bne.n	8001052 <HAL_RCC_OscConfig+0x5a>
 8001050:	e06b      	b.n	800112a <HAL_RCC_OscConfig+0x132>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d167      	bne.n	800112a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	f000 fb95 	bl	800178a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	025b      	lsls	r3, r3, #9
 8001068:	429a      	cmp	r2, r3
 800106a:	d107      	bne.n	800107c <HAL_RCC_OscConfig+0x84>
 800106c:	4bb1      	ldr	r3, [pc, #708]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4bb0      	ldr	r3, [pc, #704]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 8001072:	2180      	movs	r1, #128	; 0x80
 8001074:	0249      	lsls	r1, r1, #9
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e027      	b.n	80010cc <HAL_RCC_OscConfig+0xd4>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	23a0      	movs	r3, #160	; 0xa0
 8001082:	02db      	lsls	r3, r3, #11
 8001084:	429a      	cmp	r2, r3
 8001086:	d10e      	bne.n	80010a6 <HAL_RCC_OscConfig+0xae>
 8001088:	4baa      	ldr	r3, [pc, #680]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4ba9      	ldr	r3, [pc, #676]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 800108e:	2180      	movs	r1, #128	; 0x80
 8001090:	02c9      	lsls	r1, r1, #11
 8001092:	430a      	orrs	r2, r1
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	4ba7      	ldr	r3, [pc, #668]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4ba6      	ldr	r3, [pc, #664]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 800109c:	2180      	movs	r1, #128	; 0x80
 800109e:	0249      	lsls	r1, r1, #9
 80010a0:	430a      	orrs	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	e012      	b.n	80010cc <HAL_RCC_OscConfig+0xd4>
 80010a6:	4ba3      	ldr	r3, [pc, #652]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4ba2      	ldr	r3, [pc, #648]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 80010ac:	49a2      	ldr	r1, [pc, #648]	; (8001338 <HAL_RCC_OscConfig+0x340>)
 80010ae:	400a      	ands	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	4ba0      	ldr	r3, [pc, #640]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	025b      	lsls	r3, r3, #9
 80010ba:	4013      	ands	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4b9c      	ldr	r3, [pc, #624]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b9b      	ldr	r3, [pc, #620]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 80010c6:	499d      	ldr	r1, [pc, #628]	; (800133c <HAL_RCC_OscConfig+0x344>)
 80010c8:	400a      	ands	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d015      	beq.n	8001100 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fd36 	bl	8000b44 <HAL_GetTick>
 80010d8:	0003      	movs	r3, r0
 80010da:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010dc:	e009      	b.n	80010f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010de:	f7ff fd31 	bl	8000b44 <HAL_GetTick>
 80010e2:	0002      	movs	r2, r0
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b64      	cmp	r3, #100	; 0x64
 80010ea:	d902      	bls.n	80010f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	f000 fb4c 	bl	800178a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010f2:	4b90      	ldr	r3, [pc, #576]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	029b      	lsls	r3, r3, #10
 80010fa:	4013      	ands	r3, r2
 80010fc:	d0ef      	beq.n	80010de <HAL_RCC_OscConfig+0xe6>
 80010fe:	e015      	b.n	800112c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fd20 	bl	8000b44 <HAL_GetTick>
 8001104:	0003      	movs	r3, r0
 8001106:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800110a:	f7ff fd1b 	bl	8000b44 <HAL_GetTick>
 800110e:	0002      	movs	r2, r0
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b64      	cmp	r3, #100	; 0x64
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e336      	b.n	800178a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800111c:	4b85      	ldr	r3, [pc, #532]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	029b      	lsls	r3, r3, #10
 8001124:	4013      	ands	r3, r2
 8001126:	d1f0      	bne.n	800110a <HAL_RCC_OscConfig+0x112>
 8001128:	e000      	b.n	800112c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2202      	movs	r2, #2
 8001132:	4013      	ands	r3, r2
 8001134:	d100      	bne.n	8001138 <HAL_RCC_OscConfig+0x140>
 8001136:	e099      	b.n	800126c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	2220      	movs	r2, #32
 8001142:	4013      	ands	r3, r2
 8001144:	d009      	beq.n	800115a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001146:	4b7b      	ldr	r3, [pc, #492]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4b7a      	ldr	r3, [pc, #488]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 800114c:	2120      	movs	r1, #32
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	2220      	movs	r2, #32
 8001156:	4393      	bics	r3, r2
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	2b04      	cmp	r3, #4
 800115e:	d005      	beq.n	800116c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	2b0c      	cmp	r3, #12
 8001164:	d13e      	bne.n	80011e4 <HAL_RCC_OscConfig+0x1ec>
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d13b      	bne.n	80011e4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800116c:	4b71      	ldr	r3, [pc, #452]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2204      	movs	r2, #4
 8001172:	4013      	ands	r3, r2
 8001174:	d004      	beq.n	8001180 <HAL_RCC_OscConfig+0x188>
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e304      	b.n	800178a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	4b6c      	ldr	r3, [pc, #432]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4a6e      	ldr	r2, [pc, #440]	; (8001340 <HAL_RCC_OscConfig+0x348>)
 8001186:	4013      	ands	r3, r2
 8001188:	0019      	movs	r1, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	021a      	lsls	r2, r3, #8
 8001190:	4b68      	ldr	r3, [pc, #416]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 8001192:	430a      	orrs	r2, r1
 8001194:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001196:	4b67      	ldr	r3, [pc, #412]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2209      	movs	r2, #9
 800119c:	4393      	bics	r3, r2
 800119e:	0019      	movs	r1, r3
 80011a0:	4b64      	ldr	r3, [pc, #400]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 80011a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011a4:	430a      	orrs	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011a8:	f000 fc42 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 80011ac:	0001      	movs	r1, r0
 80011ae:	4b61      	ldr	r3, [pc, #388]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	220f      	movs	r2, #15
 80011b6:	4013      	ands	r3, r2
 80011b8:	4a62      	ldr	r2, [pc, #392]	; (8001344 <HAL_RCC_OscConfig+0x34c>)
 80011ba:	5cd3      	ldrb	r3, [r2, r3]
 80011bc:	000a      	movs	r2, r1
 80011be:	40da      	lsrs	r2, r3
 80011c0:	4b61      	ldr	r3, [pc, #388]	; (8001348 <HAL_RCC_OscConfig+0x350>)
 80011c2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80011c4:	4b61      	ldr	r3, [pc, #388]	; (800134c <HAL_RCC_OscConfig+0x354>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2513      	movs	r5, #19
 80011ca:	197c      	adds	r4, r7, r5
 80011cc:	0018      	movs	r0, r3
 80011ce:	f7ff fc73 	bl	8000ab8 <HAL_InitTick>
 80011d2:	0003      	movs	r3, r0
 80011d4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80011d6:	197b      	adds	r3, r7, r5
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d046      	beq.n	800126c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80011de:	197b      	adds	r3, r7, r5
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	e2d2      	b.n	800178a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d027      	beq.n	800123a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011ea:	4b52      	ldr	r3, [pc, #328]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2209      	movs	r2, #9
 80011f0:	4393      	bics	r3, r2
 80011f2:	0019      	movs	r1, r3
 80011f4:	4b4f      	ldr	r3, [pc, #316]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 80011f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f8:	430a      	orrs	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fca2 	bl	8000b44 <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001206:	f7ff fc9d 	bl	8000b44 <HAL_GetTick>
 800120a:	0002      	movs	r2, r0
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e2b8      	b.n	800178a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001218:	4b46      	ldr	r3, [pc, #280]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2204      	movs	r2, #4
 800121e:	4013      	ands	r3, r2
 8001220:	d0f1      	beq.n	8001206 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001222:	4b44      	ldr	r3, [pc, #272]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	4a46      	ldr	r2, [pc, #280]	; (8001340 <HAL_RCC_OscConfig+0x348>)
 8001228:	4013      	ands	r3, r2
 800122a:	0019      	movs	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	021a      	lsls	r2, r3, #8
 8001232:	4b40      	ldr	r3, [pc, #256]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 8001234:	430a      	orrs	r2, r1
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	e018      	b.n	800126c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800123a:	4b3e      	ldr	r3, [pc, #248]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 8001240:	2101      	movs	r1, #1
 8001242:	438a      	bics	r2, r1
 8001244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff fc7d 	bl	8000b44 <HAL_GetTick>
 800124a:	0003      	movs	r3, r0
 800124c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001250:	f7ff fc78 	bl	8000b44 <HAL_GetTick>
 8001254:	0002      	movs	r2, r0
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e293      	b.n	800178a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001262:	4b34      	ldr	r3, [pc, #208]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2204      	movs	r2, #4
 8001268:	4013      	ands	r3, r2
 800126a:	d1f1      	bne.n	8001250 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2210      	movs	r2, #16
 8001272:	4013      	ands	r3, r2
 8001274:	d100      	bne.n	8001278 <HAL_RCC_OscConfig+0x280>
 8001276:	e0a2      	b.n	80013be <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d140      	bne.n	8001300 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800127e:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4013      	ands	r3, r2
 8001288:	d005      	beq.n	8001296 <HAL_RCC_OscConfig+0x29e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e279      	b.n	800178a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001296:	4b27      	ldr	r3, [pc, #156]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4a2d      	ldr	r2, [pc, #180]	; (8001350 <HAL_RCC_OscConfig+0x358>)
 800129c:	4013      	ands	r3, r2
 800129e:	0019      	movs	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 80012a6:	430a      	orrs	r2, r1
 80012a8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012aa:	4b22      	ldr	r3, [pc, #136]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	0a19      	lsrs	r1, r3, #8
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	061a      	lsls	r2, r3, #24
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 80012ba:	430a      	orrs	r2, r1
 80012bc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	0b5b      	lsrs	r3, r3, #13
 80012c4:	3301      	adds	r3, #1
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	0212      	lsls	r2, r2, #8
 80012ca:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	210f      	movs	r1, #15
 80012d4:	400b      	ands	r3, r1
 80012d6:	491b      	ldr	r1, [pc, #108]	; (8001344 <HAL_RCC_OscConfig+0x34c>)
 80012d8:	5ccb      	ldrb	r3, [r1, r3]
 80012da:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <HAL_RCC_OscConfig+0x350>)
 80012de:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_RCC_OscConfig+0x354>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2513      	movs	r5, #19
 80012e6:	197c      	adds	r4, r7, r5
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff fbe5 	bl	8000ab8 <HAL_InitTick>
 80012ee:	0003      	movs	r3, r0
 80012f0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80012f2:	197b      	adds	r3, r7, r5
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d061      	beq.n	80013be <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80012fa:	197b      	adds	r3, r7, r5
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	e244      	b.n	800178a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d040      	beq.n	800138a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_RCC_OscConfig+0x33c>)
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	0049      	lsls	r1, r1, #1
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fc15 	bl	8000b44 <HAL_GetTick>
 800131a:	0003      	movs	r3, r0
 800131c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800131e:	e019      	b.n	8001354 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001320:	f7ff fc10 	bl	8000b44 <HAL_GetTick>
 8001324:	0002      	movs	r2, r0
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d912      	bls.n	8001354 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e22b      	b.n	800178a <HAL_RCC_OscConfig+0x792>
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	40021000 	.word	0x40021000
 8001338:	fffeffff 	.word	0xfffeffff
 800133c:	fffbffff 	.word	0xfffbffff
 8001340:	ffffe0ff 	.word	0xffffe0ff
 8001344:	080028f8 	.word	0x080028f8
 8001348:	2000020c 	.word	0x2000020c
 800134c:	20000210 	.word	0x20000210
 8001350:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001354:	4bca      	ldr	r3, [pc, #808]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4013      	ands	r3, r2
 800135e:	d0df      	beq.n	8001320 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001360:	4bc7      	ldr	r3, [pc, #796]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4ac7      	ldr	r2, [pc, #796]	; (8001684 <HAL_RCC_OscConfig+0x68c>)
 8001366:	4013      	ands	r3, r2
 8001368:	0019      	movs	r1, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800136e:	4bc4      	ldr	r3, [pc, #784]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001370:	430a      	orrs	r2, r1
 8001372:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001374:	4bc2      	ldr	r3, [pc, #776]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	0a19      	lsrs	r1, r3, #8
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	061a      	lsls	r2, r3, #24
 8001382:	4bbf      	ldr	r3, [pc, #764]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001384:	430a      	orrs	r2, r1
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	e019      	b.n	80013be <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800138a:	4bbd      	ldr	r3, [pc, #756]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4bbc      	ldr	r3, [pc, #752]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001390:	49bd      	ldr	r1, [pc, #756]	; (8001688 <HAL_RCC_OscConfig+0x690>)
 8001392:	400a      	ands	r2, r1
 8001394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff fbd5 	bl	8000b44 <HAL_GetTick>
 800139a:	0003      	movs	r3, r0
 800139c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013a0:	f7ff fbd0 	bl	8000b44 <HAL_GetTick>
 80013a4:	0002      	movs	r2, r0
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1eb      	b.n	800178a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013b2:	4bb3      	ldr	r3, [pc, #716]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4013      	ands	r3, r2
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2208      	movs	r2, #8
 80013c4:	4013      	ands	r3, r2
 80013c6:	d036      	beq.n	8001436 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d019      	beq.n	8001404 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d0:	4bab      	ldr	r3, [pc, #684]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80013d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013d4:	4baa      	ldr	r3, [pc, #680]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80013d6:	2101      	movs	r1, #1
 80013d8:	430a      	orrs	r2, r1
 80013da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013dc:	f7ff fbb2 	bl	8000b44 <HAL_GetTick>
 80013e0:	0003      	movs	r3, r0
 80013e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e6:	f7ff fbad 	bl	8000b44 <HAL_GetTick>
 80013ea:	0002      	movs	r2, r0
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e1c8      	b.n	800178a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013f8:	4ba1      	ldr	r3, [pc, #644]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80013fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013fc:	2202      	movs	r2, #2
 80013fe:	4013      	ands	r3, r2
 8001400:	d0f1      	beq.n	80013e6 <HAL_RCC_OscConfig+0x3ee>
 8001402:	e018      	b.n	8001436 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001404:	4b9e      	ldr	r3, [pc, #632]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001406:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001408:	4b9d      	ldr	r3, [pc, #628]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 800140a:	2101      	movs	r1, #1
 800140c:	438a      	bics	r2, r1
 800140e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001410:	f7ff fb98 	bl	8000b44 <HAL_GetTick>
 8001414:	0003      	movs	r3, r0
 8001416:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800141a:	f7ff fb93 	bl	8000b44 <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e1ae      	b.n	800178a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800142c:	4b94      	ldr	r3, [pc, #592]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 800142e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001430:	2202      	movs	r2, #2
 8001432:	4013      	ands	r3, r2
 8001434:	d1f1      	bne.n	800141a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2204      	movs	r2, #4
 800143c:	4013      	ands	r3, r2
 800143e:	d100      	bne.n	8001442 <HAL_RCC_OscConfig+0x44a>
 8001440:	e0ae      	b.n	80015a0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001442:	2023      	movs	r0, #35	; 0x23
 8001444:	183b      	adds	r3, r7, r0
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144a:	4b8d      	ldr	r3, [pc, #564]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 800144c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	055b      	lsls	r3, r3, #21
 8001452:	4013      	ands	r3, r2
 8001454:	d109      	bne.n	800146a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b8a      	ldr	r3, [pc, #552]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800145a:	4b89      	ldr	r3, [pc, #548]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	0549      	lsls	r1, r1, #21
 8001460:	430a      	orrs	r2, r1
 8001462:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001464:	183b      	adds	r3, r7, r0
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146a:	4b88      	ldr	r3, [pc, #544]	; (800168c <HAL_RCC_OscConfig+0x694>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4013      	ands	r3, r2
 8001474:	d11a      	bne.n	80014ac <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001476:	4b85      	ldr	r3, [pc, #532]	; (800168c <HAL_RCC_OscConfig+0x694>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4b84      	ldr	r3, [pc, #528]	; (800168c <HAL_RCC_OscConfig+0x694>)
 800147c:	2180      	movs	r1, #128	; 0x80
 800147e:	0049      	lsls	r1, r1, #1
 8001480:	430a      	orrs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001484:	f7ff fb5e 	bl	8000b44 <HAL_GetTick>
 8001488:	0003      	movs	r3, r0
 800148a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148e:	f7ff fb59 	bl	8000b44 <HAL_GetTick>
 8001492:	0002      	movs	r2, r0
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b64      	cmp	r3, #100	; 0x64
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e174      	b.n	800178a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a0:	4b7a      	ldr	r3, [pc, #488]	; (800168c <HAL_RCC_OscConfig+0x694>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4013      	ands	r3, r2
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d107      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4d0>
 80014b8:	4b71      	ldr	r3, [pc, #452]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80014ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014bc:	4b70      	ldr	r3, [pc, #448]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	0049      	lsls	r1, r1, #1
 80014c2:	430a      	orrs	r2, r1
 80014c4:	651a      	str	r2, [r3, #80]	; 0x50
 80014c6:	e031      	b.n	800152c <HAL_RCC_OscConfig+0x534>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10c      	bne.n	80014ea <HAL_RCC_OscConfig+0x4f2>
 80014d0:	4b6b      	ldr	r3, [pc, #428]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80014d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014d4:	4b6a      	ldr	r3, [pc, #424]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80014d6:	496c      	ldr	r1, [pc, #432]	; (8001688 <HAL_RCC_OscConfig+0x690>)
 80014d8:	400a      	ands	r2, r1
 80014da:	651a      	str	r2, [r3, #80]	; 0x50
 80014dc:	4b68      	ldr	r3, [pc, #416]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80014de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014e0:	4b67      	ldr	r3, [pc, #412]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80014e2:	496b      	ldr	r1, [pc, #428]	; (8001690 <HAL_RCC_OscConfig+0x698>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	651a      	str	r2, [r3, #80]	; 0x50
 80014e8:	e020      	b.n	800152c <HAL_RCC_OscConfig+0x534>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	23a0      	movs	r3, #160	; 0xa0
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d10e      	bne.n	8001514 <HAL_RCC_OscConfig+0x51c>
 80014f6:	4b62      	ldr	r3, [pc, #392]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80014f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014fa:	4b61      	ldr	r3, [pc, #388]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	00c9      	lsls	r1, r1, #3
 8001500:	430a      	orrs	r2, r1
 8001502:	651a      	str	r2, [r3, #80]	; 0x50
 8001504:	4b5e      	ldr	r3, [pc, #376]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001506:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001508:	4b5d      	ldr	r3, [pc, #372]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	0049      	lsls	r1, r1, #1
 800150e:	430a      	orrs	r2, r1
 8001510:	651a      	str	r2, [r3, #80]	; 0x50
 8001512:	e00b      	b.n	800152c <HAL_RCC_OscConfig+0x534>
 8001514:	4b5a      	ldr	r3, [pc, #360]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001516:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001518:	4b59      	ldr	r3, [pc, #356]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 800151a:	495b      	ldr	r1, [pc, #364]	; (8001688 <HAL_RCC_OscConfig+0x690>)
 800151c:	400a      	ands	r2, r1
 800151e:	651a      	str	r2, [r3, #80]	; 0x50
 8001520:	4b57      	ldr	r3, [pc, #348]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001524:	4b56      	ldr	r3, [pc, #344]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001526:	495a      	ldr	r1, [pc, #360]	; (8001690 <HAL_RCC_OscConfig+0x698>)
 8001528:	400a      	ands	r2, r1
 800152a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d015      	beq.n	8001560 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001534:	f7ff fb06 	bl	8000b44 <HAL_GetTick>
 8001538:	0003      	movs	r3, r0
 800153a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800153c:	e009      	b.n	8001552 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153e:	f7ff fb01 	bl	8000b44 <HAL_GetTick>
 8001542:	0002      	movs	r2, r0
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	4a52      	ldr	r2, [pc, #328]	; (8001694 <HAL_RCC_OscConfig+0x69c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e11b      	b.n	800178a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001552:	4b4b      	ldr	r3, [pc, #300]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001554:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4013      	ands	r3, r2
 800155c:	d0ef      	beq.n	800153e <HAL_RCC_OscConfig+0x546>
 800155e:	e014      	b.n	800158a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff faf0 	bl	8000b44 <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001568:	e009      	b.n	800157e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7ff faeb 	bl	8000b44 <HAL_GetTick>
 800156e:	0002      	movs	r2, r0
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	4a47      	ldr	r2, [pc, #284]	; (8001694 <HAL_RCC_OscConfig+0x69c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e105      	b.n	800178a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800157e:	4b40      	ldr	r3, [pc, #256]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001580:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4013      	ands	r3, r2
 8001588:	d1ef      	bne.n	800156a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800158a:	2323      	movs	r3, #35	; 0x23
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d105      	bne.n	80015a0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001594:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001598:	4b39      	ldr	r3, [pc, #228]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 800159a:	493f      	ldr	r1, [pc, #252]	; (8001698 <HAL_RCC_OscConfig+0x6a0>)
 800159c:	400a      	ands	r2, r1
 800159e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2220      	movs	r2, #32
 80015a6:	4013      	ands	r3, r2
 80015a8:	d049      	beq.n	800163e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d026      	beq.n	8001600 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	4b32      	ldr	r3, [pc, #200]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80015b8:	2101      	movs	r1, #1
 80015ba:	430a      	orrs	r2, r1
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80015c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80015c4:	2101      	movs	r1, #1
 80015c6:	430a      	orrs	r2, r1
 80015c8:	635a      	str	r2, [r3, #52]	; 0x34
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <HAL_RCC_OscConfig+0x6a4>)
 80015cc:	6a1a      	ldr	r2, [r3, #32]
 80015ce:	4b33      	ldr	r3, [pc, #204]	; (800169c <HAL_RCC_OscConfig+0x6a4>)
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	0189      	lsls	r1, r1, #6
 80015d4:	430a      	orrs	r2, r1
 80015d6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fab4 	bl	8000b44 <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015e2:	f7ff faaf 	bl	8000b44 <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e0ca      	b.n	800178a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2202      	movs	r2, #2
 80015fa:	4013      	ands	r3, r2
 80015fc:	d0f1      	beq.n	80015e2 <HAL_RCC_OscConfig+0x5ea>
 80015fe:	e01e      	b.n	800163e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001606:	2101      	movs	r1, #1
 8001608:	438a      	bics	r2, r1
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <HAL_RCC_OscConfig+0x6a4>)
 800160e:	6a1a      	ldr	r2, [r3, #32]
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <HAL_RCC_OscConfig+0x6a4>)
 8001612:	4923      	ldr	r1, [pc, #140]	; (80016a0 <HAL_RCC_OscConfig+0x6a8>)
 8001614:	400a      	ands	r2, r1
 8001616:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fa94 	bl	8000b44 <HAL_GetTick>
 800161c:	0003      	movs	r3, r0
 800161e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001622:	f7ff fa8f 	bl	8000b44 <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0aa      	b.n	800178a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2202      	movs	r2, #2
 800163a:	4013      	ands	r3, r2
 800163c:	d1f1      	bne.n	8001622 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	2b00      	cmp	r3, #0
 8001644:	d100      	bne.n	8001648 <HAL_RCC_OscConfig+0x650>
 8001646:	e09f      	b.n	8001788 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2b0c      	cmp	r3, #12
 800164c:	d100      	bne.n	8001650 <HAL_RCC_OscConfig+0x658>
 800164e:	e078      	b.n	8001742 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	2b02      	cmp	r3, #2
 8001656:	d159      	bne.n	800170c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_RCC_OscConfig+0x688>)
 800165e:	4911      	ldr	r1, [pc, #68]	; (80016a4 <HAL_RCC_OscConfig+0x6ac>)
 8001660:	400a      	ands	r2, r1
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fa6e 	bl	8000b44 <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800166c:	e01c      	b.n	80016a8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166e:	f7ff fa69 	bl	8000b44 <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d915      	bls.n	80016a8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e084      	b.n	800178a <HAL_RCC_OscConfig+0x792>
 8001680:	40021000 	.word	0x40021000
 8001684:	ffff1fff 	.word	0xffff1fff
 8001688:	fffffeff 	.word	0xfffffeff
 800168c:	40007000 	.word	0x40007000
 8001690:	fffffbff 	.word	0xfffffbff
 8001694:	00001388 	.word	0x00001388
 8001698:	efffffff 	.word	0xefffffff
 800169c:	40010000 	.word	0x40010000
 80016a0:	ffffdfff 	.word	0xffffdfff
 80016a4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016a8:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <HAL_RCC_OscConfig+0x79c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	049b      	lsls	r3, r3, #18
 80016b0:	4013      	ands	r3, r2
 80016b2:	d1dc      	bne.n	800166e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b4:	4b37      	ldr	r3, [pc, #220]	; (8001794 <HAL_RCC_OscConfig+0x79c>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4a37      	ldr	r2, [pc, #220]	; (8001798 <HAL_RCC_OscConfig+0x7a0>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	0019      	movs	r1, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016cc:	431a      	orrs	r2, r3
 80016ce:	4b31      	ldr	r3, [pc, #196]	; (8001794 <HAL_RCC_OscConfig+0x79c>)
 80016d0:	430a      	orrs	r2, r1
 80016d2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d4:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <HAL_RCC_OscConfig+0x79c>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <HAL_RCC_OscConfig+0x79c>)
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	0449      	lsls	r1, r1, #17
 80016de:	430a      	orrs	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fa2f 	bl	8000b44 <HAL_GetTick>
 80016e6:	0003      	movs	r3, r0
 80016e8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff fa2a 	bl	8000b44 <HAL_GetTick>
 80016f0:	0002      	movs	r2, r0
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e045      	b.n	800178a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <HAL_RCC_OscConfig+0x79c>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	049b      	lsls	r3, r3, #18
 8001706:	4013      	ands	r3, r2
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x6f4>
 800170a:	e03d      	b.n	8001788 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <HAL_RCC_OscConfig+0x79c>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_RCC_OscConfig+0x79c>)
 8001712:	4922      	ldr	r1, [pc, #136]	; (800179c <HAL_RCC_OscConfig+0x7a4>)
 8001714:	400a      	ands	r2, r1
 8001716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fa14 	bl	8000b44 <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001722:	f7ff fa0f 	bl	8000b44 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e02a      	b.n	800178a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_RCC_OscConfig+0x79c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	049b      	lsls	r3, r3, #18
 800173c:	4013      	ands	r3, r2
 800173e:	d1f0      	bne.n	8001722 <HAL_RCC_OscConfig+0x72a>
 8001740:	e022      	b.n	8001788 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e01d      	b.n	800178a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_RCC_OscConfig+0x79c>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	025b      	lsls	r3, r3, #9
 800175a:	401a      	ands	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	429a      	cmp	r2, r3
 8001762:	d10f      	bne.n	8001784 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	23f0      	movs	r3, #240	; 0xf0
 8001768:	039b      	lsls	r3, r3, #14
 800176a:	401a      	ands	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d107      	bne.n	8001784 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	23c0      	movs	r3, #192	; 0xc0
 8001778:	041b      	lsls	r3, r3, #16
 800177a:	401a      	ands	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	0018      	movs	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	b00a      	add	sp, #40	; 0x28
 8001790:	bdb0      	pop	{r4, r5, r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	40021000 	.word	0x40021000
 8001798:	ff02ffff 	.word	0xff02ffff
 800179c:	feffffff 	.word	0xfeffffff

080017a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e128      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b4:	4b96      	ldr	r3, [pc, #600]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2201      	movs	r2, #1
 80017ba:	4013      	ands	r3, r2
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d91e      	bls.n	8001800 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	4b93      	ldr	r3, [pc, #588]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2201      	movs	r2, #1
 80017c8:	4393      	bics	r3, r2
 80017ca:	0019      	movs	r1, r3
 80017cc:	4b90      	ldr	r3, [pc, #576]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017d4:	f7ff f9b6 	bl	8000b44 <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017dc:	e009      	b.n	80017f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017de:	f7ff f9b1 	bl	8000b44 <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	4a8a      	ldr	r2, [pc, #552]	; (8001a14 <HAL_RCC_ClockConfig+0x274>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e109      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b87      	ldr	r3, [pc, #540]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2201      	movs	r2, #1
 80017f8:	4013      	ands	r3, r2
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1ee      	bne.n	80017de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2202      	movs	r2, #2
 8001806:	4013      	ands	r3, r2
 8001808:	d009      	beq.n	800181e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180a:	4b83      	ldr	r3, [pc, #524]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	22f0      	movs	r2, #240	; 0xf0
 8001810:	4393      	bics	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	4b7f      	ldr	r3, [pc, #508]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 800181a:	430a      	orrs	r2, r1
 800181c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2201      	movs	r2, #1
 8001824:	4013      	ands	r3, r2
 8001826:	d100      	bne.n	800182a <HAL_RCC_ClockConfig+0x8a>
 8001828:	e089      	b.n	800193e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001832:	4b79      	ldr	r3, [pc, #484]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	029b      	lsls	r3, r3, #10
 800183a:	4013      	ands	r3, r2
 800183c:	d120      	bne.n	8001880 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e0e1      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800184a:	4b73      	ldr	r3, [pc, #460]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	049b      	lsls	r3, r3, #18
 8001852:	4013      	ands	r3, r2
 8001854:	d114      	bne.n	8001880 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e0d5      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d106      	bne.n	8001870 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001862:	4b6d      	ldr	r3, [pc, #436]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2204      	movs	r2, #4
 8001868:	4013      	ands	r3, r2
 800186a:	d109      	bne.n	8001880 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0ca      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001870:	4b69      	ldr	r3, [pc, #420]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4013      	ands	r3, r2
 800187a:	d101      	bne.n	8001880 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0c2      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001880:	4b65      	ldr	r3, [pc, #404]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2203      	movs	r2, #3
 8001886:	4393      	bics	r3, r2
 8001888:	0019      	movs	r1, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	4b62      	ldr	r3, [pc, #392]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 8001890:	430a      	orrs	r2, r1
 8001892:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001894:	f7ff f956 	bl	8000b44 <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d111      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a4:	e009      	b.n	80018ba <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a6:	f7ff f94d 	bl	8000b44 <HAL_GetTick>
 80018aa:	0002      	movs	r2, r0
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <HAL_RCC_ClockConfig+0x274>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e0a5      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ba:	4b57      	ldr	r3, [pc, #348]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	220c      	movs	r2, #12
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d1ef      	bne.n	80018a6 <HAL_RCC_ClockConfig+0x106>
 80018c6:	e03a      	b.n	800193e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d111      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d0:	e009      	b.n	80018e6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d2:	f7ff f937 	bl	8000b44 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	4a4d      	ldr	r2, [pc, #308]	; (8001a14 <HAL_RCC_ClockConfig+0x274>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e08f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e6:	4b4c      	ldr	r3, [pc, #304]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	220c      	movs	r2, #12
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d1ef      	bne.n	80018d2 <HAL_RCC_ClockConfig+0x132>
 80018f2:	e024      	b.n	800193e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d11b      	bne.n	8001934 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018fc:	e009      	b.n	8001912 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fe:	f7ff f921 	bl	8000b44 <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	4a42      	ldr	r2, [pc, #264]	; (8001a14 <HAL_RCC_ClockConfig+0x274>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e079      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001912:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	220c      	movs	r2, #12
 8001918:	4013      	ands	r3, r2
 800191a:	2b04      	cmp	r3, #4
 800191c:	d1ef      	bne.n	80018fe <HAL_RCC_ClockConfig+0x15e>
 800191e:	e00e      	b.n	800193e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001920:	f7ff f910 	bl	8000b44 <HAL_GetTick>
 8001924:	0002      	movs	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	4a3a      	ldr	r2, [pc, #232]	; (8001a14 <HAL_RCC_ClockConfig+0x274>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e068      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001934:	4b38      	ldr	r3, [pc, #224]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	220c      	movs	r2, #12
 800193a:	4013      	ands	r3, r2
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800193e:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2201      	movs	r2, #1
 8001944:	4013      	ands	r3, r2
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d21e      	bcs.n	800198a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194c:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2201      	movs	r2, #1
 8001952:	4393      	bics	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800195e:	f7ff f8f1 	bl	8000b44 <HAL_GetTick>
 8001962:	0003      	movs	r3, r0
 8001964:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	e009      	b.n	800197c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7ff f8ec 	bl	8000b44 <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	4a28      	ldr	r2, [pc, #160]	; (8001a14 <HAL_RCC_ClockConfig+0x274>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d901      	bls.n	800197c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e044      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2201      	movs	r2, #1
 8001982:	4013      	ands	r3, r2
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d1ee      	bne.n	8001968 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2204      	movs	r2, #4
 8001990:	4013      	ands	r3, r2
 8001992:	d009      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001994:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	4a20      	ldr	r2, [pc, #128]	; (8001a1c <HAL_RCC_ClockConfig+0x27c>)
 800199a:	4013      	ands	r3, r2
 800199c:	0019      	movs	r1, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 80019a4:	430a      	orrs	r2, r1
 80019a6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2208      	movs	r2, #8
 80019ae:	4013      	ands	r3, r2
 80019b0:	d00a      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019b2:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	4a1a      	ldr	r2, [pc, #104]	; (8001a20 <HAL_RCC_ClockConfig+0x280>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	0019      	movs	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	00da      	lsls	r2, r3, #3
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 80019c4:	430a      	orrs	r2, r1
 80019c6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019c8:	f000 f832 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 80019cc:	0001      	movs	r1, r0
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	220f      	movs	r2, #15
 80019d6:	4013      	ands	r3, r2
 80019d8:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <HAL_RCC_ClockConfig+0x284>)
 80019da:	5cd3      	ldrb	r3, [r2, r3]
 80019dc:	000a      	movs	r2, r1
 80019de:	40da      	lsrs	r2, r3
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_RCC_ClockConfig+0x288>)
 80019e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_RCC_ClockConfig+0x28c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	250b      	movs	r5, #11
 80019ea:	197c      	adds	r4, r7, r5
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7ff f863 	bl	8000ab8 <HAL_InitTick>
 80019f2:	0003      	movs	r3, r0
 80019f4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80019f6:	197b      	adds	r3, r7, r5
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80019fe:	197b      	adds	r3, r7, r5
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b004      	add	sp, #16
 8001a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	40022000 	.word	0x40022000
 8001a14:	00001388 	.word	0x00001388
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	fffff8ff 	.word	0xfffff8ff
 8001a20:	ffffc7ff 	.word	0xffffc7ff
 8001a24:	080028f8 	.word	0x080028f8
 8001a28:	2000020c 	.word	0x2000020c
 8001a2c:	20000210 	.word	0x20000210

08001a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a30:	b5b0      	push	{r4, r5, r7, lr}
 8001a32:	b08e      	sub	sp, #56	; 0x38
 8001a34:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a36:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a3e:	230c      	movs	r3, #12
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d014      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x40>
 8001a46:	d900      	bls.n	8001a4a <HAL_RCC_GetSysClockFreq+0x1a>
 8001a48:	e07b      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x112>
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d002      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x24>
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d00b      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a52:	e076      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a54:	4b44      	ldr	r3, [pc, #272]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2210      	movs	r2, #16
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d002      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a5e:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a62:	e07c      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001a64:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a68:	e079      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a6a:	4b42      	ldr	r3, [pc, #264]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a6e:	e076      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a72:	0c9a      	lsrs	r2, r3, #18
 8001a74:	230f      	movs	r3, #15
 8001a76:	401a      	ands	r2, r3
 8001a78:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x148>)
 8001a7a:	5c9b      	ldrb	r3, [r3, r2]
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a80:	0d9a      	lsrs	r2, r3, #22
 8001a82:	2303      	movs	r3, #3
 8001a84:	4013      	ands	r3, r2
 8001a86:	3301      	adds	r3, #1
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a8a:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	025b      	lsls	r3, r3, #9
 8001a92:	4013      	ands	r3, r2
 8001a94:	d01a      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	4a35      	ldr	r2, [pc, #212]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x144>)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	69b8      	ldr	r0, [r7, #24]
 8001aa4:	69f9      	ldr	r1, [r7, #28]
 8001aa6:	f7fe fbdb 	bl	8000260 <__aeabi_lmul>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	000b      	movs	r3, r1
 8001aae:	0010      	movs	r0, r2
 8001ab0:	0019      	movs	r1, r3
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f7fe fbaf 	bl	8000220 <__aeabi_uldivmod>
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	000b      	movs	r3, r1
 8001ac6:	0013      	movs	r3, r2
 8001ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8001aca:	e037      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001acc:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2210      	movs	r2, #16
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d01a      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4a23      	ldr	r2, [pc, #140]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	68b8      	ldr	r0, [r7, #8]
 8001ae4:	68f9      	ldr	r1, [r7, #12]
 8001ae6:	f7fe fbbb 	bl	8000260 <__aeabi_lmul>
 8001aea:	0002      	movs	r2, r0
 8001aec:	000b      	movs	r3, r1
 8001aee:	0010      	movs	r0, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f7fe fb8f 	bl	8000220 <__aeabi_uldivmod>
 8001b02:	0002      	movs	r2, r0
 8001b04:	000b      	movs	r3, r1
 8001b06:	0013      	movs	r3, r2
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
 8001b0a:	e017      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0e:	0018      	movs	r0, r3
 8001b10:	2300      	movs	r3, #0
 8001b12:	0019      	movs	r1, r3
 8001b14:	4a16      	ldr	r2, [pc, #88]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b16:	2300      	movs	r3, #0
 8001b18:	f7fe fba2 	bl	8000260 <__aeabi_lmul>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	000b      	movs	r3, r1
 8001b20:	0010      	movs	r0, r2
 8001b22:	0019      	movs	r1, r3
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	001c      	movs	r4, r3
 8001b28:	2300      	movs	r3, #0
 8001b2a:	001d      	movs	r5, r3
 8001b2c:	0022      	movs	r2, r4
 8001b2e:	002b      	movs	r3, r5
 8001b30:	f7fe fb76 	bl	8000220 <__aeabi_uldivmod>
 8001b34:	0002      	movs	r2, r0
 8001b36:	000b      	movs	r3, r1
 8001b38:	0013      	movs	r3, r2
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b40:	e00d      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	0b5b      	lsrs	r3, r3, #13
 8001b48:	2207      	movs	r2, #7
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	3301      	adds	r3, #1
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	0212      	lsls	r2, r2, #8
 8001b56:	409a      	lsls	r2, r3
 8001b58:	0013      	movs	r3, r2
 8001b5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b5c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b00e      	add	sp, #56	; 0x38
 8001b66:	bdb0      	pop	{r4, r5, r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	003d0900 	.word	0x003d0900
 8001b70:	00f42400 	.word	0x00f42400
 8001b74:	007a1200 	.word	0x007a1200
 8001b78:	08002910 	.word	0x08002910

08001b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b80:	4b02      	ldr	r3, [pc, #8]	; (8001b8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	0018      	movs	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	2000020c 	.word	0x2000020c

08001b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b94:	f7ff fff2 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001b98:	0001      	movs	r1, r0
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
 8001ba8:	40d9      	lsrs	r1, r3
 8001baa:	000b      	movs	r3, r1
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	08002908 	.word	0x08002908

08001bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bc0:	f7ff ffdc 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001bc4:	0001      	movs	r1, r0
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	0adb      	lsrs	r3, r3, #11
 8001bcc:	2207      	movs	r2, #7
 8001bce:	4013      	ands	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	40d9      	lsrs	r1, r3
 8001bd6:	000b      	movs	r3, r1
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	40021000 	.word	0x40021000
 8001be4:	08002908 	.word	0x08002908

08001be8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001bf0:	2317      	movs	r3, #23
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d106      	bne.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d100      	bne.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001c0e:	e0d9      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c10:	4ba4      	ldr	r3, [pc, #656]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	055b      	lsls	r3, r3, #21
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d10a      	bne.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1c:	4ba1      	ldr	r3, [pc, #644]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c20:	4ba0      	ldr	r3, [pc, #640]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	0549      	lsls	r1, r1, #21
 8001c26:	430a      	orrs	r2, r1
 8001c28:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c2a:	2317      	movs	r3, #23
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c32:	4b9d      	ldr	r3, [pc, #628]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d11a      	bne.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3e:	4b9a      	ldr	r3, [pc, #616]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b99      	ldr	r3, [pc, #612]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	0049      	lsls	r1, r1, #1
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4c:	f7fe ff7a 	bl	8000b44 <HAL_GetTick>
 8001c50:	0003      	movs	r3, r0
 8001c52:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	e008      	b.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7fe ff75 	bl	8000b44 <HAL_GetTick>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b64      	cmp	r3, #100	; 0x64
 8001c62:	d901      	bls.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e118      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	4b8f      	ldr	r3, [pc, #572]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4013      	ands	r3, r2
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001c74:	4b8b      	ldr	r3, [pc, #556]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	23c0      	movs	r3, #192	; 0xc0
 8001c7a:	039b      	lsls	r3, r3, #14
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	23c0      	movs	r3, #192	; 0xc0
 8001c86:	039b      	lsls	r3, r3, #14
 8001c88:	4013      	ands	r3, r2
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d107      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	23c0      	movs	r3, #192	; 0xc0
 8001c96:	039b      	lsls	r3, r3, #14
 8001c98:	4013      	ands	r3, r2
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d013      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	23c0      	movs	r3, #192	; 0xc0
 8001ca6:	029b      	lsls	r3, r3, #10
 8001ca8:	401a      	ands	r2, r3
 8001caa:	23c0      	movs	r3, #192	; 0xc0
 8001cac:	029b      	lsls	r3, r3, #10
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d10a      	bne.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001cb2:	4b7c      	ldr	r3, [pc, #496]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	029b      	lsls	r3, r3, #10
 8001cba:	401a      	ands	r2, r3
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	029b      	lsls	r3, r3, #10
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0e8      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001cc8:	4b76      	ldr	r3, [pc, #472]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001cca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ccc:	23c0      	movs	r3, #192	; 0xc0
 8001cce:	029b      	lsls	r3, r3, #10
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d049      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	23c0      	movs	r3, #192	; 0xc0
 8001ce0:	029b      	lsls	r3, r3, #10
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d004      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d10d      	bne.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	23c0      	movs	r3, #192	; 0xc0
 8001cfa:	029b      	lsls	r3, r3, #10
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d034      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d02e      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001d10:	4b64      	ldr	r3, [pc, #400]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d14:	4a65      	ldr	r2, [pc, #404]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d1a:	4b62      	ldr	r3, [pc, #392]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d1e:	4b61      	ldr	r3, [pc, #388]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d20:	2180      	movs	r1, #128	; 0x80
 8001d22:	0309      	lsls	r1, r1, #12
 8001d24:	430a      	orrs	r2, r1
 8001d26:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d28:	4b5e      	ldr	r3, [pc, #376]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d2c:	4b5d      	ldr	r3, [pc, #372]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d2e:	4960      	ldr	r1, [pc, #384]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001d34:	4b5b      	ldr	r3, [pc, #364]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	d014      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7fe fefe 	bl	8000b44 <HAL_GetTick>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d4c:	e009      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7fe fef9 	bl	8000b44 <HAL_GetTick>
 8001d52:	0002      	movs	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	4a56      	ldr	r2, [pc, #344]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e09b      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d62:	4b50      	ldr	r3, [pc, #320]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d0ef      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	23c0      	movs	r3, #192	; 0xc0
 8001d74:	029b      	lsls	r3, r3, #10
 8001d76:	401a      	ands	r2, r3
 8001d78:	23c0      	movs	r3, #192	; 0xc0
 8001d7a:	029b      	lsls	r3, r3, #10
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001d80:	4b48      	ldr	r3, [pc, #288]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a4c      	ldr	r2, [pc, #304]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	0019      	movs	r1, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	23c0      	movs	r3, #192	; 0xc0
 8001d90:	039b      	lsls	r3, r3, #14
 8001d92:	401a      	ands	r2, r3
 8001d94:	4b43      	ldr	r3, [pc, #268]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d96:	430a      	orrs	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	4b42      	ldr	r3, [pc, #264]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	23c0      	movs	r3, #192	; 0xc0
 8001da4:	029b      	lsls	r3, r3, #10
 8001da6:	401a      	ands	r2, r3
 8001da8:	4b3e      	ldr	r3, [pc, #248]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001daa:	430a      	orrs	r2, r1
 8001dac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dae:	2317      	movs	r3, #23
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d105      	bne.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db8:	4b3a      	ldr	r3, [pc, #232]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dbc:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dbe:	493f      	ldr	r1, [pc, #252]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d009      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dce:	4b35      	ldr	r3, [pc, #212]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	4393      	bics	r3, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dde:	430a      	orrs	r2, r1
 8001de0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2202      	movs	r2, #2
 8001de8:	4013      	ands	r3, r2
 8001dea:	d009      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dec:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	220c      	movs	r2, #12
 8001df2:	4393      	bics	r3, r2
 8001df4:	0019      	movs	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2204      	movs	r2, #4
 8001e06:	4013      	ands	r3, r2
 8001e08:	d009      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e0a:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	4a2c      	ldr	r2, [pc, #176]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	0019      	movs	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2208      	movs	r2, #8
 8001e24:	4013      	ands	r3, r2
 8001e26:	d009      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2c:	4a25      	ldr	r2, [pc, #148]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	0019      	movs	r1, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4013      	ands	r3, r2
 8001e46:	d009      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e48:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4c:	4a17      	ldr	r2, [pc, #92]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69da      	ldr	r2, [r3, #28]
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2240      	movs	r2, #64	; 0x40
 8001e62:	4013      	ands	r3, r2
 8001e64:	d009      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	0019      	movs	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e76:	430a      	orrs	r2, r1
 8001e78:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2280      	movs	r2, #128	; 0x80
 8001e80:	4013      	ands	r3, r2
 8001e82:	d009      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e88:	4a10      	ldr	r2, [pc, #64]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1a      	ldr	r2, [r3, #32]
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e94:	430a      	orrs	r2, r1
 8001e96:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b006      	add	sp, #24
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40007000 	.word	0x40007000
 8001eac:	fffcffff 	.word	0xfffcffff
 8001eb0:	fff7ffff 	.word	0xfff7ffff
 8001eb4:	00001388 	.word	0x00001388
 8001eb8:	ffcfffff 	.word	0xffcfffff
 8001ebc:	efffffff 	.word	0xefffffff
 8001ec0:	fffff3ff 	.word	0xfffff3ff
 8001ec4:	ffffcfff 	.word	0xffffcfff
 8001ec8:	fbffffff 	.word	0xfbffffff
 8001ecc:	fff3ffff 	.word	0xfff3ffff

08001ed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e044      	b.n	8001f6c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d107      	bne.n	8001efa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2274      	movs	r2, #116	; 0x74
 8001eee:	2100      	movs	r1, #0
 8001ef0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7fe fd03 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2224      	movs	r2, #36	; 0x24
 8001efe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	438a      	bics	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	0018      	movs	r0, r3
 8001f14:	f000 f830 	bl	8001f78 <UART_SetConfig>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e024      	b.n	8001f6c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f000 fae1 	bl	80024f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	490d      	ldr	r1, [pc, #52]	; (8001f74 <HAL_UART_Init+0xa4>)
 8001f3e:	400a      	ands	r2, r1
 8001f40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	212a      	movs	r1, #42	; 0x2a
 8001f4e:	438a      	bics	r2, r1
 8001f50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 fb79 	bl	800265c <UART_CheckIdleState>
 8001f6a:	0003      	movs	r3, r0
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b002      	add	sp, #8
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	ffffb7ff 	.word	0xffffb7ff

08001f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b08e      	sub	sp, #56	; 0x38
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f80:	231a      	movs	r3, #26
 8001f82:	2218      	movs	r2, #24
 8001f84:	4694      	mov	ip, r2
 8001f86:	44bc      	add	ip, r7
 8001f88:	4463      	add	r3, ip
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4ab0      	ldr	r2, [pc, #704]	; (8002270 <UART_SetConfig+0x2f8>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4aac      	ldr	r2, [pc, #688]	; (8002274 <UART_SetConfig+0x2fc>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4aa6      	ldr	r2, [pc, #664]	; (8002278 <UART_SetConfig+0x300>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d004      	beq.n	8001fee <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fea:	4313      	orrs	r3, r2
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	4aa1      	ldr	r2, [pc, #644]	; (800227c <UART_SetConfig+0x304>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002000:	430a      	orrs	r2, r1
 8002002:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a9d      	ldr	r2, [pc, #628]	; (8002280 <UART_SetConfig+0x308>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d136      	bne.n	800207c <UART_SetConfig+0x104>
 800200e:	4b9d      	ldr	r3, [pc, #628]	; (8002284 <UART_SetConfig+0x30c>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002012:	2203      	movs	r2, #3
 8002014:	4013      	ands	r3, r2
 8002016:	2b03      	cmp	r3, #3
 8002018:	d020      	beq.n	800205c <UART_SetConfig+0xe4>
 800201a:	d827      	bhi.n	800206c <UART_SetConfig+0xf4>
 800201c:	2b02      	cmp	r3, #2
 800201e:	d00d      	beq.n	800203c <UART_SetConfig+0xc4>
 8002020:	d824      	bhi.n	800206c <UART_SetConfig+0xf4>
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <UART_SetConfig+0xb4>
 8002026:	2b01      	cmp	r3, #1
 8002028:	d010      	beq.n	800204c <UART_SetConfig+0xd4>
 800202a:	e01f      	b.n	800206c <UART_SetConfig+0xf4>
 800202c:	231b      	movs	r3, #27
 800202e:	2218      	movs	r2, #24
 8002030:	4694      	mov	ip, r2
 8002032:	44bc      	add	ip, r7
 8002034:	4463      	add	r3, ip
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	e0c5      	b.n	80021c8 <UART_SetConfig+0x250>
 800203c:	231b      	movs	r3, #27
 800203e:	2218      	movs	r2, #24
 8002040:	4694      	mov	ip, r2
 8002042:	44bc      	add	ip, r7
 8002044:	4463      	add	r3, ip
 8002046:	2202      	movs	r2, #2
 8002048:	701a      	strb	r2, [r3, #0]
 800204a:	e0bd      	b.n	80021c8 <UART_SetConfig+0x250>
 800204c:	231b      	movs	r3, #27
 800204e:	2218      	movs	r2, #24
 8002050:	4694      	mov	ip, r2
 8002052:	44bc      	add	ip, r7
 8002054:	4463      	add	r3, ip
 8002056:	2204      	movs	r2, #4
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	e0b5      	b.n	80021c8 <UART_SetConfig+0x250>
 800205c:	231b      	movs	r3, #27
 800205e:	2218      	movs	r2, #24
 8002060:	4694      	mov	ip, r2
 8002062:	44bc      	add	ip, r7
 8002064:	4463      	add	r3, ip
 8002066:	2208      	movs	r2, #8
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e0ad      	b.n	80021c8 <UART_SetConfig+0x250>
 800206c:	231b      	movs	r3, #27
 800206e:	2218      	movs	r2, #24
 8002070:	4694      	mov	ip, r2
 8002072:	44bc      	add	ip, r7
 8002074:	4463      	add	r3, ip
 8002076:	2210      	movs	r2, #16
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	e0a5      	b.n	80021c8 <UART_SetConfig+0x250>
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a81      	ldr	r2, [pc, #516]	; (8002288 <UART_SetConfig+0x310>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d136      	bne.n	80020f4 <UART_SetConfig+0x17c>
 8002086:	4b7f      	ldr	r3, [pc, #508]	; (8002284 <UART_SetConfig+0x30c>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	220c      	movs	r2, #12
 800208c:	4013      	ands	r3, r2
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d020      	beq.n	80020d4 <UART_SetConfig+0x15c>
 8002092:	d827      	bhi.n	80020e4 <UART_SetConfig+0x16c>
 8002094:	2b08      	cmp	r3, #8
 8002096:	d00d      	beq.n	80020b4 <UART_SetConfig+0x13c>
 8002098:	d824      	bhi.n	80020e4 <UART_SetConfig+0x16c>
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <UART_SetConfig+0x12c>
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d010      	beq.n	80020c4 <UART_SetConfig+0x14c>
 80020a2:	e01f      	b.n	80020e4 <UART_SetConfig+0x16c>
 80020a4:	231b      	movs	r3, #27
 80020a6:	2218      	movs	r2, #24
 80020a8:	4694      	mov	ip, r2
 80020aa:	44bc      	add	ip, r7
 80020ac:	4463      	add	r3, ip
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e089      	b.n	80021c8 <UART_SetConfig+0x250>
 80020b4:	231b      	movs	r3, #27
 80020b6:	2218      	movs	r2, #24
 80020b8:	4694      	mov	ip, r2
 80020ba:	44bc      	add	ip, r7
 80020bc:	4463      	add	r3, ip
 80020be:	2202      	movs	r2, #2
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	e081      	b.n	80021c8 <UART_SetConfig+0x250>
 80020c4:	231b      	movs	r3, #27
 80020c6:	2218      	movs	r2, #24
 80020c8:	4694      	mov	ip, r2
 80020ca:	44bc      	add	ip, r7
 80020cc:	4463      	add	r3, ip
 80020ce:	2204      	movs	r2, #4
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	e079      	b.n	80021c8 <UART_SetConfig+0x250>
 80020d4:	231b      	movs	r3, #27
 80020d6:	2218      	movs	r2, #24
 80020d8:	4694      	mov	ip, r2
 80020da:	44bc      	add	ip, r7
 80020dc:	4463      	add	r3, ip
 80020de:	2208      	movs	r2, #8
 80020e0:	701a      	strb	r2, [r3, #0]
 80020e2:	e071      	b.n	80021c8 <UART_SetConfig+0x250>
 80020e4:	231b      	movs	r3, #27
 80020e6:	2218      	movs	r2, #24
 80020e8:	4694      	mov	ip, r2
 80020ea:	44bc      	add	ip, r7
 80020ec:	4463      	add	r3, ip
 80020ee:	2210      	movs	r2, #16
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	e069      	b.n	80021c8 <UART_SetConfig+0x250>
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a64      	ldr	r2, [pc, #400]	; (800228c <UART_SetConfig+0x314>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d107      	bne.n	800210e <UART_SetConfig+0x196>
 80020fe:	231b      	movs	r3, #27
 8002100:	2218      	movs	r2, #24
 8002102:	4694      	mov	ip, r2
 8002104:	44bc      	add	ip, r7
 8002106:	4463      	add	r3, ip
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	e05c      	b.n	80021c8 <UART_SetConfig+0x250>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a5f      	ldr	r2, [pc, #380]	; (8002290 <UART_SetConfig+0x318>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d107      	bne.n	8002128 <UART_SetConfig+0x1b0>
 8002118:	231b      	movs	r3, #27
 800211a:	2218      	movs	r2, #24
 800211c:	4694      	mov	ip, r2
 800211e:	44bc      	add	ip, r7
 8002120:	4463      	add	r3, ip
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e04f      	b.n	80021c8 <UART_SetConfig+0x250>
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a52      	ldr	r2, [pc, #328]	; (8002278 <UART_SetConfig+0x300>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d143      	bne.n	80021ba <UART_SetConfig+0x242>
 8002132:	4b54      	ldr	r3, [pc, #336]	; (8002284 <UART_SetConfig+0x30c>)
 8002134:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002136:	23c0      	movs	r3, #192	; 0xc0
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	4013      	ands	r3, r2
 800213c:	22c0      	movs	r2, #192	; 0xc0
 800213e:	0112      	lsls	r2, r2, #4
 8002140:	4293      	cmp	r3, r2
 8002142:	d02a      	beq.n	800219a <UART_SetConfig+0x222>
 8002144:	22c0      	movs	r2, #192	; 0xc0
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	4293      	cmp	r3, r2
 800214a:	d82e      	bhi.n	80021aa <UART_SetConfig+0x232>
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	4293      	cmp	r3, r2
 8002152:	d012      	beq.n	800217a <UART_SetConfig+0x202>
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	4293      	cmp	r3, r2
 800215a:	d826      	bhi.n	80021aa <UART_SetConfig+0x232>
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <UART_SetConfig+0x1f2>
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	00d2      	lsls	r2, r2, #3
 8002164:	4293      	cmp	r3, r2
 8002166:	d010      	beq.n	800218a <UART_SetConfig+0x212>
 8002168:	e01f      	b.n	80021aa <UART_SetConfig+0x232>
 800216a:	231b      	movs	r3, #27
 800216c:	2218      	movs	r2, #24
 800216e:	4694      	mov	ip, r2
 8002170:	44bc      	add	ip, r7
 8002172:	4463      	add	r3, ip
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	e026      	b.n	80021c8 <UART_SetConfig+0x250>
 800217a:	231b      	movs	r3, #27
 800217c:	2218      	movs	r2, #24
 800217e:	4694      	mov	ip, r2
 8002180:	44bc      	add	ip, r7
 8002182:	4463      	add	r3, ip
 8002184:	2202      	movs	r2, #2
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	e01e      	b.n	80021c8 <UART_SetConfig+0x250>
 800218a:	231b      	movs	r3, #27
 800218c:	2218      	movs	r2, #24
 800218e:	4694      	mov	ip, r2
 8002190:	44bc      	add	ip, r7
 8002192:	4463      	add	r3, ip
 8002194:	2204      	movs	r2, #4
 8002196:	701a      	strb	r2, [r3, #0]
 8002198:	e016      	b.n	80021c8 <UART_SetConfig+0x250>
 800219a:	231b      	movs	r3, #27
 800219c:	2218      	movs	r2, #24
 800219e:	4694      	mov	ip, r2
 80021a0:	44bc      	add	ip, r7
 80021a2:	4463      	add	r3, ip
 80021a4:	2208      	movs	r2, #8
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	e00e      	b.n	80021c8 <UART_SetConfig+0x250>
 80021aa:	231b      	movs	r3, #27
 80021ac:	2218      	movs	r2, #24
 80021ae:	4694      	mov	ip, r2
 80021b0:	44bc      	add	ip, r7
 80021b2:	4463      	add	r3, ip
 80021b4:	2210      	movs	r2, #16
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	e006      	b.n	80021c8 <UART_SetConfig+0x250>
 80021ba:	231b      	movs	r3, #27
 80021bc:	2218      	movs	r2, #24
 80021be:	4694      	mov	ip, r2
 80021c0:	44bc      	add	ip, r7
 80021c2:	4463      	add	r3, ip
 80021c4:	2210      	movs	r2, #16
 80021c6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a2a      	ldr	r2, [pc, #168]	; (8002278 <UART_SetConfig+0x300>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d000      	beq.n	80021d4 <UART_SetConfig+0x25c>
 80021d2:	e09e      	b.n	8002312 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80021d4:	231b      	movs	r3, #27
 80021d6:	2218      	movs	r2, #24
 80021d8:	4694      	mov	ip, r2
 80021da:	44bc      	add	ip, r7
 80021dc:	4463      	add	r3, ip
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d01d      	beq.n	8002220 <UART_SetConfig+0x2a8>
 80021e4:	dc20      	bgt.n	8002228 <UART_SetConfig+0x2b0>
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d015      	beq.n	8002216 <UART_SetConfig+0x29e>
 80021ea:	dc1d      	bgt.n	8002228 <UART_SetConfig+0x2b0>
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <UART_SetConfig+0x27e>
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d005      	beq.n	8002200 <UART_SetConfig+0x288>
 80021f4:	e018      	b.n	8002228 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021f6:	f7ff fccb 	bl	8001b90 <HAL_RCC_GetPCLK1Freq>
 80021fa:	0003      	movs	r3, r0
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021fe:	e01d      	b.n	800223c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002200:	4b20      	ldr	r3, [pc, #128]	; (8002284 <UART_SetConfig+0x30c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2210      	movs	r2, #16
 8002206:	4013      	ands	r3, r2
 8002208:	d002      	beq.n	8002210 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800220a:	4b22      	ldr	r3, [pc, #136]	; (8002294 <UART_SetConfig+0x31c>)
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800220e:	e015      	b.n	800223c <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <UART_SetConfig+0x320>)
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002214:	e012      	b.n	800223c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002216:	f7ff fc0b 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 800221a:	0003      	movs	r3, r0
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800221e:	e00d      	b.n	800223c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002226:	e009      	b.n	800223c <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800222c:	231a      	movs	r3, #26
 800222e:	2218      	movs	r2, #24
 8002230:	4694      	mov	ip, r2
 8002232:	44bc      	add	ip, r7
 8002234:	4463      	add	r3, ip
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
        break;
 800223a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800223c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d100      	bne.n	8002244 <UART_SetConfig+0x2cc>
 8002242:	e13c      	b.n	80024be <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	0013      	movs	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	189b      	adds	r3, r3, r2
 800224e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002250:	429a      	cmp	r2, r3
 8002252:	d305      	bcc.n	8002260 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800225a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800225c:	429a      	cmp	r2, r3
 800225e:	d91d      	bls.n	800229c <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8002260:	231a      	movs	r3, #26
 8002262:	2218      	movs	r2, #24
 8002264:	4694      	mov	ip, r2
 8002266:	44bc      	add	ip, r7
 8002268:	4463      	add	r3, ip
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	e126      	b.n	80024be <UART_SetConfig+0x546>
 8002270:	efff69f3 	.word	0xefff69f3
 8002274:	ffffcfff 	.word	0xffffcfff
 8002278:	40004800 	.word	0x40004800
 800227c:	fffff4ff 	.word	0xfffff4ff
 8002280:	40013800 	.word	0x40013800
 8002284:	40021000 	.word	0x40021000
 8002288:	40004400 	.word	0x40004400
 800228c:	40004c00 	.word	0x40004c00
 8002290:	40005000 	.word	0x40005000
 8002294:	003d0900 	.word	0x003d0900
 8002298:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	6939      	ldr	r1, [r7, #16]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	000b      	movs	r3, r1
 80022aa:	0e1b      	lsrs	r3, r3, #24
 80022ac:	0010      	movs	r0, r2
 80022ae:	0205      	lsls	r5, r0, #8
 80022b0:	431d      	orrs	r5, r3
 80022b2:	000b      	movs	r3, r1
 80022b4:	021c      	lsls	r4, r3, #8
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68b8      	ldr	r0, [r7, #8]
 80022c4:	68f9      	ldr	r1, [r7, #12]
 80022c6:	1900      	adds	r0, r0, r4
 80022c8:	4169      	adcs	r1, r5
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	2300      	movs	r3, #0
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f7fd ffa2 	bl	8000220 <__aeabi_uldivmod>
 80022dc:	0002      	movs	r2, r0
 80022de:	000b      	movs	r3, r1
 80022e0:	0013      	movs	r3, r2
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80022e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022e6:	23c0      	movs	r3, #192	; 0xc0
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d309      	bcc.n	8002302 <UART_SetConfig+0x38a>
 80022ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	035b      	lsls	r3, r3, #13
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d204      	bcs.n	8002302 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	e0dd      	b.n	80024be <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002302:	231a      	movs	r3, #26
 8002304:	2218      	movs	r2, #24
 8002306:	4694      	mov	ip, r2
 8002308:	44bc      	add	ip, r7
 800230a:	4463      	add	r3, ip
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
 8002310:	e0d5      	b.n	80024be <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	69da      	ldr	r2, [r3, #28]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	429a      	cmp	r2, r3
 800231c:	d000      	beq.n	8002320 <UART_SetConfig+0x3a8>
 800231e:	e074      	b.n	800240a <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8002320:	231b      	movs	r3, #27
 8002322:	2218      	movs	r2, #24
 8002324:	4694      	mov	ip, r2
 8002326:	44bc      	add	ip, r7
 8002328:	4463      	add	r3, ip
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b08      	cmp	r3, #8
 800232e:	d822      	bhi.n	8002376 <UART_SetConfig+0x3fe>
 8002330:	009a      	lsls	r2, r3, #2
 8002332:	4b6b      	ldr	r3, [pc, #428]	; (80024e0 <UART_SetConfig+0x568>)
 8002334:	18d3      	adds	r3, r2, r3
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800233a:	f7ff fc29 	bl	8001b90 <HAL_RCC_GetPCLK1Freq>
 800233e:	0003      	movs	r3, r0
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002342:	e022      	b.n	800238a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002344:	f7ff fc3a 	bl	8001bbc <HAL_RCC_GetPCLK2Freq>
 8002348:	0003      	movs	r3, r0
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800234c:	e01d      	b.n	800238a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800234e:	4b65      	ldr	r3, [pc, #404]	; (80024e4 <UART_SetConfig+0x56c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2210      	movs	r2, #16
 8002354:	4013      	ands	r3, r2
 8002356:	d002      	beq.n	800235e <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002358:	4b63      	ldr	r3, [pc, #396]	; (80024e8 <UART_SetConfig+0x570>)
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800235c:	e015      	b.n	800238a <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800235e:	4b63      	ldr	r3, [pc, #396]	; (80024ec <UART_SetConfig+0x574>)
 8002360:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002362:	e012      	b.n	800238a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002364:	f7ff fb64 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 8002368:	0003      	movs	r3, r0
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800236c:	e00d      	b.n	800238a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002374:	e009      	b.n	800238a <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800237a:	231a      	movs	r3, #26
 800237c:	2218      	movs	r2, #24
 800237e:	4694      	mov	ip, r2
 8002380:	44bc      	add	ip, r7
 8002382:	4463      	add	r3, ip
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
        break;
 8002388:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	2b00      	cmp	r3, #0
 800238e:	d100      	bne.n	8002392 <UART_SetConfig+0x41a>
 8002390:	e095      	b.n	80024be <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	005a      	lsls	r2, r3, #1
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	085b      	lsrs	r3, r3, #1
 800239c:	18d2      	adds	r2, r2, r3
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	0019      	movs	r1, r3
 80023a4:	0010      	movs	r0, r2
 80023a6:	f7fd feaf 	bl	8000108 <__udivsi3>
 80023aa:	0003      	movs	r3, r0
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b2:	2b0f      	cmp	r3, #15
 80023b4:	d921      	bls.n	80023fa <UART_SetConfig+0x482>
 80023b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	025b      	lsls	r3, r3, #9
 80023bc:	429a      	cmp	r2, r3
 80023be:	d21c      	bcs.n	80023fa <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	200e      	movs	r0, #14
 80023c6:	2418      	movs	r4, #24
 80023c8:	193b      	adds	r3, r7, r4
 80023ca:	181b      	adds	r3, r3, r0
 80023cc:	210f      	movs	r1, #15
 80023ce:	438a      	bics	r2, r1
 80023d0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	085b      	lsrs	r3, r3, #1
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2207      	movs	r2, #7
 80023da:	4013      	ands	r3, r2
 80023dc:	b299      	uxth	r1, r3
 80023de:	193b      	adds	r3, r7, r4
 80023e0:	181b      	adds	r3, r3, r0
 80023e2:	193a      	adds	r2, r7, r4
 80023e4:	1812      	adds	r2, r2, r0
 80023e6:	8812      	ldrh	r2, [r2, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	193a      	adds	r2, r7, r4
 80023f2:	1812      	adds	r2, r2, r0
 80023f4:	8812      	ldrh	r2, [r2, #0]
 80023f6:	60da      	str	r2, [r3, #12]
 80023f8:	e061      	b.n	80024be <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80023fa:	231a      	movs	r3, #26
 80023fc:	2218      	movs	r2, #24
 80023fe:	4694      	mov	ip, r2
 8002400:	44bc      	add	ip, r7
 8002402:	4463      	add	r3, ip
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e059      	b.n	80024be <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800240a:	231b      	movs	r3, #27
 800240c:	2218      	movs	r2, #24
 800240e:	4694      	mov	ip, r2
 8002410:	44bc      	add	ip, r7
 8002412:	4463      	add	r3, ip
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b08      	cmp	r3, #8
 8002418:	d822      	bhi.n	8002460 <UART_SetConfig+0x4e8>
 800241a:	009a      	lsls	r2, r3, #2
 800241c:	4b34      	ldr	r3, [pc, #208]	; (80024f0 <UART_SetConfig+0x578>)
 800241e:	18d3      	adds	r3, r2, r3
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002424:	f7ff fbb4 	bl	8001b90 <HAL_RCC_GetPCLK1Freq>
 8002428:	0003      	movs	r3, r0
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800242c:	e022      	b.n	8002474 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800242e:	f7ff fbc5 	bl	8001bbc <HAL_RCC_GetPCLK2Freq>
 8002432:	0003      	movs	r3, r0
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002436:	e01d      	b.n	8002474 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <UART_SetConfig+0x56c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2210      	movs	r2, #16
 800243e:	4013      	ands	r3, r2
 8002440:	d002      	beq.n	8002448 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002442:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <UART_SetConfig+0x570>)
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002446:	e015      	b.n	8002474 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8002448:	4b28      	ldr	r3, [pc, #160]	; (80024ec <UART_SetConfig+0x574>)
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800244c:	e012      	b.n	8002474 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800244e:	f7ff faef 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 8002452:	0003      	movs	r3, r0
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002456:	e00d      	b.n	8002474 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800245e:	e009      	b.n	8002474 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002464:	231a      	movs	r3, #26
 8002466:	2218      	movs	r2, #24
 8002468:	4694      	mov	ip, r2
 800246a:	44bc      	add	ip, r7
 800246c:	4463      	add	r3, ip
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]
        break;
 8002472:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d021      	beq.n	80024be <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	085a      	lsrs	r2, r3, #1
 8002480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002482:	18d2      	adds	r2, r2, r3
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	0019      	movs	r1, r3
 800248a:	0010      	movs	r0, r2
 800248c:	f7fd fe3c 	bl	8000108 <__udivsi3>
 8002490:	0003      	movs	r3, r0
 8002492:	b29b      	uxth	r3, r3
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	2b0f      	cmp	r3, #15
 800249a:	d909      	bls.n	80024b0 <UART_SetConfig+0x538>
 800249c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	025b      	lsls	r3, r3, #9
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d204      	bcs.n	80024b0 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	e006      	b.n	80024be <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80024b0:	231a      	movs	r3, #26
 80024b2:	2218      	movs	r2, #24
 80024b4:	4694      	mov	ip, r2
 80024b6:	44bc      	add	ip, r7
 80024b8:	4463      	add	r3, ip
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	2200      	movs	r2, #0
 80024c2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2200      	movs	r2, #0
 80024c8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80024ca:	231a      	movs	r3, #26
 80024cc:	2218      	movs	r2, #24
 80024ce:	4694      	mov	ip, r2
 80024d0:	44bc      	add	ip, r7
 80024d2:	4463      	add	r3, ip
 80024d4:	781b      	ldrb	r3, [r3, #0]
}
 80024d6:	0018      	movs	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	b00e      	add	sp, #56	; 0x38
 80024dc:	bdb0      	pop	{r4, r5, r7, pc}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	0800291c 	.word	0x0800291c
 80024e4:	40021000 	.word	0x40021000
 80024e8:	003d0900 	.word	0x003d0900
 80024ec:	00f42400 	.word	0x00f42400
 80024f0:	08002940 	.word	0x08002940

080024f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	2201      	movs	r2, #1
 8002502:	4013      	ands	r3, r2
 8002504:	d00b      	beq.n	800251e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a4a      	ldr	r2, [pc, #296]	; (8002638 <UART_AdvFeatureConfig+0x144>)
 800250e:	4013      	ands	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	2202      	movs	r2, #2
 8002524:	4013      	ands	r3, r2
 8002526:	d00b      	beq.n	8002540 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4a43      	ldr	r2, [pc, #268]	; (800263c <UART_AdvFeatureConfig+0x148>)
 8002530:	4013      	ands	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2204      	movs	r2, #4
 8002546:	4013      	ands	r3, r2
 8002548:	d00b      	beq.n	8002562 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a3b      	ldr	r2, [pc, #236]	; (8002640 <UART_AdvFeatureConfig+0x14c>)
 8002552:	4013      	ands	r3, r2
 8002554:	0019      	movs	r1, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	2208      	movs	r2, #8
 8002568:	4013      	ands	r3, r2
 800256a:	d00b      	beq.n	8002584 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4a34      	ldr	r2, [pc, #208]	; (8002644 <UART_AdvFeatureConfig+0x150>)
 8002574:	4013      	ands	r3, r2
 8002576:	0019      	movs	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	2210      	movs	r2, #16
 800258a:	4013      	ands	r3, r2
 800258c:	d00b      	beq.n	80025a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4a2c      	ldr	r2, [pc, #176]	; (8002648 <UART_AdvFeatureConfig+0x154>)
 8002596:	4013      	ands	r3, r2
 8002598:	0019      	movs	r1, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	2220      	movs	r2, #32
 80025ac:	4013      	ands	r3, r2
 80025ae:	d00b      	beq.n	80025c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	4a25      	ldr	r2, [pc, #148]	; (800264c <UART_AdvFeatureConfig+0x158>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	0019      	movs	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	2240      	movs	r2, #64	; 0x40
 80025ce:	4013      	ands	r3, r2
 80025d0:	d01d      	beq.n	800260e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <UART_AdvFeatureConfig+0x15c>)
 80025da:	4013      	ands	r3, r2
 80025dc:	0019      	movs	r1, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	035b      	lsls	r3, r3, #13
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d10b      	bne.n	800260e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4a15      	ldr	r2, [pc, #84]	; (8002654 <UART_AdvFeatureConfig+0x160>)
 80025fe:	4013      	ands	r3, r2
 8002600:	0019      	movs	r1, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	2280      	movs	r2, #128	; 0x80
 8002614:	4013      	ands	r3, r2
 8002616:	d00b      	beq.n	8002630 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4a0e      	ldr	r2, [pc, #56]	; (8002658 <UART_AdvFeatureConfig+0x164>)
 8002620:	4013      	ands	r3, r2
 8002622:	0019      	movs	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	605a      	str	r2, [r3, #4]
  }
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}
 8002638:	fffdffff 	.word	0xfffdffff
 800263c:	fffeffff 	.word	0xfffeffff
 8002640:	fffbffff 	.word	0xfffbffff
 8002644:	ffff7fff 	.word	0xffff7fff
 8002648:	ffffefff 	.word	0xffffefff
 800264c:	ffffdfff 	.word	0xffffdfff
 8002650:	ffefffff 	.word	0xffefffff
 8002654:	ff9fffff 	.word	0xff9fffff
 8002658:	fff7ffff 	.word	0xfff7ffff

0800265c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af02      	add	r7, sp, #8
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	2100      	movs	r1, #0
 800266a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800266c:	f7fe fa6a 	bl	8000b44 <HAL_GetTick>
 8002670:	0003      	movs	r3, r0
 8002672:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2208      	movs	r2, #8
 800267c:	4013      	ands	r3, r2
 800267e:	2b08      	cmp	r3, #8
 8002680:	d10c      	bne.n	800269c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2280      	movs	r2, #128	; 0x80
 8002686:	0391      	lsls	r1, r2, #14
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <UART_CheckIdleState+0x8c>)
 800268c:	9200      	str	r2, [sp, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	f000 f82c 	bl	80026ec <UART_WaitOnFlagUntilTimeout>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d001      	beq.n	800269c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e021      	b.n	80026e0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2204      	movs	r2, #4
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d10c      	bne.n	80026c4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2280      	movs	r2, #128	; 0x80
 80026ae:	03d1      	lsls	r1, r2, #15
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <UART_CheckIdleState+0x8c>)
 80026b4:	9200      	str	r2, [sp, #0]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f000 f818 	bl	80026ec <UART_WaitOnFlagUntilTimeout>
 80026bc:	1e03      	subs	r3, r0, #0
 80026be:	d001      	beq.n	80026c4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e00d      	b.n	80026e0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2220      	movs	r2, #32
 80026c8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2220      	movs	r2, #32
 80026ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2274      	movs	r2, #116	; 0x74
 80026da:	2100      	movs	r1, #0
 80026dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b004      	add	sp, #16
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	01ffffff 	.word	0x01ffffff

080026ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b094      	sub	sp, #80	; 0x50
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	1dfb      	adds	r3, r7, #7
 80026fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026fc:	e0a3      	b.n	8002846 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002700:	3301      	adds	r3, #1
 8002702:	d100      	bne.n	8002706 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002704:	e09f      	b.n	8002846 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002706:	f7fe fa1d 	bl	8000b44 <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002712:	429a      	cmp	r2, r3
 8002714:	d302      	bcc.n	800271c <UART_WaitOnFlagUntilTimeout+0x30>
 8002716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002718:	2b00      	cmp	r3, #0
 800271a:	d13d      	bne.n	8002798 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800271c:	f3ef 8310 	mrs	r3, PRIMASK
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002724:	647b      	str	r3, [r7, #68]	; 0x44
 8002726:	2301      	movs	r3, #1
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	f383 8810 	msr	PRIMASK, r3
}
 8002730:	46c0      	nop			; (mov r8, r8)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	494c      	ldr	r1, [pc, #304]	; (8002870 <UART_WaitOnFlagUntilTimeout+0x184>)
 800273e:	400a      	ands	r2, r1
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002744:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	f383 8810 	msr	PRIMASK, r3
}
 800274c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800274e:	f3ef 8310 	mrs	r3, PRIMASK
 8002752:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002756:	643b      	str	r3, [r7, #64]	; 0x40
 8002758:	2301      	movs	r3, #1
 800275a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800275c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275e:	f383 8810 	msr	PRIMASK, r3
}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2101      	movs	r1, #1
 8002770:	438a      	bics	r2, r1
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002776:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800277a:	f383 8810 	msr	PRIMASK, r3
}
 800277e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2274      	movs	r2, #116	; 0x74
 8002790:	2100      	movs	r1, #0
 8002792:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e067      	b.n	8002868 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2204      	movs	r2, #4
 80027a0:	4013      	ands	r3, r2
 80027a2:	d050      	beq.n	8002846 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69da      	ldr	r2, [r3, #28]
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	401a      	ands	r2, r3
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d146      	bne.n	8002846 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2280      	movs	r2, #128	; 0x80
 80027be:	0112      	lsls	r2, r2, #4
 80027c0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c2:	f3ef 8310 	mrs	r3, PRIMASK
 80027c6:	613b      	str	r3, [r7, #16]
  return(result);
 80027c8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027cc:	2301      	movs	r3, #1
 80027ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f383 8810 	msr	PRIMASK, r3
}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4923      	ldr	r1, [pc, #140]	; (8002870 <UART_WaitOnFlagUntilTimeout+0x184>)
 80027e4:	400a      	ands	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	f383 8810 	msr	PRIMASK, r3
}
 80027f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027f4:	f3ef 8310 	mrs	r3, PRIMASK
 80027f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80027fa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80027fe:	2301      	movs	r3, #1
 8002800:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	f383 8810 	msr	PRIMASK, r3
}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	438a      	bics	r2, r1
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	f383 8810 	msr	PRIMASK, r3
}
 8002824:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2280      	movs	r2, #128	; 0x80
 8002836:	2120      	movs	r1, #32
 8002838:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2274      	movs	r2, #116	; 0x74
 800283e:	2100      	movs	r1, #0
 8002840:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e010      	b.n	8002868 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	4013      	ands	r3, r2
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	425a      	negs	r2, r3
 8002856:	4153      	adcs	r3, r2
 8002858:	b2db      	uxtb	r3, r3
 800285a:	001a      	movs	r2, r3
 800285c:	1dfb      	adds	r3, r7, #7
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d100      	bne.n	8002866 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002864:	e74b      	b.n	80026fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	0018      	movs	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	b014      	add	sp, #80	; 0x50
 800286e:	bd80      	pop	{r7, pc}
 8002870:	fffffe5f 	.word	0xfffffe5f

08002874 <__libc_init_array>:
 8002874:	b570      	push	{r4, r5, r6, lr}
 8002876:	2600      	movs	r6, #0
 8002878:	4d0c      	ldr	r5, [pc, #48]	; (80028ac <__libc_init_array+0x38>)
 800287a:	4c0d      	ldr	r4, [pc, #52]	; (80028b0 <__libc_init_array+0x3c>)
 800287c:	1b64      	subs	r4, r4, r5
 800287e:	10a4      	asrs	r4, r4, #2
 8002880:	42a6      	cmp	r6, r4
 8002882:	d109      	bne.n	8002898 <__libc_init_array+0x24>
 8002884:	2600      	movs	r6, #0
 8002886:	f000 f821 	bl	80028cc <_init>
 800288a:	4d0a      	ldr	r5, [pc, #40]	; (80028b4 <__libc_init_array+0x40>)
 800288c:	4c0a      	ldr	r4, [pc, #40]	; (80028b8 <__libc_init_array+0x44>)
 800288e:	1b64      	subs	r4, r4, r5
 8002890:	10a4      	asrs	r4, r4, #2
 8002892:	42a6      	cmp	r6, r4
 8002894:	d105      	bne.n	80028a2 <__libc_init_array+0x2e>
 8002896:	bd70      	pop	{r4, r5, r6, pc}
 8002898:	00b3      	lsls	r3, r6, #2
 800289a:	58eb      	ldr	r3, [r5, r3]
 800289c:	4798      	blx	r3
 800289e:	3601      	adds	r6, #1
 80028a0:	e7ee      	b.n	8002880 <__libc_init_array+0xc>
 80028a2:	00b3      	lsls	r3, r6, #2
 80028a4:	58eb      	ldr	r3, [r5, r3]
 80028a6:	4798      	blx	r3
 80028a8:	3601      	adds	r6, #1
 80028aa:	e7f2      	b.n	8002892 <__libc_init_array+0x1e>
 80028ac:	0800296c 	.word	0x0800296c
 80028b0:	0800296c 	.word	0x0800296c
 80028b4:	0800296c 	.word	0x0800296c
 80028b8:	08002970 	.word	0x08002970

080028bc <memset>:
 80028bc:	0003      	movs	r3, r0
 80028be:	1882      	adds	r2, r0, r2
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d100      	bne.n	80028c6 <memset+0xa>
 80028c4:	4770      	bx	lr
 80028c6:	7019      	strb	r1, [r3, #0]
 80028c8:	3301      	adds	r3, #1
 80028ca:	e7f9      	b.n	80028c0 <memset+0x4>

080028cc <_init>:
 80028cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d2:	bc08      	pop	{r3}
 80028d4:	469e      	mov	lr, r3
 80028d6:	4770      	bx	lr

080028d8 <_fini>:
 80028d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028de:	bc08      	pop	{r3}
 80028e0:	469e      	mov	lr, r3
 80028e2:	4770      	bx	lr
