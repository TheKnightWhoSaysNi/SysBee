
SysBee_Test_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000285c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800291c  0800291c  0001291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029a0  080029a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080029a0  080029a0  000129a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029a8  080029a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029a8  080029a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029ac  080029ac  000129ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  080029bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080029bc  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086d9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000140d  00000000  00000000  0002870d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00029b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000628  00000000  00000000  0002a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013609  00000000  00000000  0002a7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008858  00000000  00000000  0003ddf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079323  00000000  00000000  00046649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bf96c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016d4  00000000  00000000  000bf9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002904 	.word	0x08002904

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002904 	.word	0x08002904

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b087      	sub	sp, #28
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f000 fa39 	bl	8000918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f827 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004aa:	f000 f8fb 	bl	80006a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ae:	f000 f8c9 	bl	8000644 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004b2:	f000 f897 	bl	80005e4 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uint8_t buffer[22] = {0x7E, 0x00, 0x12, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x54, 0x45, 0x53, 0x54, 0xB3};
 80004b6:	003b      	movs	r3, r7
 80004b8:	4a0c      	ldr	r2, [pc, #48]	; (80004ec <main+0x50>)
 80004ba:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004bc:	c313      	stmia	r3!, {r0, r1, r4}
 80004be:	ca03      	ldmia	r2!, {r0, r1}
 80004c0:	c303      	stmia	r3!, {r0, r1}
 80004c2:	8812      	ldrh	r2, [r2, #0]
 80004c4:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, buffer, 22, 100);
 80004c6:	0039      	movs	r1, r7
 80004c8:	4809      	ldr	r0, [pc, #36]	; (80004f0 <main+0x54>)
 80004ca:	2364      	movs	r3, #100	; 0x64
 80004cc:	2216      	movs	r2, #22
 80004ce:	f001 fcc7 	bl	8001e60 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, buffer, 22, 100);
 80004d2:	0039      	movs	r1, r7
 80004d4:	4807      	ldr	r0, [pc, #28]	; (80004f4 <main+0x58>)
 80004d6:	2364      	movs	r3, #100	; 0x64
 80004d8:	2216      	movs	r2, #22
 80004da:	f001 fcc1 	bl	8001e60 <HAL_UART_Transmit>
	HAL_Delay(500);
 80004de:	23fa      	movs	r3, #250	; 0xfa
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fa88 	bl	80009f8 <HAL_Delay>
  {
 80004e8:	e7e5      	b.n	80004b6 <main+0x1a>
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	0800291c 	.word	0x0800291c
 80004f0:	20000028 	.word	0x20000028
 80004f4:	200000ac 	.word	0x200000ac

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b09f      	sub	sp, #124	; 0x7c
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	2440      	movs	r4, #64	; 0x40
 8000500:	193b      	adds	r3, r7, r4
 8000502:	0018      	movs	r0, r3
 8000504:	2338      	movs	r3, #56	; 0x38
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f002 f9f3 	bl	80028f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050e:	232c      	movs	r3, #44	; 0x2c
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	0018      	movs	r0, r3
 8000514:	2314      	movs	r3, #20
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f002 f9eb 	bl	80028f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	0018      	movs	r0, r3
 8000522:	2328      	movs	r3, #40	; 0x28
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f002 f9e4 	bl	80028f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <SystemClock_Config+0xe4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a2b      	ldr	r2, [pc, #172]	; (80005e0 <SystemClock_Config+0xe8>)
 8000532:	401a      	ands	r2, r3
 8000534:	4b29      	ldr	r3, [pc, #164]	; (80005dc <SystemClock_Config+0xe4>)
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	0109      	lsls	r1, r1, #4
 800053a:	430a      	orrs	r2, r1
 800053c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053e:	0021      	movs	r1, r4
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2202      	movs	r2, #2
 8000544:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2201      	movs	r2, #1
 800054a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2210      	movs	r2, #16
 8000550:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2202      	movs	r2, #2
 8000556:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	02d2      	lsls	r2, r2, #11
 8000564:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	03d2      	lsls	r2, r2, #15
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	187b      	adds	r3, r7, r1
 8000570:	0018      	movs	r0, r3
 8000572:	f000 fcb5 	bl	8000ee0 <HAL_RCC_OscConfig>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800057a:	f000 f8f7 	bl	800076c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	212c      	movs	r1, #44	; 0x2c
 8000580:	187b      	adds	r3, r7, r1
 8000582:	220f      	movs	r2, #15
 8000584:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2203      	movs	r2, #3
 800058a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2101      	movs	r1, #1
 80005a2:	0018      	movs	r0, r3
 80005a4:	f001 f870 	bl	8001688 <HAL_RCC_ClockConfig>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005ac:	f000 f8de 	bl	800076c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2203      	movs	r2, #3
 80005b4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 fa83 	bl	8001ad0 <HAL_RCCEx_PeriphCLKConfig>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80005ce:	f000 f8cd 	bl	800076c <Error_Handler>
  }
}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b01f      	add	sp, #124	; 0x7c
 80005d8:	bd90      	pop	{r4, r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40007000 	.word	0x40007000
 80005e0:	ffffe7ff 	.word	0xffffe7ff

080005e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_USART1_UART_Init+0x58>)
 80005ea:	4a15      	ldr	r2, [pc, #84]	; (8000640 <MX_USART1_UART_Init+0x5c>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_USART1_UART_Init+0x58>)
 80005f0:	2296      	movs	r2, #150	; 0x96
 80005f2:	0192      	lsls	r2, r2, #6
 80005f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_USART1_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_USART1_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_USART1_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_USART1_UART_Init+0x58>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_USART1_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_USART1_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_USART1_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_USART1_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <MX_USART1_UART_Init+0x58>)
 8000628:	0018      	movs	r0, r3
 800062a:	f001 fbc5 	bl	8001db8 <HAL_UART_Init>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000632:	f000 f89b 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000028 	.word	0x20000028
 8000640:	40013800 	.word	0x40013800

08000644 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_USART2_UART_Init+0x58>)
 800064a:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <MX_USART2_UART_Init+0x5c>)
 800064c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000650:	22e1      	movs	r2, #225	; 0xe1
 8000652:	0252      	lsls	r2, r2, #9
 8000654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_USART2_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART2_UART_Init+0x58>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART2_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000688:	0018      	movs	r0, r3
 800068a:	f001 fb95 	bl	8001db8 <HAL_UART_Init>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000692:	f000 f86b 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000ac 	.word	0x200000ac
 80006a0:	40004400 	.word	0x40004400

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b089      	sub	sp, #36	; 0x24
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	240c      	movs	r4, #12
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	0018      	movs	r0, r3
 80006b0:	2314      	movs	r3, #20
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f002 f91d 	bl	80028f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006be:	4b29      	ldr	r3, [pc, #164]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006c0:	2104      	movs	r1, #4
 80006c2:	430a      	orrs	r2, r1
 80006c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006c6:	4b27      	ldr	r3, [pc, #156]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ca:	2204      	movs	r2, #4
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	4b24      	ldr	r3, [pc, #144]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d6:	4b23      	ldr	r3, [pc, #140]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	430a      	orrs	r2, r1
 80006dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	4013      	ands	r3, r2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006f0:	2101      	movs	r1, #1
 80006f2:	430a      	orrs	r2, r1
 80006f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_GPIO_Init+0xc0>)
 80006f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fa:	2201      	movs	r2, #1
 80006fc:	4013      	ands	r3, r2
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000702:	23a0      	movs	r3, #160	; 0xa0
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	2200      	movs	r2, #0
 8000708:	2120      	movs	r1, #32
 800070a:	0018      	movs	r0, r3
 800070c:	f000 fbca 	bl	8000ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	0192      	lsls	r2, r2, #6
 8000716:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2284      	movs	r2, #132	; 0x84
 800071c:	0392      	lsls	r2, r2, #14
 800071e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000726:	193b      	adds	r3, r7, r4
 8000728:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <MX_GPIO_Init+0xc4>)
 800072a:	0019      	movs	r1, r3
 800072c:	0010      	movs	r0, r2
 800072e:	f000 fa3b 	bl	8000ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000732:	0021      	movs	r1, r4
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2220      	movs	r2, #32
 8000738:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2201      	movs	r2, #1
 800073e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800074c:	187a      	adds	r2, r7, r1
 800074e:	23a0      	movs	r3, #160	; 0xa0
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	0011      	movs	r1, r2
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fa27 	bl	8000ba8 <HAL_GPIO_Init>

}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b009      	add	sp, #36	; 0x24
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	40021000 	.word	0x40021000
 8000768:	50000800 	.word	0x50000800

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <HAL_MspInit+0x24>)
 800077e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_MspInit+0x24>)
 8000782:	2101      	movs	r1, #1
 8000784:	430a      	orrs	r2, r1
 8000786:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <HAL_MspInit+0x24>)
 800078a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <HAL_MspInit+0x24>)
 800078e:	2180      	movs	r1, #128	; 0x80
 8000790:	0549      	lsls	r1, r1, #21
 8000792:	430a      	orrs	r2, r1
 8000794:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000

080007a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b08b      	sub	sp, #44	; 0x2c
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	2414      	movs	r4, #20
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	0018      	movs	r0, r3
 80007ae:	2314      	movs	r3, #20
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f002 f89e 	bl	80028f4 <memset>
  if(huart->Instance==USART1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a30      	ldr	r2, [pc, #192]	; (8000880 <HAL_UART_MspInit+0xe0>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d12b      	bne.n	800081a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007c2:	4b30      	ldr	r3, [pc, #192]	; (8000884 <HAL_UART_MspInit+0xe4>)
 80007c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c6:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <HAL_UART_MspInit+0xe4>)
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	01c9      	lsls	r1, r1, #7
 80007cc:	430a      	orrs	r2, r1
 80007ce:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <HAL_UART_MspInit+0xe4>)
 80007d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007d4:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <HAL_UART_MspInit+0xe4>)
 80007d6:	2101      	movs	r1, #1
 80007d8:	430a      	orrs	r2, r1
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <HAL_UART_MspInit+0xe4>)
 80007de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e0:	2201      	movs	r2, #1
 80007e2:	4013      	ands	r3, r2
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	22c0      	movs	r2, #192	; 0xc0
 80007ec:	00d2      	lsls	r2, r2, #3
 80007ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	0021      	movs	r1, r4
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2202      	movs	r2, #2
 80007f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2203      	movs	r2, #3
 8000802:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2204      	movs	r2, #4
 8000808:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	187a      	adds	r2, r7, r1
 800080c:	23a0      	movs	r3, #160	; 0xa0
 800080e:	05db      	lsls	r3, r3, #23
 8000810:	0011      	movs	r1, r2
 8000812:	0018      	movs	r0, r3
 8000814:	f000 f9c8 	bl	8000ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000818:	e02e      	b.n	8000878 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a1a      	ldr	r2, [pc, #104]	; (8000888 <HAL_UART_MspInit+0xe8>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d129      	bne.n	8000878 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <HAL_UART_MspInit+0xe4>)
 8000826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <HAL_UART_MspInit+0xe4>)
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	0289      	lsls	r1, r1, #10
 800082e:	430a      	orrs	r2, r1
 8000830:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <HAL_UART_MspInit+0xe4>)
 8000834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <HAL_UART_MspInit+0xe4>)
 8000838:	2101      	movs	r1, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <HAL_UART_MspInit+0xe4>)
 8000840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000842:	2201      	movs	r2, #1
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800084a:	2114      	movs	r1, #20
 800084c:	187b      	adds	r3, r7, r1
 800084e:	220c      	movs	r2, #12
 8000850:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2202      	movs	r2, #2
 8000856:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2203      	movs	r2, #3
 8000862:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2204      	movs	r2, #4
 8000868:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	187a      	adds	r2, r7, r1
 800086c:	23a0      	movs	r3, #160	; 0xa0
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	0011      	movs	r1, r2
 8000872:	0018      	movs	r0, r3
 8000874:	f000 f998 	bl	8000ba8 <HAL_GPIO_Init>
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b00b      	add	sp, #44	; 0x2c
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	40013800 	.word	0x40013800
 8000884:	40021000 	.word	0x40021000
 8000888:	40004400 	.word	0x40004400

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <NMI_Handler+0x4>

08000892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <HardFault_Handler+0x4>

08000898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b0:	f000 f886 	bl	80009c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80008c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ca:	490e      	ldr	r1, [pc, #56]	; (8000904 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008cc:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <LoopForever+0xe>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0b      	ldr	r2, [pc, #44]	; (800090c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e0:	4c0b      	ldr	r4, [pc, #44]	; (8000910 <LoopForever+0x16>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008ee:	f7ff ffe4 	bl	80008ba <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008f2:	f001 ffdb 	bl	80028ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f6:	f7ff fdd1 	bl	800049c <main>

080008fa <LoopForever>:

LoopForever:
    b LoopForever
 80008fa:	e7fe      	b.n	80008fa <LoopForever>
   ldr   r0, =_estack
 80008fc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000904:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000908:	080029b0 	.word	0x080029b0
  ldr r2, =_sbss
 800090c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000910:	20000134 	.word	0x20000134

08000914 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000914:	e7fe      	b.n	8000914 <ADC1_COMP_IRQHandler>
	...

08000918 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_Init+0x3c>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_Init+0x3c>)
 800092a:	2140      	movs	r1, #64	; 0x40
 800092c:	430a      	orrs	r2, r1
 800092e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000930:	2000      	movs	r0, #0
 8000932:	f000 f811 	bl	8000958 <HAL_InitTick>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d003      	beq.n	8000942 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
 8000940:	e001      	b.n	8000946 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000942:	f7ff ff19 	bl	8000778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	781b      	ldrb	r3, [r3, #0]
}
 800094a:	0018      	movs	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	b002      	add	sp, #8
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	40022000 	.word	0x40022000

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <HAL_InitTick+0x5c>)
 8000962:	681c      	ldr	r4, [r3, #0]
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <HAL_InitTick+0x60>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	0019      	movs	r1, r3
 800096a:	23fa      	movs	r3, #250	; 0xfa
 800096c:	0098      	lsls	r0, r3, #2
 800096e:	f7ff fbcb 	bl	8000108 <__udivsi3>
 8000972:	0003      	movs	r3, r0
 8000974:	0019      	movs	r1, r3
 8000976:	0020      	movs	r0, r4
 8000978:	f7ff fbc6 	bl	8000108 <__udivsi3>
 800097c:	0003      	movs	r3, r0
 800097e:	0018      	movs	r0, r3
 8000980:	f000 f905 	bl	8000b8e <HAL_SYSTICK_Config>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	e00f      	b.n	80009ac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d80b      	bhi.n	80009aa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	2301      	movs	r3, #1
 8000996:	425b      	negs	r3, r3
 8000998:	2200      	movs	r2, #0
 800099a:	0018      	movs	r0, r3
 800099c:	f000 f8e2 	bl	8000b64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_InitTick+0x64>)
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e000      	b.n	80009ac <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	0018      	movs	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b003      	add	sp, #12
 80009b2:	bd90      	pop	{r4, r7, pc}
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000004 	.word	0x20000004

080009c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x1c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	001a      	movs	r2, r3
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_IncTick+0x20>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	18d2      	adds	r2, r2, r3
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <HAL_IncTick+0x20>)
 80009d2:	601a      	str	r2, [r3, #0]
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000130 	.word	0x20000130

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <HAL_GetTick+0x10>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	20000130 	.word	0x20000130

080009f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff fff0 	bl	80009e4 <HAL_GetTick>
 8000a04:	0003      	movs	r3, r0
 8000a06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	d005      	beq.n	8000a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_Delay+0x44>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	001a      	movs	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	189b      	adds	r3, r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	f7ff ffe0 	bl	80009e4 <HAL_GetTick>
 8000a24:	0002      	movs	r2, r0
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8f7      	bhi.n	8000a20 <HAL_Delay+0x28>
  {
  }
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b004      	add	sp, #16
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	20000008 	.word	0x20000008

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	0002      	movs	r2, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b7f      	cmp	r3, #127	; 0x7f
 8000a54:	d828      	bhi.n	8000aa8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a56:	4a2f      	ldr	r2, [pc, #188]	; (8000b14 <__NVIC_SetPriority+0xd4>)
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	33c0      	adds	r3, #192	; 0xc0
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	589b      	ldr	r3, [r3, r2]
 8000a66:	1dfa      	adds	r2, r7, #7
 8000a68:	7812      	ldrb	r2, [r2, #0]
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	400a      	ands	r2, r1
 8000a70:	00d2      	lsls	r2, r2, #3
 8000a72:	21ff      	movs	r1, #255	; 0xff
 8000a74:	4091      	lsls	r1, r2
 8000a76:	000a      	movs	r2, r1
 8000a78:	43d2      	mvns	r2, r2
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	019b      	lsls	r3, r3, #6
 8000a82:	22ff      	movs	r2, #255	; 0xff
 8000a84:	401a      	ands	r2, r3
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	4003      	ands	r3, r0
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a94:	481f      	ldr	r0, [pc, #124]	; (8000b14 <__NVIC_SetPriority+0xd4>)
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b25b      	sxtb	r3, r3
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	33c0      	adds	r3, #192	; 0xc0
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aa6:	e031      	b.n	8000b0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <__NVIC_SetPriority+0xd8>)
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	0019      	movs	r1, r3
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	400b      	ands	r3, r1
 8000ab4:	3b08      	subs	r3, #8
 8000ab6:	089b      	lsrs	r3, r3, #2
 8000ab8:	3306      	adds	r3, #6
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	3304      	adds	r3, #4
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	1dfa      	adds	r2, r7, #7
 8000ac4:	7812      	ldrb	r2, [r2, #0]
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	2203      	movs	r2, #3
 8000aca:	400a      	ands	r2, r1
 8000acc:	00d2      	lsls	r2, r2, #3
 8000ace:	21ff      	movs	r1, #255	; 0xff
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	000a      	movs	r2, r1
 8000ad4:	43d2      	mvns	r2, r2
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	22ff      	movs	r2, #255	; 0xff
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	2303      	movs	r3, #3
 8000aea:	4003      	ands	r3, r0
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <__NVIC_SetPriority+0xd8>)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	001c      	movs	r4, r3
 8000af8:	230f      	movs	r3, #15
 8000afa:	4023      	ands	r3, r4
 8000afc:	3b08      	subs	r3, #8
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	430a      	orrs	r2, r1
 8000b02:	3306      	adds	r3, #6
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	18c3      	adds	r3, r0, r3
 8000b08:	3304      	adds	r3, #4
 8000b0a:	601a      	str	r2, [r3, #0]
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b003      	add	sp, #12
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	e000e100 	.word	0xe000e100
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	1e5a      	subs	r2, r3, #1
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	045b      	lsls	r3, r3, #17
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d301      	bcc.n	8000b34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b30:	2301      	movs	r3, #1
 8000b32:	e010      	b.n	8000b56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <SysTick_Config+0x44>)
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	3a01      	subs	r2, #1
 8000b3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	425b      	negs	r3, r3
 8000b40:	2103      	movs	r1, #3
 8000b42:	0018      	movs	r0, r3
 8000b44:	f7ff ff7c 	bl	8000a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <SysTick_Config+0x44>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <SysTick_Config+0x44>)
 8000b50:	2207      	movs	r2, #7
 8000b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	0018      	movs	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b002      	add	sp, #8
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	e000e010 	.word	0xe000e010

08000b64 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	210f      	movs	r1, #15
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	1c02      	adds	r2, r0, #0
 8000b74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	0011      	movs	r1, r2
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff ff5d 	bl	8000a40 <__NVIC_SetPriority>
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b004      	add	sp, #16
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff ffbf 	bl	8000b1c <SysTick_Config>
 8000b9e:	0003      	movs	r3, r0
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b002      	add	sp, #8
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bbe:	e155      	b.n	8000e6c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	000a      	movs	r2, r1
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <HAL_GPIO_Init+0x30>
 8000bd6:	e146      	b.n	8000e66 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2203      	movs	r2, #3
 8000bde:	4013      	ands	r3, r2
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d005      	beq.n	8000bf0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	2203      	movs	r2, #3
 8000bea:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d130      	bne.n	8000c52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	409a      	lsls	r2, r3
 8000bfe:	0013      	movs	r3, r2
 8000c00:	43da      	mvns	r2, r3
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68da      	ldr	r2, [r3, #12]
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	409a      	lsls	r2, r3
 8000c12:	0013      	movs	r3, r2
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c26:	2201      	movs	r2, #1
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	091b      	lsrs	r3, r3, #4
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
 8000c44:	0013      	movs	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2203      	movs	r2, #3
 8000c58:	4013      	ands	r3, r2
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d017      	beq.n	8000c8e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	0013      	movs	r3, r2
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	0013      	movs	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2203      	movs	r2, #3
 8000c94:	4013      	ands	r3, r2
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d123      	bne.n	8000ce2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	08da      	lsrs	r2, r3, #3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3208      	adds	r2, #8
 8000ca2:	0092      	lsls	r2, r2, #2
 8000ca4:	58d3      	ldr	r3, [r2, r3]
 8000ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	2207      	movs	r2, #7
 8000cac:	4013      	ands	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	220f      	movs	r2, #15
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	0013      	movs	r3, r2
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	691a      	ldr	r2, [r3, #16]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	2107      	movs	r1, #7
 8000cc6:	400b      	ands	r3, r1
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	0013      	movs	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	08da      	lsrs	r2, r3, #3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3208      	adds	r2, #8
 8000cdc:	0092      	lsls	r2, r2, #2
 8000cde:	6939      	ldr	r1, [r7, #16]
 8000ce0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	2203      	movs	r2, #3
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	0013      	movs	r3, r2
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2203      	movs	r2, #3
 8000d00:	401a      	ands	r2, r3
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	23c0      	movs	r3, #192	; 0xc0
 8000d1c:	029b      	lsls	r3, r3, #10
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d100      	bne.n	8000d24 <HAL_GPIO_Init+0x17c>
 8000d22:	e0a0      	b.n	8000e66 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d24:	4b57      	ldr	r3, [pc, #348]	; (8000e84 <HAL_GPIO_Init+0x2dc>)
 8000d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d28:	4b56      	ldr	r3, [pc, #344]	; (8000e84 <HAL_GPIO_Init+0x2dc>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d30:	4a55      	ldr	r2, [pc, #340]	; (8000e88 <HAL_GPIO_Init+0x2e0>)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	3302      	adds	r3, #2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	589b      	ldr	r3, [r3, r2]
 8000d3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	2203      	movs	r2, #3
 8000d42:	4013      	ands	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	220f      	movs	r2, #15
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	0013      	movs	r3, r2
 8000d4c:	43da      	mvns	r2, r3
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	23a0      	movs	r3, #160	; 0xa0
 8000d58:	05db      	lsls	r3, r3, #23
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d01f      	beq.n	8000d9e <HAL_GPIO_Init+0x1f6>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4a      	ldr	r2, [pc, #296]	; (8000e8c <HAL_GPIO_Init+0x2e4>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d019      	beq.n	8000d9a <HAL_GPIO_Init+0x1f2>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a49      	ldr	r2, [pc, #292]	; (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d013      	beq.n	8000d96 <HAL_GPIO_Init+0x1ee>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a48      	ldr	r2, [pc, #288]	; (8000e94 <HAL_GPIO_Init+0x2ec>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d00d      	beq.n	8000d92 <HAL_GPIO_Init+0x1ea>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a47      	ldr	r2, [pc, #284]	; (8000e98 <HAL_GPIO_Init+0x2f0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d007      	beq.n	8000d8e <HAL_GPIO_Init+0x1e6>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a46      	ldr	r2, [pc, #280]	; (8000e9c <HAL_GPIO_Init+0x2f4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d101      	bne.n	8000d8a <HAL_GPIO_Init+0x1e2>
 8000d86:	2305      	movs	r3, #5
 8000d88:	e00a      	b.n	8000da0 <HAL_GPIO_Init+0x1f8>
 8000d8a:	2306      	movs	r3, #6
 8000d8c:	e008      	b.n	8000da0 <HAL_GPIO_Init+0x1f8>
 8000d8e:	2304      	movs	r3, #4
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x1f8>
 8000d92:	2303      	movs	r3, #3
 8000d94:	e004      	b.n	8000da0 <HAL_GPIO_Init+0x1f8>
 8000d96:	2302      	movs	r3, #2
 8000d98:	e002      	b.n	8000da0 <HAL_GPIO_Init+0x1f8>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <HAL_GPIO_Init+0x1f8>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	2103      	movs	r1, #3
 8000da4:	400a      	ands	r2, r1
 8000da6:	0092      	lsls	r2, r2, #2
 8000da8:	4093      	lsls	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db0:	4935      	ldr	r1, [pc, #212]	; (8000e88 <HAL_GPIO_Init+0x2e0>)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	3302      	adds	r3, #2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dbe:	4b38      	ldr	r3, [pc, #224]	; (8000ea0 <HAL_GPIO_Init+0x2f8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	025b      	lsls	r3, r3, #9
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000de2:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <HAL_GPIO_Init+0x2f8>)
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000de8:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <HAL_GPIO_Init+0x2f8>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43da      	mvns	r2, r3
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	029b      	lsls	r3, r3, #10
 8000e00:	4013      	ands	r3, r2
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e0c:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <HAL_GPIO_Init+0x2f8>)
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e12:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <HAL_GPIO_Init+0x2f8>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	035b      	lsls	r3, r3, #13
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <HAL_GPIO_Init+0x2f8>)
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_GPIO_Init+0x2f8>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43da      	mvns	r2, r3
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	039b      	lsls	r3, r3, #14
 8000e54:	4013      	ands	r3, r2
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_GPIO_Init+0x2f8>)
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	40da      	lsrs	r2, r3
 8000e74:	1e13      	subs	r3, r2, #0
 8000e76:	d000      	beq.n	8000e7a <HAL_GPIO_Init+0x2d2>
 8000e78:	e6a2      	b.n	8000bc0 <HAL_GPIO_Init+0x18>
  }
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b006      	add	sp, #24
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	50000400 	.word	0x50000400
 8000e90:	50000800 	.word	0x50000800
 8000e94:	50000c00 	.word	0x50000c00
 8000e98:	50001000 	.word	0x50001000
 8000e9c:	50001c00 	.word	0x50001c00
 8000ea0:	40010400 	.word	0x40010400

08000ea4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	0008      	movs	r0, r1
 8000eae:	0011      	movs	r1, r2
 8000eb0:	1cbb      	adds	r3, r7, #2
 8000eb2:	1c02      	adds	r2, r0, #0
 8000eb4:	801a      	strh	r2, [r3, #0]
 8000eb6:	1c7b      	adds	r3, r7, #1
 8000eb8:	1c0a      	adds	r2, r1, #0
 8000eba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ebc:	1c7b      	adds	r3, r7, #1
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d004      	beq.n	8000ece <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec4:	1cbb      	adds	r3, r7, #2
 8000ec6:	881a      	ldrh	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ecc:	e003      	b.n	8000ed6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000ece:	1cbb      	adds	r3, r7, #2
 8000ed0:	881a      	ldrh	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f000 fbbf 	bl	8001672 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ef4:	4bc9      	ldr	r3, [pc, #804]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	220c      	movs	r2, #12
 8000efa:	4013      	ands	r3, r2
 8000efc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000efe:	4bc7      	ldr	r3, [pc, #796]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	025b      	lsls	r3, r3, #9
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4013      	ands	r3, r2
 8000f12:	d100      	bne.n	8000f16 <HAL_RCC_OscConfig+0x36>
 8000f14:	e07e      	b.n	8001014 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d007      	beq.n	8000f2c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2b0c      	cmp	r3, #12
 8000f20:	d112      	bne.n	8000f48 <HAL_RCC_OscConfig+0x68>
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	025b      	lsls	r3, r3, #9
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d10d      	bne.n	8000f48 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2c:	4bbb      	ldr	r3, [pc, #748]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	029b      	lsls	r3, r3, #10
 8000f34:	4013      	ands	r3, r2
 8000f36:	d100      	bne.n	8000f3a <HAL_RCC_OscConfig+0x5a>
 8000f38:	e06b      	b.n	8001012 <HAL_RCC_OscConfig+0x132>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d167      	bne.n	8001012 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	f000 fb95 	bl	8001672 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	025b      	lsls	r3, r3, #9
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d107      	bne.n	8000f64 <HAL_RCC_OscConfig+0x84>
 8000f54:	4bb1      	ldr	r3, [pc, #708]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4bb0      	ldr	r3, [pc, #704]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	0249      	lsls	r1, r1, #9
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	e027      	b.n	8000fb4 <HAL_RCC_OscConfig+0xd4>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	23a0      	movs	r3, #160	; 0xa0
 8000f6a:	02db      	lsls	r3, r3, #11
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d10e      	bne.n	8000f8e <HAL_RCC_OscConfig+0xae>
 8000f70:	4baa      	ldr	r3, [pc, #680]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4ba9      	ldr	r3, [pc, #676]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8000f76:	2180      	movs	r1, #128	; 0x80
 8000f78:	02c9      	lsls	r1, r1, #11
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	4ba7      	ldr	r3, [pc, #668]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4ba6      	ldr	r3, [pc, #664]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8000f84:	2180      	movs	r1, #128	; 0x80
 8000f86:	0249      	lsls	r1, r1, #9
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	e012      	b.n	8000fb4 <HAL_RCC_OscConfig+0xd4>
 8000f8e:	4ba3      	ldr	r3, [pc, #652]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4ba2      	ldr	r3, [pc, #648]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8000f94:	49a2      	ldr	r1, [pc, #648]	; (8001220 <HAL_RCC_OscConfig+0x340>)
 8000f96:	400a      	ands	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	4ba0      	ldr	r3, [pc, #640]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	025b      	lsls	r3, r3, #9
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4b9c      	ldr	r3, [pc, #624]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b9b      	ldr	r3, [pc, #620]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8000fae:	499d      	ldr	r1, [pc, #628]	; (8001224 <HAL_RCC_OscConfig+0x344>)
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d015      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fd12 	bl	80009e4 <HAL_GetTick>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fc4:	e009      	b.n	8000fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc6:	f7ff fd0d 	bl	80009e4 <HAL_GetTick>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b64      	cmp	r3, #100	; 0x64
 8000fd2:	d902      	bls.n	8000fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	f000 fb4c 	bl	8001672 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fda:	4b90      	ldr	r3, [pc, #576]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	029b      	lsls	r3, r3, #10
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d0ef      	beq.n	8000fc6 <HAL_RCC_OscConfig+0xe6>
 8000fe6:	e015      	b.n	8001014 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fcfc 	bl	80009e4 <HAL_GetTick>
 8000fec:	0003      	movs	r3, r0
 8000fee:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fcf7 	bl	80009e4 <HAL_GetTick>
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b64      	cmp	r3, #100	; 0x64
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e336      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001004:	4b85      	ldr	r3, [pc, #532]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	029b      	lsls	r3, r3, #10
 800100c:	4013      	ands	r3, r2
 800100e:	d1f0      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x112>
 8001010:	e000      	b.n	8001014 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001012:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2202      	movs	r2, #2
 800101a:	4013      	ands	r3, r2
 800101c:	d100      	bne.n	8001020 <HAL_RCC_OscConfig+0x140>
 800101e:	e099      	b.n	8001154 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	2220      	movs	r2, #32
 800102a:	4013      	ands	r3, r2
 800102c:	d009      	beq.n	8001042 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800102e:	4b7b      	ldr	r3, [pc, #492]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4b7a      	ldr	r3, [pc, #488]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8001034:	2120      	movs	r1, #32
 8001036:	430a      	orrs	r2, r1
 8001038:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	2220      	movs	r2, #32
 800103e:	4393      	bics	r3, r2
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	2b04      	cmp	r3, #4
 8001046:	d005      	beq.n	8001054 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b0c      	cmp	r3, #12
 800104c:	d13e      	bne.n	80010cc <HAL_RCC_OscConfig+0x1ec>
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d13b      	bne.n	80010cc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001054:	4b71      	ldr	r3, [pc, #452]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2204      	movs	r2, #4
 800105a:	4013      	ands	r3, r2
 800105c:	d004      	beq.n	8001068 <HAL_RCC_OscConfig+0x188>
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e304      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001068:	4b6c      	ldr	r3, [pc, #432]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	4a6e      	ldr	r2, [pc, #440]	; (8001228 <HAL_RCC_OscConfig+0x348>)
 800106e:	4013      	ands	r3, r2
 8001070:	0019      	movs	r1, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	021a      	lsls	r2, r3, #8
 8001078:	4b68      	ldr	r3, [pc, #416]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 800107a:	430a      	orrs	r2, r1
 800107c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800107e:	4b67      	ldr	r3, [pc, #412]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2209      	movs	r2, #9
 8001084:	4393      	bics	r3, r2
 8001086:	0019      	movs	r1, r3
 8001088:	4b64      	ldr	r3, [pc, #400]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 800108a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800108c:	430a      	orrs	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001090:	f000 fc42 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 8001094:	0001      	movs	r1, r0
 8001096:	4b61      	ldr	r3, [pc, #388]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	091b      	lsrs	r3, r3, #4
 800109c:	220f      	movs	r2, #15
 800109e:	4013      	ands	r3, r2
 80010a0:	4a62      	ldr	r2, [pc, #392]	; (800122c <HAL_RCC_OscConfig+0x34c>)
 80010a2:	5cd3      	ldrb	r3, [r2, r3]
 80010a4:	000a      	movs	r2, r1
 80010a6:	40da      	lsrs	r2, r3
 80010a8:	4b61      	ldr	r3, [pc, #388]	; (8001230 <HAL_RCC_OscConfig+0x350>)
 80010aa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80010ac:	4b61      	ldr	r3, [pc, #388]	; (8001234 <HAL_RCC_OscConfig+0x354>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2513      	movs	r5, #19
 80010b2:	197c      	adds	r4, r7, r5
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff fc4f 	bl	8000958 <HAL_InitTick>
 80010ba:	0003      	movs	r3, r0
 80010bc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80010be:	197b      	adds	r3, r7, r5
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d046      	beq.n	8001154 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80010c6:	197b      	adds	r3, r7, r5
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	e2d2      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d027      	beq.n	8001122 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010d2:	4b52      	ldr	r3, [pc, #328]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2209      	movs	r2, #9
 80010d8:	4393      	bics	r3, r2
 80010da:	0019      	movs	r1, r3
 80010dc:	4b4f      	ldr	r3, [pc, #316]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 80010de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e0:	430a      	orrs	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fc7e 	bl	80009e4 <HAL_GetTick>
 80010e8:	0003      	movs	r3, r0
 80010ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ee:	f7ff fc79 	bl	80009e4 <HAL_GetTick>
 80010f2:	0002      	movs	r2, r0
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e2b8      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001100:	4b46      	ldr	r3, [pc, #280]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2204      	movs	r2, #4
 8001106:	4013      	ands	r3, r2
 8001108:	d0f1      	beq.n	80010ee <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110a:	4b44      	ldr	r3, [pc, #272]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a46      	ldr	r2, [pc, #280]	; (8001228 <HAL_RCC_OscConfig+0x348>)
 8001110:	4013      	ands	r3, r2
 8001112:	0019      	movs	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	021a      	lsls	r2, r3, #8
 800111a:	4b40      	ldr	r3, [pc, #256]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 800111c:	430a      	orrs	r2, r1
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	e018      	b.n	8001154 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001122:	4b3e      	ldr	r3, [pc, #248]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b3d      	ldr	r3, [pc, #244]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8001128:	2101      	movs	r1, #1
 800112a:	438a      	bics	r2, r1
 800112c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112e:	f7ff fc59 	bl	80009e4 <HAL_GetTick>
 8001132:	0003      	movs	r3, r0
 8001134:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001138:	f7ff fc54 	bl	80009e4 <HAL_GetTick>
 800113c:	0002      	movs	r2, r0
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e293      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800114a:	4b34      	ldr	r3, [pc, #208]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2204      	movs	r2, #4
 8001150:	4013      	ands	r3, r2
 8001152:	d1f1      	bne.n	8001138 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2210      	movs	r2, #16
 800115a:	4013      	ands	r3, r2
 800115c:	d100      	bne.n	8001160 <HAL_RCC_OscConfig+0x280>
 800115e:	e0a2      	b.n	80012a6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d140      	bne.n	80011e8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4013      	ands	r3, r2
 8001170:	d005      	beq.n	800117e <HAL_RCC_OscConfig+0x29e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e279      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800117e:	4b27      	ldr	r3, [pc, #156]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4a2d      	ldr	r2, [pc, #180]	; (8001238 <HAL_RCC_OscConfig+0x358>)
 8001184:	4013      	ands	r3, r2
 8001186:	0019      	movs	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 800118e:	430a      	orrs	r2, r1
 8001190:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001192:	4b22      	ldr	r3, [pc, #136]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	0a19      	lsrs	r1, r3, #8
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	061a      	lsls	r2, r3, #24
 80011a0:	4b1e      	ldr	r3, [pc, #120]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 80011a2:	430a      	orrs	r2, r1
 80011a4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	0b5b      	lsrs	r3, r3, #13
 80011ac:	3301      	adds	r3, #1
 80011ae:	2280      	movs	r2, #128	; 0x80
 80011b0:	0212      	lsls	r2, r2, #8
 80011b2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	210f      	movs	r1, #15
 80011bc:	400b      	ands	r3, r1
 80011be:	491b      	ldr	r1, [pc, #108]	; (800122c <HAL_RCC_OscConfig+0x34c>)
 80011c0:	5ccb      	ldrb	r3, [r1, r3]
 80011c2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <HAL_RCC_OscConfig+0x350>)
 80011c6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_RCC_OscConfig+0x354>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2513      	movs	r5, #19
 80011ce:	197c      	adds	r4, r7, r5
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff fbc1 	bl	8000958 <HAL_InitTick>
 80011d6:	0003      	movs	r3, r0
 80011d8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80011da:	197b      	adds	r3, r7, r5
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d061      	beq.n	80012a6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80011e2:	197b      	adds	r3, r7, r5
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	e244      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d040      	beq.n	8001272 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_RCC_OscConfig+0x33c>)
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	0049      	lsls	r1, r1, #1
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fe:	f7ff fbf1 	bl	80009e4 <HAL_GetTick>
 8001202:	0003      	movs	r3, r0
 8001204:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001206:	e019      	b.n	800123c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001208:	f7ff fbec 	bl	80009e4 <HAL_GetTick>
 800120c:	0002      	movs	r2, r0
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d912      	bls.n	800123c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e22b      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	40021000 	.word	0x40021000
 8001220:	fffeffff 	.word	0xfffeffff
 8001224:	fffbffff 	.word	0xfffbffff
 8001228:	ffffe0ff 	.word	0xffffe0ff
 800122c:	08002934 	.word	0x08002934
 8001230:	20000000 	.word	0x20000000
 8001234:	20000004 	.word	0x20000004
 8001238:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800123c:	4bca      	ldr	r3, [pc, #808]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4013      	ands	r3, r2
 8001246:	d0df      	beq.n	8001208 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001248:	4bc7      	ldr	r3, [pc, #796]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	4ac7      	ldr	r2, [pc, #796]	; (800156c <HAL_RCC_OscConfig+0x68c>)
 800124e:	4013      	ands	r3, r2
 8001250:	0019      	movs	r1, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001256:	4bc4      	ldr	r3, [pc, #784]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 8001258:	430a      	orrs	r2, r1
 800125a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800125c:	4bc2      	ldr	r3, [pc, #776]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	0a19      	lsrs	r1, r3, #8
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	061a      	lsls	r2, r3, #24
 800126a:	4bbf      	ldr	r3, [pc, #764]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 800126c:	430a      	orrs	r2, r1
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	e019      	b.n	80012a6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001272:	4bbd      	ldr	r3, [pc, #756]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4bbc      	ldr	r3, [pc, #752]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 8001278:	49bd      	ldr	r1, [pc, #756]	; (8001570 <HAL_RCC_OscConfig+0x690>)
 800127a:	400a      	ands	r2, r1
 800127c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff fbb1 	bl	80009e4 <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001288:	f7ff fbac 	bl	80009e4 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e1eb      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800129a:	4bb3      	ldr	r3, [pc, #716]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4013      	ands	r3, r2
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2208      	movs	r2, #8
 80012ac:	4013      	ands	r3, r2
 80012ae:	d036      	beq.n	800131e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d019      	beq.n	80012ec <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b8:	4bab      	ldr	r3, [pc, #684]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80012ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012bc:	4baa      	ldr	r3, [pc, #680]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80012be:	2101      	movs	r1, #1
 80012c0:	430a      	orrs	r2, r1
 80012c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c4:	f7ff fb8e 	bl	80009e4 <HAL_GetTick>
 80012c8:	0003      	movs	r3, r0
 80012ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ce:	f7ff fb89 	bl	80009e4 <HAL_GetTick>
 80012d2:	0002      	movs	r2, r0
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e1c8      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012e0:	4ba1      	ldr	r3, [pc, #644]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80012e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012e4:	2202      	movs	r2, #2
 80012e6:	4013      	ands	r3, r2
 80012e8:	d0f1      	beq.n	80012ce <HAL_RCC_OscConfig+0x3ee>
 80012ea:	e018      	b.n	800131e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ec:	4b9e      	ldr	r3, [pc, #632]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80012ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012f0:	4b9d      	ldr	r3, [pc, #628]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80012f2:	2101      	movs	r1, #1
 80012f4:	438a      	bics	r2, r1
 80012f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f8:	f7ff fb74 	bl	80009e4 <HAL_GetTick>
 80012fc:	0003      	movs	r3, r0
 80012fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001302:	f7ff fb6f 	bl	80009e4 <HAL_GetTick>
 8001306:	0002      	movs	r2, r0
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e1ae      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001314:	4b94      	ldr	r3, [pc, #592]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 8001316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001318:	2202      	movs	r2, #2
 800131a:	4013      	ands	r3, r2
 800131c:	d1f1      	bne.n	8001302 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2204      	movs	r2, #4
 8001324:	4013      	ands	r3, r2
 8001326:	d100      	bne.n	800132a <HAL_RCC_OscConfig+0x44a>
 8001328:	e0ae      	b.n	8001488 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132a:	2023      	movs	r0, #35	; 0x23
 800132c:	183b      	adds	r3, r7, r0
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001332:	4b8d      	ldr	r3, [pc, #564]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 8001334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	055b      	lsls	r3, r3, #21
 800133a:	4013      	ands	r3, r2
 800133c:	d109      	bne.n	8001352 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	4b8a      	ldr	r3, [pc, #552]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 8001340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001342:	4b89      	ldr	r3, [pc, #548]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 8001344:	2180      	movs	r1, #128	; 0x80
 8001346:	0549      	lsls	r1, r1, #21
 8001348:	430a      	orrs	r2, r1
 800134a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800134c:	183b      	adds	r3, r7, r0
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001352:	4b88      	ldr	r3, [pc, #544]	; (8001574 <HAL_RCC_OscConfig+0x694>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4013      	ands	r3, r2
 800135c:	d11a      	bne.n	8001394 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800135e:	4b85      	ldr	r3, [pc, #532]	; (8001574 <HAL_RCC_OscConfig+0x694>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4b84      	ldr	r3, [pc, #528]	; (8001574 <HAL_RCC_OscConfig+0x694>)
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	0049      	lsls	r1, r1, #1
 8001368:	430a      	orrs	r2, r1
 800136a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800136c:	f7ff fb3a 	bl	80009e4 <HAL_GetTick>
 8001370:	0003      	movs	r3, r0
 8001372:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001376:	f7ff fb35 	bl	80009e4 <HAL_GetTick>
 800137a:	0002      	movs	r2, r0
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b64      	cmp	r3, #100	; 0x64
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e174      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	4b7a      	ldr	r3, [pc, #488]	; (8001574 <HAL_RCC_OscConfig+0x694>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4013      	ands	r3, r2
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	429a      	cmp	r2, r3
 800139e:	d107      	bne.n	80013b0 <HAL_RCC_OscConfig+0x4d0>
 80013a0:	4b71      	ldr	r3, [pc, #452]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80013a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013a4:	4b70      	ldr	r3, [pc, #448]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	0049      	lsls	r1, r1, #1
 80013aa:	430a      	orrs	r2, r1
 80013ac:	651a      	str	r2, [r3, #80]	; 0x50
 80013ae:	e031      	b.n	8001414 <HAL_RCC_OscConfig+0x534>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10c      	bne.n	80013d2 <HAL_RCC_OscConfig+0x4f2>
 80013b8:	4b6b      	ldr	r3, [pc, #428]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80013ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013bc:	4b6a      	ldr	r3, [pc, #424]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80013be:	496c      	ldr	r1, [pc, #432]	; (8001570 <HAL_RCC_OscConfig+0x690>)
 80013c0:	400a      	ands	r2, r1
 80013c2:	651a      	str	r2, [r3, #80]	; 0x50
 80013c4:	4b68      	ldr	r3, [pc, #416]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80013c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013c8:	4b67      	ldr	r3, [pc, #412]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80013ca:	496b      	ldr	r1, [pc, #428]	; (8001578 <HAL_RCC_OscConfig+0x698>)
 80013cc:	400a      	ands	r2, r1
 80013ce:	651a      	str	r2, [r3, #80]	; 0x50
 80013d0:	e020      	b.n	8001414 <HAL_RCC_OscConfig+0x534>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	23a0      	movs	r3, #160	; 0xa0
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	429a      	cmp	r2, r3
 80013dc:	d10e      	bne.n	80013fc <HAL_RCC_OscConfig+0x51c>
 80013de:	4b62      	ldr	r3, [pc, #392]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80013e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013e2:	4b61      	ldr	r3, [pc, #388]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80013e4:	2180      	movs	r1, #128	; 0x80
 80013e6:	00c9      	lsls	r1, r1, #3
 80013e8:	430a      	orrs	r2, r1
 80013ea:	651a      	str	r2, [r3, #80]	; 0x50
 80013ec:	4b5e      	ldr	r3, [pc, #376]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80013ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013f0:	4b5d      	ldr	r3, [pc, #372]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	0049      	lsls	r1, r1, #1
 80013f6:	430a      	orrs	r2, r1
 80013f8:	651a      	str	r2, [r3, #80]	; 0x50
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0x534>
 80013fc:	4b5a      	ldr	r3, [pc, #360]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80013fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001400:	4b59      	ldr	r3, [pc, #356]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 8001402:	495b      	ldr	r1, [pc, #364]	; (8001570 <HAL_RCC_OscConfig+0x690>)
 8001404:	400a      	ands	r2, r1
 8001406:	651a      	str	r2, [r3, #80]	; 0x50
 8001408:	4b57      	ldr	r3, [pc, #348]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 800140a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800140c:	4b56      	ldr	r3, [pc, #344]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 800140e:	495a      	ldr	r1, [pc, #360]	; (8001578 <HAL_RCC_OscConfig+0x698>)
 8001410:	400a      	ands	r2, r1
 8001412:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d015      	beq.n	8001448 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141c:	f7ff fae2 	bl	80009e4 <HAL_GetTick>
 8001420:	0003      	movs	r3, r0
 8001422:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001424:	e009      	b.n	800143a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001426:	f7ff fadd 	bl	80009e4 <HAL_GetTick>
 800142a:	0002      	movs	r2, r0
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	4a52      	ldr	r2, [pc, #328]	; (800157c <HAL_RCC_OscConfig+0x69c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e11b      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800143a:	4b4b      	ldr	r3, [pc, #300]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 800143c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4013      	ands	r3, r2
 8001444:	d0ef      	beq.n	8001426 <HAL_RCC_OscConfig+0x546>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001448:	f7ff facc 	bl	80009e4 <HAL_GetTick>
 800144c:	0003      	movs	r3, r0
 800144e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001450:	e009      	b.n	8001466 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001452:	f7ff fac7 	bl	80009e4 <HAL_GetTick>
 8001456:	0002      	movs	r2, r0
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	4a47      	ldr	r2, [pc, #284]	; (800157c <HAL_RCC_OscConfig+0x69c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e105      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001466:	4b40      	ldr	r3, [pc, #256]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 8001468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4013      	ands	r3, r2
 8001470:	d1ef      	bne.n	8001452 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001472:	2323      	movs	r3, #35	; 0x23
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d105      	bne.n	8001488 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147c:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 800147e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001480:	4b39      	ldr	r3, [pc, #228]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 8001482:	493f      	ldr	r1, [pc, #252]	; (8001580 <HAL_RCC_OscConfig+0x6a0>)
 8001484:	400a      	ands	r2, r1
 8001486:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2220      	movs	r2, #32
 800148e:	4013      	ands	r3, r2
 8001490:	d049      	beq.n	8001526 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d026      	beq.n	80014e8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	4b32      	ldr	r3, [pc, #200]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80014a0:	2101      	movs	r1, #1
 80014a2:	430a      	orrs	r2, r1
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	4b30      	ldr	r3, [pc, #192]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80014a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014aa:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80014ac:	2101      	movs	r1, #1
 80014ae:	430a      	orrs	r2, r1
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_RCC_OscConfig+0x6a4>)
 80014b4:	6a1a      	ldr	r2, [r3, #32]
 80014b6:	4b33      	ldr	r3, [pc, #204]	; (8001584 <HAL_RCC_OscConfig+0x6a4>)
 80014b8:	2180      	movs	r1, #128	; 0x80
 80014ba:	0189      	lsls	r1, r1, #6
 80014bc:	430a      	orrs	r2, r1
 80014be:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fa90 	bl	80009e4 <HAL_GetTick>
 80014c4:	0003      	movs	r3, r0
 80014c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ca:	f7ff fa8b 	bl	80009e4 <HAL_GetTick>
 80014ce:	0002      	movs	r2, r0
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e0ca      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2202      	movs	r2, #2
 80014e2:	4013      	ands	r3, r2
 80014e4:	d0f1      	beq.n	80014ca <HAL_RCC_OscConfig+0x5ea>
 80014e6:	e01e      	b.n	8001526 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 80014ee:	2101      	movs	r1, #1
 80014f0:	438a      	bics	r2, r1
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <HAL_RCC_OscConfig+0x6a4>)
 80014f6:	6a1a      	ldr	r2, [r3, #32]
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <HAL_RCC_OscConfig+0x6a4>)
 80014fa:	4923      	ldr	r1, [pc, #140]	; (8001588 <HAL_RCC_OscConfig+0x6a8>)
 80014fc:	400a      	ands	r2, r1
 80014fe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fa70 	bl	80009e4 <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800150a:	f7ff fa6b 	bl	80009e4 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e0aa      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2202      	movs	r2, #2
 8001522:	4013      	ands	r3, r2
 8001524:	d1f1      	bne.n	800150a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152a:	2b00      	cmp	r3, #0
 800152c:	d100      	bne.n	8001530 <HAL_RCC_OscConfig+0x650>
 800152e:	e09f      	b.n	8001670 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2b0c      	cmp	r3, #12
 8001534:	d100      	bne.n	8001538 <HAL_RCC_OscConfig+0x658>
 8001536:	e078      	b.n	800162a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153c:	2b02      	cmp	r3, #2
 800153e:	d159      	bne.n	80015f4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_RCC_OscConfig+0x688>)
 8001546:	4911      	ldr	r1, [pc, #68]	; (800158c <HAL_RCC_OscConfig+0x6ac>)
 8001548:	400a      	ands	r2, r1
 800154a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fa4a 	bl	80009e4 <HAL_GetTick>
 8001550:	0003      	movs	r3, r0
 8001552:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001554:	e01c      	b.n	8001590 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001556:	f7ff fa45 	bl	80009e4 <HAL_GetTick>
 800155a:	0002      	movs	r2, r0
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d915      	bls.n	8001590 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e084      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
 8001568:	40021000 	.word	0x40021000
 800156c:	ffff1fff 	.word	0xffff1fff
 8001570:	fffffeff 	.word	0xfffffeff
 8001574:	40007000 	.word	0x40007000
 8001578:	fffffbff 	.word	0xfffffbff
 800157c:	00001388 	.word	0x00001388
 8001580:	efffffff 	.word	0xefffffff
 8001584:	40010000 	.word	0x40010000
 8001588:	ffffdfff 	.word	0xffffdfff
 800158c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001590:	4b3a      	ldr	r3, [pc, #232]	; (800167c <HAL_RCC_OscConfig+0x79c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	049b      	lsls	r3, r3, #18
 8001598:	4013      	ands	r3, r2
 800159a:	d1dc      	bne.n	8001556 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800159c:	4b37      	ldr	r3, [pc, #220]	; (800167c <HAL_RCC_OscConfig+0x79c>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	4a37      	ldr	r2, [pc, #220]	; (8001680 <HAL_RCC_OscConfig+0x7a0>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	0019      	movs	r1, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b4:	431a      	orrs	r2, r3
 80015b6:	4b31      	ldr	r3, [pc, #196]	; (800167c <HAL_RCC_OscConfig+0x79c>)
 80015b8:	430a      	orrs	r2, r1
 80015ba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015bc:	4b2f      	ldr	r3, [pc, #188]	; (800167c <HAL_RCC_OscConfig+0x79c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b2e      	ldr	r3, [pc, #184]	; (800167c <HAL_RCC_OscConfig+0x79c>)
 80015c2:	2180      	movs	r1, #128	; 0x80
 80015c4:	0449      	lsls	r1, r1, #17
 80015c6:	430a      	orrs	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ca:	f7ff fa0b 	bl	80009e4 <HAL_GetTick>
 80015ce:	0003      	movs	r3, r0
 80015d0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d4:	f7ff fa06 	bl	80009e4 <HAL_GetTick>
 80015d8:	0002      	movs	r2, r0
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e045      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80015e6:	4b25      	ldr	r3, [pc, #148]	; (800167c <HAL_RCC_OscConfig+0x79c>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	049b      	lsls	r3, r3, #18
 80015ee:	4013      	ands	r3, r2
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x6f4>
 80015f2:	e03d      	b.n	8001670 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <HAL_RCC_OscConfig+0x79c>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <HAL_RCC_OscConfig+0x79c>)
 80015fa:	4922      	ldr	r1, [pc, #136]	; (8001684 <HAL_RCC_OscConfig+0x7a4>)
 80015fc:	400a      	ands	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff f9f0 	bl	80009e4 <HAL_GetTick>
 8001604:	0003      	movs	r3, r0
 8001606:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160a:	f7ff f9eb 	bl	80009e4 <HAL_GetTick>
 800160e:	0002      	movs	r2, r0
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e02a      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_RCC_OscConfig+0x79c>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	049b      	lsls	r3, r3, #18
 8001624:	4013      	ands	r3, r2
 8001626:	d1f0      	bne.n	800160a <HAL_RCC_OscConfig+0x72a>
 8001628:	e022      	b.n	8001670 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e01d      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_RCC_OscConfig+0x79c>)
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	025b      	lsls	r3, r3, #9
 8001642:	401a      	ands	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	429a      	cmp	r2, r3
 800164a:	d10f      	bne.n	800166c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	23f0      	movs	r3, #240	; 0xf0
 8001650:	039b      	lsls	r3, r3, #14
 8001652:	401a      	ands	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001658:	429a      	cmp	r2, r3
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	23c0      	movs	r3, #192	; 0xc0
 8001660:	041b      	lsls	r3, r3, #16
 8001662:	401a      	ands	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	0018      	movs	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	b00a      	add	sp, #40	; 0x28
 8001678:	bdb0      	pop	{r4, r5, r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	40021000 	.word	0x40021000
 8001680:	ff02ffff 	.word	0xff02ffff
 8001684:	feffffff 	.word	0xfeffffff

08001688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e128      	b.n	80018ee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800169c:	4b96      	ldr	r3, [pc, #600]	; (80018f8 <HAL_RCC_ClockConfig+0x270>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2201      	movs	r2, #1
 80016a2:	4013      	ands	r3, r2
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d91e      	bls.n	80016e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016aa:	4b93      	ldr	r3, [pc, #588]	; (80018f8 <HAL_RCC_ClockConfig+0x270>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2201      	movs	r2, #1
 80016b0:	4393      	bics	r3, r2
 80016b2:	0019      	movs	r1, r3
 80016b4:	4b90      	ldr	r3, [pc, #576]	; (80018f8 <HAL_RCC_ClockConfig+0x270>)
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016bc:	f7ff f992 	bl	80009e4 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c4:	e009      	b.n	80016da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c6:	f7ff f98d 	bl	80009e4 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	4a8a      	ldr	r2, [pc, #552]	; (80018fc <HAL_RCC_ClockConfig+0x274>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e109      	b.n	80018ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016da:	4b87      	ldr	r3, [pc, #540]	; (80018f8 <HAL_RCC_ClockConfig+0x270>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2201      	movs	r2, #1
 80016e0:	4013      	ands	r3, r2
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d1ee      	bne.n	80016c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2202      	movs	r2, #2
 80016ee:	4013      	ands	r3, r2
 80016f0:	d009      	beq.n	8001706 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f2:	4b83      	ldr	r3, [pc, #524]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	22f0      	movs	r2, #240	; 0xf0
 80016f8:	4393      	bics	r3, r2
 80016fa:	0019      	movs	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	4b7f      	ldr	r3, [pc, #508]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 8001702:	430a      	orrs	r2, r1
 8001704:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2201      	movs	r2, #1
 800170c:	4013      	ands	r3, r2
 800170e:	d100      	bne.n	8001712 <HAL_RCC_ClockConfig+0x8a>
 8001710:	e089      	b.n	8001826 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800171a:	4b79      	ldr	r3, [pc, #484]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	029b      	lsls	r3, r3, #10
 8001722:	4013      	ands	r3, r2
 8001724:	d120      	bne.n	8001768 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e0e1      	b.n	80018ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001732:	4b73      	ldr	r3, [pc, #460]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	049b      	lsls	r3, r3, #18
 800173a:	4013      	ands	r3, r2
 800173c:	d114      	bne.n	8001768 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e0d5      	b.n	80018ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d106      	bne.n	8001758 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800174a:	4b6d      	ldr	r3, [pc, #436]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2204      	movs	r2, #4
 8001750:	4013      	ands	r3, r2
 8001752:	d109      	bne.n	8001768 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0ca      	b.n	80018ee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001758:	4b69      	ldr	r3, [pc, #420]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4013      	ands	r3, r2
 8001762:	d101      	bne.n	8001768 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0c2      	b.n	80018ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001768:	4b65      	ldr	r3, [pc, #404]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2203      	movs	r2, #3
 800176e:	4393      	bics	r3, r2
 8001770:	0019      	movs	r1, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	4b62      	ldr	r3, [pc, #392]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 8001778:	430a      	orrs	r2, r1
 800177a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800177c:	f7ff f932 	bl	80009e4 <HAL_GetTick>
 8001780:	0003      	movs	r3, r0
 8001782:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d111      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800178c:	e009      	b.n	80017a2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178e:	f7ff f929 	bl	80009e4 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	4a58      	ldr	r2, [pc, #352]	; (80018fc <HAL_RCC_ClockConfig+0x274>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e0a5      	b.n	80018ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a2:	4b57      	ldr	r3, [pc, #348]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	220c      	movs	r2, #12
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d1ef      	bne.n	800178e <HAL_RCC_ClockConfig+0x106>
 80017ae:	e03a      	b.n	8001826 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d111      	bne.n	80017dc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b8:	e009      	b.n	80017ce <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ba:	f7ff f913 	bl	80009e4 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	4a4d      	ldr	r2, [pc, #308]	; (80018fc <HAL_RCC_ClockConfig+0x274>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e08f      	b.n	80018ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ce:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	220c      	movs	r2, #12
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b0c      	cmp	r3, #12
 80017d8:	d1ef      	bne.n	80017ba <HAL_RCC_ClockConfig+0x132>
 80017da:	e024      	b.n	8001826 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d11b      	bne.n	800181c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017e4:	e009      	b.n	80017fa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e6:	f7ff f8fd 	bl	80009e4 <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	4a42      	ldr	r2, [pc, #264]	; (80018fc <HAL_RCC_ClockConfig+0x274>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e079      	b.n	80018ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017fa:	4b41      	ldr	r3, [pc, #260]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	220c      	movs	r2, #12
 8001800:	4013      	ands	r3, r2
 8001802:	2b04      	cmp	r3, #4
 8001804:	d1ef      	bne.n	80017e6 <HAL_RCC_ClockConfig+0x15e>
 8001806:	e00e      	b.n	8001826 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001808:	f7ff f8ec 	bl	80009e4 <HAL_GetTick>
 800180c:	0002      	movs	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	4a3a      	ldr	r2, [pc, #232]	; (80018fc <HAL_RCC_ClockConfig+0x274>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e068      	b.n	80018ee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800181c:	4b38      	ldr	r3, [pc, #224]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	220c      	movs	r2, #12
 8001822:	4013      	ands	r3, r2
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001826:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <HAL_RCC_ClockConfig+0x270>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2201      	movs	r2, #1
 800182c:	4013      	ands	r3, r2
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d21e      	bcs.n	8001872 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001834:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <HAL_RCC_ClockConfig+0x270>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2201      	movs	r2, #1
 800183a:	4393      	bics	r3, r2
 800183c:	0019      	movs	r1, r3
 800183e:	4b2e      	ldr	r3, [pc, #184]	; (80018f8 <HAL_RCC_ClockConfig+0x270>)
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001846:	f7ff f8cd 	bl	80009e4 <HAL_GetTick>
 800184a:	0003      	movs	r3, r0
 800184c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	e009      	b.n	8001864 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001850:	f7ff f8c8 	bl	80009e4 <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	4a28      	ldr	r2, [pc, #160]	; (80018fc <HAL_RCC_ClockConfig+0x274>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e044      	b.n	80018ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_RCC_ClockConfig+0x270>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2201      	movs	r2, #1
 800186a:	4013      	ands	r3, r2
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d1ee      	bne.n	8001850 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2204      	movs	r2, #4
 8001878:	4013      	ands	r3, r2
 800187a:	d009      	beq.n	8001890 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187c:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4a20      	ldr	r2, [pc, #128]	; (8001904 <HAL_RCC_ClockConfig+0x27c>)
 8001882:	4013      	ands	r3, r2
 8001884:	0019      	movs	r1, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 800188c:	430a      	orrs	r2, r1
 800188e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2208      	movs	r2, #8
 8001896:	4013      	ands	r3, r2
 8001898:	d00a      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <HAL_RCC_ClockConfig+0x280>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	0019      	movs	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	00da      	lsls	r2, r3, #3
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 80018ac:	430a      	orrs	r2, r1
 80018ae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b0:	f000 f832 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80018b4:	0001      	movs	r1, r0
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_RCC_ClockConfig+0x278>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	220f      	movs	r2, #15
 80018be:	4013      	ands	r3, r2
 80018c0:	4a12      	ldr	r2, [pc, #72]	; (800190c <HAL_RCC_ClockConfig+0x284>)
 80018c2:	5cd3      	ldrb	r3, [r2, r3]
 80018c4:	000a      	movs	r2, r1
 80018c6:	40da      	lsrs	r2, r3
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_RCC_ClockConfig+0x288>)
 80018ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_RCC_ClockConfig+0x28c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	250b      	movs	r5, #11
 80018d2:	197c      	adds	r4, r7, r5
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff f83f 	bl	8000958 <HAL_InitTick>
 80018da:	0003      	movs	r3, r0
 80018dc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80018de:	197b      	adds	r3, r7, r5
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80018e6:	197b      	adds	r3, r7, r5
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	e000      	b.n	80018ee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	0018      	movs	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b004      	add	sp, #16
 80018f4:	bdb0      	pop	{r4, r5, r7, pc}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	40022000 	.word	0x40022000
 80018fc:	00001388 	.word	0x00001388
 8001900:	40021000 	.word	0x40021000
 8001904:	fffff8ff 	.word	0xfffff8ff
 8001908:	ffffc7ff 	.word	0xffffc7ff
 800190c:	08002934 	.word	0x08002934
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	b5b0      	push	{r4, r5, r7, lr}
 800191a:	b08e      	sub	sp, #56	; 0x38
 800191c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800191e:	4b4c      	ldr	r3, [pc, #304]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x138>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001926:	230c      	movs	r3, #12
 8001928:	4013      	ands	r3, r2
 800192a:	2b0c      	cmp	r3, #12
 800192c:	d014      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x40>
 800192e:	d900      	bls.n	8001932 <HAL_RCC_GetSysClockFreq+0x1a>
 8001930:	e07b      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x112>
 8001932:	2b04      	cmp	r3, #4
 8001934:	d002      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x24>
 8001936:	2b08      	cmp	r3, #8
 8001938:	d00b      	beq.n	8001952 <HAL_RCC_GetSysClockFreq+0x3a>
 800193a:	e076      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800193c:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x138>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2210      	movs	r2, #16
 8001942:	4013      	ands	r3, r2
 8001944:	d002      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001946:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800194a:	e07c      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800194c:	4b42      	ldr	r3, [pc, #264]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x140>)
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001950:	e079      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001952:	4b42      	ldr	r3, [pc, #264]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x144>)
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001956:	e076      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195a:	0c9a      	lsrs	r2, r3, #18
 800195c:	230f      	movs	r3, #15
 800195e:	401a      	ands	r2, r3
 8001960:	4b3f      	ldr	r3, [pc, #252]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x148>)
 8001962:	5c9b      	ldrb	r3, [r3, r2]
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001968:	0d9a      	lsrs	r2, r3, #22
 800196a:	2303      	movs	r3, #3
 800196c:	4013      	ands	r3, r2
 800196e:	3301      	adds	r3, #1
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001972:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x138>)
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	025b      	lsls	r3, r3, #9
 800197a:	4013      	ands	r3, r2
 800197c:	d01a      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800197e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	4a35      	ldr	r2, [pc, #212]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x144>)
 8001988:	2300      	movs	r3, #0
 800198a:	69b8      	ldr	r0, [r7, #24]
 800198c:	69f9      	ldr	r1, [r7, #28]
 800198e:	f7fe fc67 	bl	8000260 <__aeabi_lmul>
 8001992:	0002      	movs	r2, r0
 8001994:	000b      	movs	r3, r1
 8001996:	0010      	movs	r0, r2
 8001998:	0019      	movs	r1, r3
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f7fe fc3b 	bl	8000220 <__aeabi_uldivmod>
 80019aa:	0002      	movs	r2, r0
 80019ac:	000b      	movs	r3, r1
 80019ae:	0013      	movs	r3, r2
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
 80019b2:	e037      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019b4:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x138>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2210      	movs	r2, #16
 80019ba:	4013      	ands	r3, r2
 80019bc:	d01a      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80019be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x13c>)
 80019c8:	2300      	movs	r3, #0
 80019ca:	68b8      	ldr	r0, [r7, #8]
 80019cc:	68f9      	ldr	r1, [r7, #12]
 80019ce:	f7fe fc47 	bl	8000260 <__aeabi_lmul>
 80019d2:	0002      	movs	r2, r0
 80019d4:	000b      	movs	r3, r1
 80019d6:	0010      	movs	r0, r2
 80019d8:	0019      	movs	r1, r3
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f7fe fc1b 	bl	8000220 <__aeabi_uldivmod>
 80019ea:	0002      	movs	r2, r0
 80019ec:	000b      	movs	r3, r1
 80019ee:	0013      	movs	r3, r2
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
 80019f2:	e017      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f6:	0018      	movs	r0, r3
 80019f8:	2300      	movs	r3, #0
 80019fa:	0019      	movs	r1, r3
 80019fc:	4a16      	ldr	r2, [pc, #88]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x140>)
 80019fe:	2300      	movs	r3, #0
 8001a00:	f7fe fc2e 	bl	8000260 <__aeabi_lmul>
 8001a04:	0002      	movs	r2, r0
 8001a06:	000b      	movs	r3, r1
 8001a08:	0010      	movs	r0, r2
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	001c      	movs	r4, r3
 8001a10:	2300      	movs	r3, #0
 8001a12:	001d      	movs	r5, r3
 8001a14:	0022      	movs	r2, r4
 8001a16:	002b      	movs	r3, r5
 8001a18:	f7fe fc02 	bl	8000220 <__aeabi_uldivmod>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	000b      	movs	r3, r1
 8001a20:	0013      	movs	r3, r2
 8001a22:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a28:	e00d      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	0b5b      	lsrs	r3, r3, #13
 8001a30:	2207      	movs	r2, #7
 8001a32:	4013      	ands	r3, r2
 8001a34:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	0212      	lsls	r2, r2, #8
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	0013      	movs	r3, r2
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a44:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b00e      	add	sp, #56	; 0x38
 8001a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	003d0900 	.word	0x003d0900
 8001a58:	00f42400 	.word	0x00f42400
 8001a5c:	007a1200 	.word	0x007a1200
 8001a60:	0800294c 	.word	0x0800294c

08001a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	20000000 	.word	0x20000000

08001a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a7c:	f7ff fff2 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001a80:	0001      	movs	r1, r0
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	0a1b      	lsrs	r3, r3, #8
 8001a88:	2207      	movs	r2, #7
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	40d9      	lsrs	r1, r3
 8001a92:	000b      	movs	r3, r1
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	08002944 	.word	0x08002944

08001aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aa8:	f7ff ffdc 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001aac:	0001      	movs	r1, r0
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	0adb      	lsrs	r3, r3, #11
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001aba:	5cd3      	ldrb	r3, [r2, r3]
 8001abc:	40d9      	lsrs	r1, r3
 8001abe:	000b      	movs	r3, r1
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	08002944 	.word	0x08002944

08001ad0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001ad8:	2317      	movs	r3, #23
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d106      	bne.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	4013      	ands	r3, r2
 8001af4:	d100      	bne.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001af6:	e0d9      	b.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af8:	4ba4      	ldr	r3, [pc, #656]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	055b      	lsls	r3, r3, #21
 8001b00:	4013      	ands	r3, r2
 8001b02:	d10a      	bne.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b04:	4ba1      	ldr	r3, [pc, #644]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b08:	4ba0      	ldr	r3, [pc, #640]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b0a:	2180      	movs	r1, #128	; 0x80
 8001b0c:	0549      	lsls	r1, r1, #21
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001b12:	2317      	movs	r3, #23
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1a:	4b9d      	ldr	r3, [pc, #628]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4013      	ands	r3, r2
 8001b24:	d11a      	bne.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b26:	4b9a      	ldr	r3, [pc, #616]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4b99      	ldr	r3, [pc, #612]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001b2c:	2180      	movs	r1, #128	; 0x80
 8001b2e:	0049      	lsls	r1, r1, #1
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b34:	f7fe ff56 	bl	80009e4 <HAL_GetTick>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3c:	e008      	b.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3e:	f7fe ff51 	bl	80009e4 <HAL_GetTick>
 8001b42:	0002      	movs	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e118      	b.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	4b8f      	ldr	r3, [pc, #572]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001b5c:	4b8b      	ldr	r3, [pc, #556]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	23c0      	movs	r3, #192	; 0xc0
 8001b62:	039b      	lsls	r3, r3, #14
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	23c0      	movs	r3, #192	; 0xc0
 8001b6e:	039b      	lsls	r3, r3, #14
 8001b70:	4013      	ands	r3, r2
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d107      	bne.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	23c0      	movs	r3, #192	; 0xc0
 8001b7e:	039b      	lsls	r3, r3, #14
 8001b80:	4013      	ands	r3, r2
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d013      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	23c0      	movs	r3, #192	; 0xc0
 8001b8e:	029b      	lsls	r3, r3, #10
 8001b90:	401a      	ands	r2, r3
 8001b92:	23c0      	movs	r3, #192	; 0xc0
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d10a      	bne.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001b9a:	4b7c      	ldr	r3, [pc, #496]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	029b      	lsls	r3, r3, #10
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	029b      	lsls	r3, r3, #10
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0e8      	b.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001bb0:	4b76      	ldr	r3, [pc, #472]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001bb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bb4:	23c0      	movs	r3, #192	; 0xc0
 8001bb6:	029b      	lsls	r3, r3, #10
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d049      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	23c0      	movs	r3, #192	; 0xc0
 8001bc8:	029b      	lsls	r3, r3, #10
 8001bca:	4013      	ands	r3, r2
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d004      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d10d      	bne.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	23c0      	movs	r3, #192	; 0xc0
 8001be2:	029b      	lsls	r3, r3, #10
 8001be4:	4013      	ands	r3, r2
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d034      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d02e      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001bf8:	4b64      	ldr	r3, [pc, #400]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bfc:	4a65      	ldr	r2, [pc, #404]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c02:	4b62      	ldr	r3, [pc, #392]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c06:	4b61      	ldr	r3, [pc, #388]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c08:	2180      	movs	r1, #128	; 0x80
 8001c0a:	0309      	lsls	r1, r1, #12
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c10:	4b5e      	ldr	r3, [pc, #376]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c14:	4b5d      	ldr	r3, [pc, #372]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c16:	4960      	ldr	r1, [pc, #384]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001c18:	400a      	ands	r2, r1
 8001c1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001c1c:	4b5b      	ldr	r3, [pc, #364]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d014      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7fe feda 	bl	80009e4 <HAL_GetTick>
 8001c30:	0003      	movs	r3, r0
 8001c32:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c34:	e009      	b.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7fe fed5 	bl	80009e4 <HAL_GetTick>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	4a56      	ldr	r2, [pc, #344]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e09b      	b.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c4a:	4b50      	ldr	r3, [pc, #320]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4013      	ands	r3, r2
 8001c54:	d0ef      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	23c0      	movs	r3, #192	; 0xc0
 8001c5c:	029b      	lsls	r3, r3, #10
 8001c5e:	401a      	ands	r2, r3
 8001c60:	23c0      	movs	r3, #192	; 0xc0
 8001c62:	029b      	lsls	r3, r3, #10
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d10c      	bne.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001c68:	4b48      	ldr	r3, [pc, #288]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a4c      	ldr	r2, [pc, #304]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	0019      	movs	r1, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	23c0      	movs	r3, #192	; 0xc0
 8001c78:	039b      	lsls	r3, r3, #14
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	4b42      	ldr	r3, [pc, #264]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c84:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	23c0      	movs	r3, #192	; 0xc0
 8001c8c:	029b      	lsls	r3, r3, #10
 8001c8e:	401a      	ands	r2, r3
 8001c90:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c92:	430a      	orrs	r2, r1
 8001c94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c96:	2317      	movs	r3, #23
 8001c98:	18fb      	adds	r3, r7, r3
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d105      	bne.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca0:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ca4:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ca6:	493f      	ldr	r1, [pc, #252]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d009      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cb6:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	2203      	movs	r2, #3
 8001cbc:	4393      	bics	r3, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d009      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd8:	220c      	movs	r2, #12
 8001cda:	4393      	bics	r3, r2
 8001cdc:	0019      	movs	r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691a      	ldr	r2, [r3, #16]
 8001ce2:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2204      	movs	r2, #4
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d009      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cf2:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	4a2c      	ldr	r2, [pc, #176]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695a      	ldr	r2, [r3, #20]
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d02:	430a      	orrs	r2, r1
 8001d04:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d10:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	4a25      	ldr	r2, [pc, #148]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d009      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d30:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d34:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	0019      	movs	r1, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d40:	430a      	orrs	r2, r1
 8001d42:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2240      	movs	r2, #64	; 0x40
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d009      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d70:	4a10      	ldr	r2, [pc, #64]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1a      	ldr	r2, [r3, #32]
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b006      	add	sp, #24
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40007000 	.word	0x40007000
 8001d94:	fffcffff 	.word	0xfffcffff
 8001d98:	fff7ffff 	.word	0xfff7ffff
 8001d9c:	00001388 	.word	0x00001388
 8001da0:	ffcfffff 	.word	0xffcfffff
 8001da4:	efffffff 	.word	0xefffffff
 8001da8:	fffff3ff 	.word	0xfffff3ff
 8001dac:	ffffcfff 	.word	0xffffcfff
 8001db0:	fbffffff 	.word	0xfbffffff
 8001db4:	fff3ffff 	.word	0xfff3ffff

08001db8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e044      	b.n	8001e54 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d107      	bne.n	8001de2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2274      	movs	r2, #116	; 0x74
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7fe fcdf 	bl	80007a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2224      	movs	r2, #36	; 0x24
 8001de6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2101      	movs	r1, #1
 8001df4:	438a      	bics	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 f8d8 	bl	8001fb0 <UART_SetConfig>
 8001e00:	0003      	movs	r3, r0
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e024      	b.n	8001e54 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	0018      	movs	r0, r3
 8001e16:	f000 fb89 	bl	800252c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	490d      	ldr	r1, [pc, #52]	; (8001e5c <HAL_UART_Init+0xa4>)
 8001e26:	400a      	ands	r2, r1
 8001e28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	212a      	movs	r1, #42	; 0x2a
 8001e36:	438a      	bics	r2, r1
 8001e38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2101      	movs	r1, #1
 8001e46:	430a      	orrs	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f000 fc21 	bl	8002694 <UART_CheckIdleState>
 8001e52:	0003      	movs	r3, r0
}
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b002      	add	sp, #8
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	ffffb7ff 	.word	0xffffb7ff

08001e60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	; 0x28
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	1dbb      	adds	r3, r7, #6
 8001e6e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d000      	beq.n	8001e7a <HAL_UART_Transmit+0x1a>
 8001e78:	e095      	b.n	8001fa6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_UART_Transmit+0x28>
 8001e80:	1dbb      	adds	r3, r7, #6
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e08d      	b.n	8001fa8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	015b      	lsls	r3, r3, #5
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d109      	bne.n	8001eac <HAL_UART_Transmit+0x4c>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d105      	bne.n	8001eac <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d001      	beq.n	8001eac <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e07d      	b.n	8001fa8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2274      	movs	r2, #116	; 0x74
 8001eb0:	5c9b      	ldrb	r3, [r3, r2]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_UART_Transmit+0x5a>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e076      	b.n	8001fa8 <HAL_UART_Transmit+0x148>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2274      	movs	r2, #116	; 0x74
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2280      	movs	r2, #128	; 0x80
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2221      	movs	r2, #33	; 0x21
 8001ece:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ed0:	f7fe fd88 	bl	80009e4 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1dba      	adds	r2, r7, #6
 8001edc:	2150      	movs	r1, #80	; 0x50
 8001ede:	8812      	ldrh	r2, [r2, #0]
 8001ee0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1dba      	adds	r2, r7, #6
 8001ee6:	2152      	movs	r1, #82	; 0x52
 8001ee8:	8812      	ldrh	r2, [r2, #0]
 8001eea:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	015b      	lsls	r3, r3, #5
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d108      	bne.n	8001f0a <HAL_UART_Transmit+0xaa>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d104      	bne.n	8001f0a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	61bb      	str	r3, [r7, #24]
 8001f08:	e003      	b.n	8001f12 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2274      	movs	r2, #116	; 0x74
 8001f16:	2100      	movs	r1, #0
 8001f18:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001f1a:	e02c      	b.n	8001f76 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	0013      	movs	r3, r2
 8001f26:	2200      	movs	r2, #0
 8001f28:	2180      	movs	r1, #128	; 0x80
 8001f2a:	f000 fbfb 	bl	8002724 <UART_WaitOnFlagUntilTimeout>
 8001f2e:	1e03      	subs	r3, r0, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e038      	b.n	8001fa8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10b      	bne.n	8001f54 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	001a      	movs	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	05d2      	lsls	r2, r2, #23
 8001f48:	0dd2      	lsrs	r2, r2, #23
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	3302      	adds	r3, #2
 8001f50:	61bb      	str	r3, [r7, #24]
 8001f52:	e007      	b.n	8001f64 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	781a      	ldrb	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3301      	adds	r3, #1
 8001f62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2252      	movs	r2, #82	; 0x52
 8001f68:	5a9b      	ldrh	r3, [r3, r2]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b299      	uxth	r1, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2252      	movs	r2, #82	; 0x52
 8001f74:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2252      	movs	r2, #82	; 0x52
 8001f7a:	5a9b      	ldrh	r3, [r3, r2]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1cc      	bne.n	8001f1c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	0013      	movs	r3, r2
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2140      	movs	r1, #64	; 0x40
 8001f90:	f000 fbc8 	bl	8002724 <UART_WaitOnFlagUntilTimeout>
 8001f94:	1e03      	subs	r3, r0, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e005      	b.n	8001fa8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e000      	b.n	8001fa8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8001fa6:	2302      	movs	r3, #2
  }
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b008      	add	sp, #32
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fb0:	b5b0      	push	{r4, r5, r7, lr}
 8001fb2:	b08e      	sub	sp, #56	; 0x38
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fb8:	231a      	movs	r3, #26
 8001fba:	2218      	movs	r2, #24
 8001fbc:	4694      	mov	ip, r2
 8001fbe:	44bc      	add	ip, r7
 8001fc0:	4463      	add	r3, ip
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4ab0      	ldr	r2, [pc, #704]	; (80022a8 <UART_SetConfig+0x2f8>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4aac      	ldr	r2, [pc, #688]	; (80022ac <UART_SetConfig+0x2fc>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4aa6      	ldr	r2, [pc, #664]	; (80022b0 <UART_SetConfig+0x300>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d004      	beq.n	8002026 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002022:	4313      	orrs	r3, r2
 8002024:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4aa1      	ldr	r2, [pc, #644]	; (80022b4 <UART_SetConfig+0x304>)
 800202e:	4013      	ands	r3, r2
 8002030:	0019      	movs	r1, r3
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002038:	430a      	orrs	r2, r1
 800203a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a9d      	ldr	r2, [pc, #628]	; (80022b8 <UART_SetConfig+0x308>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d136      	bne.n	80020b4 <UART_SetConfig+0x104>
 8002046:	4b9d      	ldr	r3, [pc, #628]	; (80022bc <UART_SetConfig+0x30c>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	2203      	movs	r2, #3
 800204c:	4013      	ands	r3, r2
 800204e:	2b03      	cmp	r3, #3
 8002050:	d020      	beq.n	8002094 <UART_SetConfig+0xe4>
 8002052:	d827      	bhi.n	80020a4 <UART_SetConfig+0xf4>
 8002054:	2b02      	cmp	r3, #2
 8002056:	d00d      	beq.n	8002074 <UART_SetConfig+0xc4>
 8002058:	d824      	bhi.n	80020a4 <UART_SetConfig+0xf4>
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <UART_SetConfig+0xb4>
 800205e:	2b01      	cmp	r3, #1
 8002060:	d010      	beq.n	8002084 <UART_SetConfig+0xd4>
 8002062:	e01f      	b.n	80020a4 <UART_SetConfig+0xf4>
 8002064:	231b      	movs	r3, #27
 8002066:	2218      	movs	r2, #24
 8002068:	4694      	mov	ip, r2
 800206a:	44bc      	add	ip, r7
 800206c:	4463      	add	r3, ip
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	e0c5      	b.n	8002200 <UART_SetConfig+0x250>
 8002074:	231b      	movs	r3, #27
 8002076:	2218      	movs	r2, #24
 8002078:	4694      	mov	ip, r2
 800207a:	44bc      	add	ip, r7
 800207c:	4463      	add	r3, ip
 800207e:	2202      	movs	r2, #2
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	e0bd      	b.n	8002200 <UART_SetConfig+0x250>
 8002084:	231b      	movs	r3, #27
 8002086:	2218      	movs	r2, #24
 8002088:	4694      	mov	ip, r2
 800208a:	44bc      	add	ip, r7
 800208c:	4463      	add	r3, ip
 800208e:	2204      	movs	r2, #4
 8002090:	701a      	strb	r2, [r3, #0]
 8002092:	e0b5      	b.n	8002200 <UART_SetConfig+0x250>
 8002094:	231b      	movs	r3, #27
 8002096:	2218      	movs	r2, #24
 8002098:	4694      	mov	ip, r2
 800209a:	44bc      	add	ip, r7
 800209c:	4463      	add	r3, ip
 800209e:	2208      	movs	r2, #8
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	e0ad      	b.n	8002200 <UART_SetConfig+0x250>
 80020a4:	231b      	movs	r3, #27
 80020a6:	2218      	movs	r2, #24
 80020a8:	4694      	mov	ip, r2
 80020aa:	44bc      	add	ip, r7
 80020ac:	4463      	add	r3, ip
 80020ae:	2210      	movs	r2, #16
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e0a5      	b.n	8002200 <UART_SetConfig+0x250>
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a81      	ldr	r2, [pc, #516]	; (80022c0 <UART_SetConfig+0x310>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d136      	bne.n	800212c <UART_SetConfig+0x17c>
 80020be:	4b7f      	ldr	r3, [pc, #508]	; (80022bc <UART_SetConfig+0x30c>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	220c      	movs	r2, #12
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d020      	beq.n	800210c <UART_SetConfig+0x15c>
 80020ca:	d827      	bhi.n	800211c <UART_SetConfig+0x16c>
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d00d      	beq.n	80020ec <UART_SetConfig+0x13c>
 80020d0:	d824      	bhi.n	800211c <UART_SetConfig+0x16c>
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <UART_SetConfig+0x12c>
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d010      	beq.n	80020fc <UART_SetConfig+0x14c>
 80020da:	e01f      	b.n	800211c <UART_SetConfig+0x16c>
 80020dc:	231b      	movs	r3, #27
 80020de:	2218      	movs	r2, #24
 80020e0:	4694      	mov	ip, r2
 80020e2:	44bc      	add	ip, r7
 80020e4:	4463      	add	r3, ip
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e089      	b.n	8002200 <UART_SetConfig+0x250>
 80020ec:	231b      	movs	r3, #27
 80020ee:	2218      	movs	r2, #24
 80020f0:	4694      	mov	ip, r2
 80020f2:	44bc      	add	ip, r7
 80020f4:	4463      	add	r3, ip
 80020f6:	2202      	movs	r2, #2
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e081      	b.n	8002200 <UART_SetConfig+0x250>
 80020fc:	231b      	movs	r3, #27
 80020fe:	2218      	movs	r2, #24
 8002100:	4694      	mov	ip, r2
 8002102:	44bc      	add	ip, r7
 8002104:	4463      	add	r3, ip
 8002106:	2204      	movs	r2, #4
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e079      	b.n	8002200 <UART_SetConfig+0x250>
 800210c:	231b      	movs	r3, #27
 800210e:	2218      	movs	r2, #24
 8002110:	4694      	mov	ip, r2
 8002112:	44bc      	add	ip, r7
 8002114:	4463      	add	r3, ip
 8002116:	2208      	movs	r2, #8
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	e071      	b.n	8002200 <UART_SetConfig+0x250>
 800211c:	231b      	movs	r3, #27
 800211e:	2218      	movs	r2, #24
 8002120:	4694      	mov	ip, r2
 8002122:	44bc      	add	ip, r7
 8002124:	4463      	add	r3, ip
 8002126:	2210      	movs	r2, #16
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e069      	b.n	8002200 <UART_SetConfig+0x250>
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a64      	ldr	r2, [pc, #400]	; (80022c4 <UART_SetConfig+0x314>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d107      	bne.n	8002146 <UART_SetConfig+0x196>
 8002136:	231b      	movs	r3, #27
 8002138:	2218      	movs	r2, #24
 800213a:	4694      	mov	ip, r2
 800213c:	44bc      	add	ip, r7
 800213e:	4463      	add	r3, ip
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e05c      	b.n	8002200 <UART_SetConfig+0x250>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a5f      	ldr	r2, [pc, #380]	; (80022c8 <UART_SetConfig+0x318>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d107      	bne.n	8002160 <UART_SetConfig+0x1b0>
 8002150:	231b      	movs	r3, #27
 8002152:	2218      	movs	r2, #24
 8002154:	4694      	mov	ip, r2
 8002156:	44bc      	add	ip, r7
 8002158:	4463      	add	r3, ip
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	e04f      	b.n	8002200 <UART_SetConfig+0x250>
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <UART_SetConfig+0x300>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d143      	bne.n	80021f2 <UART_SetConfig+0x242>
 800216a:	4b54      	ldr	r3, [pc, #336]	; (80022bc <UART_SetConfig+0x30c>)
 800216c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800216e:	23c0      	movs	r3, #192	; 0xc0
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	4013      	ands	r3, r2
 8002174:	22c0      	movs	r2, #192	; 0xc0
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	4293      	cmp	r3, r2
 800217a:	d02a      	beq.n	80021d2 <UART_SetConfig+0x222>
 800217c:	22c0      	movs	r2, #192	; 0xc0
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	4293      	cmp	r3, r2
 8002182:	d82e      	bhi.n	80021e2 <UART_SetConfig+0x232>
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	0112      	lsls	r2, r2, #4
 8002188:	4293      	cmp	r3, r2
 800218a:	d012      	beq.n	80021b2 <UART_SetConfig+0x202>
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	4293      	cmp	r3, r2
 8002192:	d826      	bhi.n	80021e2 <UART_SetConfig+0x232>
 8002194:	2b00      	cmp	r3, #0
 8002196:	d004      	beq.n	80021a2 <UART_SetConfig+0x1f2>
 8002198:	2280      	movs	r2, #128	; 0x80
 800219a:	00d2      	lsls	r2, r2, #3
 800219c:	4293      	cmp	r3, r2
 800219e:	d010      	beq.n	80021c2 <UART_SetConfig+0x212>
 80021a0:	e01f      	b.n	80021e2 <UART_SetConfig+0x232>
 80021a2:	231b      	movs	r3, #27
 80021a4:	2218      	movs	r2, #24
 80021a6:	4694      	mov	ip, r2
 80021a8:	44bc      	add	ip, r7
 80021aa:	4463      	add	r3, ip
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e026      	b.n	8002200 <UART_SetConfig+0x250>
 80021b2:	231b      	movs	r3, #27
 80021b4:	2218      	movs	r2, #24
 80021b6:	4694      	mov	ip, r2
 80021b8:	44bc      	add	ip, r7
 80021ba:	4463      	add	r3, ip
 80021bc:	2202      	movs	r2, #2
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	e01e      	b.n	8002200 <UART_SetConfig+0x250>
 80021c2:	231b      	movs	r3, #27
 80021c4:	2218      	movs	r2, #24
 80021c6:	4694      	mov	ip, r2
 80021c8:	44bc      	add	ip, r7
 80021ca:	4463      	add	r3, ip
 80021cc:	2204      	movs	r2, #4
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e016      	b.n	8002200 <UART_SetConfig+0x250>
 80021d2:	231b      	movs	r3, #27
 80021d4:	2218      	movs	r2, #24
 80021d6:	4694      	mov	ip, r2
 80021d8:	44bc      	add	ip, r7
 80021da:	4463      	add	r3, ip
 80021dc:	2208      	movs	r2, #8
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	e00e      	b.n	8002200 <UART_SetConfig+0x250>
 80021e2:	231b      	movs	r3, #27
 80021e4:	2218      	movs	r2, #24
 80021e6:	4694      	mov	ip, r2
 80021e8:	44bc      	add	ip, r7
 80021ea:	4463      	add	r3, ip
 80021ec:	2210      	movs	r2, #16
 80021ee:	701a      	strb	r2, [r3, #0]
 80021f0:	e006      	b.n	8002200 <UART_SetConfig+0x250>
 80021f2:	231b      	movs	r3, #27
 80021f4:	2218      	movs	r2, #24
 80021f6:	4694      	mov	ip, r2
 80021f8:	44bc      	add	ip, r7
 80021fa:	4463      	add	r3, ip
 80021fc:	2210      	movs	r2, #16
 80021fe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a2a      	ldr	r2, [pc, #168]	; (80022b0 <UART_SetConfig+0x300>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d000      	beq.n	800220c <UART_SetConfig+0x25c>
 800220a:	e09e      	b.n	800234a <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800220c:	231b      	movs	r3, #27
 800220e:	2218      	movs	r2, #24
 8002210:	4694      	mov	ip, r2
 8002212:	44bc      	add	ip, r7
 8002214:	4463      	add	r3, ip
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b08      	cmp	r3, #8
 800221a:	d01d      	beq.n	8002258 <UART_SetConfig+0x2a8>
 800221c:	dc20      	bgt.n	8002260 <UART_SetConfig+0x2b0>
 800221e:	2b04      	cmp	r3, #4
 8002220:	d015      	beq.n	800224e <UART_SetConfig+0x29e>
 8002222:	dc1d      	bgt.n	8002260 <UART_SetConfig+0x2b0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <UART_SetConfig+0x27e>
 8002228:	2b02      	cmp	r3, #2
 800222a:	d005      	beq.n	8002238 <UART_SetConfig+0x288>
 800222c:	e018      	b.n	8002260 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800222e:	f7ff fc23 	bl	8001a78 <HAL_RCC_GetPCLK1Freq>
 8002232:	0003      	movs	r3, r0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002236:	e01d      	b.n	8002274 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002238:	4b20      	ldr	r3, [pc, #128]	; (80022bc <UART_SetConfig+0x30c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2210      	movs	r2, #16
 800223e:	4013      	ands	r3, r2
 8002240:	d002      	beq.n	8002248 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002242:	4b22      	ldr	r3, [pc, #136]	; (80022cc <UART_SetConfig+0x31c>)
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002246:	e015      	b.n	8002274 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <UART_SetConfig+0x320>)
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800224c:	e012      	b.n	8002274 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800224e:	f7ff fb63 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 8002252:	0003      	movs	r3, r0
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002256:	e00d      	b.n	8002274 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800225e:	e009      	b.n	8002274 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002264:	231a      	movs	r3, #26
 8002266:	2218      	movs	r2, #24
 8002268:	4694      	mov	ip, r2
 800226a:	44bc      	add	ip, r7
 800226c:	4463      	add	r3, ip
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
        break;
 8002272:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	2b00      	cmp	r3, #0
 8002278:	d100      	bne.n	800227c <UART_SetConfig+0x2cc>
 800227a:	e13c      	b.n	80024f6 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	0013      	movs	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	189b      	adds	r3, r3, r2
 8002286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002288:	429a      	cmp	r2, r3
 800228a:	d305      	bcc.n	8002298 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002294:	429a      	cmp	r2, r3
 8002296:	d91d      	bls.n	80022d4 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8002298:	231a      	movs	r3, #26
 800229a:	2218      	movs	r2, #24
 800229c:	4694      	mov	ip, r2
 800229e:	44bc      	add	ip, r7
 80022a0:	4463      	add	r3, ip
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	e126      	b.n	80024f6 <UART_SetConfig+0x546>
 80022a8:	efff69f3 	.word	0xefff69f3
 80022ac:	ffffcfff 	.word	0xffffcfff
 80022b0:	40004800 	.word	0x40004800
 80022b4:	fffff4ff 	.word	0xfffff4ff
 80022b8:	40013800 	.word	0x40013800
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40004400 	.word	0x40004400
 80022c4:	40004c00 	.word	0x40004c00
 80022c8:	40005000 	.word	0x40005000
 80022cc:	003d0900 	.word	0x003d0900
 80022d0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80022d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	6939      	ldr	r1, [r7, #16]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	000b      	movs	r3, r1
 80022e2:	0e1b      	lsrs	r3, r3, #24
 80022e4:	0010      	movs	r0, r2
 80022e6:	0205      	lsls	r5, r0, #8
 80022e8:	431d      	orrs	r5, r3
 80022ea:	000b      	movs	r3, r1
 80022ec:	021c      	lsls	r4, r3, #8
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	085b      	lsrs	r3, r3, #1
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68b8      	ldr	r0, [r7, #8]
 80022fc:	68f9      	ldr	r1, [r7, #12]
 80022fe:	1900      	adds	r0, r0, r4
 8002300:	4169      	adcs	r1, r5
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	2300      	movs	r3, #0
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f7fd ff86 	bl	8000220 <__aeabi_uldivmod>
 8002314:	0002      	movs	r2, r0
 8002316:	000b      	movs	r3, r1
 8002318:	0013      	movs	r3, r2
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800231c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800231e:	23c0      	movs	r3, #192	; 0xc0
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	429a      	cmp	r2, r3
 8002324:	d309      	bcc.n	800233a <UART_SetConfig+0x38a>
 8002326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	035b      	lsls	r3, r3, #13
 800232c:	429a      	cmp	r2, r3
 800232e:	d204      	bcs.n	800233a <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	e0dd      	b.n	80024f6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800233a:	231a      	movs	r3, #26
 800233c:	2218      	movs	r2, #24
 800233e:	4694      	mov	ip, r2
 8002340:	44bc      	add	ip, r7
 8002342:	4463      	add	r3, ip
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
 8002348:	e0d5      	b.n	80024f6 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	69da      	ldr	r2, [r3, #28]
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	429a      	cmp	r2, r3
 8002354:	d000      	beq.n	8002358 <UART_SetConfig+0x3a8>
 8002356:	e074      	b.n	8002442 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8002358:	231b      	movs	r3, #27
 800235a:	2218      	movs	r2, #24
 800235c:	4694      	mov	ip, r2
 800235e:	44bc      	add	ip, r7
 8002360:	4463      	add	r3, ip
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d822      	bhi.n	80023ae <UART_SetConfig+0x3fe>
 8002368:	009a      	lsls	r2, r3, #2
 800236a:	4b6b      	ldr	r3, [pc, #428]	; (8002518 <UART_SetConfig+0x568>)
 800236c:	18d3      	adds	r3, r2, r3
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002372:	f7ff fb81 	bl	8001a78 <HAL_RCC_GetPCLK1Freq>
 8002376:	0003      	movs	r3, r0
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800237a:	e022      	b.n	80023c2 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800237c:	f7ff fb92 	bl	8001aa4 <HAL_RCC_GetPCLK2Freq>
 8002380:	0003      	movs	r3, r0
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002384:	e01d      	b.n	80023c2 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002386:	4b65      	ldr	r3, [pc, #404]	; (800251c <UART_SetConfig+0x56c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2210      	movs	r2, #16
 800238c:	4013      	ands	r3, r2
 800238e:	d002      	beq.n	8002396 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002390:	4b63      	ldr	r3, [pc, #396]	; (8002520 <UART_SetConfig+0x570>)
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002394:	e015      	b.n	80023c2 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8002396:	4b63      	ldr	r3, [pc, #396]	; (8002524 <UART_SetConfig+0x574>)
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800239a:	e012      	b.n	80023c2 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800239c:	f7ff fabc 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80023a0:	0003      	movs	r3, r0
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023a4:	e00d      	b.n	80023c2 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023ac:	e009      	b.n	80023c2 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80023b2:	231a      	movs	r3, #26
 80023b4:	2218      	movs	r2, #24
 80023b6:	4694      	mov	ip, r2
 80023b8:	44bc      	add	ip, r7
 80023ba:	4463      	add	r3, ip
 80023bc:	2201      	movs	r2, #1
 80023be:	701a      	strb	r2, [r3, #0]
        break;
 80023c0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80023c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d100      	bne.n	80023ca <UART_SetConfig+0x41a>
 80023c8:	e095      	b.n	80024f6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80023ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023cc:	005a      	lsls	r2, r3, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	18d2      	adds	r2, r2, r3
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	0019      	movs	r1, r3
 80023dc:	0010      	movs	r0, r2
 80023de:	f7fd fe93 	bl	8000108 <__udivsi3>
 80023e2:	0003      	movs	r3, r0
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	2b0f      	cmp	r3, #15
 80023ec:	d921      	bls.n	8002432 <UART_SetConfig+0x482>
 80023ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	025b      	lsls	r3, r3, #9
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d21c      	bcs.n	8002432 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	200e      	movs	r0, #14
 80023fe:	2418      	movs	r4, #24
 8002400:	193b      	adds	r3, r7, r4
 8002402:	181b      	adds	r3, r3, r0
 8002404:	210f      	movs	r1, #15
 8002406:	438a      	bics	r2, r1
 8002408:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	b29b      	uxth	r3, r3
 8002410:	2207      	movs	r2, #7
 8002412:	4013      	ands	r3, r2
 8002414:	b299      	uxth	r1, r3
 8002416:	193b      	adds	r3, r7, r4
 8002418:	181b      	adds	r3, r3, r0
 800241a:	193a      	adds	r2, r7, r4
 800241c:	1812      	adds	r2, r2, r0
 800241e:	8812      	ldrh	r2, [r2, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	193a      	adds	r2, r7, r4
 800242a:	1812      	adds	r2, r2, r0
 800242c:	8812      	ldrh	r2, [r2, #0]
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	e061      	b.n	80024f6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002432:	231a      	movs	r3, #26
 8002434:	2218      	movs	r2, #24
 8002436:	4694      	mov	ip, r2
 8002438:	44bc      	add	ip, r7
 800243a:	4463      	add	r3, ip
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	e059      	b.n	80024f6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002442:	231b      	movs	r3, #27
 8002444:	2218      	movs	r2, #24
 8002446:	4694      	mov	ip, r2
 8002448:	44bc      	add	ip, r7
 800244a:	4463      	add	r3, ip
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b08      	cmp	r3, #8
 8002450:	d822      	bhi.n	8002498 <UART_SetConfig+0x4e8>
 8002452:	009a      	lsls	r2, r3, #2
 8002454:	4b34      	ldr	r3, [pc, #208]	; (8002528 <UART_SetConfig+0x578>)
 8002456:	18d3      	adds	r3, r2, r3
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800245c:	f7ff fb0c 	bl	8001a78 <HAL_RCC_GetPCLK1Freq>
 8002460:	0003      	movs	r3, r0
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002464:	e022      	b.n	80024ac <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002466:	f7ff fb1d 	bl	8001aa4 <HAL_RCC_GetPCLK2Freq>
 800246a:	0003      	movs	r3, r0
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800246e:	e01d      	b.n	80024ac <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002470:	4b2a      	ldr	r3, [pc, #168]	; (800251c <UART_SetConfig+0x56c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2210      	movs	r2, #16
 8002476:	4013      	ands	r3, r2
 8002478:	d002      	beq.n	8002480 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800247a:	4b29      	ldr	r3, [pc, #164]	; (8002520 <UART_SetConfig+0x570>)
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800247e:	e015      	b.n	80024ac <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8002480:	4b28      	ldr	r3, [pc, #160]	; (8002524 <UART_SetConfig+0x574>)
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002484:	e012      	b.n	80024ac <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002486:	f7ff fa47 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 800248a:	0003      	movs	r3, r0
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800248e:	e00d      	b.n	80024ac <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002496:	e009      	b.n	80024ac <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800249c:	231a      	movs	r3, #26
 800249e:	2218      	movs	r2, #24
 80024a0:	4694      	mov	ip, r2
 80024a2:	44bc      	add	ip, r7
 80024a4:	4463      	add	r3, ip
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
        break;
 80024aa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80024ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d021      	beq.n	80024f6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	085a      	lsrs	r2, r3, #1
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ba:	18d2      	adds	r2, r2, r3
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	0019      	movs	r1, r3
 80024c2:	0010      	movs	r0, r2
 80024c4:	f7fd fe20 	bl	8000108 <__udivsi3>
 80024c8:	0003      	movs	r3, r0
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d0:	2b0f      	cmp	r3, #15
 80024d2:	d909      	bls.n	80024e8 <UART_SetConfig+0x538>
 80024d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	025b      	lsls	r3, r3, #9
 80024da:	429a      	cmp	r2, r3
 80024dc:	d204      	bcs.n	80024e8 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	e006      	b.n	80024f6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80024e8:	231a      	movs	r3, #26
 80024ea:	2218      	movs	r2, #24
 80024ec:	4694      	mov	ip, r2
 80024ee:	44bc      	add	ip, r7
 80024f0:	4463      	add	r3, ip
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	2200      	movs	r2, #0
 80024fa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2200      	movs	r2, #0
 8002500:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002502:	231a      	movs	r3, #26
 8002504:	2218      	movs	r2, #24
 8002506:	4694      	mov	ip, r2
 8002508:	44bc      	add	ip, r7
 800250a:	4463      	add	r3, ip
 800250c:	781b      	ldrb	r3, [r3, #0]
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b00e      	add	sp, #56	; 0x38
 8002514:	bdb0      	pop	{r4, r5, r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	08002958 	.word	0x08002958
 800251c:	40021000 	.word	0x40021000
 8002520:	003d0900 	.word	0x003d0900
 8002524:	00f42400 	.word	0x00f42400
 8002528:	0800297c 	.word	0x0800297c

0800252c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	2201      	movs	r2, #1
 800253a:	4013      	ands	r3, r2
 800253c:	d00b      	beq.n	8002556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4a4a      	ldr	r2, [pc, #296]	; (8002670 <UART_AdvFeatureConfig+0x144>)
 8002546:	4013      	ands	r3, r2
 8002548:	0019      	movs	r1, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	2202      	movs	r2, #2
 800255c:	4013      	ands	r3, r2
 800255e:	d00b      	beq.n	8002578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4a43      	ldr	r2, [pc, #268]	; (8002674 <UART_AdvFeatureConfig+0x148>)
 8002568:	4013      	ands	r3, r2
 800256a:	0019      	movs	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	2204      	movs	r2, #4
 800257e:	4013      	ands	r3, r2
 8002580:	d00b      	beq.n	800259a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4a3b      	ldr	r2, [pc, #236]	; (8002678 <UART_AdvFeatureConfig+0x14c>)
 800258a:	4013      	ands	r3, r2
 800258c:	0019      	movs	r1, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	2208      	movs	r2, #8
 80025a0:	4013      	ands	r3, r2
 80025a2:	d00b      	beq.n	80025bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	4a34      	ldr	r2, [pc, #208]	; (800267c <UART_AdvFeatureConfig+0x150>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	0019      	movs	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	2210      	movs	r2, #16
 80025c2:	4013      	ands	r3, r2
 80025c4:	d00b      	beq.n	80025de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a2c      	ldr	r2, [pc, #176]	; (8002680 <UART_AdvFeatureConfig+0x154>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	0019      	movs	r1, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	2220      	movs	r2, #32
 80025e4:	4013      	ands	r3, r2
 80025e6:	d00b      	beq.n	8002600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	4a25      	ldr	r2, [pc, #148]	; (8002684 <UART_AdvFeatureConfig+0x158>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	2240      	movs	r2, #64	; 0x40
 8002606:	4013      	ands	r3, r2
 8002608:	d01d      	beq.n	8002646 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <UART_AdvFeatureConfig+0x15c>)
 8002612:	4013      	ands	r3, r2
 8002614:	0019      	movs	r1, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	035b      	lsls	r3, r3, #13
 800262a:	429a      	cmp	r2, r3
 800262c:	d10b      	bne.n	8002646 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a15      	ldr	r2, [pc, #84]	; (800268c <UART_AdvFeatureConfig+0x160>)
 8002636:	4013      	ands	r3, r2
 8002638:	0019      	movs	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	4013      	ands	r3, r2
 800264e:	d00b      	beq.n	8002668 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4a0e      	ldr	r2, [pc, #56]	; (8002690 <UART_AdvFeatureConfig+0x164>)
 8002658:	4013      	ands	r3, r2
 800265a:	0019      	movs	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	605a      	str	r2, [r3, #4]
  }
}
 8002668:	46c0      	nop			; (mov r8, r8)
 800266a:	46bd      	mov	sp, r7
 800266c:	b002      	add	sp, #8
 800266e:	bd80      	pop	{r7, pc}
 8002670:	fffdffff 	.word	0xfffdffff
 8002674:	fffeffff 	.word	0xfffeffff
 8002678:	fffbffff 	.word	0xfffbffff
 800267c:	ffff7fff 	.word	0xffff7fff
 8002680:	ffffefff 	.word	0xffffefff
 8002684:	ffffdfff 	.word	0xffffdfff
 8002688:	ffefffff 	.word	0xffefffff
 800268c:	ff9fffff 	.word	0xff9fffff
 8002690:	fff7ffff 	.word	0xfff7ffff

08002694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af02      	add	r7, sp, #8
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2280      	movs	r2, #128	; 0x80
 80026a0:	2100      	movs	r1, #0
 80026a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80026a4:	f7fe f99e 	bl	80009e4 <HAL_GetTick>
 80026a8:	0003      	movs	r3, r0
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2208      	movs	r2, #8
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d10c      	bne.n	80026d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2280      	movs	r2, #128	; 0x80
 80026be:	0391      	lsls	r1, r2, #14
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	4a17      	ldr	r2, [pc, #92]	; (8002720 <UART_CheckIdleState+0x8c>)
 80026c4:	9200      	str	r2, [sp, #0]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f000 f82c 	bl	8002724 <UART_WaitOnFlagUntilTimeout>
 80026cc:	1e03      	subs	r3, r0, #0
 80026ce:	d001      	beq.n	80026d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e021      	b.n	8002718 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2204      	movs	r2, #4
 80026dc:	4013      	ands	r3, r2
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d10c      	bne.n	80026fc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2280      	movs	r2, #128	; 0x80
 80026e6:	03d1      	lsls	r1, r2, #15
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4a0d      	ldr	r2, [pc, #52]	; (8002720 <UART_CheckIdleState+0x8c>)
 80026ec:	9200      	str	r2, [sp, #0]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f000 f818 	bl	8002724 <UART_WaitOnFlagUntilTimeout>
 80026f4:	1e03      	subs	r3, r0, #0
 80026f6:	d001      	beq.n	80026fc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e00d      	b.n	8002718 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2220      	movs	r2, #32
 8002706:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2274      	movs	r2, #116	; 0x74
 8002712:	2100      	movs	r1, #0
 8002714:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b004      	add	sp, #16
 800271e:	bd80      	pop	{r7, pc}
 8002720:	01ffffff 	.word	0x01ffffff

08002724 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b094      	sub	sp, #80	; 0x50
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	1dfb      	adds	r3, r7, #7
 8002732:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002734:	e0a3      	b.n	800287e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002738:	3301      	adds	r3, #1
 800273a:	d100      	bne.n	800273e <UART_WaitOnFlagUntilTimeout+0x1a>
 800273c:	e09f      	b.n	800287e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273e:	f7fe f951 	bl	80009e4 <HAL_GetTick>
 8002742:	0002      	movs	r2, r0
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800274a:	429a      	cmp	r2, r3
 800274c:	d302      	bcc.n	8002754 <UART_WaitOnFlagUntilTimeout+0x30>
 800274e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002750:	2b00      	cmp	r3, #0
 8002752:	d13d      	bne.n	80027d0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002754:	f3ef 8310 	mrs	r3, PRIMASK
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800275c:	647b      	str	r3, [r7, #68]	; 0x44
 800275e:	2301      	movs	r3, #1
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	f383 8810 	msr	PRIMASK, r3
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	494c      	ldr	r1, [pc, #304]	; (80028a8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002776:	400a      	ands	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800277c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	f383 8810 	msr	PRIMASK, r3
}
 8002784:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002786:	f3ef 8310 	mrs	r3, PRIMASK
 800278a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800278c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278e:	643b      	str	r3, [r7, #64]	; 0x40
 8002790:	2301      	movs	r3, #1
 8002792:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002796:	f383 8810 	msr	PRIMASK, r3
}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2101      	movs	r1, #1
 80027a8:	438a      	bics	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b2:	f383 8810 	msr	PRIMASK, r3
}
 80027b6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2274      	movs	r2, #116	; 0x74
 80027c8:	2100      	movs	r1, #0
 80027ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e067      	b.n	80028a0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2204      	movs	r2, #4
 80027d8:	4013      	ands	r3, r2
 80027da:	d050      	beq.n	800287e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69da      	ldr	r2, [r3, #28]
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	401a      	ands	r2, r3
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d146      	bne.n	800287e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fa:	f3ef 8310 	mrs	r3, PRIMASK
 80027fe:	613b      	str	r3, [r7, #16]
  return(result);
 8002800:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002804:	2301      	movs	r3, #1
 8002806:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f383 8810 	msr	PRIMASK, r3
}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4923      	ldr	r1, [pc, #140]	; (80028a8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800281c:	400a      	ands	r2, r1
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002822:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f383 8810 	msr	PRIMASK, r3
}
 800282a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800282c:	f3ef 8310 	mrs	r3, PRIMASK
 8002830:	61fb      	str	r3, [r7, #28]
  return(result);
 8002832:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002834:	64bb      	str	r3, [r7, #72]	; 0x48
 8002836:	2301      	movs	r3, #1
 8002838:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	f383 8810 	msr	PRIMASK, r3
}
 8002840:	46c0      	nop			; (mov r8, r8)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2101      	movs	r1, #1
 800284e:	438a      	bics	r2, r1
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	f383 8810 	msr	PRIMASK, r3
}
 800285c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	2120      	movs	r1, #32
 8002870:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2274      	movs	r2, #116	; 0x74
 8002876:	2100      	movs	r1, #0
 8002878:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e010      	b.n	80028a0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	4013      	ands	r3, r2
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	425a      	negs	r2, r3
 800288e:	4153      	adcs	r3, r2
 8002890:	b2db      	uxtb	r3, r3
 8002892:	001a      	movs	r2, r3
 8002894:	1dfb      	adds	r3, r7, #7
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d100      	bne.n	800289e <UART_WaitOnFlagUntilTimeout+0x17a>
 800289c:	e74b      	b.n	8002736 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	0018      	movs	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b014      	add	sp, #80	; 0x50
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	fffffe5f 	.word	0xfffffe5f

080028ac <__libc_init_array>:
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	2600      	movs	r6, #0
 80028b0:	4d0c      	ldr	r5, [pc, #48]	; (80028e4 <__libc_init_array+0x38>)
 80028b2:	4c0d      	ldr	r4, [pc, #52]	; (80028e8 <__libc_init_array+0x3c>)
 80028b4:	1b64      	subs	r4, r4, r5
 80028b6:	10a4      	asrs	r4, r4, #2
 80028b8:	42a6      	cmp	r6, r4
 80028ba:	d109      	bne.n	80028d0 <__libc_init_array+0x24>
 80028bc:	2600      	movs	r6, #0
 80028be:	f000 f821 	bl	8002904 <_init>
 80028c2:	4d0a      	ldr	r5, [pc, #40]	; (80028ec <__libc_init_array+0x40>)
 80028c4:	4c0a      	ldr	r4, [pc, #40]	; (80028f0 <__libc_init_array+0x44>)
 80028c6:	1b64      	subs	r4, r4, r5
 80028c8:	10a4      	asrs	r4, r4, #2
 80028ca:	42a6      	cmp	r6, r4
 80028cc:	d105      	bne.n	80028da <__libc_init_array+0x2e>
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
 80028d0:	00b3      	lsls	r3, r6, #2
 80028d2:	58eb      	ldr	r3, [r5, r3]
 80028d4:	4798      	blx	r3
 80028d6:	3601      	adds	r6, #1
 80028d8:	e7ee      	b.n	80028b8 <__libc_init_array+0xc>
 80028da:	00b3      	lsls	r3, r6, #2
 80028dc:	58eb      	ldr	r3, [r5, r3]
 80028de:	4798      	blx	r3
 80028e0:	3601      	adds	r6, #1
 80028e2:	e7f2      	b.n	80028ca <__libc_init_array+0x1e>
 80028e4:	080029a8 	.word	0x080029a8
 80028e8:	080029a8 	.word	0x080029a8
 80028ec:	080029a8 	.word	0x080029a8
 80028f0:	080029ac 	.word	0x080029ac

080028f4 <memset>:
 80028f4:	0003      	movs	r3, r0
 80028f6:	1882      	adds	r2, r0, r2
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d100      	bne.n	80028fe <memset+0xa>
 80028fc:	4770      	bx	lr
 80028fe:	7019      	strb	r1, [r3, #0]
 8002900:	3301      	adds	r3, #1
 8002902:	e7f9      	b.n	80028f8 <memset+0x4>

08002904 <_init>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290a:	bc08      	pop	{r3}
 800290c:	469e      	mov	lr, r3
 800290e:	4770      	bx	lr

08002910 <_fini>:
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002916:	bc08      	pop	{r3}
 8002918:	469e      	mov	lr, r3
 800291a:	4770      	bx	lr
