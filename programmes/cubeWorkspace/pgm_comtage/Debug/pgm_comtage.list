
pgm_comtage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b04  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005bc4  08005bc4  00015bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cf0  08005cf0  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cf8  08005cf8  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cf8  08005cf8  00015cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08005d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000228  08005f24  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  08005f24  00020654  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f8a  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e3  00000000  00000000  000311d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  000334c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  000342c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ed6  00000000  00000000  00034ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106cd  00000000  00000000  00049ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008521d  00000000  00000000  0005a59b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df7b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003654  00000000  00000000  000df80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000228 	.word	0x20000228
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005bac 	.word	0x08005bac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000022c 	.word	0x2000022c
 8000104:	08005bac 	.word	0x08005bac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8ba 	bl	800046c <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8b5 	bl	800046c <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzdi2>:
 800046c:	b510      	push	{r4, lr}
 800046e:	2900      	cmp	r1, #0
 8000470:	d103      	bne.n	800047a <__clzdi2+0xe>
 8000472:	f000 f807 	bl	8000484 <__clzsi2>
 8000476:	3020      	adds	r0, #32
 8000478:	e002      	b.n	8000480 <__clzdi2+0x14>
 800047a:	1c08      	adds	r0, r1, #0
 800047c:	f000 f802 	bl	8000484 <__clzsi2>
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__clzsi2>:
 8000484:	211c      	movs	r1, #28
 8000486:	2301      	movs	r3, #1
 8000488:	041b      	lsls	r3, r3, #16
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0xe>
 800048e:	0c00      	lsrs	r0, r0, #16
 8000490:	3910      	subs	r1, #16
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	4298      	cmp	r0, r3
 8000496:	d301      	bcc.n	800049c <__clzsi2+0x18>
 8000498:	0a00      	lsrs	r0, r0, #8
 800049a:	3908      	subs	r1, #8
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	4298      	cmp	r0, r3
 80004a0:	d301      	bcc.n	80004a6 <__clzsi2+0x22>
 80004a2:	0900      	lsrs	r0, r0, #4
 80004a4:	3904      	subs	r1, #4
 80004a6:	a202      	add	r2, pc, #8	; (adr r2, 80004b0 <__clzsi2+0x2c>)
 80004a8:	5c10      	ldrb	r0, [r2, r0]
 80004aa:	1840      	adds	r0, r0, r1
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	02020304 	.word	0x02020304
 80004b4:	01010101 	.word	0x01010101
	...

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b08f      	sub	sp, #60	; 0x3c
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f001 fbeb 	bl	8001ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f9db 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 fb3b 	bl	8000b48 <MX_GPIO_Init>
  MX_USART5_UART_Init();
 80004d2:	f000 fb09 	bl	8000ae8 <MX_USART5_UART_Init>
  MX_USART2_UART_Init();
 80004d6:	f000 fad7 	bl	8000a88 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80004da:	f000 fa7d 	bl	80009d8 <MX_TIM3_Init>
  MX_SPI2_Init();
 80004de:	f000 fa43 	bl	8000968 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 80004e2:	4bd2      	ldr	r3, [pc, #840]	; (800082c <main+0x36c>)
 80004e4:	0018      	movs	r0, r3
 80004e6:	f002 ffe9 	bl	80034bc <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(GPIOB, LED_R, GPIO_PIN_SET);
 80004ea:	4bd1      	ldr	r3, [pc, #836]	; (8000830 <main+0x370>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	2104      	movs	r1, #4
 80004f0:	0018      	movs	r0, r3
 80004f2:	f001 ff6a 	bl	80023ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_V, GPIO_PIN_RESET);
 80004f6:	2380      	movs	r3, #128	; 0x80
 80004f8:	00db      	lsls	r3, r3, #3
 80004fa:	48cd      	ldr	r0, [pc, #820]	; (8000830 <main+0x370>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	0019      	movs	r1, r3
 8000500:	f001 ff63 	bl	80023ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XBEE_SLEEP, 0);
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	0219      	lsls	r1, r3, #8
 8000508:	23a0      	movs	r3, #160	; 0xa0
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	2200      	movs	r2, #0
 800050e:	0018      	movs	r0, r3
 8000510:	f001 ff5b 	bl	80023ca <HAL_GPIO_WritePin>


  HAL_UART_Receive_IT(&huart5, &xbee_rx_last_byte, 1);
 8000514:	49c7      	ldr	r1, [pc, #796]	; (8000834 <main+0x374>)
 8000516:	4bc8      	ldr	r3, [pc, #800]	; (8000838 <main+0x378>)
 8000518:	2201      	movs	r2, #1
 800051a:	0018      	movs	r0, r3
 800051c:	f003 fc4e 	bl	8003dbc <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint16_t timeout;
	  char string[50] = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	3304      	adds	r3, #4
 8000528:	222e      	movs	r2, #46	; 0x2e
 800052a:	2100      	movs	r1, #0
 800052c:	0018      	movs	r0, r3
 800052e:	f004 ff18 	bl	8005362 <memset>

	  switch(master_state){
 8000532:	4bc2      	ldr	r3, [pc, #776]	; (800083c <main+0x37c>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b05      	cmp	r3, #5
 8000538:	d900      	bls.n	800053c <main+0x7c>
 800053a:	e16d      	b.n	8000818 <main+0x358>
 800053c:	009a      	lsls	r2, r3, #2
 800053e:	4bc0      	ldr	r3, [pc, #768]	; (8000840 <main+0x380>)
 8000540:	18d3      	adds	r3, r2, r3
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	469f      	mov	pc, r3
	  	  case lora_init:
	  		  master_state = xbee_init;
 8000546:	4bbd      	ldr	r3, [pc, #756]	; (800083c <main+0x37c>)
 8000548:	2201      	movs	r2, #1
 800054a:	701a      	strb	r2, [r3, #0]
	  	  break;
 800054c:	e16b      	b.n	8000826 <main+0x366>
	  	  case xbee_init:

			  switch(xbee_send_state){
 800054e:	4bbd      	ldr	r3, [pc, #756]	; (8000844 <main+0x384>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b05      	cmp	r3, #5
 8000554:	d900      	bls.n	8000558 <main+0x98>
 8000556:	e129      	b.n	80007ac <main+0x2ec>
 8000558:	009a      	lsls	r2, r3, #2
 800055a:	4bbb      	ldr	r3, [pc, #748]	; (8000848 <main+0x388>)
 800055c:	18d3      	adds	r3, r2, r3
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	469f      	mov	pc, r3

				  case enter_command_mode:
					  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_2);
 8000562:	4bb3      	ldr	r3, [pc, #716]	; (8000830 <main+0x370>)
 8000564:	2104      	movs	r1, #4
 8000566:	0018      	movs	r0, r3
 8000568:	f001 ff4c 	bl	8002404 <HAL_GPIO_TogglePin>
					  HAL_UART_Transmit(&huart5, "+++", 3, 100);
 800056c:	49b7      	ldr	r1, [pc, #732]	; (800084c <main+0x38c>)
 800056e:	48b2      	ldr	r0, [pc, #712]	; (8000838 <main+0x378>)
 8000570:	2364      	movs	r3, #100	; 0x64
 8000572:	2203      	movs	r2, #3
 8000574:	f003 fb7a 	bl	8003c6c <HAL_UART_Transmit>
					  timeout = 0;
 8000578:	4bb5      	ldr	r3, [pc, #724]	; (8000850 <main+0x390>)
 800057a:	2200      	movs	r2, #0
 800057c:	801a      	strh	r2, [r3, #0]
					  xbee_send_state = command_mode_ok;
 800057e:	4bb1      	ldr	r3, [pc, #708]	; (8000844 <main+0x384>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
				  break;
 8000584:	e119      	b.n	80007ba <main+0x2fa>

				  case command_mode_ok:
					  if(cr_flag){
 8000586:	4bb3      	ldr	r3, [pc, #716]	; (8000854 <main+0x394>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d01a      	beq.n	80005c4 <main+0x104>
						  if(xbee_rx_buffer[cr_flag-2] == 'O' && xbee_rx_buffer[cr_flag-1] == 'K'){
 800058e:	4bb1      	ldr	r3, [pc, #708]	; (8000854 <main+0x394>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	3b02      	subs	r3, #2
 8000594:	4ab0      	ldr	r2, [pc, #704]	; (8000858 <main+0x398>)
 8000596:	5cd3      	ldrb	r3, [r2, r3]
 8000598:	2b4f      	cmp	r3, #79	; 0x4f
 800059a:	d10f      	bne.n	80005bc <main+0xfc>
 800059c:	4bad      	ldr	r3, [pc, #692]	; (8000854 <main+0x394>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	4aad      	ldr	r2, [pc, #692]	; (8000858 <main+0x398>)
 80005a4:	5cd3      	ldrb	r3, [r2, r3]
 80005a6:	2b4b      	cmp	r3, #75	; 0x4b
 80005a8:	d108      	bne.n	80005bc <main+0xfc>
							  xbee_send_state = single_command;
 80005aa:	4ba6      	ldr	r3, [pc, #664]	; (8000844 <main+0x384>)
 80005ac:	2204      	movs	r2, #4
 80005ae:	701a      	strb	r2, [r3, #0]
							  HAL_Delay(10);
 80005b0:	200a      	movs	r0, #10
 80005b2:	f001 fbe5 	bl	8001d80 <HAL_Delay>
							  timeout = 0;
 80005b6:	4ba6      	ldr	r3, [pc, #664]	; (8000850 <main+0x390>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	801a      	strh	r2, [r3, #0]
						  }
						  cr_flag = 0;
 80005bc:	4ba5      	ldr	r3, [pc, #660]	; (8000854 <main+0x394>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
						  HAL_Delay(1);
						  timeout++;
						  if (timeout >= timeout_duration)
							  xbee_send_state = enter_command_mode;
					  }
				  break;
 80005c2:	e0f5      	b.n	80007b0 <main+0x2f0>
						  HAL_Delay(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f001 fbdb 	bl	8001d80 <HAL_Delay>
						  timeout++;
 80005ca:	4ba1      	ldr	r3, [pc, #644]	; (8000850 <main+0x390>)
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	3301      	adds	r3, #1
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	4b9f      	ldr	r3, [pc, #636]	; (8000850 <main+0x390>)
 80005d4:	801a      	strh	r2, [r3, #0]
						  if (timeout >= timeout_duration)
 80005d6:	4b9e      	ldr	r3, [pc, #632]	; (8000850 <main+0x390>)
 80005d8:	881a      	ldrh	r2, [r3, #0]
 80005da:	23fa      	movs	r3, #250	; 0xfa
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	429a      	cmp	r2, r3
 80005e0:	d200      	bcs.n	80005e4 <main+0x124>
 80005e2:	e0e5      	b.n	80007b0 <main+0x2f0>
							  xbee_send_state = enter_command_mode;
 80005e4:	4b97      	ldr	r3, [pc, #604]	; (8000844 <main+0x384>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
				  break;
 80005ea:	e0e1      	b.n	80007b0 <main+0x2f0>

				  case single_command:
					  if (xbee_reset==0){
 80005ec:	4b9b      	ldr	r3, [pc, #620]	; (800085c <main+0x39c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d108      	bne.n	8000606 <main+0x146>
						  HAL_UART_Transmit(&huart5, "ATRE\r", 5, 100);
 80005f4:	499a      	ldr	r1, [pc, #616]	; (8000860 <main+0x3a0>)
 80005f6:	4890      	ldr	r0, [pc, #576]	; (8000838 <main+0x378>)
 80005f8:	2364      	movs	r3, #100	; 0x64
 80005fa:	2205      	movs	r2, #5
 80005fc:	f003 fb36 	bl	8003c6c <HAL_UART_Transmit>
						  xbee_reset = 1;
 8000600:	4b96      	ldr	r3, [pc, #600]	; (800085c <main+0x39c>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
					  }
					  timeout = 0;
 8000606:	4b92      	ldr	r3, [pc, #584]	; (8000850 <main+0x390>)
 8000608:	2200      	movs	r2, #0
 800060a:	801a      	strh	r2, [r3, #0]
					  xbee_send_state = single_command_ok;
 800060c:	4b8d      	ldr	r3, [pc, #564]	; (8000844 <main+0x384>)
 800060e:	2205      	movs	r2, #5
 8000610:	701a      	strb	r2, [r3, #0]
				  break;
 8000612:	e0d2      	b.n	80007ba <main+0x2fa>

				  case single_command_ok:
					  if(cr_flag){
 8000614:	4b8f      	ldr	r3, [pc, #572]	; (8000854 <main+0x394>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d01a      	beq.n	8000652 <main+0x192>
						  if(xbee_rx_buffer[cr_flag-2] == 'O' && xbee_rx_buffer[cr_flag-1] == 'K'){
 800061c:	4b8d      	ldr	r3, [pc, #564]	; (8000854 <main+0x394>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	3b02      	subs	r3, #2
 8000622:	4a8d      	ldr	r2, [pc, #564]	; (8000858 <main+0x398>)
 8000624:	5cd3      	ldrb	r3, [r2, r3]
 8000626:	2b4f      	cmp	r3, #79	; 0x4f
 8000628:	d10f      	bne.n	800064a <main+0x18a>
 800062a:	4b8a      	ldr	r3, [pc, #552]	; (8000854 <main+0x394>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	3b01      	subs	r3, #1
 8000630:	4a89      	ldr	r2, [pc, #548]	; (8000858 <main+0x398>)
 8000632:	5cd3      	ldrb	r3, [r2, r3]
 8000634:	2b4b      	cmp	r3, #75	; 0x4b
 8000636:	d108      	bne.n	800064a <main+0x18a>
							  xbee_send_state = send_config;
 8000638:	4b82      	ldr	r3, [pc, #520]	; (8000844 <main+0x384>)
 800063a:	2202      	movs	r2, #2
 800063c:	701a      	strb	r2, [r3, #0]
							  HAL_Delay(10);
 800063e:	200a      	movs	r0, #10
 8000640:	f001 fb9e 	bl	8001d80 <HAL_Delay>
							  timeout = 0;
 8000644:	4b82      	ldr	r3, [pc, #520]	; (8000850 <main+0x390>)
 8000646:	2200      	movs	r2, #0
 8000648:	801a      	strh	r2, [r3, #0]
						  }
						  cr_flag = 0;
 800064a:	4b82      	ldr	r3, [pc, #520]	; (8000854 <main+0x394>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
						  HAL_Delay(1);
						  timeout++;
						  if (timeout >= timeout_duration)
							  xbee_send_state = enter_command_mode;
					  }
				  break;
 8000650:	e0b0      	b.n	80007b4 <main+0x2f4>
						  HAL_Delay(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f001 fb94 	bl	8001d80 <HAL_Delay>
						  timeout++;
 8000658:	4b7d      	ldr	r3, [pc, #500]	; (8000850 <main+0x390>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	b29a      	uxth	r2, r3
 8000660:	4b7b      	ldr	r3, [pc, #492]	; (8000850 <main+0x390>)
 8000662:	801a      	strh	r2, [r3, #0]
						  if (timeout >= timeout_duration)
 8000664:	4b7a      	ldr	r3, [pc, #488]	; (8000850 <main+0x390>)
 8000666:	881a      	ldrh	r2, [r3, #0]
 8000668:	23fa      	movs	r3, #250	; 0xfa
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	429a      	cmp	r2, r3
 800066e:	d200      	bcs.n	8000672 <main+0x1b2>
 8000670:	e0a0      	b.n	80007b4 <main+0x2f4>
							  xbee_send_state = enter_command_mode;
 8000672:	4b74      	ldr	r3, [pc, #464]	; (8000844 <main+0x384>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
				  break;
 8000678:	e09c      	b.n	80007b4 <main+0x2f4>

				  case send_config:

					  if(config_step == config_length){
 800067a:	4b7a      	ldr	r3, [pc, #488]	; (8000864 <main+0x3a4>)
 800067c:	781a      	ldrb	r2, [r3, #0]
 800067e:	4b7a      	ldr	r3, [pc, #488]	; (8000868 <main+0x3a8>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	429a      	cmp	r2, r3
 8000684:	d106      	bne.n	8000694 <main+0x1d4>
						  sprintf(string, "ATWR\r");
 8000686:	4a79      	ldr	r2, [pc, #484]	; (800086c <main+0x3ac>)
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f004 fe71 	bl	8005374 <siprintf>
 8000692:	e018      	b.n	80006c6 <main+0x206>
					  }
					  else sprintf(string, "AT%s%s\r", config[config_step][0], config[config_step][1]);
 8000694:	4b73      	ldr	r3, [pc, #460]	; (8000864 <main+0x3a4>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	001a      	movs	r2, r3
 800069a:	0013      	movs	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	189b      	adds	r3, r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	4a73      	ldr	r2, [pc, #460]	; (8000870 <main+0x3b0>)
 80006a4:	189c      	adds	r4, r3, r2
 80006a6:	4b6f      	ldr	r3, [pc, #444]	; (8000864 <main+0x3a4>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	001a      	movs	r2, r3
 80006ac:	0013      	movs	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	189b      	adds	r3, r3, r2
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	330a      	adds	r3, #10
 80006b6:	001a      	movs	r2, r3
 80006b8:	4b6d      	ldr	r3, [pc, #436]	; (8000870 <main+0x3b0>)
 80006ba:	18d3      	adds	r3, r2, r3
 80006bc:	496d      	ldr	r1, [pc, #436]	; (8000874 <main+0x3b4>)
 80006be:	1d38      	adds	r0, r7, #4
 80006c0:	0022      	movs	r2, r4
 80006c2:	f004 fe57 	bl	8005374 <siprintf>


					  HAL_UART_Transmit(&huart5, string, strlen(string), 100);
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	0018      	movs	r0, r3
 80006ca:	f7ff fd1d 	bl	8000108 <strlen>
 80006ce:	0003      	movs	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	1d39      	adds	r1, r7, #4
 80006d4:	4858      	ldr	r0, [pc, #352]	; (8000838 <main+0x378>)
 80006d6:	2364      	movs	r3, #100	; 0x64
 80006d8:	f003 fac8 	bl	8003c6c <HAL_UART_Transmit>
					  xbee_send_state = config_ok;
 80006dc:	4b59      	ldr	r3, [pc, #356]	; (8000844 <main+0x384>)
 80006de:	2203      	movs	r2, #3
 80006e0:	701a      	strb	r2, [r3, #0]
				  break;
 80006e2:	e06a      	b.n	80007ba <main+0x2fa>

				  case config_ok:
					  if(cr_flag){
 80006e4:	4b5b      	ldr	r3, [pc, #364]	; (8000854 <main+0x394>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d03d      	beq.n	8000768 <main+0x2a8>
						  if(xbee_rx_buffer[cr_flag-2] == 'O' && xbee_rx_buffer[cr_flag-1] == 'K'){
 80006ec:	4b59      	ldr	r3, [pc, #356]	; (8000854 <main+0x394>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	3b02      	subs	r3, #2
 80006f2:	4a59      	ldr	r2, [pc, #356]	; (8000858 <main+0x398>)
 80006f4:	5cd3      	ldrb	r3, [r2, r3]
 80006f6:	2b4f      	cmp	r3, #79	; 0x4f
 80006f8:	d133      	bne.n	8000762 <main+0x2a2>
 80006fa:	4b56      	ldr	r3, [pc, #344]	; (8000854 <main+0x394>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	3b01      	subs	r3, #1
 8000700:	4a55      	ldr	r2, [pc, #340]	; (8000858 <main+0x398>)
 8000702:	5cd3      	ldrb	r3, [r2, r3]
 8000704:	2b4b      	cmp	r3, #75	; 0x4b
 8000706:	d12c      	bne.n	8000762 <main+0x2a2>
							  if(config_step == config_length){
 8000708:	4b56      	ldr	r3, [pc, #344]	; (8000864 <main+0x3a4>)
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	4b56      	ldr	r3, [pc, #344]	; (8000868 <main+0x3a8>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d117      	bne.n	8000744 <main+0x284>
								  HAL_GPIO_WritePin(GPIOB, LED_R, GPIO_PIN_RESET);
 8000714:	4b46      	ldr	r3, [pc, #280]	; (8000830 <main+0x370>)
 8000716:	2200      	movs	r2, #0
 8000718:	2104      	movs	r1, #4
 800071a:	0018      	movs	r0, r3
 800071c:	f001 fe55 	bl	80023ca <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOB, LED_V, GPIO_PIN_SET);
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	4842      	ldr	r0, [pc, #264]	; (8000830 <main+0x370>)
 8000726:	2201      	movs	r2, #1
 8000728:	0019      	movs	r1, r3
 800072a:	f001 fe4e 	bl	80023ca <HAL_GPIO_WritePin>
								  xbee_send_state = config_over;
 800072e:	4b45      	ldr	r3, [pc, #276]	; (8000844 <main+0x384>)
 8000730:	2206      	movs	r2, #6
 8000732:	701a      	strb	r2, [r3, #0]
								  master_state = fine_polling;
 8000734:	4b41      	ldr	r3, [pc, #260]	; (800083c <main+0x37c>)
 8000736:	2204      	movs	r2, #4
 8000738:	701a      	strb	r2, [r3, #0]
								  xbee_rx_read_index = xbee_rx_write_index;
 800073a:	4b4f      	ldr	r3, [pc, #316]	; (8000878 <main+0x3b8>)
 800073c:	781a      	ldrb	r2, [r3, #0]
 800073e:	4b4f      	ldr	r3, [pc, #316]	; (800087c <main+0x3bc>)
 8000740:	701a      	strb	r2, [r3, #0]
 8000742:	e00e      	b.n	8000762 <main+0x2a2>
							  }
							  else {
								  timeout = 0;
 8000744:	4b42      	ldr	r3, [pc, #264]	; (8000850 <main+0x390>)
 8000746:	2200      	movs	r2, #0
 8000748:	801a      	strh	r2, [r3, #0]
								  config_step++;
 800074a:	4b46      	ldr	r3, [pc, #280]	; (8000864 <main+0x3a4>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b44      	ldr	r3, [pc, #272]	; (8000864 <main+0x3a4>)
 8000754:	701a      	strb	r2, [r3, #0]
								  xbee_send_state = send_config;
 8000756:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <main+0x384>)
 8000758:	2202      	movs	r2, #2
 800075a:	701a      	strb	r2, [r3, #0]
								  HAL_Delay(10);
 800075c:	200a      	movs	r0, #10
 800075e:	f001 fb0f 	bl	8001d80 <HAL_Delay>
							  }
						  }
						  cr_flag = 0;
 8000762:	4b3c      	ldr	r3, [pc, #240]	; (8000854 <main+0x394>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
					  }
					  if(xbee_rx_buffer[xbee_rx_write_index-2] == 'O' && xbee_rx_buffer[xbee_rx_write_index-1] == 'K'){
 8000768:	4b43      	ldr	r3, [pc, #268]	; (8000878 <main+0x3b8>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	3b02      	subs	r3, #2
 800076e:	4a3a      	ldr	r2, [pc, #232]	; (8000858 <main+0x398>)
 8000770:	5cd3      	ldrb	r3, [r2, r3]
 8000772:	2b4f      	cmp	r3, #79	; 0x4f
 8000774:	d106      	bne.n	8000784 <main+0x2c4>
 8000776:	4b40      	ldr	r3, [pc, #256]	; (8000878 <main+0x3b8>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	3b01      	subs	r3, #1
 800077c:	4a36      	ldr	r2, [pc, #216]	; (8000858 <main+0x398>)
 800077e:	5cd3      	ldrb	r3, [r2, r3]
 8000780:	2b4b      	cmp	r3, #75	; 0x4b
 8000782:	d012      	beq.n	80007aa <main+0x2ea>

					  }
					  else {
						  HAL_Delay(1);
 8000784:	2001      	movs	r0, #1
 8000786:	f001 fafb 	bl	8001d80 <HAL_Delay>
						  timeout++;
 800078a:	4b31      	ldr	r3, [pc, #196]	; (8000850 <main+0x390>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	b29a      	uxth	r2, r3
 8000792:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <main+0x390>)
 8000794:	801a      	strh	r2, [r3, #0]
						  if (timeout >= timeout_duration){
 8000796:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <main+0x390>)
 8000798:	881a      	ldrh	r2, [r3, #0]
 800079a:	23fa      	movs	r3, #250	; 0xfa
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	429a      	cmp	r2, r3
 80007a0:	d30a      	bcc.n	80007b8 <main+0x2f8>
							  xbee_send_state = enter_command_mode;
 80007a2:	4b28      	ldr	r3, [pc, #160]	; (8000844 <main+0x384>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
							  //config_step = 0;
						  }
					  }
				  break;
 80007a8:	e006      	b.n	80007b8 <main+0x2f8>
 80007aa:	e005      	b.n	80007b8 <main+0x2f8>

				  default:

				  break;
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	e03a      	b.n	8000826 <main+0x366>
				  break;
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	e038      	b.n	8000826 <main+0x366>
				  break;
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	e036      	b.n	8000826 <main+0x366>
				  break;
 80007b8:	46c0      	nop			; (mov r8, r8)

			  }
	      break;
 80007ba:	e034      	b.n	8000826 <main+0x366>

	  	  case master_idle:
	  		  HAL_Delay(1000);
 80007bc:	23fa      	movs	r3, #250	; 0xfa
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f001 fadd 	bl	8001d80 <HAL_Delay>
	  		  master_state = fine_polling;
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <main+0x37c>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	701a      	strb	r2, [r3, #0]
	  	  break;
 80007cc:	e02b      	b.n	8000826 <main+0x366>

	  	  case sparse_polling:
	  		  scan_sensors();
 80007ce:	f000 fab9 	bl	8000d44 <scan_sensors>
	  		  HAL_Delay(10); //if a large amount of bees goes in or out
 80007d2:	200a      	movs	r0, #10
 80007d4:	f001 fad4 	bl	8001d80 <HAL_Delay>
	  		  if(bee_rate < -1*bee_rate_fine_polling_threshold || bee_rate > 1*bee_rate_fine_polling_threshold){
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <main+0x3c0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	5e9b      	ldrsh	r3, [r3, r2]
 80007de:	3302      	adds	r3, #2
 80007e0:	db04      	blt.n	80007ec <main+0x32c>
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <main+0x3c0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	5e9b      	ldrsh	r3, [r3, r2]
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	dd19      	ble.n	8000820 <main+0x360>
	  			  master_state = fine_polling; //we'll trigger a fine_polling
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <main+0x37c>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	701a      	strb	r2, [r3, #0]
	  		  }
	  	  break;
 80007f2:	e015      	b.n	8000820 <main+0x360>

	  	  case fine_polling:
	  		  scan_sensors();
 80007f4:	f000 faa6 	bl	8000d44 <scan_sensors>
	  		  if(bee_rate < -1*bee_rate_alert_threshold || bee_rate > bee_rate_alert_threshold){
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <main+0x3c0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	5e9b      	ldrsh	r3, [r3, r2]
 80007fe:	3305      	adds	r3, #5
 8000800:	db04      	blt.n	800080c <main+0x34c>
 8000802:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <main+0x3c0>)
 8000804:	2200      	movs	r2, #0
 8000806:	5e9b      	ldrsh	r3, [r3, r2]
 8000808:	2b05      	cmp	r3, #5
 800080a:	dd0b      	ble.n	8000824 <main+0x364>
	  			  xbee_send_alert();
 800080c:	f000 fdbe 	bl	800138c <xbee_send_alert>
	  			  bee_rate = 0;
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <main+0x3c0>)
 8000812:	2200      	movs	r2, #0
 8000814:	801a      	strh	r2, [r3, #0]
	  		  }
	  	  break;
 8000816:	e005      	b.n	8000824 <main+0x364>

	  	  case lora_alert: ;

	  	  break;

	  	  default: break;
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	e004      	b.n	8000826 <main+0x366>
	  	  break;
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	e002      	b.n	8000826 <main+0x366>
	  	  break;
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	e000      	b.n	8000826 <main+0x366>
	  	  break;
 8000824:	46c0      	nop			; (mov r8, r8)
	  }

	  read_xbee();
 8000826:	f000 fdd1 	bl	80013cc <read_xbee>
  {
 800082a:	e679      	b.n	8000520 <main+0x60>
 800082c:	200004f8 	.word	0x200004f8
 8000830:	50000400 	.word	0x50000400
 8000834:	20000259 	.word	0x20000259
 8000838:	20000538 	.word	0x20000538
 800083c:	20000244 	.word	0x20000244
 8000840:	08005bf4 	.word	0x08005bf4
 8000844:	20000360 	.word	0x20000360
 8000848:	08005c0c 	.word	0x08005c0c
 800084c:	08005bc4 	.word	0x08005bc4
 8000850:	20000362 	.word	0x20000362
 8000854:	20000258 	.word	0x20000258
 8000858:	2000025c 	.word	0x2000025c
 800085c:	2000035f 	.word	0x2000035f
 8000860:	08005bc8 	.word	0x08005bc8
 8000864:	2000035e 	.word	0x2000035e
 8000868:	200001b0 	.word	0x200001b0
 800086c:	08005bd0 	.word	0x08005bd0
 8000870:	20000020 	.word	0x20000020
 8000874:	08005bd8 	.word	0x08005bd8
 8000878:	2000035d 	.word	0x2000035d
 800087c:	2000035c 	.word	0x2000035c
 8000880:	200004f4 	.word	0x200004f4

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b09f      	sub	sp, #124	; 0x7c
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	2440      	movs	r4, #64	; 0x40
 800088c:	193b      	adds	r3, r7, r4
 800088e:	0018      	movs	r0, r3
 8000890:	2338      	movs	r3, #56	; 0x38
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f004 fd64 	bl	8005362 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089a:	232c      	movs	r3, #44	; 0x2c
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	0018      	movs	r0, r3
 80008a0:	2314      	movs	r3, #20
 80008a2:	001a      	movs	r2, r3
 80008a4:	2100      	movs	r1, #0
 80008a6:	f004 fd5c 	bl	8005362 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	0018      	movs	r0, r3
 80008ae:	2328      	movs	r3, #40	; 0x28
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f004 fd55 	bl	8005362 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b8:	4b29      	ldr	r3, [pc, #164]	; (8000960 <SystemClock_Config+0xdc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a29      	ldr	r2, [pc, #164]	; (8000964 <SystemClock_Config+0xe0>)
 80008be:	401a      	ands	r2, r3
 80008c0:	4b27      	ldr	r3, [pc, #156]	; (8000960 <SystemClock_Config+0xdc>)
 80008c2:	2180      	movs	r1, #128	; 0x80
 80008c4:	0109      	lsls	r1, r1, #4
 80008c6:	430a      	orrs	r2, r1
 80008c8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ca:	0021      	movs	r1, r4
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2202      	movs	r2, #2
 80008d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2201      	movs	r2, #1
 80008d6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2210      	movs	r2, #16
 80008dc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2202      	movs	r2, #2
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2280      	movs	r2, #128	; 0x80
 80008ee:	0312      	lsls	r2, r2, #12
 80008f0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2280      	movs	r2, #128	; 0x80
 80008f6:	0412      	lsls	r2, r2, #16
 80008f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	0018      	movs	r0, r3
 80008fe:	f001 fd9d 	bl	800243c <HAL_RCC_OscConfig>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000906:	f001 f837 	bl	8001978 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090a:	212c      	movs	r1, #44	; 0x2c
 800090c:	187b      	adds	r3, r7, r1
 800090e:	220f      	movs	r2, #15
 8000910:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2203      	movs	r2, #3
 8000916:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2101      	movs	r1, #1
 800092e:	0018      	movs	r0, r3
 8000930:	f002 f958 	bl	8002be4 <HAL_RCC_ClockConfig>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000938:	f001 f81e 	bl	8001978 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2202      	movs	r2, #2
 8000940:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	0018      	movs	r0, r3
 800094c:	f002 fb6e 	bl	800302c <HAL_RCCEx_PeriphCLKConfig>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000954:	f001 f810 	bl	8001978 <Error_Handler>
  }
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b01f      	add	sp, #124	; 0x7c
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	40007000 	.word	0x40007000
 8000964:	ffffe7ff 	.word	0xffffe7ff

08000968 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_SPI2_Init+0x68>)
 800096e:	4a19      	ldr	r2, [pc, #100]	; (80009d4 <MX_SPI2_Init+0x6c>)
 8000970:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_SPI2_Init+0x68>)
 8000974:	2282      	movs	r2, #130	; 0x82
 8000976:	0052      	lsls	r2, r2, #1
 8000978:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_SPI2_Init+0x68>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_SPI2_Init+0x68>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_SPI2_Init+0x68>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800098c:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_SPI2_Init+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_SPI2_Init+0x68>)
 8000994:	2280      	movs	r2, #128	; 0x80
 8000996:	02d2      	lsls	r2, r2, #11
 8000998:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <MX_SPI2_Init+0x68>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_SPI2_Init+0x68>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_SPI2_Init+0x68>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_SPI2_Init+0x68>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_SPI2_Init+0x68>)
 80009b4:	2207      	movs	r2, #7
 80009b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <MX_SPI2_Init+0x68>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f002 fcaa 	bl	8003314 <HAL_SPI_Init>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009c4:	f000 ffd8 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	20000498 	.word	0x20000498
 80009d4:	40003800 	.word	0x40003800

080009d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	2308      	movs	r3, #8
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	0018      	movs	r0, r3
 80009e4:	2310      	movs	r3, #16
 80009e6:	001a      	movs	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	f004 fcba 	bl	8005362 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ee:	003b      	movs	r3, r7
 80009f0:	0018      	movs	r0, r3
 80009f2:	2308      	movs	r3, #8
 80009f4:	001a      	movs	r2, r3
 80009f6:	2100      	movs	r1, #0
 80009f8:	f004 fcb3 	bl	8005362 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_TIM3_Init+0xa0>)
 80009fe:	4a1f      	ldr	r2, [pc, #124]	; (8000a7c <MX_TIM3_Init+0xa4>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_TIM3_Init+0xa0>)
 8000a04:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <MX_TIM3_Init+0xa8>)
 8000a06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_TIM3_Init+0xa0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4883;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_TIM3_Init+0xa0>)
 8000a10:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <MX_TIM3_Init+0xac>)
 8000a12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_TIM3_Init+0xa0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_TIM3_Init+0xa0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_TIM3_Init+0xa0>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f002 fd0a 	bl	800343c <HAL_TIM_Base_Init>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a2c:	f000 ffa4 	bl	8001978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a30:	2108      	movs	r1, #8
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	0152      	lsls	r2, r2, #5
 8000a38:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a3a:	187a      	adds	r2, r7, r1
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_TIM3_Init+0xa0>)
 8000a3e:	0011      	movs	r1, r2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f002 fe75 	bl	8003730 <HAL_TIM_ConfigClockSource>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a4a:	f000 ff95 	bl	8001978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4e:	003b      	movs	r3, r7
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	003b      	movs	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a5a:	003a      	movs	r2, r7
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_TIM3_Init+0xa0>)
 8000a5e:	0011      	movs	r1, r2
 8000a60:	0018      	movs	r0, r3
 8000a62:	f003 f851 	bl	8003b08 <HAL_TIMEx_MasterConfigSynchronization>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a6a:	f000 ff85 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b006      	add	sp, #24
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	200004f8 	.word	0x200004f8
 8000a7c:	40000400 	.word	0x40000400
 8000a80:	0000ffff 	.word	0x0000ffff
 8000a84:	00001313 	.word	0x00001313

08000a88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000a8e:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <MX_USART2_UART_Init+0x5c>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000a94:	22e1      	movs	r2, #225	; 0xe1
 8000a96:	0252      	lsls	r2, r2, #9
 8000a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <MX_USART2_UART_Init+0x58>)
 8000acc:	0018      	movs	r0, r3
 8000ace:	f003 f879 	bl	8003bc4 <HAL_UART_Init>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ad6:	f000 ff4f 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	200005bc 	.word	0x200005bc
 8000ae4:	40004400 	.word	0x40004400

08000ae8 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_USART5_UART_Init+0x58>)
 8000aee:	4a15      	ldr	r2, [pc, #84]	; (8000b44 <MX_USART5_UART_Init+0x5c>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_USART5_UART_Init+0x58>)
 8000af4:	2296      	movs	r2, #150	; 0x96
 8000af6:	0192      	lsls	r2, r2, #6
 8000af8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_USART5_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_USART5_UART_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USART5_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_USART5_UART_Init+0x58>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_USART5_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_USART5_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_USART5_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_USART5_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <MX_USART5_UART_Init+0x58>)
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f003 f849 	bl	8003bc4 <HAL_UART_Init>
 8000b32:	1e03      	subs	r3, r0, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 8000b36:	f000 ff1f 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000538 	.word	0x20000538
 8000b44:	40005000 	.word	0x40005000

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b08b      	sub	sp, #44	; 0x2c
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	2414      	movs	r4, #20
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	0018      	movs	r0, r3
 8000b54:	2314      	movs	r3, #20
 8000b56:	001a      	movs	r2, r3
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f004 fc02 	bl	8005362 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b54      	ldr	r3, [pc, #336]	; (8000cb0 <MX_GPIO_Init+0x168>)
 8000b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b62:	4b53      	ldr	r3, [pc, #332]	; (8000cb0 <MX_GPIO_Init+0x168>)
 8000b64:	2104      	movs	r1, #4
 8000b66:	430a      	orrs	r2, r1
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b6a:	4b51      	ldr	r3, [pc, #324]	; (8000cb0 <MX_GPIO_Init+0x168>)
 8000b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6e:	2204      	movs	r2, #4
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b76:	4b4e      	ldr	r3, [pc, #312]	; (8000cb0 <MX_GPIO_Init+0x168>)
 8000b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b7a:	4b4d      	ldr	r3, [pc, #308]	; (8000cb0 <MX_GPIO_Init+0x168>)
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b82:	4b4b      	ldr	r3, [pc, #300]	; (8000cb0 <MX_GPIO_Init+0x168>)
 8000b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b48      	ldr	r3, [pc, #288]	; (8000cb0 <MX_GPIO_Init+0x168>)
 8000b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b92:	4b47      	ldr	r3, [pc, #284]	; (8000cb0 <MX_GPIO_Init+0x168>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	430a      	orrs	r2, r1
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b9a:	4b45      	ldr	r3, [pc, #276]	; (8000cb0 <MX_GPIO_Init+0x168>)
 8000b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b42      	ldr	r3, [pc, #264]	; (8000cb0 <MX_GPIO_Init+0x168>)
 8000ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000baa:	4b41      	ldr	r3, [pc, #260]	; (8000cb0 <MX_GPIO_Init+0x168>)
 8000bac:	2102      	movs	r1, #2
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bb2:	4b3f      	ldr	r3, [pc, #252]	; (8000cb0 <MX_GPIO_Init+0x168>)
 8000bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	4013      	ands	r3, r2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	019b      	lsls	r3, r3, #6
 8000bc2:	483c      	ldr	r0, [pc, #240]	; (8000cb4 <MX_GPIO_Init+0x16c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	f001 fbff 	bl	80023ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, S2_Pin|S0_Pin, GPIO_PIN_RESET);
 8000bcc:	4b3a      	ldr	r3, [pc, #232]	; (8000cb8 <MX_GPIO_Init+0x170>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2103      	movs	r1, #3
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f001 fbf9 	bl	80023ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S1_Pin|LED_EN_Pin|XBEE_SLEEP_Pin, GPIO_PIN_RESET);
 8000bd8:	4938      	ldr	r1, [pc, #224]	; (8000cbc <MX_GPIO_Init+0x174>)
 8000bda:	23a0      	movs	r3, #160	; 0xa0
 8000bdc:	05db      	lsls	r3, r3, #23
 8000bde:	2200      	movs	r2, #0
 8000be0:	0018      	movs	r0, r3
 8000be2:	f001 fbf2 	bl	80023ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_V_Pin, GPIO_PIN_RESET);
 8000be6:	4936      	ldr	r1, [pc, #216]	; (8000cc0 <MX_GPIO_Init+0x178>)
 8000be8:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <MX_GPIO_Init+0x17c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	0018      	movs	r0, r3
 8000bee:	f001 fbec 	bl	80023ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	0192      	lsls	r2, r2, #6
 8000bf8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	193b      	adds	r3, r7, r4
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	4a29      	ldr	r2, [pc, #164]	; (8000cb4 <MX_GPIO_Init+0x16c>)
 8000c10:	0019      	movs	r1, r3
 8000c12:	0010      	movs	r0, r2
 8000c14:	f001 fa3e 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S0_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S0_Pin;
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	2201      	movs	r2, #1
 8000c22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	4a21      	ldr	r2, [pc, #132]	; (8000cb8 <MX_GPIO_Init+0x170>)
 8000c34:	0019      	movs	r1, r3
 8000c36:	0010      	movs	r0, r2
 8000c38:	f001 fa2c 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin LED_EN_Pin XBEE_SLEEP_Pin */
  GPIO_InitStruct.Pin = S1_Pin|LED_EN_Pin|XBEE_SLEEP_Pin;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	4a1f      	ldr	r2, [pc, #124]	; (8000cbc <MX_GPIO_Init+0x174>)
 8000c40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	2201      	movs	r2, #1
 8000c46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	193a      	adds	r2, r7, r4
 8000c56:	23a0      	movs	r3, #160	; 0xa0
 8000c58:	05db      	lsls	r3, r3, #23
 8000c5a:	0011      	movs	r1, r2
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f001 fa19 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX1_Pin MUX2_Pin */
  GPIO_InitStruct.Pin = MUX1_Pin|MUX2_Pin;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	2212      	movs	r2, #18
 8000c66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	193a      	adds	r2, r7, r4
 8000c76:	23a0      	movs	r3, #160	; 0xa0
 8000c78:	05db      	lsls	r3, r3, #23
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f001 fa09 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_V_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_V_Pin;
 8000c82:	0021      	movs	r1, r4
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <MX_GPIO_Init+0x178>)
 8000c88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	4a09      	ldr	r2, [pc, #36]	; (8000cc4 <MX_GPIO_Init+0x17c>)
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	0010      	movs	r0, r2
 8000ca4:	f001 f9f6 	bl	8002094 <HAL_GPIO_Init>

}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b00b      	add	sp, #44	; 0x2c
 8000cae:	bd90      	pop	{r4, r7, pc}
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	50000800 	.word	0x50000800
 8000cb8:	50001c00 	.word	0x50001c00
 8000cbc:	00008021 	.word	0x00008021
 8000cc0:	00000404 	.word	0x00000404
 8000cc4:	50000400 	.word	0x50000400

08000cc8 <select_mux>:

/* USER CODE BEGIN 4 */

void select_mux(uint8_t sel){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1 , (sel & 0b0001)>>0);
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4013      	ands	r3, r2
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	4817      	ldr	r0, [pc, #92]	; (8000d3c <select_mux+0x74>)
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	f001 fb71 	bl	80023ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 , (sel & 0b0010)>>1);
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	105b      	asrs	r3, r3, #1
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	23a0      	movs	r3, #160	; 0xa0
 8000cf8:	05db      	lsls	r3, r3, #23
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f001 fb64 	bl	80023ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_0 , (sel & 0b0100)>>2);
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	109b      	asrs	r3, r3, #2
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	480a      	ldr	r0, [pc, #40]	; (8000d3c <select_mux+0x74>)
 8000d12:	001a      	movs	r2, r3
 8000d14:	2101      	movs	r1, #1
 8000d16:	f001 fb58 	bl	80023ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (sel & 0b1000)>>3);
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	10db      	asrs	r3, r3, #3
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2201      	movs	r2, #1
 8000d24:	4013      	ands	r3, r2
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	019b      	lsls	r3, r3, #6
 8000d2c:	4804      	ldr	r0, [pc, #16]	; (8000d40 <select_mux+0x78>)
 8000d2e:	0019      	movs	r1, r3
 8000d30:	f001 fb4b 	bl	80023ca <HAL_GPIO_WritePin>
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b002      	add	sp, #8
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	50001c00 	.word	0x50001c00
 8000d40:	50000800 	.word	0x50000800

08000d44 <scan_sensors>:

void scan_sensors(){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); //turn on the diodes
 8000d4a:	23a0      	movs	r3, #160	; 0xa0
 8000d4c:	05db      	lsls	r3, r3, #23
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2120      	movs	r1, #32
 8000d52:	0018      	movs	r0, r3
 8000d54:	f001 fb39 	bl	80023ca <HAL_GPIO_WritePin>

  for(uint8_t i=0; i<8; i++) for(uint8_t j=0; j<2; j++){
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	e0f5      	b.n	8000f4c <scan_sensors+0x208>
 8000d60:	1dbb      	adds	r3, r7, #6
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	e0e7      	b.n	8000f38 <scan_sensors+0x1f4>
	  uint8_t sensor_pair_value;
	  select_mux(sensor_pair[8*j+i][0]);
 8000d68:	1dbb      	adds	r3, r7, #6
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	00da      	lsls	r2, r3, #3
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	18d2      	adds	r2, r2, r3
 8000d74:	4b7f      	ldr	r3, [pc, #508]	; (8000f74 <scan_sensors+0x230>)
 8000d76:	0052      	lsls	r2, r2, #1
 8000d78:	5cd3      	ldrb	r3, [r2, r3]
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff ffa4 	bl	8000cc8 <select_mux>
	  sensor_pair_value = (j)? HAL_GPIO_ReadPin(MUX1) : HAL_GPIO_ReadPin(MUX2);
 8000d80:	1dbb      	adds	r3, r7, #6
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d008      	beq.n	8000d9a <scan_sensors+0x56>
 8000d88:	23a0      	movs	r3, #160	; 0xa0
 8000d8a:	05db      	lsls	r3, r3, #23
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f001 fafe 	bl	8002390 <HAL_GPIO_ReadPin>
 8000d94:	0003      	movs	r3, r0
 8000d96:	001a      	movs	r2, r3
 8000d98:	e007      	b.n	8000daa <scan_sensors+0x66>
 8000d9a:	23a0      	movs	r3, #160	; 0xa0
 8000d9c:	05db      	lsls	r3, r3, #23
 8000d9e:	2110      	movs	r1, #16
 8000da0:	0018      	movs	r0, r3
 8000da2:	f001 faf5 	bl	8002390 <HAL_GPIO_ReadPin>
 8000da6:	0003      	movs	r3, r0
 8000da8:	001a      	movs	r2, r3
 8000daa:	1d7b      	adds	r3, r7, #5
 8000dac:	701a      	strb	r2, [r3, #0]
	  select_mux(sensor_pair[8*j+i][1]);
 8000dae:	1dbb      	adds	r3, r7, #6
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	00da      	lsls	r2, r3, #3
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	18d3      	adds	r3, r2, r3
 8000dba:	4a6e      	ldr	r2, [pc, #440]	; (8000f74 <scan_sensors+0x230>)
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	18d3      	adds	r3, r2, r3
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff ff7f 	bl	8000cc8 <select_mux>
	  sensor_pair_value += (j)? HAL_GPIO_ReadPin(MUX1)<<1 : HAL_GPIO_ReadPin(MUX2)<<1;
 8000dca:	1dbb      	adds	r3, r7, #6
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d008      	beq.n	8000de4 <scan_sensors+0xa0>
 8000dd2:	23a0      	movs	r3, #160	; 0xa0
 8000dd4:	05db      	lsls	r3, r3, #23
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f001 fad9 	bl	8002390 <HAL_GPIO_ReadPin>
 8000dde:	0003      	movs	r3, r0
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	e007      	b.n	8000df4 <scan_sensors+0xb0>
 8000de4:	23a0      	movs	r3, #160	; 0xa0
 8000de6:	05db      	lsls	r3, r3, #23
 8000de8:	2110      	movs	r1, #16
 8000dea:	0018      	movs	r0, r3
 8000dec:	f001 fad0 	bl	8002390 <HAL_GPIO_ReadPin>
 8000df0:	0003      	movs	r3, r0
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	b2d9      	uxtb	r1, r3
 8000df6:	1d7b      	adds	r3, r7, #5
 8000df8:	1d7a      	adds	r2, r7, #5
 8000dfa:	7812      	ldrb	r2, [r2, #0]
 8000dfc:	188a      	adds	r2, r1, r2
 8000dfe:	701a      	strb	r2, [r3, #0]

	  switch(sensors_state[8*j+i]){
 8000e00:	1dbb      	adds	r3, r7, #6
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	00da      	lsls	r2, r3, #3
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	18d3      	adds	r3, r2, r3
 8000e0c:	4a5a      	ldr	r2, [pc, #360]	; (8000f78 <scan_sensors+0x234>)
 8000e0e:	5cd3      	ldrb	r3, [r2, r3]
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d100      	bne.n	8000e16 <scan_sensors+0xd2>
 8000e14:	e068      	b.n	8000ee8 <scan_sensors+0x1a4>
 8000e16:	dd00      	ble.n	8000e1a <scan_sensors+0xd6>
 8000e18:	e089      	b.n	8000f2e <scan_sensors+0x1ea>
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d048      	beq.n	8000eb0 <scan_sensors+0x16c>
 8000e1e:	dd00      	ble.n	8000e22 <scan_sensors+0xde>
 8000e20:	e085      	b.n	8000f2e <scan_sensors+0x1ea>
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d002      	beq.n	8000e2c <scan_sensors+0xe8>
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d026      	beq.n	8000e78 <scan_sensors+0x134>
 8000e2a:	e080      	b.n	8000f2e <scan_sensors+0x1ea>
		  case A:
			  if(sensor_pair_value == 0b01){
 8000e2c:	1d7b      	adds	r3, r7, #5
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d10e      	bne.n	8000e52 <scan_sensors+0x10e>
				  sensors_state[8*j+i] = B;
 8000e34:	1dbb      	adds	r3, r7, #6
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	00da      	lsls	r2, r3, #3
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	18d3      	adds	r3, r2, r3
 8000e40:	4a4d      	ldr	r2, [pc, #308]	; (8000f78 <scan_sensors+0x234>)
 8000e42:	2101      	movs	r1, #1
 8000e44:	54d1      	strb	r1, [r2, r3]
				  bee_count--;
 8000e46:	4b4d      	ldr	r3, [pc, #308]	; (8000f7c <scan_sensors+0x238>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	1e5a      	subs	r2, r3, #1
 8000e4c:	4b4b      	ldr	r3, [pc, #300]	; (8000f7c <scan_sensors+0x238>)
 8000e4e:	601a      	str	r2, [r3, #0]
				  bee_count++;
//				  HAL_GPIO_WritePin(GPIOB, LED_R, 0);
//				  HAL_GPIO_WritePin(GPIOB, LED_V, 1);
//				  xbee_send_alert();
			  }
		  break;
 8000e50:	e066      	b.n	8000f20 <scan_sensors+0x1dc>
			  else if(sensor_pair_value == 0b10){
 8000e52:	1d7b      	adds	r3, r7, #5
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d162      	bne.n	8000f20 <scan_sensors+0x1dc>
				  sensors_state[8*j+i] = D;
 8000e5a:	1dbb      	adds	r3, r7, #6
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	00da      	lsls	r2, r3, #3
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	18d3      	adds	r3, r2, r3
 8000e66:	4a44      	ldr	r2, [pc, #272]	; (8000f78 <scan_sensors+0x234>)
 8000e68:	2103      	movs	r1, #3
 8000e6a:	54d1      	strb	r1, [r2, r3]
				  bee_count++;
 8000e6c:	4b43      	ldr	r3, [pc, #268]	; (8000f7c <scan_sensors+0x238>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	1c5a      	adds	r2, r3, #1
 8000e72:	4b42      	ldr	r3, [pc, #264]	; (8000f7c <scan_sensors+0x238>)
 8000e74:	601a      	str	r2, [r3, #0]
		  break;
 8000e76:	e053      	b.n	8000f20 <scan_sensors+0x1dc>

		  case B:
			  if(sensor_pair_value == 0b00) sensors_state[8*j+i] = C;
 8000e78:	1d7b      	adds	r3, r7, #5
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d109      	bne.n	8000e94 <scan_sensors+0x150>
 8000e80:	1dbb      	adds	r3, r7, #6
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	00da      	lsls	r2, r3, #3
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	18d3      	adds	r3, r2, r3
 8000e8c:	4a3a      	ldr	r2, [pc, #232]	; (8000f78 <scan_sensors+0x234>)
 8000e8e:	2102      	movs	r1, #2
 8000e90:	54d1      	strb	r1, [r2, r3]
			  else if (sensor_pair_value == 0b11) sensors_state[8*j+i] = A;
		  break;
 8000e92:	e047      	b.n	8000f24 <scan_sensors+0x1e0>
			  else if (sensor_pair_value == 0b11) sensors_state[8*j+i] = A;
 8000e94:	1d7b      	adds	r3, r7, #5
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d143      	bne.n	8000f24 <scan_sensors+0x1e0>
 8000e9c:	1dbb      	adds	r3, r7, #6
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	00da      	lsls	r2, r3, #3
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	18d3      	adds	r3, r2, r3
 8000ea8:	4a33      	ldr	r2, [pc, #204]	; (8000f78 <scan_sensors+0x234>)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	54d1      	strb	r1, [r2, r3]
		  break;
 8000eae:	e039      	b.n	8000f24 <scan_sensors+0x1e0>

		  case C:
			  if(sensor_pair_value == 0b10) sensors_state[8*j+i] = D;
 8000eb0:	1d7b      	adds	r3, r7, #5
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d109      	bne.n	8000ecc <scan_sensors+0x188>
 8000eb8:	1dbb      	adds	r3, r7, #6
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	00da      	lsls	r2, r3, #3
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	18d3      	adds	r3, r2, r3
 8000ec4:	4a2c      	ldr	r2, [pc, #176]	; (8000f78 <scan_sensors+0x234>)
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	54d1      	strb	r1, [r2, r3]
			  else if (sensor_pair_value == 0b01) sensors_state[8*j+i] = B;
		  break;
 8000eca:	e02d      	b.n	8000f28 <scan_sensors+0x1e4>
			  else if (sensor_pair_value == 0b01) sensors_state[8*j+i] = B;
 8000ecc:	1d7b      	adds	r3, r7, #5
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d129      	bne.n	8000f28 <scan_sensors+0x1e4>
 8000ed4:	1dbb      	adds	r3, r7, #6
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	00da      	lsls	r2, r3, #3
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	18d3      	adds	r3, r2, r3
 8000ee0:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <scan_sensors+0x234>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	54d1      	strb	r1, [r2, r3]
		  break;
 8000ee6:	e01f      	b.n	8000f28 <scan_sensors+0x1e4>

		  case D:
			  if(sensor_pair_value == 0b11) sensors_state[8*j+i] = A;
 8000ee8:	1d7b      	adds	r3, r7, #5
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d109      	bne.n	8000f04 <scan_sensors+0x1c0>
 8000ef0:	1dbb      	adds	r3, r7, #6
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	00da      	lsls	r2, r3, #3
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	18d3      	adds	r3, r2, r3
 8000efc:	4a1e      	ldr	r2, [pc, #120]	; (8000f78 <scan_sensors+0x234>)
 8000efe:	2100      	movs	r1, #0
 8000f00:	54d1      	strb	r1, [r2, r3]
			  else if (sensor_pair_value == 0b00) sensors_state[8*j+i] = C;
		  break;
 8000f02:	e013      	b.n	8000f2c <scan_sensors+0x1e8>
			  else if (sensor_pair_value == 0b00) sensors_state[8*j+i] = C;
 8000f04:	1d7b      	adds	r3, r7, #5
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10f      	bne.n	8000f2c <scan_sensors+0x1e8>
 8000f0c:	1dbb      	adds	r3, r7, #6
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	00da      	lsls	r2, r3, #3
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	18d3      	adds	r3, r2, r3
 8000f18:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <scan_sensors+0x234>)
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	54d1      	strb	r1, [r2, r3]
		  break;
 8000f1e:	e005      	b.n	8000f2c <scan_sensors+0x1e8>
		  break;
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	e004      	b.n	8000f2e <scan_sensors+0x1ea>
		  break;
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	e002      	b.n	8000f2e <scan_sensors+0x1ea>
		  break;
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	e000      	b.n	8000f2e <scan_sensors+0x1ea>
		  break;
 8000f2c:	46c0      	nop			; (mov r8, r8)
  for(uint8_t i=0; i<8; i++) for(uint8_t j=0; j<2; j++){
 8000f2e:	1dbb      	adds	r3, r7, #6
 8000f30:	781a      	ldrb	r2, [r3, #0]
 8000f32:	1dbb      	adds	r3, r7, #6
 8000f34:	3201      	adds	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
 8000f38:	1dbb      	adds	r3, r7, #6
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d800      	bhi.n	8000f42 <scan_sensors+0x1fe>
 8000f40:	e712      	b.n	8000d68 <scan_sensors+0x24>
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781a      	ldrb	r2, [r3, #0]
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	3201      	adds	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	1dfb      	adds	r3, r7, #7
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b07      	cmp	r3, #7
 8000f52:	d800      	bhi.n	8000f56 <scan_sensors+0x212>
 8000f54:	e704      	b.n	8000d60 <scan_sensors+0x1c>
	  }
  }
  if(master_state == sparse_polling) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <scan_sensors+0x23c>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d106      	bne.n	8000f6c <scan_sensors+0x228>
 8000f5e:	23a0      	movs	r3, #160	; 0xa0
 8000f60:	05db      	lsls	r3, r3, #23
 8000f62:	2200      	movs	r2, #0
 8000f64:	2120      	movs	r1, #32
 8000f66:	0018      	movs	r0, r3
 8000f68:	f001 fa2f 	bl	80023ca <HAL_GPIO_WritePin>
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b002      	add	sp, #8
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000248 	.word	0x20000248
 8000f7c:	200004f0 	.word	0x200004f0
 8000f80:	20000244 	.word	0x20000244

08000f84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART5){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <HAL_UART_RxCpltCallback+0x54>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d11c      	bne.n	8000fd0 <HAL_UART_RxCpltCallback+0x4c>
	    xbee_rx_buffer[xbee_rx_write_index] = xbee_rx_last_byte;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <HAL_UART_RxCpltCallback+0x58>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <HAL_UART_RxCpltCallback+0x5c>)
 8000f9e:	7819      	ldrb	r1, [r3, #0]
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <HAL_UART_RxCpltCallback+0x60>)
 8000fa2:	5499      	strb	r1, [r3, r2]
	    cr_flag = (xbee_rx_last_byte == 0x0D)? xbee_rx_write_index : 0;
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_UART_RxCpltCallback+0x5c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b0d      	cmp	r3, #13
 8000faa:	d102      	bne.n	8000fb2 <HAL_UART_RxCpltCallback+0x2e>
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_UART_RxCpltCallback+0x58>)
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	e000      	b.n	8000fb4 <HAL_UART_RxCpltCallback+0x30>
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_UART_RxCpltCallback+0x64>)
 8000fb6:	701a      	strb	r2, [r3, #0]
	    xbee_rx_write_index++;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_UART_RxCpltCallback+0x58>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_UART_RxCpltCallback+0x58>)
 8000fc2:	701a      	strb	r2, [r3, #0]
	    HAL_UART_Receive_IT(&huart5, &xbee_rx_last_byte, 1);
 8000fc4:	4906      	ldr	r1, [pc, #24]	; (8000fe0 <HAL_UART_RxCpltCallback+0x5c>)
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_UART_RxCpltCallback+0x68>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f002 fef6 	bl	8003dbc <HAL_UART_Receive_IT>

	}
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b002      	add	sp, #8
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40005000 	.word	0x40005000
 8000fdc:	2000035d 	.word	0x2000035d
 8000fe0:	20000259 	.word	0x20000259
 8000fe4:	2000025c 	.word	0x2000025c
 8000fe8:	20000258 	.word	0x20000258
 8000fec:	20000538 	.word	0x20000538

08000ff0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	static long int bee_count_prev = 0;
	if(htim == &htim3){
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d115      	bne.n	800102c <HAL_TIM_PeriodElapsedCallback+0x3c>
		bee_rate = (bee_count - bee_count_prev);
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	b29a      	uxth	r2, r3
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	b29b      	uxth	r3, r3
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	b29b      	uxth	r3, r3
 8001010:	b21a      	sxth	r2, r3
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001014:	801a      	strh	r2, [r3, #0]
		bee_count_prev = bee_count;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800101c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, LED_V);
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001024:	0019      	movs	r1, r3
 8001026:	0010      	movs	r0, r2
 8001028:	f001 f9ec 	bl	8002404 <HAL_GPIO_TogglePin>
	}
}
 800102c:	46c0      	nop			; (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	b002      	add	sp, #8
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200004f8 	.word	0x200004f8
 8001038:	200004f0 	.word	0x200004f0
 800103c:	20000364 	.word	0x20000364
 8001040:	200004f4 	.word	0x200004f4
 8001044:	50000400 	.word	0x50000400

08001048 <invert_lsB_msB>:

void check_coordinator(){

}

void invert_lsB_msB(uint64_t * var, uint8_t length){
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104a:	b08d      	sub	sp, #52	; 0x34
 800104c:	af00      	add	r7, sp, #0
 800104e:	6178      	str	r0, [r7, #20]
 8001050:	0008      	movs	r0, r1
 8001052:	2113      	movs	r1, #19
 8001054:	1879      	adds	r1, r7, r1
 8001056:	7008      	strb	r0, [r1, #0]
	uint64_t new_var = 0;
 8001058:	2000      	movs	r0, #0
 800105a:	2100      	movs	r1, #0
 800105c:	62b8      	str	r0, [r7, #40]	; 0x28
 800105e:	62f9      	str	r1, [r7, #44]	; 0x2c
	for(uint8_t i=0; i<length; i++){
 8001060:	2117      	movs	r1, #23
 8001062:	2010      	movs	r0, #16
 8001064:	4684      	mov	ip, r0
 8001066:	44bc      	add	ip, r7
 8001068:	4461      	add	r1, ip
 800106a:	2000      	movs	r0, #0
 800106c:	7008      	strb	r0, [r1, #0]
 800106e:	e06a      	b.n	8001146 <invert_lsB_msB+0xfe>
		uint64_t byte = (*var & (0xFF<<(8*i)))>>(8*i);
 8001070:	6979      	ldr	r1, [r7, #20]
 8001072:	6808      	ldr	r0, [r1, #0]
 8001074:	6849      	ldr	r1, [r1, #4]
 8001076:	6038      	str	r0, [r7, #0]
 8001078:	6079      	str	r1, [r7, #4]
 800107a:	2617      	movs	r6, #23
 800107c:	0030      	movs	r0, r6
 800107e:	2110      	movs	r1, #16
 8001080:	468c      	mov	ip, r1
 8001082:	44bc      	add	ip, r7
 8001084:	4466      	add	r6, ip
 8001086:	7836      	ldrb	r6, [r6, #0]
 8001088:	00f6      	lsls	r6, r6, #3
 800108a:	21ff      	movs	r1, #255	; 0xff
 800108c:	468c      	mov	ip, r1
 800108e:	4661      	mov	r1, ip
 8001090:	40b1      	lsls	r1, r6
 8001092:	000e      	movs	r6, r1
 8001094:	60be      	str	r6, [r7, #8]
 8001096:	17f6      	asrs	r6, r6, #31
 8001098:	60fe      	str	r6, [r7, #12]
 800109a:	68be      	ldr	r6, [r7, #8]
 800109c:	0031      	movs	r1, r6
 800109e:	683e      	ldr	r6, [r7, #0]
 80010a0:	4031      	ands	r1, r6
 80010a2:	000c      	movs	r4, r1
 80010a4:	68fe      	ldr	r6, [r7, #12]
 80010a6:	0031      	movs	r1, r6
 80010a8:	687e      	ldr	r6, [r7, #4]
 80010aa:	4031      	ands	r1, r6
 80010ac:	000d      	movs	r5, r1
 80010ae:	0006      	movs	r6, r0
 80010b0:	2110      	movs	r1, #16
 80010b2:	1879      	adds	r1, r7, r1
 80010b4:	1989      	adds	r1, r1, r6
 80010b6:	7809      	ldrb	r1, [r1, #0]
 80010b8:	00c9      	lsls	r1, r1, #3
 80010ba:	0008      	movs	r0, r1
 80010bc:	3820      	subs	r0, #32
 80010be:	2800      	cmp	r0, #0
 80010c0:	db04      	blt.n	80010cc <invert_lsB_msB+0x84>
 80010c2:	002e      	movs	r6, r5
 80010c4:	40c6      	lsrs	r6, r0
 80010c6:	0030      	movs	r0, r6
 80010c8:	61b8      	str	r0, [r7, #24]
 80010ca:	e008      	b.n	80010de <invert_lsB_msB+0x96>
 80010cc:	2020      	movs	r0, #32
 80010ce:	1a40      	subs	r0, r0, r1
 80010d0:	002e      	movs	r6, r5
 80010d2:	4086      	lsls	r6, r0
 80010d4:	0030      	movs	r0, r6
 80010d6:	0026      	movs	r6, r4
 80010d8:	40ce      	lsrs	r6, r1
 80010da:	4330      	orrs	r0, r6
 80010dc:	61b8      	str	r0, [r7, #24]
 80010de:	0028      	movs	r0, r5
 80010e0:	40c8      	lsrs	r0, r1
 80010e2:	0001      	movs	r1, r0
 80010e4:	61f9      	str	r1, [r7, #28]
		new_var += byte<<((length-1-i)*8);
 80010e6:	2113      	movs	r1, #19
 80010e8:	1879      	adds	r1, r7, r1
 80010ea:	7809      	ldrb	r1, [r1, #0]
 80010ec:	1e48      	subs	r0, r1, #1
 80010ee:	2117      	movs	r1, #23
 80010f0:	2610      	movs	r6, #16
 80010f2:	46b4      	mov	ip, r6
 80010f4:	44bc      	add	ip, r7
 80010f6:	4461      	add	r1, ip
 80010f8:	7809      	ldrb	r1, [r1, #0]
 80010fa:	1a41      	subs	r1, r0, r1
 80010fc:	00c9      	lsls	r1, r1, #3
 80010fe:	0008      	movs	r0, r1
 8001100:	3820      	subs	r0, #32
 8001102:	2800      	cmp	r0, #0
 8001104:	db03      	blt.n	800110e <invert_lsB_msB+0xc6>
 8001106:	69be      	ldr	r6, [r7, #24]
 8001108:	4086      	lsls	r6, r0
 800110a:	0033      	movs	r3, r6
 800110c:	e008      	b.n	8001120 <invert_lsB_msB+0xd8>
 800110e:	2020      	movs	r0, #32
 8001110:	1a40      	subs	r0, r0, r1
 8001112:	69be      	ldr	r6, [r7, #24]
 8001114:	40c6      	lsrs	r6, r0
 8001116:	0030      	movs	r0, r6
 8001118:	69fe      	ldr	r6, [r7, #28]
 800111a:	408e      	lsls	r6, r1
 800111c:	0033      	movs	r3, r6
 800111e:	4303      	orrs	r3, r0
 8001120:	69b8      	ldr	r0, [r7, #24]
 8001122:	4088      	lsls	r0, r1
 8001124:	0002      	movs	r2, r0
 8001126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001128:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800112a:	1880      	adds	r0, r0, r2
 800112c:	4159      	adcs	r1, r3
 800112e:	62b8      	str	r0, [r7, #40]	; 0x28
 8001130:	62f9      	str	r1, [r7, #44]	; 0x2c
	for(uint8_t i=0; i<length; i++){
 8001132:	2617      	movs	r6, #23
 8001134:	2110      	movs	r1, #16
 8001136:	1879      	adds	r1, r7, r1
 8001138:	1989      	adds	r1, r1, r6
 800113a:	7808      	ldrb	r0, [r1, #0]
 800113c:	2110      	movs	r1, #16
 800113e:	1879      	adds	r1, r7, r1
 8001140:	1989      	adds	r1, r1, r6
 8001142:	3001      	adds	r0, #1
 8001144:	7008      	strb	r0, [r1, #0]
 8001146:	2117      	movs	r1, #23
 8001148:	2010      	movs	r0, #16
 800114a:	1838      	adds	r0, r7, r0
 800114c:	1840      	adds	r0, r0, r1
 800114e:	2113      	movs	r1, #19
 8001150:	1879      	adds	r1, r7, r1
 8001152:	7800      	ldrb	r0, [r0, #0]
 8001154:	7809      	ldrb	r1, [r1, #0]
 8001156:	4288      	cmp	r0, r1
 8001158:	d38a      	bcc.n	8001070 <invert_lsB_msB+0x28>
	}

	*var = new_var;
 800115a:	6979      	ldr	r1, [r7, #20]
 800115c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800115e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001160:	600a      	str	r2, [r1, #0]
 8001162:	604b      	str	r3, [r1, #4]
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b00d      	add	sp, #52	; 0x34
 800116a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800116c <xbee_send_string>:

void xbee_send_string(uint8_t * string){
 800116c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116e:	b0cf      	sub	sp, #316	; 0x13c
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	struct frame tx_frame = {0};
 8001174:	4b81      	ldr	r3, [pc, #516]	; (800137c <xbee_send_string+0x210>)
 8001176:	229c      	movs	r2, #156	; 0x9c
 8001178:	0052      	lsls	r2, r2, #1
 800117a:	4694      	mov	ip, r2
 800117c:	44bc      	add	ip, r7
 800117e:	4463      	add	r3, ip
 8001180:	0018      	movs	r0, r3
 8001182:	2390      	movs	r3, #144	; 0x90
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	001a      	movs	r2, r3
 8001188:	2100      	movs	r1, #0
 800118a:	f004 f8ea 	bl	8005362 <memset>
	tx_frame.length = 0x0E + strlen(string);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	0018      	movs	r0, r3
 8001192:	f7fe ffb9 	bl	8000108 <strlen>
 8001196:	0003      	movs	r3, r0
 8001198:	b29b      	uxth	r3, r3
 800119a:	330e      	adds	r3, #14
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b77      	ldr	r3, [pc, #476]	; (800137c <xbee_send_string+0x210>)
 80011a0:	219c      	movs	r1, #156	; 0x9c
 80011a2:	0049      	lsls	r1, r1, #1
 80011a4:	468c      	mov	ip, r1
 80011a6:	44bc      	add	ip, r7
 80011a8:	4463      	add	r3, ip
 80011aa:	801a      	strh	r2, [r3, #0]
	invert_lsB_msB((uint64_t*)&tx_frame.length, 2);
 80011ac:	2608      	movs	r6, #8
 80011ae:	19bb      	adds	r3, r7, r6
 80011b0:	2102      	movs	r1, #2
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff ff48 	bl	8001048 <invert_lsB_msB>
	tx_frame.type = 0x10;
 80011b8:	4b70      	ldr	r3, [pc, #448]	; (800137c <xbee_send_string+0x210>)
 80011ba:	229c      	movs	r2, #156	; 0x9c
 80011bc:	0052      	lsls	r2, r2, #1
 80011be:	4694      	mov	ip, r2
 80011c0:	44bc      	add	ip, r7
 80011c2:	4463      	add	r3, ip
 80011c4:	2210      	movs	r2, #16
 80011c6:	709a      	strb	r2, [r3, #2]
	tx_frame.id = 0x01;
 80011c8:	4b6c      	ldr	r3, [pc, #432]	; (800137c <xbee_send_string+0x210>)
 80011ca:	229c      	movs	r2, #156	; 0x9c
 80011cc:	0052      	lsls	r2, r2, #1
 80011ce:	4694      	mov	ip, r2
 80011d0:	44bc      	add	ip, r7
 80011d2:	4463      	add	r3, ip
 80011d4:	2201      	movs	r2, #1
 80011d6:	70da      	strb	r2, [r3, #3]
	tx_frame.address64 = 0xFFFF;
 80011d8:	4b68      	ldr	r3, [pc, #416]	; (800137c <xbee_send_string+0x210>)
 80011da:	229c      	movs	r2, #156	; 0x9c
 80011dc:	0052      	lsls	r2, r2, #1
 80011de:	18ba      	adds	r2, r7, r2
 80011e0:	18d1      	adds	r1, r2, r3
 80011e2:	4a67      	ldr	r2, [pc, #412]	; (8001380 <xbee_send_string+0x214>)
 80011e4:	2300      	movs	r3, #0
 80011e6:	608a      	str	r2, [r1, #8]
 80011e8:	60cb      	str	r3, [r1, #12]
	invert_lsB_msB((uint64_t*)&tx_frame.address64, 8);
 80011ea:	19bb      	adds	r3, r7, r6
 80011ec:	3308      	adds	r3, #8
 80011ee:	2108      	movs	r1, #8
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff ff29 	bl	8001048 <invert_lsB_msB>
	tx_frame.address16 = 0xFFFE;
 80011f6:	4b61      	ldr	r3, [pc, #388]	; (800137c <xbee_send_string+0x210>)
 80011f8:	229c      	movs	r2, #156	; 0x9c
 80011fa:	0052      	lsls	r2, r2, #1
 80011fc:	4694      	mov	ip, r2
 80011fe:	44bc      	add	ip, r7
 8001200:	4463      	add	r3, ip
 8001202:	2202      	movs	r2, #2
 8001204:	4252      	negs	r2, r2
 8001206:	821a      	strh	r2, [r3, #16]
	invert_lsB_msB((uint64_t*)&tx_frame.address16, 2);
 8001208:	19bb      	adds	r3, r7, r6
 800120a:	3310      	adds	r3, #16
 800120c:	2102      	movs	r1, #2
 800120e:	0018      	movs	r0, r3
 8001210:	f7ff ff1a 	bl	8001048 <invert_lsB_msB>
	memcpy(tx_frame.content, string, strlen(string));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	0018      	movs	r0, r3
 8001218:	f7fe ff76 	bl	8000108 <strlen>
 800121c:	0002      	movs	r2, r0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	19bb      	adds	r3, r7, r6
 8001222:	3313      	adds	r3, #19
 8001224:	0018      	movs	r0, r3
 8001226:	f004 f893 	bl	8005350 <memcpy>

	uint64_t sum = 0;
 800122a:	2200      	movs	r2, #0
 800122c:	2300      	movs	r3, #0
 800122e:	2198      	movs	r1, #152	; 0x98
 8001230:	0049      	lsls	r1, r1, #1
 8001232:	1879      	adds	r1, r7, r1
 8001234:	600a      	str	r2, [r1, #0]
 8001236:	604b      	str	r3, [r1, #4]
	uint16_t frame_length;
	frame_length = 275;
 8001238:	2394      	movs	r3, #148	; 0x94
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	18fb      	adds	r3, r7, r3
 800123e:	2214      	movs	r2, #20
 8001240:	32ff      	adds	r2, #255	; 0xff
 8001242:	801a      	strh	r2, [r3, #0]
	uint8_t * ptr = (void *)&tx_frame+2;
 8001244:	19bb      	adds	r3, r7, r6
 8001246:	3302      	adds	r3, #2
 8001248:	2296      	movs	r2, #150	; 0x96
 800124a:	0052      	lsls	r2, r2, #1
 800124c:	18ba      	adds	r2, r7, r2
 800124e:	6013      	str	r3, [r2, #0]
	for(uint16_t i=0; i<frame_length-2; i++){
 8001250:	2395      	movs	r3, #149	; 0x95
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	2200      	movs	r2, #0
 8001258:	801a      	strh	r2, [r3, #0]
 800125a:	e01d      	b.n	8001298 <xbee_send_string+0x12c>
		sum += *ptr;
 800125c:	2196      	movs	r1, #150	; 0x96
 800125e:	0049      	lsls	r1, r1, #1
 8001260:	187b      	adds	r3, r7, r1
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	001c      	movs	r4, r3
 8001268:	2300      	movs	r3, #0
 800126a:	001d      	movs	r5, r3
 800126c:	2098      	movs	r0, #152	; 0x98
 800126e:	0040      	lsls	r0, r0, #1
 8001270:	183b      	adds	r3, r7, r0
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	1912      	adds	r2, r2, r4
 8001278:	416b      	adcs	r3, r5
 800127a:	1838      	adds	r0, r7, r0
 800127c:	6002      	str	r2, [r0, #0]
 800127e:	6043      	str	r3, [r0, #4]
		ptr++;
 8001280:	187b      	adds	r3, r7, r1
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	187a      	adds	r2, r7, r1
 8001288:	6013      	str	r3, [r2, #0]
	for(uint16_t i=0; i<frame_length-2; i++){
 800128a:	2195      	movs	r1, #149	; 0x95
 800128c:	0049      	lsls	r1, r1, #1
 800128e:	187b      	adds	r3, r7, r1
 8001290:	881a      	ldrh	r2, [r3, #0]
 8001292:	187b      	adds	r3, r7, r1
 8001294:	3201      	adds	r2, #1
 8001296:	801a      	strh	r2, [r3, #0]
 8001298:	2395      	movs	r3, #149	; 0x95
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	881a      	ldrh	r2, [r3, #0]
 80012a0:	2394      	movs	r3, #148	; 0x94
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	3b02      	subs	r3, #2
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dbd6      	blt.n	800125c <xbee_send_string+0xf0>
	}

	tx_frame.check_sum = 0xFF - (sum & 0xFF);
 80012ae:	2398      	movs	r3, #152	; 0x98
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	18fb      	adds	r3, r7, r3
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	1c13      	adds	r3, r2, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	b2d9      	uxtb	r1, r3
 80012c0:	4b2e      	ldr	r3, [pc, #184]	; (800137c <xbee_send_string+0x210>)
 80012c2:	229c      	movs	r2, #156	; 0x9c
 80012c4:	0052      	lsls	r2, r2, #1
 80012c6:	18ba      	adds	r2, r7, r2
 80012c8:	18d2      	adds	r2, r2, r3
 80012ca:	238c      	movs	r3, #140	; 0x8c
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	54d1      	strb	r1, [r2, r3]


	HAL_UART_Transmit(&huart5, "~", 1, 100);
 80012d0:	492c      	ldr	r1, [pc, #176]	; (8001384 <xbee_send_string+0x218>)
 80012d2:	482d      	ldr	r0, [pc, #180]	; (8001388 <xbee_send_string+0x21c>)
 80012d4:	2364      	movs	r3, #100	; 0x64
 80012d6:	2201      	movs	r2, #1
 80012d8:	f002 fcc8 	bl	8003c6c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, (uint8_t*)&tx_frame.length, 2, 100);
 80012dc:	2408      	movs	r4, #8
 80012de:	1939      	adds	r1, r7, r4
 80012e0:	4829      	ldr	r0, [pc, #164]	; (8001388 <xbee_send_string+0x21c>)
 80012e2:	2364      	movs	r3, #100	; 0x64
 80012e4:	2202      	movs	r2, #2
 80012e6:	f002 fcc1 	bl	8003c6c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.type, 1, 100);
 80012ea:	193b      	adds	r3, r7, r4
 80012ec:	1c99      	adds	r1, r3, #2
 80012ee:	4826      	ldr	r0, [pc, #152]	; (8001388 <xbee_send_string+0x21c>)
 80012f0:	2364      	movs	r3, #100	; 0x64
 80012f2:	2201      	movs	r2, #1
 80012f4:	f002 fcba 	bl	8003c6c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.id, 1, 100);
 80012f8:	193b      	adds	r3, r7, r4
 80012fa:	1cd9      	adds	r1, r3, #3
 80012fc:	4822      	ldr	r0, [pc, #136]	; (8001388 <xbee_send_string+0x21c>)
 80012fe:	2364      	movs	r3, #100	; 0x64
 8001300:	2201      	movs	r2, #1
 8001302:	f002 fcb3 	bl	8003c6c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.address64, 8, 100);
 8001306:	193b      	adds	r3, r7, r4
 8001308:	3308      	adds	r3, #8
 800130a:	0019      	movs	r1, r3
 800130c:	481e      	ldr	r0, [pc, #120]	; (8001388 <xbee_send_string+0x21c>)
 800130e:	2364      	movs	r3, #100	; 0x64
 8001310:	2208      	movs	r2, #8
 8001312:	f002 fcab 	bl	8003c6c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.address16, 2, 100);
 8001316:	193b      	adds	r3, r7, r4
 8001318:	3310      	adds	r3, #16
 800131a:	0019      	movs	r1, r3
 800131c:	481a      	ldr	r0, [pc, #104]	; (8001388 <xbee_send_string+0x21c>)
 800131e:	2364      	movs	r3, #100	; 0x64
 8001320:	2202      	movs	r2, #2
 8001322:	f002 fca3 	bl	8003c6c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.content_index, 1, 100);
 8001326:	193b      	adds	r3, r7, r4
 8001328:	3314      	adds	r3, #20
 800132a:	33ff      	adds	r3, #255	; 0xff
 800132c:	0019      	movs	r1, r3
 800132e:	4816      	ldr	r0, [pc, #88]	; (8001388 <xbee_send_string+0x21c>)
 8001330:	2364      	movs	r3, #100	; 0x64
 8001332:	2201      	movs	r2, #1
 8001334:	f002 fc9a 	bl	8003c6c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.option, 1, 100);
 8001338:	193b      	adds	r3, r7, r4
 800133a:	3312      	adds	r3, #18
 800133c:	0019      	movs	r1, r3
 800133e:	4812      	ldr	r0, [pc, #72]	; (8001388 <xbee_send_string+0x21c>)
 8001340:	2364      	movs	r3, #100	; 0x64
 8001342:	2201      	movs	r2, #1
 8001344:	f002 fc92 	bl	8003c6c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.content, strlen(string), 100);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	0018      	movs	r0, r3
 800134c:	f7fe fedc 	bl	8000108 <strlen>
 8001350:	0003      	movs	r3, r0
 8001352:	b29a      	uxth	r2, r3
 8001354:	193b      	adds	r3, r7, r4
 8001356:	3313      	adds	r3, #19
 8001358:	0019      	movs	r1, r3
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <xbee_send_string+0x21c>)
 800135c:	2364      	movs	r3, #100	; 0x64
 800135e:	f002 fc85 	bl	8003c6c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.check_sum, 1, 100);
 8001362:	193b      	adds	r3, r7, r4
 8001364:	3319      	adds	r3, #25
 8001366:	33ff      	adds	r3, #255	; 0xff
 8001368:	0019      	movs	r1, r3
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <xbee_send_string+0x21c>)
 800136c:	2364      	movs	r3, #100	; 0x64
 800136e:	2201      	movs	r2, #1
 8001370:	f002 fc7c 	bl	8003c6c <HAL_UART_Transmit>
}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b04f      	add	sp, #316	; 0x13c
 800137a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137c:	fffffed0 	.word	0xfffffed0
 8001380:	0000ffff 	.word	0x0000ffff
 8001384:	08005be0 	.word	0x08005be0
 8001388:	20000538 	.word	0x20000538

0800138c <xbee_send_alert>:
void xbee_send_alert(){
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b0c3      	sub	sp, #268	; 0x10c
 8001390:	af02      	add	r7, sp, #8
	uint8_t string[256];
	sprintf(string, "E %s %li %li\r", config[1][1], bee_count, bee_rate);
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <xbee_send_alert+0x30>)
 8001394:	681c      	ldr	r4, [r3, #0]
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <xbee_send_alert+0x34>)
 8001398:	2200      	movs	r2, #0
 800139a:	5e9b      	ldrsh	r3, [r3, r2]
 800139c:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <xbee_send_alert+0x38>)
 800139e:	490a      	ldr	r1, [pc, #40]	; (80013c8 <xbee_send_alert+0x3c>)
 80013a0:	0038      	movs	r0, r7
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	0023      	movs	r3, r4
 80013a6:	f003 ffe5 	bl	8005374 <siprintf>
	//xbee_send_string("n'importe quoi\n");
	xbee_send_string(string);
 80013aa:	003b      	movs	r3, r7
 80013ac:	0018      	movs	r0, r3
 80013ae:	f7ff fedd 	bl	800116c <xbee_send_string>
}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b041      	add	sp, #260	; 0x104
 80013b8:	bd90      	pop	{r4, r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	200004f0 	.word	0x200004f0
 80013c0:	200004f4 	.word	0x200004f4
 80013c4:	2000003e 	.word	0x2000003e
 80013c8:	08005be4 	.word	0x08005be4

080013cc <read_xbee>:


void read_xbee(){
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	b099      	sub	sp, #100	; 0x64
 80013d0:	af00      	add	r7, sp, #0
  static struct frame received_frame = {0};

  if(xbee_rx_read_index<xbee_rx_write_index){
 80013d2:	4bca      	ldr	r3, [pc, #808]	; (80016fc <read_xbee+0x330>)
 80013d4:	781a      	ldrb	r2, [r3, #0]
 80013d6:	4bca      	ldr	r3, [pc, #808]	; (8001700 <read_xbee+0x334>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d300      	bcc.n	80013e0 <read_xbee+0x14>
 80013de:	e2ba      	b.n	8001956 <read_xbee+0x58a>
	  uint64_t sum = 0;
 80013e0:	2200      	movs	r2, #0
 80013e2:	2300      	movs	r3, #0
 80013e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80013e6:	65fb      	str	r3, [r7, #92]	; 0x5c
	  static uint8_t multiple_byte_step;

	  switch (xbee_receive_state){
 80013e8:	4bc6      	ldr	r3, [pc, #792]	; (8001704 <read_xbee+0x338>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b0a      	cmp	r3, #10
 80013ee:	d900      	bls.n	80013f2 <read_xbee+0x26>
 80013f0:	e2ab      	b.n	800194a <read_xbee+0x57e>
 80013f2:	009a      	lsls	r2, r3, #2
 80013f4:	4bc4      	ldr	r3, [pc, #784]	; (8001708 <read_xbee+0x33c>)
 80013f6:	18d3      	adds	r3, r2, r3
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	469f      	mov	pc, r3
		  case idle:
			  if(xbee_rx_buffer[xbee_rx_read_index] == 0x7E){
 80013fc:	4bbf      	ldr	r3, [pc, #764]	; (80016fc <read_xbee+0x330>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	001a      	movs	r2, r3
 8001402:	4bc2      	ldr	r3, [pc, #776]	; (800170c <read_xbee+0x340>)
 8001404:	5c9b      	ldrb	r3, [r3, r2]
 8001406:	2b7e      	cmp	r3, #126	; 0x7e
 8001408:	d000      	beq.n	800140c <read_xbee+0x40>
 800140a:	e29d      	b.n	8001948 <read_xbee+0x57c>
				  xbee_receive_state = frame_length;
 800140c:	4bbd      	ldr	r3, [pc, #756]	; (8001704 <read_xbee+0x338>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
			  }
			  /*else if (lora_requested && xbee_rx_buffer[xbee_rx_read_index] == 0xAA){
				  is_coordinator = True;
				  lora_requested = False;
			  }*/
		  break;
 8001412:	e299      	b.n	8001948 <read_xbee+0x57c>

		  case frame_length:
			  received_frame.length += ((uint16_t)(xbee_rx_buffer[xbee_rx_read_index])) << (8-8*multiple_byte_step) ;
 8001414:	4bbe      	ldr	r3, [pc, #760]	; (8001710 <read_xbee+0x344>)
 8001416:	881a      	ldrh	r2, [r3, #0]
 8001418:	4bb8      	ldr	r3, [pc, #736]	; (80016fc <read_xbee+0x330>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	0019      	movs	r1, r3
 800141e:	4bbb      	ldr	r3, [pc, #748]	; (800170c <read_xbee+0x340>)
 8001420:	5c5b      	ldrb	r3, [r3, r1]
 8001422:	0019      	movs	r1, r3
 8001424:	4bbb      	ldr	r3, [pc, #748]	; (8001714 <read_xbee+0x348>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	0018      	movs	r0, r3
 800142a:	2301      	movs	r3, #1
 800142c:	1a1b      	subs	r3, r3, r0
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4099      	lsls	r1, r3
 8001432:	000b      	movs	r3, r1
 8001434:	b29b      	uxth	r3, r3
 8001436:	18d3      	adds	r3, r2, r3
 8001438:	b29a      	uxth	r2, r3
 800143a:	4bb5      	ldr	r3, [pc, #724]	; (8001710 <read_xbee+0x344>)
 800143c:	801a      	strh	r2, [r3, #0]
			  if(multiple_byte_step){
 800143e:	4bb5      	ldr	r3, [pc, #724]	; (8001714 <read_xbee+0x348>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <read_xbee+0x88>
				  multiple_byte_step = 0;
 8001446:	4bb3      	ldr	r3, [pc, #716]	; (8001714 <read_xbee+0x348>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
				  xbee_receive_state = frame_type;
 800144c:	4bad      	ldr	r3, [pc, #692]	; (8001704 <read_xbee+0x338>)
 800144e:	2202      	movs	r2, #2
 8001450:	701a      	strb	r2, [r3, #0]
			  }
			  else{
				  multiple_byte_step++;
			  }
		  break;
 8001452:	e27a      	b.n	800194a <read_xbee+0x57e>
				  multiple_byte_step++;
 8001454:	4baf      	ldr	r3, [pc, #700]	; (8001714 <read_xbee+0x348>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4bad      	ldr	r3, [pc, #692]	; (8001714 <read_xbee+0x348>)
 800145e:	701a      	strb	r2, [r3, #0]
		  break;
 8001460:	e273      	b.n	800194a <read_xbee+0x57e>

		  case frame_type:
			  received_frame.type = xbee_rx_buffer[xbee_rx_read_index];
 8001462:	4ba6      	ldr	r3, [pc, #664]	; (80016fc <read_xbee+0x330>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	001a      	movs	r2, r3
 8001468:	4ba8      	ldr	r3, [pc, #672]	; (800170c <read_xbee+0x340>)
 800146a:	5c9a      	ldrb	r2, [r3, r2]
 800146c:	4ba8      	ldr	r3, [pc, #672]	; (8001710 <read_xbee+0x344>)
 800146e:	709a      	strb	r2, [r3, #2]
			  switch(received_frame.type){
 8001470:	4ba7      	ldr	r3, [pc, #668]	; (8001710 <read_xbee+0x344>)
 8001472:	789b      	ldrb	r3, [r3, #2]
 8001474:	2b90      	cmp	r3, #144	; 0x90
 8001476:	d002      	beq.n	800147e <read_xbee+0xb2>
 8001478:	2b97      	cmp	r3, #151	; 0x97
 800147a:	d004      	beq.n	8001486 <read_xbee+0xba>
 800147c:	e007      	b.n	800148e <read_xbee+0xc2>
				  case receive_packet: xbee_receive_state = frame_address64; break;
 800147e:	4ba1      	ldr	r3, [pc, #644]	; (8001704 <read_xbee+0x338>)
 8001480:	2204      	movs	r2, #4
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	e00b      	b.n	800149e <read_xbee+0xd2>
				  case remote_command_response: xbee_receive_state = frame_id; break;
 8001486:	4b9f      	ldr	r3, [pc, #636]	; (8001704 <read_xbee+0x338>)
 8001488:	2203      	movs	r2, #3
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e007      	b.n	800149e <read_xbee+0xd2>
				  default: xbee_rx_read_index = xbee_rx_write_index;
 800148e:	4b9c      	ldr	r3, [pc, #624]	; (8001700 <read_xbee+0x334>)
 8001490:	781a      	ldrb	r2, [r3, #0]
 8001492:	4b9a      	ldr	r3, [pc, #616]	; (80016fc <read_xbee+0x330>)
 8001494:	701a      	strb	r2, [r3, #0]
						   xbee_receive_state = idle;
 8001496:	4b9b      	ldr	r3, [pc, #620]	; (8001704 <read_xbee+0x338>)
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
				  break;
 800149c:	46c0      	nop			; (mov r8, r8)
			  }

			  multiple_byte_step = 0;
 800149e:	4b9d      	ldr	r3, [pc, #628]	; (8001714 <read_xbee+0x348>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
		  break;
 80014a4:	e251      	b.n	800194a <read_xbee+0x57e>

		  case frame_id:
			  received_frame.id = xbee_rx_buffer[xbee_rx_read_index];
 80014a6:	4b95      	ldr	r3, [pc, #596]	; (80016fc <read_xbee+0x330>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	001a      	movs	r2, r3
 80014ac:	4b97      	ldr	r3, [pc, #604]	; (800170c <read_xbee+0x340>)
 80014ae:	5c9a      	ldrb	r2, [r3, r2]
 80014b0:	4b97      	ldr	r3, [pc, #604]	; (8001710 <read_xbee+0x344>)
 80014b2:	70da      	strb	r2, [r3, #3]
			  xbee_receive_state = frame_address64;
 80014b4:	4b93      	ldr	r3, [pc, #588]	; (8001704 <read_xbee+0x338>)
 80014b6:	2204      	movs	r2, #4
 80014b8:	701a      	strb	r2, [r3, #0]
		  break;
 80014ba:	e246      	b.n	800194a <read_xbee+0x57e>

		  case frame_address64:
			  received_frame.address64 += ((uint64_t)xbee_rx_buffer[xbee_rx_read_index]) << (56-8*multiple_byte_step);
 80014bc:	4b94      	ldr	r3, [pc, #592]	; (8001710 <read_xbee+0x344>)
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	498e      	ldr	r1, [pc, #568]	; (80016fc <read_xbee+0x330>)
 80014c4:	7809      	ldrb	r1, [r1, #0]
 80014c6:	0008      	movs	r0, r1
 80014c8:	4990      	ldr	r1, [pc, #576]	; (800170c <read_xbee+0x340>)
 80014ca:	5c09      	ldrb	r1, [r1, r0]
 80014cc:	64b9      	str	r1, [r7, #72]	; 0x48
 80014ce:	2100      	movs	r1, #0
 80014d0:	64f9      	str	r1, [r7, #76]	; 0x4c
 80014d2:	4990      	ldr	r1, [pc, #576]	; (8001714 <read_xbee+0x348>)
 80014d4:	7809      	ldrb	r1, [r1, #0]
 80014d6:	0008      	movs	r0, r1
 80014d8:	2107      	movs	r1, #7
 80014da:	1a09      	subs	r1, r1, r0
 80014dc:	00c9      	lsls	r1, r1, #3
 80014de:	0008      	movs	r0, r1
 80014e0:	3820      	subs	r0, #32
 80014e2:	2800      	cmp	r0, #0
 80014e4:	db03      	blt.n	80014ee <read_xbee+0x122>
 80014e6:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 80014e8:	4086      	lsls	r6, r0
 80014ea:	0035      	movs	r5, r6
 80014ec:	e008      	b.n	8001500 <read_xbee+0x134>
 80014ee:	2020      	movs	r0, #32
 80014f0:	1a40      	subs	r0, r0, r1
 80014f2:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 80014f4:	40c6      	lsrs	r6, r0
 80014f6:	0030      	movs	r0, r6
 80014f8:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 80014fa:	408e      	lsls	r6, r1
 80014fc:	0035      	movs	r5, r6
 80014fe:	4305      	orrs	r5, r0
 8001500:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001502:	4088      	lsls	r0, r1
 8001504:	0004      	movs	r4, r0
 8001506:	1912      	adds	r2, r2, r4
 8001508:	416b      	adcs	r3, r5
 800150a:	4981      	ldr	r1, [pc, #516]	; (8001710 <read_xbee+0x344>)
 800150c:	608a      	str	r2, [r1, #8]
 800150e:	60cb      	str	r3, [r1, #12]

			  if(multiple_byte_step == 7){
 8001510:	4b80      	ldr	r3, [pc, #512]	; (8001714 <read_xbee+0x348>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b07      	cmp	r3, #7
 8001516:	d106      	bne.n	8001526 <read_xbee+0x15a>
				  xbee_receive_state = frame_address16;
 8001518:	4b7a      	ldr	r3, [pc, #488]	; (8001704 <read_xbee+0x338>)
 800151a:	2205      	movs	r2, #5
 800151c:	701a      	strb	r2, [r3, #0]
				  multiple_byte_step = 0;
 800151e:	4b7d      	ldr	r3, [pc, #500]	; (8001714 <read_xbee+0x348>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
			  }
			  else multiple_byte_step++;
		  break;
 8001524:	e211      	b.n	800194a <read_xbee+0x57e>
			  else multiple_byte_step++;
 8001526:	4b7b      	ldr	r3, [pc, #492]	; (8001714 <read_xbee+0x348>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	3301      	adds	r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4b79      	ldr	r3, [pc, #484]	; (8001714 <read_xbee+0x348>)
 8001530:	701a      	strb	r2, [r3, #0]
		  break;
 8001532:	e20a      	b.n	800194a <read_xbee+0x57e>

		  case frame_address16:
			  received_frame.address16 += ((uint16_t)xbee_rx_buffer[xbee_rx_read_index]) << (8-8*multiple_byte_step);
 8001534:	4b76      	ldr	r3, [pc, #472]	; (8001710 <read_xbee+0x344>)
 8001536:	8a1a      	ldrh	r2, [r3, #16]
 8001538:	4b70      	ldr	r3, [pc, #448]	; (80016fc <read_xbee+0x330>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	0019      	movs	r1, r3
 800153e:	4b73      	ldr	r3, [pc, #460]	; (800170c <read_xbee+0x340>)
 8001540:	5c5b      	ldrb	r3, [r3, r1]
 8001542:	0019      	movs	r1, r3
 8001544:	4b73      	ldr	r3, [pc, #460]	; (8001714 <read_xbee+0x348>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	0018      	movs	r0, r3
 800154a:	2301      	movs	r3, #1
 800154c:	1a1b      	subs	r3, r3, r0
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4099      	lsls	r1, r3
 8001552:	000b      	movs	r3, r1
 8001554:	b29b      	uxth	r3, r3
 8001556:	18d3      	adds	r3, r2, r3
 8001558:	b29a      	uxth	r2, r3
 800155a:	4b6d      	ldr	r3, [pc, #436]	; (8001710 <read_xbee+0x344>)
 800155c:	821a      	strh	r2, [r3, #16]
			  if(multiple_byte_step == 1){
 800155e:	4b6d      	ldr	r3, [pc, #436]	; (8001714 <read_xbee+0x348>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d11a      	bne.n	800159c <read_xbee+0x1d0>
				  switch(received_frame.type){
 8001566:	4b6a      	ldr	r3, [pc, #424]	; (8001710 <read_xbee+0x344>)
 8001568:	789b      	ldrb	r3, [r3, #2]
 800156a:	2b90      	cmp	r3, #144	; 0x90
 800156c:	d002      	beq.n	8001574 <read_xbee+0x1a8>
 800156e:	2b97      	cmp	r3, #151	; 0x97
 8001570:	d004      	beq.n	800157c <read_xbee+0x1b0>
 8001572:	e007      	b.n	8001584 <read_xbee+0x1b8>
					  case receive_packet: xbee_receive_state = frame_option; break;
 8001574:	4b63      	ldr	r3, [pc, #396]	; (8001704 <read_xbee+0x338>)
 8001576:	2206      	movs	r2, #6
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	e00b      	b.n	8001594 <read_xbee+0x1c8>
					  case remote_command_response: xbee_receive_state = frame_at_status; break;
 800157c:	4b61      	ldr	r3, [pc, #388]	; (8001704 <read_xbee+0x338>)
 800157e:	2207      	movs	r2, #7
 8001580:	701a      	strb	r2, [r3, #0]
 8001582:	e007      	b.n	8001594 <read_xbee+0x1c8>
					  default: xbee_rx_read_index = xbee_rx_write_index;
 8001584:	4b5e      	ldr	r3, [pc, #376]	; (8001700 <read_xbee+0x334>)
 8001586:	781a      	ldrb	r2, [r3, #0]
 8001588:	4b5c      	ldr	r3, [pc, #368]	; (80016fc <read_xbee+0x330>)
 800158a:	701a      	strb	r2, [r3, #0]
							   xbee_receive_state = idle;
 800158c:	4b5d      	ldr	r3, [pc, #372]	; (8001704 <read_xbee+0x338>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
					  break;
 8001592:	46c0      	nop			; (mov r8, r8)
				  }

				  multiple_byte_step = 0;
 8001594:	4b5f      	ldr	r3, [pc, #380]	; (8001714 <read_xbee+0x348>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
			  }
			  else multiple_byte_step++;
		  break;
 800159a:	e1d6      	b.n	800194a <read_xbee+0x57e>
			  else multiple_byte_step++;
 800159c:	4b5d      	ldr	r3, [pc, #372]	; (8001714 <read_xbee+0x348>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	4b5b      	ldr	r3, [pc, #364]	; (8001714 <read_xbee+0x348>)
 80015a6:	701a      	strb	r2, [r3, #0]
		  break;
 80015a8:	e1cf      	b.n	800194a <read_xbee+0x57e>

		  case frame_option:
			  received_frame.option = xbee_rx_buffer[xbee_rx_read_index];
 80015aa:	4b54      	ldr	r3, [pc, #336]	; (80016fc <read_xbee+0x330>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	001a      	movs	r2, r3
 80015b0:	4b56      	ldr	r3, [pc, #344]	; (800170c <read_xbee+0x340>)
 80015b2:	5c9a      	ldrb	r2, [r3, r2]
 80015b4:	4b56      	ldr	r3, [pc, #344]	; (8001710 <read_xbee+0x344>)
 80015b6:	749a      	strb	r2, [r3, #18]
			  xbee_receive_state = frame_content;
 80015b8:	4b52      	ldr	r3, [pc, #328]	; (8001704 <read_xbee+0x338>)
 80015ba:	2208      	movs	r2, #8
 80015bc:	701a      	strb	r2, [r3, #0]
		  break;
 80015be:	e1c4      	b.n	800194a <read_xbee+0x57e>

		  case frame_at_status:
			  received_frame.command_status[multiple_byte_step] = xbee_rx_buffer[xbee_rx_read_index];
 80015c0:	4b4e      	ldr	r3, [pc, #312]	; (80016fc <read_xbee+0x330>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	001a      	movs	r2, r3
 80015c6:	4b53      	ldr	r3, [pc, #332]	; (8001714 <read_xbee+0x348>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	0018      	movs	r0, r3
 80015cc:	4b4f      	ldr	r3, [pc, #316]	; (800170c <read_xbee+0x340>)
 80015ce:	5c99      	ldrb	r1, [r3, r2]
 80015d0:	4a4f      	ldr	r2, [pc, #316]	; (8001710 <read_xbee+0x344>)
 80015d2:	238a      	movs	r3, #138	; 0x8a
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	1812      	adds	r2, r2, r0
 80015d8:	18d3      	adds	r3, r2, r3
 80015da:	1c0a      	adds	r2, r1, #0
 80015dc:	701a      	strb	r2, [r3, #0]
			  if(multiple_byte_step == 2){
 80015de:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <read_xbee+0x348>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d106      	bne.n	80015f4 <read_xbee+0x228>
				  multiple_byte_step = 0;
 80015e6:	4b4b      	ldr	r3, [pc, #300]	; (8001714 <read_xbee+0x348>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
				  xbee_receive_state = frame_content;
 80015ec:	4b45      	ldr	r3, [pc, #276]	; (8001704 <read_xbee+0x338>)
 80015ee:	2208      	movs	r2, #8
 80015f0:	701a      	strb	r2, [r3, #0]
			  }
			  else multiple_byte_step++;
		  break;
 80015f2:	e1aa      	b.n	800194a <read_xbee+0x57e>
			  else multiple_byte_step++;
 80015f4:	4b47      	ldr	r3, [pc, #284]	; (8001714 <read_xbee+0x348>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b45      	ldr	r3, [pc, #276]	; (8001714 <read_xbee+0x348>)
 80015fe:	701a      	strb	r2, [r3, #0]
		  break;
 8001600:	e1a3      	b.n	800194a <read_xbee+0x57e>

		  case frame_content:
			  received_frame.content[received_frame.content_index] = xbee_rx_buffer[xbee_rx_read_index];
 8001602:	4b3e      	ldr	r3, [pc, #248]	; (80016fc <read_xbee+0x330>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	0018      	movs	r0, r3
 8001608:	4a41      	ldr	r2, [pc, #260]	; (8001710 <read_xbee+0x344>)
 800160a:	2314      	movs	r3, #20
 800160c:	33ff      	adds	r3, #255	; 0xff
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	0019      	movs	r1, r3
 8001612:	4b3e      	ldr	r3, [pc, #248]	; (800170c <read_xbee+0x340>)
 8001614:	5c1a      	ldrb	r2, [r3, r0]
 8001616:	4b3e      	ldr	r3, [pc, #248]	; (8001710 <read_xbee+0x344>)
 8001618:	185b      	adds	r3, r3, r1
 800161a:	74da      	strb	r2, [r3, #19]
			  if(((received_frame.content_index == received_frame.length-13) && received_frame.type==receive_packet) || ((received_frame.content_index == received_frame.length-16) && (received_frame.type==remote_command_response)))
 800161c:	4a3c      	ldr	r2, [pc, #240]	; (8001710 <read_xbee+0x344>)
 800161e:	2314      	movs	r3, #20
 8001620:	33ff      	adds	r3, #255	; 0xff
 8001622:	5cd3      	ldrb	r3, [r2, r3]
 8001624:	001a      	movs	r2, r3
 8001626:	4b3a      	ldr	r3, [pc, #232]	; (8001710 <read_xbee+0x344>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	3b0d      	subs	r3, #13
 800162c:	429a      	cmp	r2, r3
 800162e:	d103      	bne.n	8001638 <read_xbee+0x26c>
 8001630:	4b37      	ldr	r3, [pc, #220]	; (8001710 <read_xbee+0x344>)
 8001632:	789b      	ldrb	r3, [r3, #2]
 8001634:	2b90      	cmp	r3, #144	; 0x90
 8001636:	d00d      	beq.n	8001654 <read_xbee+0x288>
 8001638:	4a35      	ldr	r2, [pc, #212]	; (8001710 <read_xbee+0x344>)
 800163a:	2314      	movs	r3, #20
 800163c:	33ff      	adds	r3, #255	; 0xff
 800163e:	5cd3      	ldrb	r3, [r2, r3]
 8001640:	001a      	movs	r2, r3
 8001642:	4b33      	ldr	r3, [pc, #204]	; (8001710 <read_xbee+0x344>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	3b10      	subs	r3, #16
 8001648:	429a      	cmp	r2, r3
 800164a:	d107      	bne.n	800165c <read_xbee+0x290>
 800164c:	4b30      	ldr	r3, [pc, #192]	; (8001710 <read_xbee+0x344>)
 800164e:	789b      	ldrb	r3, [r3, #2]
 8001650:	2b97      	cmp	r3, #151	; 0x97
 8001652:	d103      	bne.n	800165c <read_xbee+0x290>
				  xbee_receive_state = check_sum;
 8001654:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <read_xbee+0x338>)
 8001656:	2209      	movs	r2, #9
 8001658:	701a      	strb	r2, [r3, #0]
			  else
				  received_frame.content_index++;
		  break;
 800165a:	e176      	b.n	800194a <read_xbee+0x57e>
				  received_frame.content_index++;
 800165c:	4a2c      	ldr	r2, [pc, #176]	; (8001710 <read_xbee+0x344>)
 800165e:	2314      	movs	r3, #20
 8001660:	33ff      	adds	r3, #255	; 0xff
 8001662:	5cd3      	ldrb	r3, [r2, r3]
 8001664:	3301      	adds	r3, #1
 8001666:	b2d9      	uxtb	r1, r3
 8001668:	4a29      	ldr	r2, [pc, #164]	; (8001710 <read_xbee+0x344>)
 800166a:	2314      	movs	r3, #20
 800166c:	33ff      	adds	r3, #255	; 0xff
 800166e:	54d1      	strb	r1, [r2, r3]
		  break;
 8001670:	e16b      	b.n	800194a <read_xbee+0x57e>

		  case check_sum:
			  received_frame.check_sum = xbee_rx_buffer[xbee_rx_read_index];
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <read_xbee+0x330>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	001a      	movs	r2, r3
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <read_xbee+0x340>)
 800167a:	5c98      	ldrb	r0, [r3, r2]
 800167c:	4924      	ldr	r1, [pc, #144]	; (8001710 <read_xbee+0x344>)
 800167e:	238c      	movs	r3, #140	; 0x8c
 8001680:	005a      	lsls	r2, r3, #1
 8001682:	1c03      	adds	r3, r0, #0
 8001684:	548b      	strb	r3, [r1, r2]
			  for(uint8_t i=0; i<8; i++) sum += (((uint64_t)0xFF<<(56-8*i)) & received_frame.address64)>>(56-8*i);
 8001686:	2357      	movs	r3, #87	; 0x57
 8001688:	18fa      	adds	r2, r7, r3
 800168a:	2300      	movs	r3, #0
 800168c:	7013      	strb	r3, [r2, #0]
 800168e:	e061      	b.n	8001754 <read_xbee+0x388>
 8001690:	2357      	movs	r3, #87	; 0x57
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	2307      	movs	r3, #7
 8001698:	1a9b      	subs	r3, r3, r2
 800169a:	00d9      	lsls	r1, r3, #3
 800169c:	000a      	movs	r2, r1
 800169e:	3a20      	subs	r2, #32
 80016a0:	2a00      	cmp	r2, #0
 80016a2:	db03      	blt.n	80016ac <read_xbee+0x2e0>
 80016a4:	23ff      	movs	r3, #255	; 0xff
 80016a6:	4093      	lsls	r3, r2
 80016a8:	647b      	str	r3, [r7, #68]	; 0x44
 80016aa:	e00a      	b.n	80016c2 <read_xbee+0x2f6>
 80016ac:	2320      	movs	r3, #32
 80016ae:	1a5a      	subs	r2, r3, r1
 80016b0:	23ff      	movs	r3, #255	; 0xff
 80016b2:	40d3      	lsrs	r3, r2
 80016b4:	001a      	movs	r2, r3
 80016b6:	2300      	movs	r3, #0
 80016b8:	408b      	lsls	r3, r1
 80016ba:	647b      	str	r3, [r7, #68]	; 0x44
 80016bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016be:	4313      	orrs	r3, r2
 80016c0:	647b      	str	r3, [r7, #68]	; 0x44
 80016c2:	23ff      	movs	r3, #255	; 0xff
 80016c4:	408b      	lsls	r3, r1
 80016c6:	643b      	str	r3, [r7, #64]	; 0x40
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <read_xbee+0x344>)
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	0011      	movs	r1, r2
 80016d0:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80016d2:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 80016d4:	0020      	movs	r0, r4
 80016d6:	4008      	ands	r0, r1
 80016d8:	6338      	str	r0, [r7, #48]	; 0x30
 80016da:	002a      	movs	r2, r5
 80016dc:	401a      	ands	r2, r3
 80016de:	637a      	str	r2, [r7, #52]	; 0x34
 80016e0:	2357      	movs	r3, #87	; 0x57
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	781a      	ldrb	r2, [r3, #0]
 80016e6:	2307      	movs	r3, #7
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	00da      	lsls	r2, r3, #3
 80016ec:	0013      	movs	r3, r2
 80016ee:	3b20      	subs	r3, #32
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	db11      	blt.n	8001718 <read_xbee+0x34c>
 80016f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80016f6:	40d9      	lsrs	r1, r3
 80016f8:	63b9      	str	r1, [r7, #56]	; 0x38
 80016fa:	e01a      	b.n	8001732 <read_xbee+0x366>
 80016fc:	2000035c 	.word	0x2000035c
 8001700:	2000035d 	.word	0x2000035d
 8001704:	200004f6 	.word	0x200004f6
 8001708:	08005c24 	.word	0x08005c24
 800170c:	2000025c 	.word	0x2000025c
 8001710:	20000368 	.word	0x20000368
 8001714:	20000488 	.word	0x20000488
 8001718:	2320      	movs	r3, #32
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800171e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001720:	000c      	movs	r4, r1
 8001722:	409c      	lsls	r4, r3
 8001724:	0023      	movs	r3, r4
 8001726:	0001      	movs	r1, r0
 8001728:	40d1      	lsrs	r1, r2
 800172a:	63b9      	str	r1, [r7, #56]	; 0x38
 800172c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800172e:	4319      	orrs	r1, r3
 8001730:	63b9      	str	r1, [r7, #56]	; 0x38
 8001732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001734:	40d3      	lsrs	r3, r2
 8001736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001738:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800173a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800173c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800173e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001740:	1812      	adds	r2, r2, r0
 8001742:	414b      	adcs	r3, r1
 8001744:	65ba      	str	r2, [r7, #88]	; 0x58
 8001746:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001748:	2257      	movs	r2, #87	; 0x57
 800174a:	18bb      	adds	r3, r7, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	18ba      	adds	r2, r7, r2
 8001750:	3301      	adds	r3, #1
 8001752:	7013      	strb	r3, [r2, #0]
 8001754:	2357      	movs	r3, #87	; 0x57
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b07      	cmp	r3, #7
 800175c:	d998      	bls.n	8001690 <read_xbee+0x2c4>
			  for(uint8_t i=0; i<2; i++) sum += (((uint16_t)0xFF<<(8-8*i)) & received_frame.address16)>>(8-i*8);
 800175e:	2356      	movs	r3, #86	; 0x56
 8001760:	18fa      	adds	r2, r7, r3
 8001762:	2300      	movs	r3, #0
 8001764:	7013      	strb	r3, [r2, #0]
 8001766:	e024      	b.n	80017b2 <read_xbee+0x3e6>
 8001768:	2056      	movs	r0, #86	; 0x56
 800176a:	183b      	adds	r3, r7, r0
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	2301      	movs	r3, #1
 8001770:	1a9b      	subs	r3, r3, r2
 8001772:	00da      	lsls	r2, r3, #3
 8001774:	23ff      	movs	r3, #255	; 0xff
 8001776:	4093      	lsls	r3, r2
 8001778:	001a      	movs	r2, r3
 800177a:	4b79      	ldr	r3, [pc, #484]	; (8001960 <read_xbee+0x594>)
 800177c:	8a1b      	ldrh	r3, [r3, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	0019      	movs	r1, r3
 8001782:	0004      	movs	r4, r0
 8001784:	183b      	adds	r3, r7, r0
 8001786:	781a      	ldrb	r2, [r3, #0]
 8001788:	2301      	movs	r3, #1
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4119      	asrs	r1, r3
 8001790:	000b      	movs	r3, r1
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
 8001794:	17db      	asrs	r3, r3, #31
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001798:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800179a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800179c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800179e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017a0:	1812      	adds	r2, r2, r0
 80017a2:	414b      	adcs	r3, r1
 80017a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80017a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017a8:	193b      	adds	r3, r7, r4
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	193a      	adds	r2, r7, r4
 80017ae:	3301      	adds	r3, #1
 80017b0:	7013      	strb	r3, [r2, #0]
 80017b2:	2356      	movs	r3, #86	; 0x56
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d9d5      	bls.n	8001768 <read_xbee+0x39c>
			  if(received_frame.id==receive_packet) for(uint16_t i=0; i<received_frame.length-12; i++) sum += received_frame.content[i];
 80017bc:	4b68      	ldr	r3, [pc, #416]	; (8001960 <read_xbee+0x594>)
 80017be:	78db      	ldrb	r3, [r3, #3]
 80017c0:	2b90      	cmp	r3, #144	; 0x90
 80017c2:	d123      	bne.n	800180c <read_xbee+0x440>
 80017c4:	2354      	movs	r3, #84	; 0x54
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	2200      	movs	r2, #0
 80017ca:	801a      	strh	r2, [r3, #0]
 80017cc:	e015      	b.n	80017fa <read_xbee+0x42e>
 80017ce:	2454      	movs	r4, #84	; 0x54
 80017d0:	193b      	adds	r3, r7, r4
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	4a62      	ldr	r2, [pc, #392]	; (8001960 <read_xbee+0x594>)
 80017d6:	18d3      	adds	r3, r2, r3
 80017d8:	7cdb      	ldrb	r3, [r3, #19]
 80017da:	623b      	str	r3, [r7, #32]
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
 80017e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80017e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017e4:	6a38      	ldr	r0, [r7, #32]
 80017e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017e8:	1812      	adds	r2, r2, r0
 80017ea:	414b      	adcs	r3, r1
 80017ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80017ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017f0:	193b      	adds	r3, r7, r4
 80017f2:	881a      	ldrh	r2, [r3, #0]
 80017f4:	193b      	adds	r3, r7, r4
 80017f6:	3201      	adds	r2, #1
 80017f8:	801a      	strh	r2, [r3, #0]
 80017fa:	2354      	movs	r3, #84	; 0x54
 80017fc:	18fb      	adds	r3, r7, r3
 80017fe:	881a      	ldrh	r2, [r3, #0]
 8001800:	4b57      	ldr	r3, [pc, #348]	; (8001960 <read_xbee+0x594>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	3b0c      	subs	r3, #12
 8001806:	429a      	cmp	r2, r3
 8001808:	dbe1      	blt.n	80017ce <read_xbee+0x402>
 800180a:	e049      	b.n	80018a0 <read_xbee+0x4d4>
			  else if(received_frame.type==remote_command_response){
 800180c:	4b54      	ldr	r3, [pc, #336]	; (8001960 <read_xbee+0x594>)
 800180e:	789b      	ldrb	r3, [r3, #2]
 8001810:	2b97      	cmp	r3, #151	; 0x97
 8001812:	d145      	bne.n	80018a0 <read_xbee+0x4d4>
				  for(uint16_t i=0; i<received_frame.length-15; i++) sum += received_frame.content[i];
 8001814:	2352      	movs	r3, #82	; 0x52
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	2200      	movs	r2, #0
 800181a:	801a      	strh	r2, [r3, #0]
 800181c:	e015      	b.n	800184a <read_xbee+0x47e>
 800181e:	2452      	movs	r4, #82	; 0x52
 8001820:	193b      	adds	r3, r7, r4
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	4a4e      	ldr	r2, [pc, #312]	; (8001960 <read_xbee+0x594>)
 8001826:	18d3      	adds	r3, r2, r3
 8001828:	7cdb      	ldrb	r3, [r3, #19]
 800182a:	61bb      	str	r3, [r7, #24]
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
 8001830:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001834:	69b8      	ldr	r0, [r7, #24]
 8001836:	69f9      	ldr	r1, [r7, #28]
 8001838:	1812      	adds	r2, r2, r0
 800183a:	414b      	adcs	r3, r1
 800183c:	65ba      	str	r2, [r7, #88]	; 0x58
 800183e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001840:	193b      	adds	r3, r7, r4
 8001842:	881a      	ldrh	r2, [r3, #0]
 8001844:	193b      	adds	r3, r7, r4
 8001846:	3201      	adds	r2, #1
 8001848:	801a      	strh	r2, [r3, #0]
 800184a:	2352      	movs	r3, #82	; 0x52
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	881a      	ldrh	r2, [r3, #0]
 8001850:	4b43      	ldr	r3, [pc, #268]	; (8001960 <read_xbee+0x594>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	3b0f      	subs	r3, #15
 8001856:	429a      	cmp	r2, r3
 8001858:	dbe1      	blt.n	800181e <read_xbee+0x452>
				  for(uint8_t i=0; i<4; i++) sum += received_frame.command_status[i];
 800185a:	2351      	movs	r3, #81	; 0x51
 800185c:	18fb      	adds	r3, r7, r3
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
 8001862:	e018      	b.n	8001896 <read_xbee+0x4ca>
 8001864:	2451      	movs	r4, #81	; 0x51
 8001866:	193b      	adds	r3, r7, r4
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	493d      	ldr	r1, [pc, #244]	; (8001960 <read_xbee+0x594>)
 800186c:	238a      	movs	r3, #138	; 0x8a
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	188a      	adds	r2, r1, r2
 8001872:	18d3      	adds	r3, r2, r3
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800187e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001880:	6938      	ldr	r0, [r7, #16]
 8001882:	6979      	ldr	r1, [r7, #20]
 8001884:	1812      	adds	r2, r2, r0
 8001886:	414b      	adcs	r3, r1
 8001888:	65ba      	str	r2, [r7, #88]	; 0x58
 800188a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800188c:	193b      	adds	r3, r7, r4
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	193b      	adds	r3, r7, r4
 8001892:	3201      	adds	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
 8001896:	2351      	movs	r3, #81	; 0x51
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d9e1      	bls.n	8001864 <read_xbee+0x498>
			  }
			  sum += received_frame.type + received_frame.option + received_frame.id + received_frame.check_sum;
 80018a0:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <read_xbee+0x594>)
 80018a2:	789b      	ldrb	r3, [r3, #2]
 80018a4:	001a      	movs	r2, r3
 80018a6:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <read_xbee+0x594>)
 80018a8:	7c9b      	ldrb	r3, [r3, #18]
 80018aa:	18d3      	adds	r3, r2, r3
 80018ac:	4a2c      	ldr	r2, [pc, #176]	; (8001960 <read_xbee+0x594>)
 80018ae:	78d2      	ldrb	r2, [r2, #3]
 80018b0:	189b      	adds	r3, r3, r2
 80018b2:	492b      	ldr	r1, [pc, #172]	; (8001960 <read_xbee+0x594>)
 80018b4:	228c      	movs	r2, #140	; 0x8c
 80018b6:	0052      	lsls	r2, r2, #1
 80018b8:	5c8a      	ldrb	r2, [r1, r2]
 80018ba:	189b      	adds	r3, r3, r2
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	17db      	asrs	r3, r3, #31
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80018c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c6:	68b8      	ldr	r0, [r7, #8]
 80018c8:	68f9      	ldr	r1, [r7, #12]
 80018ca:	1812      	adds	r2, r2, r0
 80018cc:	414b      	adcs	r3, r1
 80018ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80018d0:	65fb      	str	r3, [r7, #92]	; 0x5c
			  received_frame.check_sum_ok = (sum & 0xFF) == 0xFF;
 80018d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018d4:	22ff      	movs	r2, #255	; 0xff
 80018d6:	4013      	ands	r3, r2
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018dc:	2200      	movs	r2, #0
 80018de:	4013      	ands	r3, r2
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	2301      	movs	r3, #1
 80018e4:	6839      	ldr	r1, [r7, #0]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	0008      	movs	r0, r1
 80018ea:	28ff      	cmp	r0, #255	; 0xff
 80018ec:	d101      	bne.n	80018f2 <read_xbee+0x526>
 80018ee:	2a00      	cmp	r2, #0
 80018f0:	d000      	beq.n	80018f4 <read_xbee+0x528>
 80018f2:	2300      	movs	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	0019      	movs	r1, r3
 80018f8:	4a19      	ldr	r2, [pc, #100]	; (8001960 <read_xbee+0x594>)
 80018fa:	231a      	movs	r3, #26
 80018fc:	33ff      	adds	r3, #255	; 0xff
 80018fe:	54d1      	strb	r1, [r2, r3]
			  xbee_receive_state = process_content;
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <read_xbee+0x598>)
 8001902:	220a      	movs	r2, #10
 8001904:	701a      	strb	r2, [r3, #0]
		  break;
 8001906:	e020      	b.n	800194a <read_xbee+0x57e>

		  case process_content:

			  switch(received_frame.content[0]){
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <read_xbee+0x594>)
 800190a:	7cdb      	ldrb	r3, [r3, #19]
 800190c:	2b45      	cmp	r3, #69	; 0x45
 800190e:	d106      	bne.n	800191e <read_xbee+0x552>
			  	  case 'E':
			  		  master_state = master_idle;
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <read_xbee+0x59c>)
 8001912:	2202      	movs	r2, #2
 8001914:	701a      	strb	r2, [r3, #0]
			  		  xbee_receive_state = idle;
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <read_xbee+0x598>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
			  	  break;
 800191c:	46c0      	nop			; (mov r8, r8)
			  }
			  memset(&received_frame, 0, sizeof(received_frame));
 800191e:	2390      	movs	r3, #144	; 0x90
 8001920:	005a      	lsls	r2, r3, #1
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <read_xbee+0x594>)
 8001924:	2100      	movs	r1, #0
 8001926:	0018      	movs	r0, r3
 8001928:	f003 fd1b 	bl	8005362 <memset>
			  memset(&xbee_rx_buffer, 0, sizeof(xbee_rx_buffer));
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	005a      	lsls	r2, r3, #1
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <read_xbee+0x5a0>)
 8001932:	2100      	movs	r1, #0
 8001934:	0018      	movs	r0, r3
 8001936:	f003 fd14 	bl	8005362 <memset>
			  xbee_rx_read_index = 0;
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <read_xbee+0x5a4>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
			  xbee_rx_write_index = 0;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <read_xbee+0x5a8>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]

		  break;
 8001946:	e000      	b.n	800194a <read_xbee+0x57e>
		  break;
 8001948:	46c0      	nop			; (mov r8, r8)
	  }

	  xbee_rx_read_index += 1;
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <read_xbee+0x5a4>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <read_xbee+0x5a4>)
 8001954:	701a      	strb	r2, [r3, #0]

  }
}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b019      	add	sp, #100	; 0x64
 800195c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	20000368 	.word	0x20000368
 8001964:	200004f6 	.word	0x200004f6
 8001968:	20000244 	.word	0x20000244
 800196c:	2000025c 	.word	0x2000025c
 8001970:	2000035c 	.word	0x2000035c
 8001974:	2000035d 	.word	0x2000035d

08001978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800197c:	b672      	cpsid	i
}
 800197e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001980:	e7fe      	b.n	8001980 <Error_Handler+0x8>
	...

08001984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <HAL_MspInit+0x24>)
 800198a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_MspInit+0x24>)
 800198e:	2101      	movs	r1, #1
 8001990:	430a      	orrs	r2, r1
 8001992:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <HAL_MspInit+0x24>)
 8001996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <HAL_MspInit+0x24>)
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	0549      	lsls	r1, r1, #21
 800199e:	430a      	orrs	r2, r1
 80019a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000

080019ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	240c      	movs	r4, #12
 80019b6:	193b      	adds	r3, r7, r4
 80019b8:	0018      	movs	r0, r3
 80019ba:	2314      	movs	r3, #20
 80019bc:	001a      	movs	r2, r3
 80019be:	2100      	movs	r1, #0
 80019c0:	f003 fccf 	bl	8005362 <memset>
  if(hspi->Instance==SPI2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a18      	ldr	r2, [pc, #96]	; (8001a2c <HAL_SPI_MspInit+0x80>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d129      	bne.n	8001a22 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <HAL_SPI_MspInit+0x84>)
 80019d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_SPI_MspInit+0x84>)
 80019d4:	2180      	movs	r1, #128	; 0x80
 80019d6:	01c9      	lsls	r1, r1, #7
 80019d8:	430a      	orrs	r2, r1
 80019da:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <HAL_SPI_MspInit+0x84>)
 80019de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <HAL_SPI_MspInit+0x84>)
 80019e2:	2102      	movs	r1, #2
 80019e4:	430a      	orrs	r2, r1
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_SPI_MspInit+0x84>)
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	2202      	movs	r2, #2
 80019ee:	4013      	ands	r3, r2
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80019f4:	193b      	adds	r3, r7, r4
 80019f6:	22f0      	movs	r2, #240	; 0xf0
 80019f8:	0212      	lsls	r2, r2, #8
 80019fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	0021      	movs	r1, r4
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	2202      	movs	r2, #2
 8001a02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	4a06      	ldr	r2, [pc, #24]	; (8001a34 <HAL_SPI_MspInit+0x88>)
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	0010      	movs	r0, r2
 8001a1e:	f000 fb39 	bl	8002094 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b009      	add	sp, #36	; 0x24
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	40003800 	.word	0x40003800
 8001a30:	40021000 	.word	0x40021000
 8001a34:	50000400 	.word	0x50000400

08001a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <HAL_TIM_Base_MspInit+0x38>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d10d      	bne.n	8001a66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_TIM_Base_MspInit+0x3c>)
 8001a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_TIM_Base_MspInit+0x3c>)
 8001a50:	2102      	movs	r1, #2
 8001a52:	430a      	orrs	r2, r1
 8001a54:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2010      	movs	r0, #16
 8001a5c:	f000 fa60 	bl	8001f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a60:	2010      	movs	r0, #16
 8001a62:	f000 fa72 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b002      	add	sp, #8
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	40000400 	.word	0x40000400
 8001a74:	40021000 	.word	0x40021000

08001a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b08b      	sub	sp, #44	; 0x2c
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	2414      	movs	r4, #20
 8001a82:	193b      	adds	r3, r7, r4
 8001a84:	0018      	movs	r0, r3
 8001a86:	2314      	movs	r3, #20
 8001a88:	001a      	movs	r2, r3
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	f003 fc69 	bl	8005362 <memset>
  if(huart->Instance==USART2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a33      	ldr	r2, [pc, #204]	; (8001b64 <HAL_UART_MspInit+0xec>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d12a      	bne.n	8001af0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a9a:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <HAL_UART_MspInit+0xf0>)
 8001a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a9e:	4b32      	ldr	r3, [pc, #200]	; (8001b68 <HAL_UART_MspInit+0xf0>)
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	0289      	lsls	r1, r1, #10
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <HAL_UART_MspInit+0xf0>)
 8001aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aac:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <HAL_UART_MspInit+0xf0>)
 8001aae:	2101      	movs	r1, #1
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <HAL_UART_MspInit+0xf0>)
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ac0:	0021      	movs	r1, r4
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	220c      	movs	r2, #12
 8001ac6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	2202      	movs	r2, #2
 8001acc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	2204      	movs	r2, #4
 8001ade:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	187a      	adds	r2, r7, r1
 8001ae2:	23a0      	movs	r3, #160	; 0xa0
 8001ae4:	05db      	lsls	r3, r3, #23
 8001ae6:	0011      	movs	r1, r2
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f000 fad3 	bl	8002094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8001aee:	e035      	b.n	8001b5c <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART5)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <HAL_UART_MspInit+0xf4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d130      	bne.n	8001b5c <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART5_CLK_ENABLE();
 8001afa:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <HAL_UART_MspInit+0xf0>)
 8001afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_UART_MspInit+0xf0>)
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	0349      	lsls	r1, r1, #13
 8001b04:	430a      	orrs	r2, r1
 8001b06:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <HAL_UART_MspInit+0xf0>)
 8001b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0c:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <HAL_UART_MspInit+0xf0>)
 8001b0e:	2102      	movs	r1, #2
 8001b10:	430a      	orrs	r2, r1
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_UART_MspInit+0xf0>)
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	2202      	movs	r2, #2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001b20:	2114      	movs	r1, #20
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	2218      	movs	r2, #24
 8001b26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	187b      	adds	r3, r7, r1
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b34:	187b      	adds	r3, r7, r1
 8001b36:	2203      	movs	r2, #3
 8001b38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8001b3a:	187b      	adds	r3, r7, r1
 8001b3c:	2206      	movs	r2, #6
 8001b3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <HAL_UART_MspInit+0xf8>)
 8001b44:	0019      	movs	r1, r3
 8001b46:	0010      	movs	r0, r2
 8001b48:	f000 faa4 	bl	8002094 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	200e      	movs	r0, #14
 8001b52:	f000 f9e5 	bl	8001f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8001b56:	200e      	movs	r0, #14
 8001b58:	f000 f9f7 	bl	8001f4a <HAL_NVIC_EnableIRQ>
}
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b00b      	add	sp, #44	; 0x2c
 8001b62:	bd90      	pop	{r4, r7, pc}
 8001b64:	40004400 	.word	0x40004400
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40005000 	.word	0x40005000
 8001b70:	50000400 	.word	0x50000400

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <NMI_Handler+0x4>

08001b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <HardFault_Handler+0x4>

08001b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b98:	f000 f8d6 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <USART4_5_IRQHandler+0x14>)
 8001baa:	0018      	movs	r0, r3
 8001bac:	f002 f96e 	bl	8003e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	20000538 	.word	0x20000538

08001bbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <TIM3_IRQHandler+0x14>)
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f001 fccc 	bl	8003560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	200004f8 	.word	0x200004f8

08001bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <_sbrk+0x5c>)
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <_sbrk+0x60>)
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <_sbrk+0x64>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <_sbrk+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	18d3      	adds	r3, r2, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d207      	bcs.n	8001c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c04:	f003 fb7a 	bl	80052fc <__errno>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	425b      	negs	r3, r3
 8001c12:	e009      	b.n	8001c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	18d2      	adds	r2, r2, r3
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <_sbrk+0x64>)
 8001c24:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	0018      	movs	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b006      	add	sp, #24
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20005000 	.word	0x20005000
 8001c34:	00000400 	.word	0x00000400
 8001c38:	2000048c 	.word	0x2000048c
 8001c3c:	20000658 	.word	0x20000658

08001c40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001c4c:	480d      	ldr	r0, [pc, #52]	; (8001c84 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001c4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c52:	490e      	ldr	r1, [pc, #56]	; (8001c8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c54:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <LoopForever+0xe>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c58:	e002      	b.n	8001c60 <LoopCopyDataInit>

08001c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5e:	3304      	adds	r3, #4

08001c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c64:	d3f9      	bcc.n	8001c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c66:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c68:	4c0b      	ldr	r4, [pc, #44]	; (8001c98 <LoopForever+0x16>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c6c:	e001      	b.n	8001c72 <LoopFillZerobss>

08001c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c70:	3204      	adds	r2, #4

08001c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c74:	d3fb      	bcc.n	8001c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c76:	f7ff ffe3 	bl	8001c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7a:	f003 fb45 	bl	8005308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c7e:	f7fe fc1f 	bl	80004c0 <main>

08001c82 <LoopForever>:

LoopForever:
    b LoopForever
 8001c82:	e7fe      	b.n	8001c82 <LoopForever>
   ldr   r0, =_estack
 8001c84:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c8c:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8001c90:	08005d00 	.word	0x08005d00
  ldr r2, =_sbss
 8001c94:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8001c98:	20000654 	.word	0x20000654

08001c9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c9c:	e7fe      	b.n	8001c9c <ADC1_COMP_IRQHandler>
	...

08001ca0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ca6:	1dfb      	adds	r3, r7, #7
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_Init+0x3c>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_Init+0x3c>)
 8001cb2:	2140      	movs	r1, #64	; 0x40
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cb8:	2003      	movs	r0, #3
 8001cba:	f000 f811 	bl	8001ce0 <HAL_InitTick>
 8001cbe:	1e03      	subs	r3, r0, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
 8001cc8:	e001      	b.n	8001cce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cca:	f7ff fe5b 	bl	8001984 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cce:	1dfb      	adds	r3, r7, #7
 8001cd0:	781b      	ldrb	r3, [r3, #0]
}
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b002      	add	sp, #8
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	40022000 	.word	0x40022000

08001ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <HAL_InitTick+0x5c>)
 8001cea:	681c      	ldr	r4, [r3, #0]
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <HAL_InitTick+0x60>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	23fa      	movs	r3, #250	; 0xfa
 8001cf4:	0098      	lsls	r0, r3, #2
 8001cf6:	f7fe fa19 	bl	800012c <__udivsi3>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	0020      	movs	r0, r4
 8001d00:	f7fe fa14 	bl	800012c <__udivsi3>
 8001d04:	0003      	movs	r3, r0
 8001d06:	0018      	movs	r0, r3
 8001d08:	f000 f92f 	bl	8001f6a <HAL_SYSTICK_Config>
 8001d0c:	1e03      	subs	r3, r0, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e00f      	b.n	8001d34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d80b      	bhi.n	8001d32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	425b      	negs	r3, r3
 8001d20:	2200      	movs	r2, #0
 8001d22:	0018      	movs	r0, r3
 8001d24:	f000 f8fc 	bl	8001f20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_InitTick+0x64>)
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b003      	add	sp, #12
 8001d3a:	bd90      	pop	{r4, r7, pc}
 8001d3c:	200001b4 	.word	0x200001b4
 8001d40:	200001bc 	.word	0x200001bc
 8001d44:	200001b8 	.word	0x200001b8

08001d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_IncTick+0x1c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	001a      	movs	r2, r3
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_IncTick+0x20>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	18d2      	adds	r2, r2, r3
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_IncTick+0x20>)
 8001d5a:	601a      	str	r2, [r3, #0]
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	200001bc 	.word	0x200001bc
 8001d68:	20000640 	.word	0x20000640

08001d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d70:	4b02      	ldr	r3, [pc, #8]	; (8001d7c <HAL_GetTick+0x10>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	20000640 	.word	0x20000640

08001d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff fff0 	bl	8001d6c <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3301      	adds	r3, #1
 8001d98:	d005      	beq.n	8001da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_Delay+0x44>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	001a      	movs	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	189b      	adds	r3, r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	f7ff ffe0 	bl	8001d6c <HAL_GetTick>
 8001dac:	0002      	movs	r2, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8f7      	bhi.n	8001da8 <HAL_Delay+0x28>
  {
  }
}
 8001db8:	46c0      	nop			; (mov r8, r8)
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b004      	add	sp, #16
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	200001bc 	.word	0x200001bc

08001dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	0002      	movs	r2, r0
 8001dd0:	1dfb      	adds	r3, r7, #7
 8001dd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	1dfb      	adds	r3, r7, #7
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b7f      	cmp	r3, #127	; 0x7f
 8001dda:	d809      	bhi.n	8001df0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ddc:	1dfb      	adds	r3, r7, #7
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	001a      	movs	r2, r3
 8001de2:	231f      	movs	r3, #31
 8001de4:	401a      	ands	r2, r3
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <__NVIC_EnableIRQ+0x30>)
 8001de8:	2101      	movs	r1, #1
 8001dea:	4091      	lsls	r1, r2
 8001dec:	000a      	movs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
  }
}
 8001df0:	46c0      	nop			; (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b002      	add	sp, #8
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	e000e100 	.word	0xe000e100

08001dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	0002      	movs	r2, r0
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	1dfb      	adds	r3, r7, #7
 8001e08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	1dfb      	adds	r3, r7, #7
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8001e10:	d828      	bhi.n	8001e64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e12:	4a2f      	ldr	r2, [pc, #188]	; (8001ed0 <__NVIC_SetPriority+0xd4>)
 8001e14:	1dfb      	adds	r3, r7, #7
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	33c0      	adds	r3, #192	; 0xc0
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	589b      	ldr	r3, [r3, r2]
 8001e22:	1dfa      	adds	r2, r7, #7
 8001e24:	7812      	ldrb	r2, [r2, #0]
 8001e26:	0011      	movs	r1, r2
 8001e28:	2203      	movs	r2, #3
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	00d2      	lsls	r2, r2, #3
 8001e2e:	21ff      	movs	r1, #255	; 0xff
 8001e30:	4091      	lsls	r1, r2
 8001e32:	000a      	movs	r2, r1
 8001e34:	43d2      	mvns	r2, r2
 8001e36:	401a      	ands	r2, r3
 8001e38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	019b      	lsls	r3, r3, #6
 8001e3e:	22ff      	movs	r2, #255	; 0xff
 8001e40:	401a      	ands	r2, r3
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	0018      	movs	r0, r3
 8001e48:	2303      	movs	r3, #3
 8001e4a:	4003      	ands	r3, r0
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e50:	481f      	ldr	r0, [pc, #124]	; (8001ed0 <__NVIC_SetPriority+0xd4>)
 8001e52:	1dfb      	adds	r3, r7, #7
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	33c0      	adds	r3, #192	; 0xc0
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e62:	e031      	b.n	8001ec8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e64:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <__NVIC_SetPriority+0xd8>)
 8001e66:	1dfb      	adds	r3, r7, #7
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	230f      	movs	r3, #15
 8001e6e:	400b      	ands	r3, r1
 8001e70:	3b08      	subs	r3, #8
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3306      	adds	r3, #6
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	18d3      	adds	r3, r2, r3
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	1dfa      	adds	r2, r7, #7
 8001e80:	7812      	ldrb	r2, [r2, #0]
 8001e82:	0011      	movs	r1, r2
 8001e84:	2203      	movs	r2, #3
 8001e86:	400a      	ands	r2, r1
 8001e88:	00d2      	lsls	r2, r2, #3
 8001e8a:	21ff      	movs	r1, #255	; 0xff
 8001e8c:	4091      	lsls	r1, r2
 8001e8e:	000a      	movs	r2, r1
 8001e90:	43d2      	mvns	r2, r2
 8001e92:	401a      	ands	r2, r3
 8001e94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	019b      	lsls	r3, r3, #6
 8001e9a:	22ff      	movs	r2, #255	; 0xff
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	1dfb      	adds	r3, r7, #7
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	4003      	ands	r3, r0
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eac:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <__NVIC_SetPriority+0xd8>)
 8001eae:	1dfb      	adds	r3, r7, #7
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	001c      	movs	r4, r3
 8001eb4:	230f      	movs	r3, #15
 8001eb6:	4023      	ands	r3, r4
 8001eb8:	3b08      	subs	r3, #8
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	3306      	adds	r3, #6
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	18c3      	adds	r3, r0, r3
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	601a      	str	r2, [r3, #0]
}
 8001ec8:	46c0      	nop			; (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b003      	add	sp, #12
 8001ece:	bd90      	pop	{r4, r7, pc}
 8001ed0:	e000e100 	.word	0xe000e100
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	1e5a      	subs	r2, r3, #1
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	045b      	lsls	r3, r3, #17
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d301      	bcc.n	8001ef0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eec:	2301      	movs	r3, #1
 8001eee:	e010      	b.n	8001f12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <SysTick_Config+0x44>)
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	3a01      	subs	r2, #1
 8001ef6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef8:	2301      	movs	r3, #1
 8001efa:	425b      	negs	r3, r3
 8001efc:	2103      	movs	r1, #3
 8001efe:	0018      	movs	r0, r3
 8001f00:	f7ff ff7c 	bl	8001dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <SysTick_Config+0x44>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <SysTick_Config+0x44>)
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b002      	add	sp, #8
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	e000e010 	.word	0xe000e010

08001f20 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	187b      	adds	r3, r7, r1
 8001f2e:	1c02      	adds	r2, r0, #0
 8001f30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7ff ff5d 	bl	8001dfc <__NVIC_SetPriority>
}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b004      	add	sp, #16
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	0002      	movs	r2, r0
 8001f52:	1dfb      	adds	r3, r7, #7
 8001f54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f56:	1dfb      	adds	r3, r7, #7
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	b25b      	sxtb	r3, r3
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f7ff ff33 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b002      	add	sp, #8
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	0018      	movs	r0, r3
 8001f76:	f7ff ffaf 	bl	8001ed8 <SysTick_Config>
 8001f7a:	0003      	movs	r3, r0
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b002      	add	sp, #8
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8c:	230f      	movs	r3, #15
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2225      	movs	r2, #37	; 0x25
 8001f98:	5c9b      	ldrb	r3, [r3, r2]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d008      	beq.n	8001fb2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2204      	movs	r2, #4
 8001fa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2224      	movs	r2, #36	; 0x24
 8001faa:	2100      	movs	r1, #0
 8001fac:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e024      	b.n	8001ffc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	210e      	movs	r1, #14
 8001fbe:	438a      	bics	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2101      	movs	r1, #1
 8001fce:	438a      	bics	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	221c      	movs	r2, #28
 8001fd8:	401a      	ands	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	2101      	movs	r1, #1
 8001fe0:	4091      	lsls	r1, r2
 8001fe2:	000a      	movs	r2, r1
 8001fe4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2225      	movs	r2, #37	; 0x25
 8001fea:	2101      	movs	r1, #1
 8001fec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2224      	movs	r2, #36	; 0x24
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	5499      	strb	r1, [r3, r2]

    return status;
 8001ff6:	230f      	movs	r3, #15
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b004      	add	sp, #16
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800200c:	210f      	movs	r1, #15
 800200e:	187b      	adds	r3, r7, r1
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2225      	movs	r2, #37	; 0x25
 8002018:	5c9b      	ldrb	r3, [r3, r2]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d006      	beq.n	800202e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2204      	movs	r2, #4
 8002024:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002026:	187b      	adds	r3, r7, r1
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	e02a      	b.n	8002084 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	210e      	movs	r1, #14
 800203a:	438a      	bics	r2, r1
 800203c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2101      	movs	r1, #1
 800204a:	438a      	bics	r2, r1
 800204c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	221c      	movs	r2, #28
 8002054:	401a      	ands	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2101      	movs	r1, #1
 800205c:	4091      	lsls	r1, r2
 800205e:	000a      	movs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2225      	movs	r2, #37	; 0x25
 8002066:	2101      	movs	r1, #1
 8002068:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2224      	movs	r2, #36	; 0x24
 800206e:	2100      	movs	r1, #0
 8002070:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	2b00      	cmp	r3, #0
 8002078:	d004      	beq.n	8002084 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	0010      	movs	r0, r2
 8002082:	4798      	blx	r3
    }
  }
  return status;
 8002084:	230f      	movs	r3, #15
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	781b      	ldrb	r3, [r3, #0]
}
 800208a:	0018      	movs	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	b004      	add	sp, #16
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80020aa:	e155      	b.n	8002358 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2101      	movs	r1, #1
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4091      	lsls	r1, r2
 80020b6:	000a      	movs	r2, r1
 80020b8:	4013      	ands	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d100      	bne.n	80020c4 <HAL_GPIO_Init+0x30>
 80020c2:	e146      	b.n	8002352 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2203      	movs	r2, #3
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d005      	beq.n	80020dc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2203      	movs	r2, #3
 80020d6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d130      	bne.n	800213e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	409a      	lsls	r2, r3
 80020ea:	0013      	movs	r3, r2
 80020ec:	43da      	mvns	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	409a      	lsls	r2, r3
 80020fe:	0013      	movs	r3, r2
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002112:	2201      	movs	r2, #1
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	409a      	lsls	r2, r3
 8002118:	0013      	movs	r3, r2
 800211a:	43da      	mvns	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	2201      	movs	r2, #1
 800212a:	401a      	ands	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	409a      	lsls	r2, r3
 8002130:	0013      	movs	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2203      	movs	r2, #3
 8002144:	4013      	ands	r3, r2
 8002146:	2b03      	cmp	r3, #3
 8002148:	d017      	beq.n	800217a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	2203      	movs	r2, #3
 8002156:	409a      	lsls	r2, r3
 8002158:	0013      	movs	r3, r2
 800215a:	43da      	mvns	r2, r3
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	409a      	lsls	r2, r3
 800216c:	0013      	movs	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2203      	movs	r2, #3
 8002180:	4013      	ands	r3, r2
 8002182:	2b02      	cmp	r3, #2
 8002184:	d123      	bne.n	80021ce <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	08da      	lsrs	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3208      	adds	r2, #8
 800218e:	0092      	lsls	r2, r2, #2
 8002190:	58d3      	ldr	r3, [r2, r3]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2207      	movs	r2, #7
 8002198:	4013      	ands	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	409a      	lsls	r2, r3
 80021a0:	0013      	movs	r3, r2
 80021a2:	43da      	mvns	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2107      	movs	r1, #7
 80021b2:	400b      	ands	r3, r1
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	409a      	lsls	r2, r3
 80021b8:	0013      	movs	r3, r2
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	6939      	ldr	r1, [r7, #16]
 80021cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	409a      	lsls	r2, r3
 80021dc:	0013      	movs	r3, r2
 80021de:	43da      	mvns	r2, r3
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2203      	movs	r2, #3
 80021ec:	401a      	ands	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	409a      	lsls	r2, r3
 80021f4:	0013      	movs	r3, r2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	23c0      	movs	r3, #192	; 0xc0
 8002208:	029b      	lsls	r3, r3, #10
 800220a:	4013      	ands	r3, r2
 800220c:	d100      	bne.n	8002210 <HAL_GPIO_Init+0x17c>
 800220e:	e0a0      	b.n	8002352 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002210:	4b57      	ldr	r3, [pc, #348]	; (8002370 <HAL_GPIO_Init+0x2dc>)
 8002212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002214:	4b56      	ldr	r3, [pc, #344]	; (8002370 <HAL_GPIO_Init+0x2dc>)
 8002216:	2101      	movs	r1, #1
 8002218:	430a      	orrs	r2, r1
 800221a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800221c:	4a55      	ldr	r2, [pc, #340]	; (8002374 <HAL_GPIO_Init+0x2e0>)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	3302      	adds	r3, #2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	589b      	ldr	r3, [r3, r2]
 8002228:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2203      	movs	r2, #3
 800222e:	4013      	ands	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	220f      	movs	r2, #15
 8002234:	409a      	lsls	r2, r3
 8002236:	0013      	movs	r3, r2
 8002238:	43da      	mvns	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	23a0      	movs	r3, #160	; 0xa0
 8002244:	05db      	lsls	r3, r3, #23
 8002246:	429a      	cmp	r2, r3
 8002248:	d01f      	beq.n	800228a <HAL_GPIO_Init+0x1f6>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4a      	ldr	r2, [pc, #296]	; (8002378 <HAL_GPIO_Init+0x2e4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d019      	beq.n	8002286 <HAL_GPIO_Init+0x1f2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a49      	ldr	r2, [pc, #292]	; (800237c <HAL_GPIO_Init+0x2e8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d013      	beq.n	8002282 <HAL_GPIO_Init+0x1ee>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a48      	ldr	r2, [pc, #288]	; (8002380 <HAL_GPIO_Init+0x2ec>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00d      	beq.n	800227e <HAL_GPIO_Init+0x1ea>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a47      	ldr	r2, [pc, #284]	; (8002384 <HAL_GPIO_Init+0x2f0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d007      	beq.n	800227a <HAL_GPIO_Init+0x1e6>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a46      	ldr	r2, [pc, #280]	; (8002388 <HAL_GPIO_Init+0x2f4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_GPIO_Init+0x1e2>
 8002272:	2305      	movs	r3, #5
 8002274:	e00a      	b.n	800228c <HAL_GPIO_Init+0x1f8>
 8002276:	2306      	movs	r3, #6
 8002278:	e008      	b.n	800228c <HAL_GPIO_Init+0x1f8>
 800227a:	2304      	movs	r3, #4
 800227c:	e006      	b.n	800228c <HAL_GPIO_Init+0x1f8>
 800227e:	2303      	movs	r3, #3
 8002280:	e004      	b.n	800228c <HAL_GPIO_Init+0x1f8>
 8002282:	2302      	movs	r3, #2
 8002284:	e002      	b.n	800228c <HAL_GPIO_Init+0x1f8>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_GPIO_Init+0x1f8>
 800228a:	2300      	movs	r3, #0
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	2103      	movs	r1, #3
 8002290:	400a      	ands	r2, r1
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	4093      	lsls	r3, r2
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800229c:	4935      	ldr	r1, [pc, #212]	; (8002374 <HAL_GPIO_Init+0x2e0>)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	3302      	adds	r3, #2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022aa:	4b38      	ldr	r3, [pc, #224]	; (800238c <HAL_GPIO_Init+0x2f8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	43da      	mvns	r2, r3
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	025b      	lsls	r3, r3, #9
 80022c2:	4013      	ands	r3, r2
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022ce:	4b2f      	ldr	r3, [pc, #188]	; (800238c <HAL_GPIO_Init+0x2f8>)
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80022d4:	4b2d      	ldr	r3, [pc, #180]	; (800238c <HAL_GPIO_Init+0x2f8>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	43da      	mvns	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	029b      	lsls	r3, r3, #10
 80022ec:	4013      	ands	r3, r2
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_GPIO_Init+0x2f8>)
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022fe:	4b23      	ldr	r3, [pc, #140]	; (800238c <HAL_GPIO_Init+0x2f8>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	43da      	mvns	r2, r3
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	035b      	lsls	r3, r3, #13
 8002316:	4013      	ands	r3, r2
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <HAL_GPIO_Init+0x2f8>)
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002328:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_GPIO_Init+0x2f8>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	43da      	mvns	r2, r3
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	039b      	lsls	r3, r3, #14
 8002340:	4013      	ands	r3, r2
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <HAL_GPIO_Init+0x2f8>)
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3301      	adds	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	40da      	lsrs	r2, r3
 8002360:	1e13      	subs	r3, r2, #0
 8002362:	d000      	beq.n	8002366 <HAL_GPIO_Init+0x2d2>
 8002364:	e6a2      	b.n	80020ac <HAL_GPIO_Init+0x18>
  }
}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	46c0      	nop			; (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	b006      	add	sp, #24
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	40010000 	.word	0x40010000
 8002378:	50000400 	.word	0x50000400
 800237c:	50000800 	.word	0x50000800
 8002380:	50000c00 	.word	0x50000c00
 8002384:	50001000 	.word	0x50001000
 8002388:	50001c00 	.word	0x50001c00
 800238c:	40010400 	.word	0x40010400

08002390 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	000a      	movs	r2, r1
 800239a:	1cbb      	adds	r3, r7, #2
 800239c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	1cba      	adds	r2, r7, #2
 80023a4:	8812      	ldrh	r2, [r2, #0]
 80023a6:	4013      	ands	r3, r2
 80023a8:	d004      	beq.n	80023b4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80023aa:	230f      	movs	r3, #15
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e003      	b.n	80023bc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023b4:	230f      	movs	r3, #15
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80023bc:	230f      	movs	r3, #15
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	781b      	ldrb	r3, [r3, #0]
}
 80023c2:	0018      	movs	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b004      	add	sp, #16
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	0008      	movs	r0, r1
 80023d4:	0011      	movs	r1, r2
 80023d6:	1cbb      	adds	r3, r7, #2
 80023d8:	1c02      	adds	r2, r0, #0
 80023da:	801a      	strh	r2, [r3, #0]
 80023dc:	1c7b      	adds	r3, r7, #1
 80023de:	1c0a      	adds	r2, r1, #0
 80023e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023e2:	1c7b      	adds	r3, r7, #1
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d004      	beq.n	80023f4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ea:	1cbb      	adds	r3, r7, #2
 80023ec:	881a      	ldrh	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80023f2:	e003      	b.n	80023fc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80023f4:	1cbb      	adds	r3, r7, #2
 80023f6:	881a      	ldrh	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023fc:	46c0      	nop			; (mov r8, r8)
 80023fe:	46bd      	mov	sp, r7
 8002400:	b002      	add	sp, #8
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	000a      	movs	r2, r1
 800240e:	1cbb      	adds	r3, r7, #2
 8002410:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002418:	1cbb      	adds	r3, r7, #2
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4013      	ands	r3, r2
 8002420:	041a      	lsls	r2, r3, #16
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	43db      	mvns	r3, r3
 8002426:	1cb9      	adds	r1, r7, #2
 8002428:	8809      	ldrh	r1, [r1, #0]
 800242a:	400b      	ands	r3, r1
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	619a      	str	r2, [r3, #24]
}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b004      	add	sp, #16
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800243c:	b5b0      	push	{r4, r5, r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	f000 fbbf 	bl	8002bce <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002450:	4bc9      	ldr	r3, [pc, #804]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	220c      	movs	r2, #12
 8002456:	4013      	ands	r3, r2
 8002458:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800245a:	4bc7      	ldr	r3, [pc, #796]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	025b      	lsls	r3, r3, #9
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2201      	movs	r2, #1
 800246c:	4013      	ands	r3, r2
 800246e:	d100      	bne.n	8002472 <HAL_RCC_OscConfig+0x36>
 8002470:	e07e      	b.n	8002570 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	2b08      	cmp	r3, #8
 8002476:	d007      	beq.n	8002488 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d112      	bne.n	80024a4 <HAL_RCC_OscConfig+0x68>
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	025b      	lsls	r3, r3, #9
 8002484:	429a      	cmp	r2, r3
 8002486:	d10d      	bne.n	80024a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	4bbb      	ldr	r3, [pc, #748]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	029b      	lsls	r3, r3, #10
 8002490:	4013      	ands	r3, r2
 8002492:	d100      	bne.n	8002496 <HAL_RCC_OscConfig+0x5a>
 8002494:	e06b      	b.n	800256e <HAL_RCC_OscConfig+0x132>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d167      	bne.n	800256e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	f000 fb95 	bl	8002bce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	025b      	lsls	r3, r3, #9
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d107      	bne.n	80024c0 <HAL_RCC_OscConfig+0x84>
 80024b0:	4bb1      	ldr	r3, [pc, #708]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4bb0      	ldr	r3, [pc, #704]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80024b6:	2180      	movs	r1, #128	; 0x80
 80024b8:	0249      	lsls	r1, r1, #9
 80024ba:	430a      	orrs	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e027      	b.n	8002510 <HAL_RCC_OscConfig+0xd4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	23a0      	movs	r3, #160	; 0xa0
 80024c6:	02db      	lsls	r3, r3, #11
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d10e      	bne.n	80024ea <HAL_RCC_OscConfig+0xae>
 80024cc:	4baa      	ldr	r3, [pc, #680]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4ba9      	ldr	r3, [pc, #676]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80024d2:	2180      	movs	r1, #128	; 0x80
 80024d4:	02c9      	lsls	r1, r1, #11
 80024d6:	430a      	orrs	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	4ba7      	ldr	r3, [pc, #668]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4ba6      	ldr	r3, [pc, #664]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80024e0:	2180      	movs	r1, #128	; 0x80
 80024e2:	0249      	lsls	r1, r1, #9
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e012      	b.n	8002510 <HAL_RCC_OscConfig+0xd4>
 80024ea:	4ba3      	ldr	r3, [pc, #652]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4ba2      	ldr	r3, [pc, #648]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80024f0:	49a2      	ldr	r1, [pc, #648]	; (800277c <HAL_RCC_OscConfig+0x340>)
 80024f2:	400a      	ands	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	4ba0      	ldr	r3, [pc, #640]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	025b      	lsls	r3, r3, #9
 80024fe:	4013      	ands	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4b9c      	ldr	r3, [pc, #624]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b9b      	ldr	r3, [pc, #620]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 800250a:	499d      	ldr	r1, [pc, #628]	; (8002780 <HAL_RCC_OscConfig+0x344>)
 800250c:	400a      	ands	r2, r1
 800250e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d015      	beq.n	8002544 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7ff fc28 	bl	8001d6c <HAL_GetTick>
 800251c:	0003      	movs	r3, r0
 800251e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002520:	e009      	b.n	8002536 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002522:	f7ff fc23 	bl	8001d6c <HAL_GetTick>
 8002526:	0002      	movs	r2, r0
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b64      	cmp	r3, #100	; 0x64
 800252e:	d902      	bls.n	8002536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	f000 fb4c 	bl	8002bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002536:	4b90      	ldr	r3, [pc, #576]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	029b      	lsls	r3, r3, #10
 800253e:	4013      	ands	r3, r2
 8002540:	d0ef      	beq.n	8002522 <HAL_RCC_OscConfig+0xe6>
 8002542:	e015      	b.n	8002570 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff fc12 	bl	8001d6c <HAL_GetTick>
 8002548:	0003      	movs	r3, r0
 800254a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800254e:	f7ff fc0d 	bl	8001d6c <HAL_GetTick>
 8002552:	0002      	movs	r2, r0
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b64      	cmp	r3, #100	; 0x64
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e336      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002560:	4b85      	ldr	r3, [pc, #532]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	029b      	lsls	r3, r3, #10
 8002568:	4013      	ands	r3, r2
 800256a:	d1f0      	bne.n	800254e <HAL_RCC_OscConfig+0x112>
 800256c:	e000      	b.n	8002570 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2202      	movs	r2, #2
 8002576:	4013      	ands	r3, r2
 8002578:	d100      	bne.n	800257c <HAL_RCC_OscConfig+0x140>
 800257a:	e099      	b.n	80026b0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	2220      	movs	r2, #32
 8002586:	4013      	ands	r3, r2
 8002588:	d009      	beq.n	800259e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800258a:	4b7b      	ldr	r3, [pc, #492]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4b7a      	ldr	r3, [pc, #488]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 8002590:	2120      	movs	r1, #32
 8002592:	430a      	orrs	r2, r1
 8002594:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	2220      	movs	r2, #32
 800259a:	4393      	bics	r3, r2
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	d13e      	bne.n	8002628 <HAL_RCC_OscConfig+0x1ec>
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d13b      	bne.n	8002628 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80025b0:	4b71      	ldr	r3, [pc, #452]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2204      	movs	r2, #4
 80025b6:	4013      	ands	r3, r2
 80025b8:	d004      	beq.n	80025c4 <HAL_RCC_OscConfig+0x188>
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e304      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c4:	4b6c      	ldr	r3, [pc, #432]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a6e      	ldr	r2, [pc, #440]	; (8002784 <HAL_RCC_OscConfig+0x348>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	021a      	lsls	r2, r3, #8
 80025d4:	4b68      	ldr	r3, [pc, #416]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80025d6:	430a      	orrs	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80025da:	4b67      	ldr	r3, [pc, #412]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2209      	movs	r2, #9
 80025e0:	4393      	bics	r3, r2
 80025e2:	0019      	movs	r1, r3
 80025e4:	4b64      	ldr	r3, [pc, #400]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80025e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e8:	430a      	orrs	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ec:	f000 fc42 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 80025f0:	0001      	movs	r1, r0
 80025f2:	4b61      	ldr	r3, [pc, #388]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	220f      	movs	r2, #15
 80025fa:	4013      	ands	r3, r2
 80025fc:	4a62      	ldr	r2, [pc, #392]	; (8002788 <HAL_RCC_OscConfig+0x34c>)
 80025fe:	5cd3      	ldrb	r3, [r2, r3]
 8002600:	000a      	movs	r2, r1
 8002602:	40da      	lsrs	r2, r3
 8002604:	4b61      	ldr	r3, [pc, #388]	; (800278c <HAL_RCC_OscConfig+0x350>)
 8002606:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002608:	4b61      	ldr	r3, [pc, #388]	; (8002790 <HAL_RCC_OscConfig+0x354>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2513      	movs	r5, #19
 800260e:	197c      	adds	r4, r7, r5
 8002610:	0018      	movs	r0, r3
 8002612:	f7ff fb65 	bl	8001ce0 <HAL_InitTick>
 8002616:	0003      	movs	r3, r0
 8002618:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800261a:	197b      	adds	r3, r7, r5
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d046      	beq.n	80026b0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002622:	197b      	adds	r3, r7, r5
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	e2d2      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	2b00      	cmp	r3, #0
 800262c:	d027      	beq.n	800267e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800262e:	4b52      	ldr	r3, [pc, #328]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2209      	movs	r2, #9
 8002634:	4393      	bics	r3, r2
 8002636:	0019      	movs	r1, r3
 8002638:	4b4f      	ldr	r3, [pc, #316]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 800263a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7ff fb94 	bl	8001d6c <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264a:	f7ff fb8f 	bl	8001d6c <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e2b8      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800265c:	4b46      	ldr	r3, [pc, #280]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2204      	movs	r2, #4
 8002662:	4013      	ands	r3, r2
 8002664:	d0f1      	beq.n	800264a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002666:	4b44      	ldr	r3, [pc, #272]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a46      	ldr	r2, [pc, #280]	; (8002784 <HAL_RCC_OscConfig+0x348>)
 800266c:	4013      	ands	r3, r2
 800266e:	0019      	movs	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	021a      	lsls	r2, r3, #8
 8002676:	4b40      	ldr	r3, [pc, #256]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 8002678:	430a      	orrs	r2, r1
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	e018      	b.n	80026b0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267e:	4b3e      	ldr	r3, [pc, #248]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 8002684:	2101      	movs	r1, #1
 8002686:	438a      	bics	r2, r1
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7ff fb6f 	bl	8001d6c <HAL_GetTick>
 800268e:	0003      	movs	r3, r0
 8002690:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002694:	f7ff fb6a 	bl	8001d6c <HAL_GetTick>
 8002698:	0002      	movs	r2, r0
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e293      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026a6:	4b34      	ldr	r3, [pc, #208]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2204      	movs	r2, #4
 80026ac:	4013      	ands	r3, r2
 80026ae:	d1f1      	bne.n	8002694 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2210      	movs	r2, #16
 80026b6:	4013      	ands	r3, r2
 80026b8:	d100      	bne.n	80026bc <HAL_RCC_OscConfig+0x280>
 80026ba:	e0a2      	b.n	8002802 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d140      	bne.n	8002744 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026c2:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4013      	ands	r3, r2
 80026cc:	d005      	beq.n	80026da <HAL_RCC_OscConfig+0x29e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e279      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026da:	4b27      	ldr	r3, [pc, #156]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4a2d      	ldr	r2, [pc, #180]	; (8002794 <HAL_RCC_OscConfig+0x358>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	0019      	movs	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026e8:	4b23      	ldr	r3, [pc, #140]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80026ea:	430a      	orrs	r2, r1
 80026ec:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ee:	4b22      	ldr	r3, [pc, #136]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	0a19      	lsrs	r1, r3, #8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	061a      	lsls	r2, r3, #24
 80026fc:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	0b5b      	lsrs	r3, r3, #13
 8002708:	3301      	adds	r3, #1
 800270a:	2280      	movs	r2, #128	; 0x80
 800270c:	0212      	lsls	r2, r2, #8
 800270e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	210f      	movs	r1, #15
 8002718:	400b      	ands	r3, r1
 800271a:	491b      	ldr	r1, [pc, #108]	; (8002788 <HAL_RCC_OscConfig+0x34c>)
 800271c:	5ccb      	ldrb	r3, [r1, r3]
 800271e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002720:	4b1a      	ldr	r3, [pc, #104]	; (800278c <HAL_RCC_OscConfig+0x350>)
 8002722:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <HAL_RCC_OscConfig+0x354>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2513      	movs	r5, #19
 800272a:	197c      	adds	r4, r7, r5
 800272c:	0018      	movs	r0, r3
 800272e:	f7ff fad7 	bl	8001ce0 <HAL_InitTick>
 8002732:	0003      	movs	r3, r0
 8002734:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002736:	197b      	adds	r3, r7, r5
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d061      	beq.n	8002802 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800273e:	197b      	adds	r3, r7, r5
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	e244      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d040      	beq.n	80027ce <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 8002752:	2180      	movs	r1, #128	; 0x80
 8002754:	0049      	lsls	r1, r1, #1
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7ff fb07 	bl	8001d6c <HAL_GetTick>
 800275e:	0003      	movs	r3, r0
 8002760:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002762:	e019      	b.n	8002798 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002764:	f7ff fb02 	bl	8001d6c <HAL_GetTick>
 8002768:	0002      	movs	r2, r0
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d912      	bls.n	8002798 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e22b      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	40021000 	.word	0x40021000
 800277c:	fffeffff 	.word	0xfffeffff
 8002780:	fffbffff 	.word	0xfffbffff
 8002784:	ffffe0ff 	.word	0xffffe0ff
 8002788:	08005c50 	.word	0x08005c50
 800278c:	200001b4 	.word	0x200001b4
 8002790:	200001b8 	.word	0x200001b8
 8002794:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002798:	4bca      	ldr	r3, [pc, #808]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4013      	ands	r3, r2
 80027a2:	d0df      	beq.n	8002764 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a4:	4bc7      	ldr	r3, [pc, #796]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4ac7      	ldr	r2, [pc, #796]	; (8002ac8 <HAL_RCC_OscConfig+0x68c>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	0019      	movs	r1, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b2:	4bc4      	ldr	r3, [pc, #784]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 80027b4:	430a      	orrs	r2, r1
 80027b6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027b8:	4bc2      	ldr	r3, [pc, #776]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	0a19      	lsrs	r1, r3, #8
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	061a      	lsls	r2, r3, #24
 80027c6:	4bbf      	ldr	r3, [pc, #764]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 80027c8:	430a      	orrs	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	e019      	b.n	8002802 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027ce:	4bbd      	ldr	r3, [pc, #756]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4bbc      	ldr	r3, [pc, #752]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 80027d4:	49bd      	ldr	r1, [pc, #756]	; (8002acc <HAL_RCC_OscConfig+0x690>)
 80027d6:	400a      	ands	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027da:	f7ff fac7 	bl	8001d6c <HAL_GetTick>
 80027de:	0003      	movs	r3, r0
 80027e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027e4:	f7ff fac2 	bl	8001d6c <HAL_GetTick>
 80027e8:	0002      	movs	r2, r0
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e1eb      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027f6:	4bb3      	ldr	r3, [pc, #716]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4013      	ands	r3, r2
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2208      	movs	r2, #8
 8002808:	4013      	ands	r3, r2
 800280a:	d036      	beq.n	800287a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d019      	beq.n	8002848 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002814:	4bab      	ldr	r3, [pc, #684]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002816:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002818:	4baa      	ldr	r3, [pc, #680]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 800281a:	2101      	movs	r1, #1
 800281c:	430a      	orrs	r2, r1
 800281e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002820:	f7ff faa4 	bl	8001d6c <HAL_GetTick>
 8002824:	0003      	movs	r3, r0
 8002826:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282a:	f7ff fa9f 	bl	8001d6c <HAL_GetTick>
 800282e:	0002      	movs	r2, r0
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e1c8      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800283c:	4ba1      	ldr	r3, [pc, #644]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 800283e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002840:	2202      	movs	r2, #2
 8002842:	4013      	ands	r3, r2
 8002844:	d0f1      	beq.n	800282a <HAL_RCC_OscConfig+0x3ee>
 8002846:	e018      	b.n	800287a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002848:	4b9e      	ldr	r3, [pc, #632]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 800284a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800284c:	4b9d      	ldr	r3, [pc, #628]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 800284e:	2101      	movs	r1, #1
 8002850:	438a      	bics	r2, r1
 8002852:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7ff fa8a 	bl	8001d6c <HAL_GetTick>
 8002858:	0003      	movs	r3, r0
 800285a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800285e:	f7ff fa85 	bl	8001d6c <HAL_GetTick>
 8002862:	0002      	movs	r2, r0
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e1ae      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002870:	4b94      	ldr	r3, [pc, #592]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002874:	2202      	movs	r2, #2
 8002876:	4013      	ands	r3, r2
 8002878:	d1f1      	bne.n	800285e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2204      	movs	r2, #4
 8002880:	4013      	ands	r3, r2
 8002882:	d100      	bne.n	8002886 <HAL_RCC_OscConfig+0x44a>
 8002884:	e0ae      	b.n	80029e4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002886:	2023      	movs	r0, #35	; 0x23
 8002888:	183b      	adds	r3, r7, r0
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288e:	4b8d      	ldr	r3, [pc, #564]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	055b      	lsls	r3, r3, #21
 8002896:	4013      	ands	r3, r2
 8002898:	d109      	bne.n	80028ae <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	4b8a      	ldr	r3, [pc, #552]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 800289c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800289e:	4b89      	ldr	r3, [pc, #548]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 80028a0:	2180      	movs	r1, #128	; 0x80
 80028a2:	0549      	lsls	r1, r1, #21
 80028a4:	430a      	orrs	r2, r1
 80028a6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80028a8:	183b      	adds	r3, r7, r0
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	4b88      	ldr	r3, [pc, #544]	; (8002ad0 <HAL_RCC_OscConfig+0x694>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4013      	ands	r3, r2
 80028b8:	d11a      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ba:	4b85      	ldr	r3, [pc, #532]	; (8002ad0 <HAL_RCC_OscConfig+0x694>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4b84      	ldr	r3, [pc, #528]	; (8002ad0 <HAL_RCC_OscConfig+0x694>)
 80028c0:	2180      	movs	r1, #128	; 0x80
 80028c2:	0049      	lsls	r1, r1, #1
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c8:	f7ff fa50 	bl	8001d6c <HAL_GetTick>
 80028cc:	0003      	movs	r3, r0
 80028ce:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d2:	f7ff fa4b 	bl	8001d6c <HAL_GetTick>
 80028d6:	0002      	movs	r2, r0
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b64      	cmp	r3, #100	; 0x64
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e174      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	4b7a      	ldr	r3, [pc, #488]	; (8002ad0 <HAL_RCC_OscConfig+0x694>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4013      	ands	r3, r2
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d107      	bne.n	800290c <HAL_RCC_OscConfig+0x4d0>
 80028fc:	4b71      	ldr	r3, [pc, #452]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 80028fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002900:	4b70      	ldr	r3, [pc, #448]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	0049      	lsls	r1, r1, #1
 8002906:	430a      	orrs	r2, r1
 8002908:	651a      	str	r2, [r3, #80]	; 0x50
 800290a:	e031      	b.n	8002970 <HAL_RCC_OscConfig+0x534>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10c      	bne.n	800292e <HAL_RCC_OscConfig+0x4f2>
 8002914:	4b6b      	ldr	r3, [pc, #428]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002916:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002918:	4b6a      	ldr	r3, [pc, #424]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 800291a:	496c      	ldr	r1, [pc, #432]	; (8002acc <HAL_RCC_OscConfig+0x690>)
 800291c:	400a      	ands	r2, r1
 800291e:	651a      	str	r2, [r3, #80]	; 0x50
 8002920:	4b68      	ldr	r3, [pc, #416]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002922:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002924:	4b67      	ldr	r3, [pc, #412]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002926:	496b      	ldr	r1, [pc, #428]	; (8002ad4 <HAL_RCC_OscConfig+0x698>)
 8002928:	400a      	ands	r2, r1
 800292a:	651a      	str	r2, [r3, #80]	; 0x50
 800292c:	e020      	b.n	8002970 <HAL_RCC_OscConfig+0x534>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	23a0      	movs	r3, #160	; 0xa0
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	429a      	cmp	r2, r3
 8002938:	d10e      	bne.n	8002958 <HAL_RCC_OscConfig+0x51c>
 800293a:	4b62      	ldr	r3, [pc, #392]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 800293c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800293e:	4b61      	ldr	r3, [pc, #388]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002940:	2180      	movs	r1, #128	; 0x80
 8002942:	00c9      	lsls	r1, r1, #3
 8002944:	430a      	orrs	r2, r1
 8002946:	651a      	str	r2, [r3, #80]	; 0x50
 8002948:	4b5e      	ldr	r3, [pc, #376]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 800294a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800294c:	4b5d      	ldr	r3, [pc, #372]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 800294e:	2180      	movs	r1, #128	; 0x80
 8002950:	0049      	lsls	r1, r1, #1
 8002952:	430a      	orrs	r2, r1
 8002954:	651a      	str	r2, [r3, #80]	; 0x50
 8002956:	e00b      	b.n	8002970 <HAL_RCC_OscConfig+0x534>
 8002958:	4b5a      	ldr	r3, [pc, #360]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 800295a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800295c:	4b59      	ldr	r3, [pc, #356]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 800295e:	495b      	ldr	r1, [pc, #364]	; (8002acc <HAL_RCC_OscConfig+0x690>)
 8002960:	400a      	ands	r2, r1
 8002962:	651a      	str	r2, [r3, #80]	; 0x50
 8002964:	4b57      	ldr	r3, [pc, #348]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002966:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002968:	4b56      	ldr	r3, [pc, #344]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 800296a:	495a      	ldr	r1, [pc, #360]	; (8002ad4 <HAL_RCC_OscConfig+0x698>)
 800296c:	400a      	ands	r2, r1
 800296e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d015      	beq.n	80029a4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002978:	f7ff f9f8 	bl	8001d6c <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002980:	e009      	b.n	8002996 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7ff f9f3 	bl	8001d6c <HAL_GetTick>
 8002986:	0002      	movs	r2, r0
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	4a52      	ldr	r2, [pc, #328]	; (8002ad8 <HAL_RCC_OscConfig+0x69c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e11b      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002996:	4b4b      	ldr	r3, [pc, #300]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4013      	ands	r3, r2
 80029a0:	d0ef      	beq.n	8002982 <HAL_RCC_OscConfig+0x546>
 80029a2:	e014      	b.n	80029ce <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a4:	f7ff f9e2 	bl	8001d6c <HAL_GetTick>
 80029a8:	0003      	movs	r3, r0
 80029aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ac:	e009      	b.n	80029c2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7ff f9dd 	bl	8001d6c <HAL_GetTick>
 80029b2:	0002      	movs	r2, r0
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	4a47      	ldr	r2, [pc, #284]	; (8002ad8 <HAL_RCC_OscConfig+0x69c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e105      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029c2:	4b40      	ldr	r3, [pc, #256]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 80029c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4013      	ands	r3, r2
 80029cc:	d1ef      	bne.n	80029ae <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029ce:	2323      	movs	r3, #35	; 0x23
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d105      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d8:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 80029da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029dc:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 80029de:	493f      	ldr	r1, [pc, #252]	; (8002adc <HAL_RCC_OscConfig+0x6a0>)
 80029e0:	400a      	ands	r2, r1
 80029e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2220      	movs	r2, #32
 80029ea:	4013      	ands	r3, r2
 80029ec:	d049      	beq.n	8002a82 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d026      	beq.n	8002a44 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80029f6:	4b33      	ldr	r3, [pc, #204]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	4b32      	ldr	r3, [pc, #200]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 80029fc:	2101      	movs	r1, #1
 80029fe:	430a      	orrs	r2, r1
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a06:	4b2f      	ldr	r3, [pc, #188]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002a08:	2101      	movs	r1, #1
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a0e:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <HAL_RCC_OscConfig+0x6a4>)
 8002a10:	6a1a      	ldr	r2, [r3, #32]
 8002a12:	4b33      	ldr	r3, [pc, #204]	; (8002ae0 <HAL_RCC_OscConfig+0x6a4>)
 8002a14:	2180      	movs	r1, #128	; 0x80
 8002a16:	0189      	lsls	r1, r1, #6
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7ff f9a6 	bl	8001d6c <HAL_GetTick>
 8002a20:	0003      	movs	r3, r0
 8002a22:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a26:	f7ff f9a1 	bl	8001d6c <HAL_GetTick>
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0ca      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a38:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d0f1      	beq.n	8002a26 <HAL_RCC_OscConfig+0x5ea>
 8002a42:	e01e      	b.n	8002a82 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002a44:	4b1f      	ldr	r3, [pc, #124]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	438a      	bics	r2, r1
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <HAL_RCC_OscConfig+0x6a4>)
 8002a52:	6a1a      	ldr	r2, [r3, #32]
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_RCC_OscConfig+0x6a4>)
 8002a56:	4923      	ldr	r1, [pc, #140]	; (8002ae4 <HAL_RCC_OscConfig+0x6a8>)
 8002a58:	400a      	ands	r2, r1
 8002a5a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7ff f986 	bl	8001d6c <HAL_GetTick>
 8002a60:	0003      	movs	r3, r0
 8002a62:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a66:	f7ff f981 	bl	8001d6c <HAL_GetTick>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e0aa      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d1f1      	bne.n	8002a66 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d100      	bne.n	8002a8c <HAL_RCC_OscConfig+0x650>
 8002a8a:	e09f      	b.n	8002bcc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b0c      	cmp	r3, #12
 8002a90:	d100      	bne.n	8002a94 <HAL_RCC_OscConfig+0x658>
 8002a92:	e078      	b.n	8002b86 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d159      	bne.n	8002b50 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 8002aa2:	4911      	ldr	r1, [pc, #68]	; (8002ae8 <HAL_RCC_OscConfig+0x6ac>)
 8002aa4:	400a      	ands	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7ff f960 	bl	8001d6c <HAL_GetTick>
 8002aac:	0003      	movs	r3, r0
 8002aae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ab0:	e01c      	b.n	8002aec <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab2:	f7ff f95b 	bl	8001d6c <HAL_GetTick>
 8002ab6:	0002      	movs	r2, r0
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d915      	bls.n	8002aec <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e084      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	ffff1fff 	.word	0xffff1fff
 8002acc:	fffffeff 	.word	0xfffffeff
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	fffffbff 	.word	0xfffffbff
 8002ad8:	00001388 	.word	0x00001388
 8002adc:	efffffff 	.word	0xefffffff
 8002ae0:	40010000 	.word	0x40010000
 8002ae4:	ffffdfff 	.word	0xffffdfff
 8002ae8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002aec:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <HAL_RCC_OscConfig+0x79c>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	049b      	lsls	r3, r3, #18
 8002af4:	4013      	ands	r3, r2
 8002af6:	d1dc      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af8:	4b37      	ldr	r3, [pc, #220]	; (8002bd8 <HAL_RCC_OscConfig+0x79c>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a37      	ldr	r2, [pc, #220]	; (8002bdc <HAL_RCC_OscConfig+0x7a0>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b10:	431a      	orrs	r2, r3
 8002b12:	4b31      	ldr	r3, [pc, #196]	; (8002bd8 <HAL_RCC_OscConfig+0x79c>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b18:	4b2f      	ldr	r3, [pc, #188]	; (8002bd8 <HAL_RCC_OscConfig+0x79c>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b2e      	ldr	r3, [pc, #184]	; (8002bd8 <HAL_RCC_OscConfig+0x79c>)
 8002b1e:	2180      	movs	r1, #128	; 0x80
 8002b20:	0449      	lsls	r1, r1, #17
 8002b22:	430a      	orrs	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7ff f921 	bl	8001d6c <HAL_GetTick>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b30:	f7ff f91c 	bl	8001d6c <HAL_GetTick>
 8002b34:	0002      	movs	r2, r0
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e045      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b42:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <HAL_RCC_OscConfig+0x79c>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	049b      	lsls	r3, r3, #18
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x6f4>
 8002b4e:	e03d      	b.n	8002bcc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b50:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <HAL_RCC_OscConfig+0x79c>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_RCC_OscConfig+0x79c>)
 8002b56:	4922      	ldr	r1, [pc, #136]	; (8002be0 <HAL_RCC_OscConfig+0x7a4>)
 8002b58:	400a      	ands	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7ff f906 	bl	8001d6c <HAL_GetTick>
 8002b60:	0003      	movs	r3, r0
 8002b62:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b66:	f7ff f901 	bl	8001d6c <HAL_GetTick>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e02a      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b78:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_RCC_OscConfig+0x79c>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	049b      	lsls	r3, r3, #18
 8002b80:	4013      	ands	r3, r2
 8002b82:	d1f0      	bne.n	8002b66 <HAL_RCC_OscConfig+0x72a>
 8002b84:	e022      	b.n	8002bcc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e01d      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_RCC_OscConfig+0x79c>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	025b      	lsls	r3, r3, #9
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d10f      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	23f0      	movs	r3, #240	; 0xf0
 8002bac:	039b      	lsls	r3, r3, #14
 8002bae:	401a      	ands	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d107      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	23c0      	movs	r3, #192	; 0xc0
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b00a      	add	sp, #40	; 0x28
 8002bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	ff02ffff 	.word	0xff02ffff
 8002be0:	feffffff 	.word	0xfeffffff

08002be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be4:	b5b0      	push	{r4, r5, r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e128      	b.n	8002e4a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b96      	ldr	r3, [pc, #600]	; (8002e54 <HAL_RCC_ClockConfig+0x270>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4013      	ands	r3, r2
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d91e      	bls.n	8002c44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b93      	ldr	r3, [pc, #588]	; (8002e54 <HAL_RCC_ClockConfig+0x270>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	4b90      	ldr	r3, [pc, #576]	; (8002e54 <HAL_RCC_ClockConfig+0x270>)
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c18:	f7ff f8a8 	bl	8001d6c <HAL_GetTick>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c20:	e009      	b.n	8002c36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c22:	f7ff f8a3 	bl	8001d6c <HAL_GetTick>
 8002c26:	0002      	movs	r2, r0
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	4a8a      	ldr	r2, [pc, #552]	; (8002e58 <HAL_RCC_ClockConfig+0x274>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e109      	b.n	8002e4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b87      	ldr	r3, [pc, #540]	; (8002e54 <HAL_RCC_ClockConfig+0x270>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d1ee      	bne.n	8002c22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d009      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4e:	4b83      	ldr	r3, [pc, #524]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	22f0      	movs	r2, #240	; 0xf0
 8002c54:	4393      	bics	r3, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	4b7f      	ldr	r3, [pc, #508]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2201      	movs	r2, #1
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d100      	bne.n	8002c6e <HAL_RCC_ClockConfig+0x8a>
 8002c6c:	e089      	b.n	8002d82 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c76:	4b79      	ldr	r3, [pc, #484]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	029b      	lsls	r3, r3, #10
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d120      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e0e1      	b.n	8002e4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c8e:	4b73      	ldr	r3, [pc, #460]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	049b      	lsls	r3, r3, #18
 8002c96:	4013      	ands	r3, r2
 8002c98:	d114      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0d5      	b.n	8002e4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d106      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ca6:	4b6d      	ldr	r3, [pc, #436]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2204      	movs	r2, #4
 8002cac:	4013      	ands	r3, r2
 8002cae:	d109      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0ca      	b.n	8002e4a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cb4:	4b69      	ldr	r3, [pc, #420]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0c2      	b.n	8002e4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc4:	4b65      	ldr	r3, [pc, #404]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2203      	movs	r2, #3
 8002cca:	4393      	bics	r3, r2
 8002ccc:	0019      	movs	r1, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	4b62      	ldr	r3, [pc, #392]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd8:	f7ff f848 	bl	8001d6c <HAL_GetTick>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d111      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce8:	e009      	b.n	8002cfe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cea:	f7ff f83f 	bl	8001d6c <HAL_GetTick>
 8002cee:	0002      	movs	r2, r0
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	4a58      	ldr	r2, [pc, #352]	; (8002e58 <HAL_RCC_ClockConfig+0x274>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e0a5      	b.n	8002e4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cfe:	4b57      	ldr	r3, [pc, #348]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	220c      	movs	r2, #12
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d1ef      	bne.n	8002cea <HAL_RCC_ClockConfig+0x106>
 8002d0a:	e03a      	b.n	8002d82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d111      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d14:	e009      	b.n	8002d2a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d16:	f7ff f829 	bl	8001d6c <HAL_GetTick>
 8002d1a:	0002      	movs	r2, r0
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	4a4d      	ldr	r2, [pc, #308]	; (8002e58 <HAL_RCC_ClockConfig+0x274>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e08f      	b.n	8002e4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d2a:	4b4c      	ldr	r3, [pc, #304]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	220c      	movs	r2, #12
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b0c      	cmp	r3, #12
 8002d34:	d1ef      	bne.n	8002d16 <HAL_RCC_ClockConfig+0x132>
 8002d36:	e024      	b.n	8002d82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d11b      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d40:	e009      	b.n	8002d56 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d42:	f7ff f813 	bl	8001d6c <HAL_GetTick>
 8002d46:	0002      	movs	r2, r0
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	4a42      	ldr	r2, [pc, #264]	; (8002e58 <HAL_RCC_ClockConfig+0x274>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e079      	b.n	8002e4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d56:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d1ef      	bne.n	8002d42 <HAL_RCC_ClockConfig+0x15e>
 8002d62:	e00e      	b.n	8002d82 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d64:	f7ff f802 	bl	8001d6c <HAL_GetTick>
 8002d68:	0002      	movs	r2, r0
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	4a3a      	ldr	r2, [pc, #232]	; (8002e58 <HAL_RCC_ClockConfig+0x274>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e068      	b.n	8002e4a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d78:	4b38      	ldr	r3, [pc, #224]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	220c      	movs	r2, #12
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d82:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <HAL_RCC_ClockConfig+0x270>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2201      	movs	r2, #1
 8002d88:	4013      	ands	r3, r2
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d21e      	bcs.n	8002dce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d90:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <HAL_RCC_ClockConfig+0x270>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2201      	movs	r2, #1
 8002d96:	4393      	bics	r3, r2
 8002d98:	0019      	movs	r1, r3
 8002d9a:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <HAL_RCC_ClockConfig+0x270>)
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002da2:	f7fe ffe3 	bl	8001d6c <HAL_GetTick>
 8002da6:	0003      	movs	r3, r0
 8002da8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	e009      	b.n	8002dc0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dac:	f7fe ffde 	bl	8001d6c <HAL_GetTick>
 8002db0:	0002      	movs	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	4a28      	ldr	r2, [pc, #160]	; (8002e58 <HAL_RCC_ClockConfig+0x274>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e044      	b.n	8002e4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc0:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <HAL_RCC_ClockConfig+0x270>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d1ee      	bne.n	8002dac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d009      	beq.n	8002dec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd8:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a20      	ldr	r2, [pc, #128]	; (8002e60 <HAL_RCC_ClockConfig+0x27c>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002de8:	430a      	orrs	r2, r1
 8002dea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2208      	movs	r2, #8
 8002df2:	4013      	ands	r3, r2
 8002df4:	d00a      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002df6:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	4a1a      	ldr	r2, [pc, #104]	; (8002e64 <HAL_RCC_ClockConfig+0x280>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	00da      	lsls	r2, r3, #3
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e0c:	f000 f832 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8002e10:	0001      	movs	r1, r0
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_RCC_ClockConfig+0x278>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	220f      	movs	r2, #15
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <HAL_RCC_ClockConfig+0x284>)
 8002e1e:	5cd3      	ldrb	r3, [r2, r3]
 8002e20:	000a      	movs	r2, r1
 8002e22:	40da      	lsrs	r2, r3
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <HAL_RCC_ClockConfig+0x288>)
 8002e26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_RCC_ClockConfig+0x28c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	250b      	movs	r5, #11
 8002e2e:	197c      	adds	r4, r7, r5
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7fe ff55 	bl	8001ce0 <HAL_InitTick>
 8002e36:	0003      	movs	r3, r0
 8002e38:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002e3a:	197b      	adds	r3, r7, r5
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002e42:	197b      	adds	r3, r7, r5
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	e000      	b.n	8002e4a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b004      	add	sp, #16
 8002e50:	bdb0      	pop	{r4, r5, r7, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	40022000 	.word	0x40022000
 8002e58:	00001388 	.word	0x00001388
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	fffff8ff 	.word	0xfffff8ff
 8002e64:	ffffc7ff 	.word	0xffffc7ff
 8002e68:	08005c50 	.word	0x08005c50
 8002e6c:	200001b4 	.word	0x200001b4
 8002e70:	200001b8 	.word	0x200001b8

08002e74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e74:	b5b0      	push	{r4, r5, r7, lr}
 8002e76:	b08e      	sub	sp, #56	; 0x38
 8002e78:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002e7a:	4b4c      	ldr	r3, [pc, #304]	; (8002fac <HAL_RCC_GetSysClockFreq+0x138>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e82:	230c      	movs	r3, #12
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d014      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002e8a:	d900      	bls.n	8002e8e <HAL_RCC_GetSysClockFreq+0x1a>
 8002e8c:	e07b      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x112>
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d002      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x24>
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d00b      	beq.n	8002eae <HAL_RCC_GetSysClockFreq+0x3a>
 8002e96:	e076      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e98:	4b44      	ldr	r3, [pc, #272]	; (8002fac <HAL_RCC_GetSysClockFreq+0x138>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2210      	movs	r2, #16
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d002      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002ea2:	4b43      	ldr	r3, [pc, #268]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ea4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002ea6:	e07c      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002ea8:	4b42      	ldr	r3, [pc, #264]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x140>)
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002eac:	e079      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002eae:	4b42      	ldr	r3, [pc, #264]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002eb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002eb2:	e076      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb6:	0c9a      	lsrs	r2, r3, #18
 8002eb8:	230f      	movs	r3, #15
 8002eba:	401a      	ands	r2, r3
 8002ebc:	4b3f      	ldr	r3, [pc, #252]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x148>)
 8002ebe:	5c9b      	ldrb	r3, [r3, r2]
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec4:	0d9a      	lsrs	r2, r3, #22
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	4013      	ands	r3, r2
 8002eca:	3301      	adds	r3, #1
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ece:	4b37      	ldr	r3, [pc, #220]	; (8002fac <HAL_RCC_GetSysClockFreq+0x138>)
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	025b      	lsls	r3, r3, #9
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d01a      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
 8002ee2:	4a35      	ldr	r2, [pc, #212]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	69b8      	ldr	r0, [r7, #24]
 8002ee8:	69f9      	ldr	r1, [r7, #28]
 8002eea:	f7fd f9cb 	bl	8000284 <__aeabi_lmul>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	000b      	movs	r3, r1
 8002ef2:	0010      	movs	r0, r2
 8002ef4:	0019      	movs	r1, r3
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f7fd f99f 	bl	8000244 <__aeabi_uldivmod>
 8002f06:	0002      	movs	r2, r0
 8002f08:	000b      	movs	r3, r1
 8002f0a:	0013      	movs	r3, r2
 8002f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f0e:	e037      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f10:	4b26      	ldr	r3, [pc, #152]	; (8002fac <HAL_RCC_GetSysClockFreq+0x138>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2210      	movs	r2, #16
 8002f16:	4013      	ands	r3, r2
 8002f18:	d01a      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	4a23      	ldr	r2, [pc, #140]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f24:	2300      	movs	r3, #0
 8002f26:	68b8      	ldr	r0, [r7, #8]
 8002f28:	68f9      	ldr	r1, [r7, #12]
 8002f2a:	f7fd f9ab 	bl	8000284 <__aeabi_lmul>
 8002f2e:	0002      	movs	r2, r0
 8002f30:	000b      	movs	r3, r1
 8002f32:	0010      	movs	r0, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f7fd f97f 	bl	8000244 <__aeabi_uldivmod>
 8002f46:	0002      	movs	r2, r0
 8002f48:	000b      	movs	r3, r1
 8002f4a:	0013      	movs	r3, r2
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4e:	e017      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	0018      	movs	r0, r3
 8002f54:	2300      	movs	r3, #0
 8002f56:	0019      	movs	r1, r3
 8002f58:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x140>)
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f7fd f992 	bl	8000284 <__aeabi_lmul>
 8002f60:	0002      	movs	r2, r0
 8002f62:	000b      	movs	r3, r1
 8002f64:	0010      	movs	r0, r2
 8002f66:	0019      	movs	r1, r3
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	001c      	movs	r4, r3
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	001d      	movs	r5, r3
 8002f70:	0022      	movs	r2, r4
 8002f72:	002b      	movs	r3, r5
 8002f74:	f7fd f966 	bl	8000244 <__aeabi_uldivmod>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	000b      	movs	r3, r1
 8002f7c:	0013      	movs	r3, r2
 8002f7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f84:	e00d      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <HAL_RCC_GetSysClockFreq+0x138>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	0b5b      	lsrs	r3, r3, #13
 8002f8c:	2207      	movs	r2, #7
 8002f8e:	4013      	ands	r3, r2
 8002f90:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	3301      	adds	r3, #1
 8002f96:	2280      	movs	r2, #128	; 0x80
 8002f98:	0212      	lsls	r2, r2, #8
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	0013      	movs	r3, r2
 8002f9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fa0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b00e      	add	sp, #56	; 0x38
 8002faa:	bdb0      	pop	{r4, r5, r7, pc}
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	003d0900 	.word	0x003d0900
 8002fb4:	00f42400 	.word	0x00f42400
 8002fb8:	007a1200 	.word	0x007a1200
 8002fbc:	08005c68 	.word	0x08005c68

08002fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc4:	4b02      	ldr	r3, [pc, #8]	; (8002fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	0018      	movs	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	200001b4 	.word	0x200001b4

08002fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fd8:	f7ff fff2 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 8002fdc:	0001      	movs	r1, r0
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	0a1b      	lsrs	r3, r3, #8
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	4a04      	ldr	r2, [pc, #16]	; (8002ffc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fea:	5cd3      	ldrb	r3, [r2, r3]
 8002fec:	40d9      	lsrs	r1, r3
 8002fee:	000b      	movs	r3, r1
}
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	08005c60 	.word	0x08005c60

08003000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003004:	f7ff ffdc 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 8003008:	0001      	movs	r1, r0
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_RCC_GetPCLK2Freq+0x24>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	0adb      	lsrs	r3, r3, #11
 8003010:	2207      	movs	r2, #7
 8003012:	4013      	ands	r3, r2
 8003014:	4a04      	ldr	r2, [pc, #16]	; (8003028 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003016:	5cd3      	ldrb	r3, [r2, r3]
 8003018:	40d9      	lsrs	r1, r3
 800301a:	000b      	movs	r3, r1
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	40021000 	.word	0x40021000
 8003028:	08005c60 	.word	0x08005c60

0800302c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003034:	2317      	movs	r3, #23
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2220      	movs	r2, #32
 8003042:	4013      	ands	r3, r2
 8003044:	d106      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	4013      	ands	r3, r2
 8003050:	d100      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003052:	e0d9      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003054:	4ba4      	ldr	r3, [pc, #656]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	055b      	lsls	r3, r3, #21
 800305c:	4013      	ands	r3, r2
 800305e:	d10a      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003060:	4ba1      	ldr	r3, [pc, #644]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003064:	4ba0      	ldr	r3, [pc, #640]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003066:	2180      	movs	r1, #128	; 0x80
 8003068:	0549      	lsls	r1, r1, #21
 800306a:	430a      	orrs	r2, r1
 800306c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800306e:	2317      	movs	r3, #23
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003076:	4b9d      	ldr	r3, [pc, #628]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	4013      	ands	r3, r2
 8003080:	d11a      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003082:	4b9a      	ldr	r3, [pc, #616]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4b99      	ldr	r3, [pc, #612]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	0049      	lsls	r1, r1, #1
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003090:	f7fe fe6c 	bl	8001d6c <HAL_GetTick>
 8003094:	0003      	movs	r3, r0
 8003096:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	e008      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309a:	f7fe fe67 	bl	8001d6c <HAL_GetTick>
 800309e:	0002      	movs	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b64      	cmp	r3, #100	; 0x64
 80030a6:	d901      	bls.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e118      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	4b8f      	ldr	r3, [pc, #572]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4013      	ands	r3, r2
 80030b6:	d0f0      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80030b8:	4b8b      	ldr	r3, [pc, #556]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	23c0      	movs	r3, #192	; 0xc0
 80030be:	039b      	lsls	r3, r3, #14
 80030c0:	4013      	ands	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	23c0      	movs	r3, #192	; 0xc0
 80030ca:	039b      	lsls	r3, r3, #14
 80030cc:	4013      	ands	r3, r2
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d107      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	23c0      	movs	r3, #192	; 0xc0
 80030da:	039b      	lsls	r3, r3, #14
 80030dc:	4013      	ands	r3, r2
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d013      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	23c0      	movs	r3, #192	; 0xc0
 80030ea:	029b      	lsls	r3, r3, #10
 80030ec:	401a      	ands	r2, r3
 80030ee:	23c0      	movs	r3, #192	; 0xc0
 80030f0:	029b      	lsls	r3, r3, #10
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d10a      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80030f6:	4b7c      	ldr	r3, [pc, #496]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	029b      	lsls	r3, r3, #10
 80030fe:	401a      	ands	r2, r3
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	029b      	lsls	r3, r3, #10
 8003104:	429a      	cmp	r2, r3
 8003106:	d101      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0e8      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800310c:	4b76      	ldr	r3, [pc, #472]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800310e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003110:	23c0      	movs	r3, #192	; 0xc0
 8003112:	029b      	lsls	r3, r3, #10
 8003114:	4013      	ands	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d049      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	23c0      	movs	r3, #192	; 0xc0
 8003124:	029b      	lsls	r3, r3, #10
 8003126:	4013      	ands	r3, r2
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	429a      	cmp	r2, r3
 800312c:	d004      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2220      	movs	r2, #32
 8003134:	4013      	ands	r3, r2
 8003136:	d10d      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	23c0      	movs	r3, #192	; 0xc0
 800313e:	029b      	lsls	r3, r3, #10
 8003140:	4013      	ands	r3, r2
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	429a      	cmp	r2, r3
 8003146:	d034      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	4013      	ands	r3, r2
 8003152:	d02e      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003154:	4b64      	ldr	r3, [pc, #400]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003158:	4a65      	ldr	r2, [pc, #404]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800315a:	4013      	ands	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800315e:	4b62      	ldr	r3, [pc, #392]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003160:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003162:	4b61      	ldr	r3, [pc, #388]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	0309      	lsls	r1, r1, #12
 8003168:	430a      	orrs	r2, r1
 800316a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800316c:	4b5e      	ldr	r3, [pc, #376]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800316e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003170:	4b5d      	ldr	r3, [pc, #372]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003172:	4960      	ldr	r1, [pc, #384]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003174:	400a      	ands	r2, r1
 8003176:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003178:	4b5b      	ldr	r3, [pc, #364]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	2380      	movs	r3, #128	; 0x80
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	4013      	ands	r3, r2
 8003186:	d014      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fe fdf0 	bl	8001d6c <HAL_GetTick>
 800318c:	0003      	movs	r3, r0
 800318e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003190:	e009      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7fe fdeb 	bl	8001d6c <HAL_GetTick>
 8003196:	0002      	movs	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	4a56      	ldr	r2, [pc, #344]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e09b      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031a6:	4b50      	ldr	r3, [pc, #320]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80031a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4013      	ands	r3, r2
 80031b0:	d0ef      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	23c0      	movs	r3, #192	; 0xc0
 80031b8:	029b      	lsls	r3, r3, #10
 80031ba:	401a      	ands	r2, r3
 80031bc:	23c0      	movs	r3, #192	; 0xc0
 80031be:	029b      	lsls	r3, r3, #10
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d10c      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80031c4:	4b48      	ldr	r3, [pc, #288]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a4c      	ldr	r2, [pc, #304]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	23c0      	movs	r3, #192	; 0xc0
 80031d4:	039b      	lsls	r3, r3, #14
 80031d6:	401a      	ands	r2, r3
 80031d8:	4b43      	ldr	r3, [pc, #268]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80031da:	430a      	orrs	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80031e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	23c0      	movs	r3, #192	; 0xc0
 80031e8:	029b      	lsls	r3, r3, #10
 80031ea:	401a      	ands	r2, r3
 80031ec:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80031ee:	430a      	orrs	r2, r1
 80031f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031f2:	2317      	movs	r3, #23
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d105      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fc:	4b3a      	ldr	r3, [pc, #232]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80031fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003200:	4b39      	ldr	r3, [pc, #228]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003202:	493f      	ldr	r1, [pc, #252]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003204:	400a      	ands	r2, r1
 8003206:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2201      	movs	r2, #1
 800320e:	4013      	ands	r3, r2
 8003210:	d009      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003212:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003216:	2203      	movs	r2, #3
 8003218:	4393      	bics	r3, r2
 800321a:	0019      	movs	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	4b31      	ldr	r3, [pc, #196]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003222:	430a      	orrs	r2, r1
 8003224:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2202      	movs	r2, #2
 800322c:	4013      	ands	r3, r2
 800322e:	d009      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003230:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003234:	220c      	movs	r2, #12
 8003236:	4393      	bics	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003240:	430a      	orrs	r2, r1
 8003242:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2204      	movs	r2, #4
 800324a:	4013      	ands	r3, r2
 800324c:	d009      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800324e:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003252:	4a2c      	ldr	r2, [pc, #176]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003254:	4013      	ands	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800325e:	430a      	orrs	r2, r1
 8003260:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2208      	movs	r2, #8
 8003268:	4013      	ands	r3, r2
 800326a:	d009      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800326c:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800326e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003270:	4a25      	ldr	r2, [pc, #148]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003272:	4013      	ands	r3, r2
 8003274:	0019      	movs	r1, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800327c:	430a      	orrs	r2, r1
 800327e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4013      	ands	r3, r2
 800328a:	d009      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800328c:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800328e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003290:	4a17      	ldr	r2, [pc, #92]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003292:	4013      	ands	r3, r2
 8003294:	0019      	movs	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69da      	ldr	r2, [r3, #28]
 800329a:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800329c:	430a      	orrs	r2, r1
 800329e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2240      	movs	r2, #64	; 0x40
 80032a6:	4013      	ands	r3, r2
 80032a8:	d009      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032aa:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80032ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ae:	4a17      	ldr	r2, [pc, #92]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	0019      	movs	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80032ba:	430a      	orrs	r2, r1
 80032bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2280      	movs	r2, #128	; 0x80
 80032c4:	4013      	ands	r3, r2
 80032c6:	d009      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80032c8:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80032ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032cc:	4a10      	ldr	r2, [pc, #64]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	0019      	movs	r1, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1a      	ldr	r2, [r3, #32]
 80032d6:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80032d8:	430a      	orrs	r2, r1
 80032da:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	0018      	movs	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b006      	add	sp, #24
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40007000 	.word	0x40007000
 80032f0:	fffcffff 	.word	0xfffcffff
 80032f4:	fff7ffff 	.word	0xfff7ffff
 80032f8:	00001388 	.word	0x00001388
 80032fc:	ffcfffff 	.word	0xffcfffff
 8003300:	efffffff 	.word	0xefffffff
 8003304:	fffff3ff 	.word	0xfffff3ff
 8003308:	ffffcfff 	.word	0xffffcfff
 800330c:	fbffffff 	.word	0xfbffffff
 8003310:	fff3ffff 	.word	0xfff3ffff

08003314 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e083      	b.n	800342e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	2382      	movs	r3, #130	; 0x82
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	429a      	cmp	r2, r3
 8003338:	d009      	beq.n	800334e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	61da      	str	r2, [r3, #28]
 8003340:	e005      	b.n	800334e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2251      	movs	r2, #81	; 0x51
 8003358:	5c9b      	ldrb	r3, [r3, r2]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d107      	bne.n	8003370 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2250      	movs	r2, #80	; 0x50
 8003364:	2100      	movs	r1, #0
 8003366:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	0018      	movs	r0, r3
 800336c:	f7fe fb1e 	bl	80019ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2251      	movs	r2, #81	; 0x51
 8003374:	2102      	movs	r1, #2
 8003376:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2140      	movs	r1, #64	; 0x40
 8003384:	438a      	bics	r2, r1
 8003386:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	2382      	movs	r3, #130	; 0x82
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	401a      	ands	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6899      	ldr	r1, [r3, #8]
 8003396:	2384      	movs	r3, #132	; 0x84
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	400b      	ands	r3, r1
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68d9      	ldr	r1, [r3, #12]
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	400b      	ands	r3, r1
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2102      	movs	r1, #2
 80033b0:	400b      	ands	r3, r1
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	2101      	movs	r1, #1
 80033ba:	400b      	ands	r3, r1
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6999      	ldr	r1, [r3, #24]
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	400b      	ands	r3, r1
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	2138      	movs	r1, #56	; 0x38
 80033d0:	400b      	ands	r3, r1
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	2180      	movs	r1, #128	; 0x80
 80033da:	400b      	ands	r3, r1
 80033dc:	431a      	orrs	r2, r3
 80033de:	0011      	movs	r1, r2
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	019b      	lsls	r3, r3, #6
 80033e8:	401a      	ands	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	0c1b      	lsrs	r3, r3, #16
 80033f8:	2204      	movs	r2, #4
 80033fa:	4013      	ands	r3, r2
 80033fc:	0019      	movs	r1, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2210      	movs	r2, #16
 8003404:	401a      	ands	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4907      	ldr	r1, [pc, #28]	; (8003438 <HAL_SPI_Init+0x124>)
 800341a:	400a      	ands	r2, r1
 800341c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2251      	movs	r2, #81	; 0x51
 8003428:	2101      	movs	r1, #1
 800342a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	0018      	movs	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	b002      	add	sp, #8
 8003434:	bd80      	pop	{r7, pc}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	fffff7ff 	.word	0xfffff7ff

0800343c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e032      	b.n	80034b4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2239      	movs	r2, #57	; 0x39
 8003452:	5c9b      	ldrb	r3, [r3, r2]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2238      	movs	r2, #56	; 0x38
 800345e:	2100      	movs	r1, #0
 8003460:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	0018      	movs	r0, r3
 8003466:	f7fe fae7 	bl	8001a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2239      	movs	r2, #57	; 0x39
 800346e:	2102      	movs	r1, #2
 8003470:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3304      	adds	r3, #4
 800347a:	0019      	movs	r1, r3
 800347c:	0010      	movs	r0, r2
 800347e:	f000 fa4b 	bl	8003918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	223e      	movs	r2, #62	; 0x3e
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	223a      	movs	r2, #58	; 0x3a
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	223b      	movs	r2, #59	; 0x3b
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	223c      	movs	r2, #60	; 0x3c
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	223d      	movs	r2, #61	; 0x3d
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2239      	movs	r2, #57	; 0x39
 80034ae:	2101      	movs	r1, #1
 80034b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b002      	add	sp, #8
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2239      	movs	r2, #57	; 0x39
 80034c8:	5c9b      	ldrb	r3, [r3, r2]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d001      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e03b      	b.n	800354c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2239      	movs	r2, #57	; 0x39
 80034d8:	2102      	movs	r1, #2
 80034da:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2101      	movs	r1, #1
 80034e8:	430a      	orrs	r2, r1
 80034ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	05db      	lsls	r3, r3, #23
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d00e      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x5a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a15      	ldr	r2, [pc, #84]	; (8003554 <HAL_TIM_Base_Start_IT+0x98>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x5a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a14      	ldr	r2, [pc, #80]	; (8003558 <HAL_TIM_Base_Start_IT+0x9c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x5a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a12      	ldr	r2, [pc, #72]	; (800355c <HAL_TIM_Base_Start_IT+0xa0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d111      	bne.n	800353a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2207      	movs	r2, #7
 800351e:	4013      	ands	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b06      	cmp	r3, #6
 8003526:	d010      	beq.n	800354a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2101      	movs	r1, #1
 8003534:	430a      	orrs	r2, r1
 8003536:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003538:	e007      	b.n	800354a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2101      	movs	r1, #1
 8003546:	430a      	orrs	r2, r1
 8003548:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b004      	add	sp, #16
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40000400 	.word	0x40000400
 8003558:	40010800 	.word	0x40010800
 800355c:	40011400 	.word	0x40011400

08003560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2202      	movs	r2, #2
 8003570:	4013      	ands	r3, r2
 8003572:	2b02      	cmp	r3, #2
 8003574:	d124      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2202      	movs	r2, #2
 800357e:	4013      	ands	r3, r2
 8003580:	2b02      	cmp	r3, #2
 8003582:	d11d      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2203      	movs	r2, #3
 800358a:	4252      	negs	r2, r2
 800358c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2203      	movs	r2, #3
 800359c:	4013      	ands	r3, r2
 800359e:	d004      	beq.n	80035aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	0018      	movs	r0, r3
 80035a4:	f000 f9a0 	bl	80038e8 <HAL_TIM_IC_CaptureCallback>
 80035a8:	e007      	b.n	80035ba <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	0018      	movs	r0, r3
 80035ae:	f000 f993 	bl	80038d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 f99f 	bl	80038f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2204      	movs	r2, #4
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d125      	bne.n	800361a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2204      	movs	r2, #4
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d11e      	bne.n	800361a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2205      	movs	r2, #5
 80035e2:	4252      	negs	r2, r2
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	23c0      	movs	r3, #192	; 0xc0
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4013      	ands	r3, r2
 80035f8:	d004      	beq.n	8003604 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	0018      	movs	r0, r3
 80035fe:	f000 f973 	bl	80038e8 <HAL_TIM_IC_CaptureCallback>
 8003602:	e007      	b.n	8003614 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	0018      	movs	r0, r3
 8003608:	f000 f966 	bl	80038d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	0018      	movs	r0, r3
 8003610:	f000 f972 	bl	80038f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2208      	movs	r2, #8
 8003622:	4013      	ands	r3, r2
 8003624:	2b08      	cmp	r3, #8
 8003626:	d124      	bne.n	8003672 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2208      	movs	r2, #8
 8003630:	4013      	ands	r3, r2
 8003632:	2b08      	cmp	r3, #8
 8003634:	d11d      	bne.n	8003672 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2209      	movs	r2, #9
 800363c:	4252      	negs	r2, r2
 800363e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2204      	movs	r2, #4
 8003644:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	2203      	movs	r2, #3
 800364e:	4013      	ands	r3, r2
 8003650:	d004      	beq.n	800365c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	0018      	movs	r0, r3
 8003656:	f000 f947 	bl	80038e8 <HAL_TIM_IC_CaptureCallback>
 800365a:	e007      	b.n	800366c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	0018      	movs	r0, r3
 8003660:	f000 f93a 	bl	80038d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	0018      	movs	r0, r3
 8003668:	f000 f946 	bl	80038f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2210      	movs	r2, #16
 800367a:	4013      	ands	r3, r2
 800367c:	2b10      	cmp	r3, #16
 800367e:	d125      	bne.n	80036cc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2210      	movs	r2, #16
 8003688:	4013      	ands	r3, r2
 800368a:	2b10      	cmp	r3, #16
 800368c:	d11e      	bne.n	80036cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2211      	movs	r2, #17
 8003694:	4252      	negs	r2, r2
 8003696:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2208      	movs	r2, #8
 800369c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69da      	ldr	r2, [r3, #28]
 80036a4:	23c0      	movs	r3, #192	; 0xc0
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4013      	ands	r3, r2
 80036aa:	d004      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	0018      	movs	r0, r3
 80036b0:	f000 f91a 	bl	80038e8 <HAL_TIM_IC_CaptureCallback>
 80036b4:	e007      	b.n	80036c6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	0018      	movs	r0, r3
 80036ba:	f000 f90d 	bl	80038d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f000 f919 	bl	80038f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	2201      	movs	r2, #1
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d10f      	bne.n	80036fa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d108      	bne.n	80036fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2202      	movs	r2, #2
 80036ee:	4252      	negs	r2, r2
 80036f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7fd fc7b 	bl	8000ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2240      	movs	r2, #64	; 0x40
 8003702:	4013      	ands	r3, r2
 8003704:	2b40      	cmp	r3, #64	; 0x40
 8003706:	d10f      	bne.n	8003728 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2240      	movs	r2, #64	; 0x40
 8003710:	4013      	ands	r3, r2
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	d108      	bne.n	8003728 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2241      	movs	r2, #65	; 0x41
 800371c:	4252      	negs	r2, r2
 800371e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	0018      	movs	r0, r3
 8003724:	f000 f8f0 	bl	8003908 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	b002      	add	sp, #8
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800373a:	230f      	movs	r3, #15
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2238      	movs	r2, #56	; 0x38
 8003746:	5c9b      	ldrb	r3, [r3, r2]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_TIM_ConfigClockSource+0x20>
 800374c:	2302      	movs	r3, #2
 800374e:	e0bc      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x19a>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2238      	movs	r2, #56	; 0x38
 8003754:	2101      	movs	r1, #1
 8003756:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2239      	movs	r2, #57	; 0x39
 800375c:	2102      	movs	r1, #2
 800375e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2277      	movs	r2, #119	; 0x77
 800376c:	4393      	bics	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4a58      	ldr	r2, [pc, #352]	; (80038d4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003774:	4013      	ands	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2280      	movs	r2, #128	; 0x80
 8003786:	0192      	lsls	r2, r2, #6
 8003788:	4293      	cmp	r3, r2
 800378a:	d040      	beq.n	800380e <HAL_TIM_ConfigClockSource+0xde>
 800378c:	2280      	movs	r2, #128	; 0x80
 800378e:	0192      	lsls	r2, r2, #6
 8003790:	4293      	cmp	r3, r2
 8003792:	d900      	bls.n	8003796 <HAL_TIM_ConfigClockSource+0x66>
 8003794:	e088      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x178>
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	0152      	lsls	r2, r2, #5
 800379a:	4293      	cmp	r3, r2
 800379c:	d100      	bne.n	80037a0 <HAL_TIM_ConfigClockSource+0x70>
 800379e:	e088      	b.n	80038b2 <HAL_TIM_ConfigClockSource+0x182>
 80037a0:	2280      	movs	r2, #128	; 0x80
 80037a2:	0152      	lsls	r2, r2, #5
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d900      	bls.n	80037aa <HAL_TIM_ConfigClockSource+0x7a>
 80037a8:	e07e      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x178>
 80037aa:	2b70      	cmp	r3, #112	; 0x70
 80037ac:	d018      	beq.n	80037e0 <HAL_TIM_ConfigClockSource+0xb0>
 80037ae:	d900      	bls.n	80037b2 <HAL_TIM_ConfigClockSource+0x82>
 80037b0:	e07a      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x178>
 80037b2:	2b60      	cmp	r3, #96	; 0x60
 80037b4:	d04f      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0x126>
 80037b6:	d900      	bls.n	80037ba <HAL_TIM_ConfigClockSource+0x8a>
 80037b8:	e076      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x178>
 80037ba:	2b50      	cmp	r3, #80	; 0x50
 80037bc:	d03b      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x106>
 80037be:	d900      	bls.n	80037c2 <HAL_TIM_ConfigClockSource+0x92>
 80037c0:	e072      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x178>
 80037c2:	2b40      	cmp	r3, #64	; 0x40
 80037c4:	d057      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0x146>
 80037c6:	d900      	bls.n	80037ca <HAL_TIM_ConfigClockSource+0x9a>
 80037c8:	e06e      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x178>
 80037ca:	2b30      	cmp	r3, #48	; 0x30
 80037cc:	d063      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0x166>
 80037ce:	d86b      	bhi.n	80038a8 <HAL_TIM_ConfigClockSource+0x178>
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d060      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0x166>
 80037d4:	d868      	bhi.n	80038a8 <HAL_TIM_ConfigClockSource+0x178>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d05d      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0x166>
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d05b      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0x166>
 80037de:	e063      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	6899      	ldr	r1, [r3, #8]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f000 f96a 	bl	8003ac8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2277      	movs	r2, #119	; 0x77
 8003800:	4313      	orrs	r3, r2
 8003802:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	609a      	str	r2, [r3, #8]
      break;
 800380c:	e052      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6899      	ldr	r1, [r3, #8]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f000 f953 	bl	8003ac8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2180      	movs	r1, #128	; 0x80
 800382e:	01c9      	lsls	r1, r1, #7
 8003830:	430a      	orrs	r2, r1
 8003832:	609a      	str	r2, [r3, #8]
      break;
 8003834:	e03e      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	001a      	movs	r2, r3
 8003844:	f000 f8c6 	bl	80039d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2150      	movs	r1, #80	; 0x50
 800384e:	0018      	movs	r0, r3
 8003850:	f000 f920 	bl	8003a94 <TIM_ITRx_SetConfig>
      break;
 8003854:	e02e      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6859      	ldr	r1, [r3, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	001a      	movs	r2, r3
 8003864:	f000 f8e4 	bl	8003a30 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2160      	movs	r1, #96	; 0x60
 800386e:	0018      	movs	r0, r3
 8003870:	f000 f910 	bl	8003a94 <TIM_ITRx_SetConfig>
      break;
 8003874:	e01e      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	6859      	ldr	r1, [r3, #4]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	001a      	movs	r2, r3
 8003884:	f000 f8a6 	bl	80039d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2140      	movs	r1, #64	; 0x40
 800388e:	0018      	movs	r0, r3
 8003890:	f000 f900 	bl	8003a94 <TIM_ITRx_SetConfig>
      break;
 8003894:	e00e      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	0019      	movs	r1, r3
 80038a0:	0010      	movs	r0, r2
 80038a2:	f000 f8f7 	bl	8003a94 <TIM_ITRx_SetConfig>
      break;
 80038a6:	e005      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80038a8:	230f      	movs	r3, #15
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	2201      	movs	r2, #1
 80038ae:	701a      	strb	r2, [r3, #0]
      break;
 80038b0:	e000      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80038b2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2239      	movs	r2, #57	; 0x39
 80038b8:	2101      	movs	r1, #1
 80038ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2238      	movs	r2, #56	; 0x38
 80038c0:	2100      	movs	r1, #0
 80038c2:	5499      	strb	r1, [r3, r2]

  return status;
 80038c4:	230f      	movs	r3, #15
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	781b      	ldrb	r3, [r3, #0]
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b004      	add	sp, #16
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	ffff00ff 	.word	0xffff00ff

080038d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b002      	add	sp, #8
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038f0:	46c0      	nop			; (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b002      	add	sp, #8
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003910:	46c0      	nop			; (mov r8, r8)
 8003912:	46bd      	mov	sp, r7
 8003914:	b002      	add	sp, #8
 8003916:	bd80      	pop	{r7, pc}

08003918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	2380      	movs	r3, #128	; 0x80
 800392c:	05db      	lsls	r3, r3, #23
 800392e:	429a      	cmp	r2, r3
 8003930:	d00b      	beq.n	800394a <TIM_Base_SetConfig+0x32>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a23      	ldr	r2, [pc, #140]	; (80039c4 <TIM_Base_SetConfig+0xac>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d007      	beq.n	800394a <TIM_Base_SetConfig+0x32>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a22      	ldr	r2, [pc, #136]	; (80039c8 <TIM_Base_SetConfig+0xb0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d003      	beq.n	800394a <TIM_Base_SetConfig+0x32>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a21      	ldr	r2, [pc, #132]	; (80039cc <TIM_Base_SetConfig+0xb4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d108      	bne.n	800395c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2270      	movs	r2, #112	; 0x70
 800394e:	4393      	bics	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	05db      	lsls	r3, r3, #23
 8003962:	429a      	cmp	r2, r3
 8003964:	d00b      	beq.n	800397e <TIM_Base_SetConfig+0x66>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a16      	ldr	r2, [pc, #88]	; (80039c4 <TIM_Base_SetConfig+0xac>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <TIM_Base_SetConfig+0x66>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <TIM_Base_SetConfig+0xb0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d003      	beq.n	800397e <TIM_Base_SetConfig+0x66>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a14      	ldr	r2, [pc, #80]	; (80039cc <TIM_Base_SetConfig+0xb4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d108      	bne.n	8003990 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <TIM_Base_SetConfig+0xb8>)
 8003982:	4013      	ands	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	4393      	bics	r3, r2
 8003996:	001a      	movs	r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	615a      	str	r2, [r3, #20]
}
 80039bc:	46c0      	nop			; (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	b004      	add	sp, #16
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40000400 	.word	0x40000400
 80039c8:	40010800 	.word	0x40010800
 80039cc:	40011400 	.word	0x40011400
 80039d0:	fffffcff 	.word	0xfffffcff

080039d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	2201      	movs	r2, #1
 80039ec:	4393      	bics	r3, r2
 80039ee:	001a      	movs	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	22f0      	movs	r2, #240	; 0xf0
 80039fe:	4393      	bics	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	220a      	movs	r2, #10
 8003a10:	4393      	bics	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	621a      	str	r2, [r3, #32]
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b006      	add	sp, #24
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	2210      	movs	r2, #16
 8003a42:	4393      	bics	r3, r2
 8003a44:	001a      	movs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	4a0d      	ldr	r2, [pc, #52]	; (8003a90 <TIM_TI2_ConfigInputStage+0x60>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	031b      	lsls	r3, r3, #12
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	22a0      	movs	r2, #160	; 0xa0
 8003a6c:	4393      	bics	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	621a      	str	r2, [r3, #32]
}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b006      	add	sp, #24
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	ffff0fff 	.word	0xffff0fff

08003a94 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2270      	movs	r2, #112	; 0x70
 8003aa8:	4393      	bics	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	2207      	movs	r2, #7
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	609a      	str	r2, [r3, #8]
}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b004      	add	sp, #16
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	4a09      	ldr	r2, [pc, #36]	; (8003b04 <TIM_ETR_SetConfig+0x3c>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	021a      	lsls	r2, r3, #8
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	609a      	str	r2, [r3, #8]
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b006      	add	sp, #24
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	ffff00ff 	.word	0xffff00ff

08003b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2238      	movs	r2, #56	; 0x38
 8003b16:	5c9b      	ldrb	r3, [r3, r2]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e047      	b.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2238      	movs	r2, #56	; 0x38
 8003b24:	2101      	movs	r1, #1
 8003b26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2239      	movs	r2, #57	; 0x39
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2270      	movs	r2, #112	; 0x70
 8003b44:	4393      	bics	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	05db      	lsls	r3, r3, #23
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d00e      	beq.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d009      	beq.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a11      	ldr	r2, [pc, #68]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d004      	beq.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a10      	ldr	r2, [pc, #64]	; (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d10c      	bne.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2280      	movs	r2, #128	; 0x80
 8003b88:	4393      	bics	r3, r2
 8003b8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2239      	movs	r2, #57	; 0x39
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2238      	movs	r2, #56	; 0x38
 8003baa:	2100      	movs	r1, #0
 8003bac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b004      	add	sp, #16
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40010800 	.word	0x40010800
 8003bc0:	40011400 	.word	0x40011400

08003bc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e044      	b.n	8003c60 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d107      	bne.n	8003bee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2274      	movs	r2, #116	; 0x74
 8003be2:	2100      	movs	r1, #0
 8003be4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	0018      	movs	r0, r3
 8003bea:	f7fd ff45 	bl	8001a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2224      	movs	r2, #36	; 0x24
 8003bf2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2101      	movs	r1, #1
 8003c00:	438a      	bics	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	0018      	movs	r0, r3
 8003c08:	f000 fc36 	bl	8004478 <UART_SetConfig>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e024      	b.n	8003c60 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	0018      	movs	r0, r3
 8003c22:	f000 fee7 	bl	80049f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	490d      	ldr	r1, [pc, #52]	; (8003c68 <HAL_UART_Init+0xa4>)
 8003c32:	400a      	ands	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	212a      	movs	r1, #42	; 0x2a
 8003c42:	438a      	bics	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2101      	movs	r1, #1
 8003c52:	430a      	orrs	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f000 ff7f 	bl	8004b5c <UART_CheckIdleState>
 8003c5e:	0003      	movs	r3, r0
}
 8003c60:	0018      	movs	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b002      	add	sp, #8
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	ffffb7ff 	.word	0xffffb7ff

08003c6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08a      	sub	sp, #40	; 0x28
 8003c70:	af02      	add	r7, sp, #8
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	1dbb      	adds	r3, r7, #6
 8003c7a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d000      	beq.n	8003c86 <HAL_UART_Transmit+0x1a>
 8003c84:	e095      	b.n	8003db2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_UART_Transmit+0x28>
 8003c8c:	1dbb      	adds	r3, r7, #6
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e08d      	b.n	8003db4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	015b      	lsls	r3, r3, #5
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d109      	bne.n	8003cb8 <HAL_UART_Transmit+0x4c>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d001      	beq.n	8003cb8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e07d      	b.n	8003db4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2274      	movs	r2, #116	; 0x74
 8003cbc:	5c9b      	ldrb	r3, [r3, r2]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_UART_Transmit+0x5a>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e076      	b.n	8003db4 <HAL_UART_Transmit+0x148>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2274      	movs	r2, #116	; 0x74
 8003cca:	2101      	movs	r1, #1
 8003ccc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2280      	movs	r2, #128	; 0x80
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2221      	movs	r2, #33	; 0x21
 8003cda:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cdc:	f7fe f846 	bl	8001d6c <HAL_GetTick>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1dba      	adds	r2, r7, #6
 8003ce8:	2150      	movs	r1, #80	; 0x50
 8003cea:	8812      	ldrh	r2, [r2, #0]
 8003cec:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1dba      	adds	r2, r7, #6
 8003cf2:	2152      	movs	r1, #82	; 0x52
 8003cf4:	8812      	ldrh	r2, [r2, #0]
 8003cf6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	2380      	movs	r3, #128	; 0x80
 8003cfe:	015b      	lsls	r3, r3, #5
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d108      	bne.n	8003d16 <HAL_UART_Transmit+0xaa>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	e003      	b.n	8003d1e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2274      	movs	r2, #116	; 0x74
 8003d22:	2100      	movs	r1, #0
 8003d24:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003d26:	e02c      	b.n	8003d82 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	0013      	movs	r3, r2
 8003d32:	2200      	movs	r2, #0
 8003d34:	2180      	movs	r1, #128	; 0x80
 8003d36:	f000 ff59 	bl	8004bec <UART_WaitOnFlagUntilTimeout>
 8003d3a:	1e03      	subs	r3, r0, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e038      	b.n	8003db4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10b      	bne.n	8003d60 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	001a      	movs	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	05d2      	lsls	r2, r2, #23
 8003d54:	0dd2      	lsrs	r2, r2, #23
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	e007      	b.n	8003d70 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	781a      	ldrb	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2252      	movs	r2, #82	; 0x52
 8003d74:	5a9b      	ldrh	r3, [r3, r2]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b299      	uxth	r1, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2252      	movs	r2, #82	; 0x52
 8003d80:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2252      	movs	r2, #82	; 0x52
 8003d86:	5a9b      	ldrh	r3, [r3, r2]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1cc      	bne.n	8003d28 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	0013      	movs	r3, r2
 8003d98:	2200      	movs	r2, #0
 8003d9a:	2140      	movs	r1, #64	; 0x40
 8003d9c:	f000 ff26 	bl	8004bec <UART_WaitOnFlagUntilTimeout>
 8003da0:	1e03      	subs	r3, r0, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e005      	b.n	8003db4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	e000      	b.n	8003db4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003db2:	2302      	movs	r3, #2
  }
}
 8003db4:	0018      	movs	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b008      	add	sp, #32
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	1dbb      	adds	r3, r7, #6
 8003dc8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dce:	2b20      	cmp	r3, #32
 8003dd0:	d155      	bne.n	8003e7e <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_UART_Receive_IT+0x24>
 8003dd8:	1dbb      	adds	r3, r7, #6
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e04d      	b.n	8003e80 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	015b      	lsls	r3, r3, #5
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d109      	bne.n	8003e04 <HAL_UART_Receive_IT+0x48>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d105      	bne.n	8003e04 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d001      	beq.n	8003e04 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e03d      	b.n	8003e80 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2274      	movs	r2, #116	; 0x74
 8003e08:	5c9b      	ldrb	r3, [r3, r2]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_UART_Receive_IT+0x56>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e036      	b.n	8003e80 <HAL_UART_Receive_IT+0xc4>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2274      	movs	r2, #116	; 0x74
 8003e16:	2101      	movs	r1, #1
 8003e18:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <HAL_UART_Receive_IT+0xcc>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d020      	beq.n	8003e6c <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	041b      	lsls	r3, r3, #16
 8003e34:	4013      	ands	r3, r2
 8003e36:	d019      	beq.n	8003e6c <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e38:	f3ef 8310 	mrs	r3, PRIMASK
 8003e3c:	613b      	str	r3, [r7, #16]
  return(result);
 8003e3e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	2301      	movs	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f383 8810 	msr	PRIMASK, r3
}
 8003e4c:	46c0      	nop			; (mov r8, r8)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2180      	movs	r1, #128	; 0x80
 8003e5a:	04c9      	lsls	r1, r1, #19
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f383 8810 	msr	PRIMASK, r3
}
 8003e6a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e6c:	1dbb      	adds	r3, r7, #6
 8003e6e:	881a      	ldrh	r2, [r3, #0]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f000 ff7d 	bl	8004d74 <UART_Start_Receive_IT>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	e000      	b.n	8003e80 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003e7e:	2302      	movs	r3, #2
  }
}
 8003e80:	0018      	movs	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b008      	add	sp, #32
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40004800 	.word	0x40004800

08003e8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e8c:	b590      	push	{r4, r7, lr}
 8003e8e:	b0ab      	sub	sp, #172	; 0xac
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	22a4      	movs	r2, #164	; 0xa4
 8003e9c:	18b9      	adds	r1, r7, r2
 8003e9e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	20a0      	movs	r0, #160	; 0xa0
 8003ea8:	1839      	adds	r1, r7, r0
 8003eaa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	219c      	movs	r1, #156	; 0x9c
 8003eb4:	1879      	adds	r1, r7, r1
 8003eb6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003eb8:	0011      	movs	r1, r2
 8003eba:	18bb      	adds	r3, r7, r2
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a99      	ldr	r2, [pc, #612]	; (8004124 <HAL_UART_IRQHandler+0x298>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2298      	movs	r2, #152	; 0x98
 8003ec4:	18bc      	adds	r4, r7, r2
 8003ec6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003ec8:	18bb      	adds	r3, r7, r2
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d114      	bne.n	8003efa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d00f      	beq.n	8003efa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003eda:	183b      	adds	r3, r7, r0
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d00a      	beq.n	8003efa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d100      	bne.n	8003eee <HAL_UART_IRQHandler+0x62>
 8003eec:	e298      	b.n	8004420 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	0010      	movs	r0, r2
 8003ef6:	4798      	blx	r3
      }
      return;
 8003ef8:	e292      	b.n	8004420 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003efa:	2398      	movs	r3, #152	; 0x98
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d100      	bne.n	8003f06 <HAL_UART_IRQHandler+0x7a>
 8003f04:	e114      	b.n	8004130 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f06:	239c      	movs	r3, #156	; 0x9c
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d106      	bne.n	8003f20 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f12:	23a0      	movs	r3, #160	; 0xa0
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a83      	ldr	r2, [pc, #524]	; (8004128 <HAL_UART_IRQHandler+0x29c>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d100      	bne.n	8003f20 <HAL_UART_IRQHandler+0x94>
 8003f1e:	e107      	b.n	8004130 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f20:	23a4      	movs	r3, #164	; 0xa4
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2201      	movs	r2, #1
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d012      	beq.n	8003f52 <HAL_UART_IRQHandler+0xc6>
 8003f2c:	23a0      	movs	r3, #160	; 0xa0
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4013      	ands	r3, r2
 8003f38:	d00b      	beq.n	8003f52 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2280      	movs	r2, #128	; 0x80
 8003f46:	589b      	ldr	r3, [r3, r2]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2180      	movs	r1, #128	; 0x80
 8003f50:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f52:	23a4      	movs	r3, #164	; 0xa4
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d011      	beq.n	8003f82 <HAL_UART_IRQHandler+0xf6>
 8003f5e:	239c      	movs	r3, #156	; 0x9c
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2201      	movs	r2, #1
 8003f66:	4013      	ands	r3, r2
 8003f68:	d00b      	beq.n	8003f82 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2280      	movs	r2, #128	; 0x80
 8003f76:	589b      	ldr	r3, [r3, r2]
 8003f78:	2204      	movs	r2, #4
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2180      	movs	r1, #128	; 0x80
 8003f80:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f82:	23a4      	movs	r3, #164	; 0xa4
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2204      	movs	r2, #4
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d011      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x126>
 8003f8e:	239c      	movs	r3, #156	; 0x9c
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2201      	movs	r2, #1
 8003f96:	4013      	ands	r3, r2
 8003f98:	d00b      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2280      	movs	r2, #128	; 0x80
 8003fa6:	589b      	ldr	r3, [r3, r2]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2180      	movs	r1, #128	; 0x80
 8003fb0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fb2:	23a4      	movs	r3, #164	; 0xa4
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2208      	movs	r2, #8
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d017      	beq.n	8003fee <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fbe:	23a0      	movs	r3, #160	; 0xa0
 8003fc0:	18fb      	adds	r3, r7, r3
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d105      	bne.n	8003fd6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003fca:	239c      	movs	r3, #156	; 0x9c
 8003fcc:	18fb      	adds	r3, r7, r3
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fd4:	d00b      	beq.n	8003fee <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2208      	movs	r2, #8
 8003fdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2280      	movs	r2, #128	; 0x80
 8003fe2:	589b      	ldr	r3, [r3, r2]
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fee:	23a4      	movs	r3, #164	; 0xa4
 8003ff0:	18fb      	adds	r3, r7, r3
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	2380      	movs	r3, #128	; 0x80
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d013      	beq.n	8004024 <HAL_UART_IRQHandler+0x198>
 8003ffc:	23a0      	movs	r3, #160	; 0xa0
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	2380      	movs	r3, #128	; 0x80
 8004004:	04db      	lsls	r3, r3, #19
 8004006:	4013      	ands	r3, r2
 8004008:	d00c      	beq.n	8004024 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2280      	movs	r2, #128	; 0x80
 8004010:	0112      	lsls	r2, r2, #4
 8004012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2280      	movs	r2, #128	; 0x80
 8004018:	589b      	ldr	r3, [r3, r2]
 800401a:	2220      	movs	r2, #32
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2180      	movs	r1, #128	; 0x80
 8004022:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2280      	movs	r2, #128	; 0x80
 8004028:	589b      	ldr	r3, [r3, r2]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d100      	bne.n	8004030 <HAL_UART_IRQHandler+0x1a4>
 800402e:	e1f9      	b.n	8004424 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004030:	23a4      	movs	r3, #164	; 0xa4
 8004032:	18fb      	adds	r3, r7, r3
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2220      	movs	r2, #32
 8004038:	4013      	ands	r3, r2
 800403a:	d00e      	beq.n	800405a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800403c:	23a0      	movs	r3, #160	; 0xa0
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2220      	movs	r2, #32
 8004044:	4013      	ands	r3, r2
 8004046:	d008      	beq.n	800405a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800404c:	2b00      	cmp	r3, #0
 800404e:	d004      	beq.n	800405a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	0010      	movs	r0, r2
 8004058:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2280      	movs	r2, #128	; 0x80
 800405e:	589b      	ldr	r3, [r3, r2]
 8004060:	2194      	movs	r1, #148	; 0x94
 8004062:	187a      	adds	r2, r7, r1
 8004064:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2240      	movs	r2, #64	; 0x40
 800406e:	4013      	ands	r3, r2
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d004      	beq.n	800407e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004074:	187b      	adds	r3, r7, r1
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2228      	movs	r2, #40	; 0x28
 800407a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800407c:	d047      	beq.n	800410e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	0018      	movs	r0, r3
 8004082:	f000 ff27 	bl	8004ed4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2240      	movs	r2, #64	; 0x40
 800408e:	4013      	ands	r3, r2
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d137      	bne.n	8004104 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004094:	f3ef 8310 	mrs	r3, PRIMASK
 8004098:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800409a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409c:	2090      	movs	r0, #144	; 0x90
 800409e:	183a      	adds	r2, r7, r0
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	2301      	movs	r3, #1
 80040a4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040a8:	f383 8810 	msr	PRIMASK, r3
}
 80040ac:	46c0      	nop			; (mov r8, r8)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2140      	movs	r1, #64	; 0x40
 80040ba:	438a      	bics	r2, r1
 80040bc:	609a      	str	r2, [r3, #8]
 80040be:	183b      	adds	r3, r7, r0
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040c6:	f383 8810 	msr	PRIMASK, r3
}
 80040ca:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d012      	beq.n	80040fa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	4a14      	ldr	r2, [pc, #80]	; (800412c <HAL_UART_IRQHandler+0x2a0>)
 80040da:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7fd ff8f 	bl	8002004 <HAL_DMA_Abort_IT>
 80040e6:	1e03      	subs	r3, r0, #0
 80040e8:	d01a      	beq.n	8004120 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	0018      	movs	r0, r3
 80040f6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	e012      	b.n	8004120 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	0018      	movs	r0, r3
 80040fe:	f000 f9a7 	bl	8004450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004102:	e00d      	b.n	8004120 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	0018      	movs	r0, r3
 8004108:	f000 f9a2 	bl	8004450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410c:	e008      	b.n	8004120 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	0018      	movs	r0, r3
 8004112:	f000 f99d 	bl	8004450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2280      	movs	r2, #128	; 0x80
 800411a:	2100      	movs	r1, #0
 800411c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800411e:	e181      	b.n	8004424 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004120:	46c0      	nop			; (mov r8, r8)
    return;
 8004122:	e17f      	b.n	8004424 <HAL_UART_IRQHandler+0x598>
 8004124:	0000080f 	.word	0x0000080f
 8004128:	04000120 	.word	0x04000120
 800412c:	08004f99 	.word	0x08004f99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004134:	2b01      	cmp	r3, #1
 8004136:	d000      	beq.n	800413a <HAL_UART_IRQHandler+0x2ae>
 8004138:	e133      	b.n	80043a2 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800413a:	23a4      	movs	r3, #164	; 0xa4
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2210      	movs	r2, #16
 8004142:	4013      	ands	r3, r2
 8004144:	d100      	bne.n	8004148 <HAL_UART_IRQHandler+0x2bc>
 8004146:	e12c      	b.n	80043a2 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004148:	23a0      	movs	r3, #160	; 0xa0
 800414a:	18fb      	adds	r3, r7, r3
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2210      	movs	r2, #16
 8004150:	4013      	ands	r3, r2
 8004152:	d100      	bne.n	8004156 <HAL_UART_IRQHandler+0x2ca>
 8004154:	e125      	b.n	80043a2 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2210      	movs	r2, #16
 800415c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2240      	movs	r2, #64	; 0x40
 8004166:	4013      	ands	r3, r2
 8004168:	2b40      	cmp	r3, #64	; 0x40
 800416a:	d000      	beq.n	800416e <HAL_UART_IRQHandler+0x2e2>
 800416c:	e09d      	b.n	80042aa <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	217e      	movs	r1, #126	; 0x7e
 8004178:	187b      	adds	r3, r7, r1
 800417a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800417c:	187b      	adds	r3, r7, r1
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d100      	bne.n	8004186 <HAL_UART_IRQHandler+0x2fa>
 8004184:	e150      	b.n	8004428 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2258      	movs	r2, #88	; 0x58
 800418a:	5a9b      	ldrh	r3, [r3, r2]
 800418c:	187a      	adds	r2, r7, r1
 800418e:	8812      	ldrh	r2, [r2, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d300      	bcc.n	8004196 <HAL_UART_IRQHandler+0x30a>
 8004194:	e148      	b.n	8004428 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	187a      	adds	r2, r7, r1
 800419a:	215a      	movs	r1, #90	; 0x5a
 800419c:	8812      	ldrh	r2, [r2, #0]
 800419e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2220      	movs	r2, #32
 80041aa:	4013      	ands	r3, r2
 80041ac:	d16e      	bne.n	800428c <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ae:	f3ef 8310 	mrs	r3, PRIMASK
 80041b2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80041b8:	2301      	movs	r3, #1
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041be:	f383 8810 	msr	PRIMASK, r3
}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	499a      	ldr	r1, [pc, #616]	; (8004438 <HAL_UART_IRQHandler+0x5ac>)
 80041d0:	400a      	ands	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041da:	f383 8810 	msr	PRIMASK, r3
}
 80041de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e0:	f3ef 8310 	mrs	r3, PRIMASK
 80041e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80041e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e8:	677b      	str	r3, [r7, #116]	; 0x74
 80041ea:	2301      	movs	r3, #1
 80041ec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f0:	f383 8810 	msr	PRIMASK, r3
}
 80041f4:	46c0      	nop			; (mov r8, r8)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2101      	movs	r1, #1
 8004202:	438a      	bics	r2, r1
 8004204:	609a      	str	r2, [r3, #8]
 8004206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004208:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420c:	f383 8810 	msr	PRIMASK, r3
}
 8004210:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004212:	f3ef 8310 	mrs	r3, PRIMASK
 8004216:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004218:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800421a:	673b      	str	r3, [r7, #112]	; 0x70
 800421c:	2301      	movs	r3, #1
 800421e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004222:	f383 8810 	msr	PRIMASK, r3
}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2140      	movs	r1, #64	; 0x40
 8004234:	438a      	bics	r2, r1
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800423a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800423e:	f383 8810 	msr	PRIMASK, r3
}
 8004242:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004250:	f3ef 8310 	mrs	r3, PRIMASK
 8004254:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004256:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004258:	66fb      	str	r3, [r7, #108]	; 0x6c
 800425a:	2301      	movs	r3, #1
 800425c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004260:	f383 8810 	msr	PRIMASK, r3
}
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2110      	movs	r1, #16
 8004272:	438a      	bics	r2, r1
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004278:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427c:	f383 8810 	msr	PRIMASK, r3
}
 8004280:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fe7c 	bl	8001f84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2258      	movs	r2, #88	; 0x58
 8004290:	5a9a      	ldrh	r2, [r3, r2]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	215a      	movs	r1, #90	; 0x5a
 8004296:	5a5b      	ldrh	r3, [r3, r1]
 8004298:	b29b      	uxth	r3, r3
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	b29a      	uxth	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	0011      	movs	r1, r2
 80042a2:	0018      	movs	r0, r3
 80042a4:	f000 f8dc 	bl	8004460 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042a8:	e0be      	b.n	8004428 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2258      	movs	r2, #88	; 0x58
 80042ae:	5a99      	ldrh	r1, [r3, r2]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	225a      	movs	r2, #90	; 0x5a
 80042b4:	5a9b      	ldrh	r3, [r3, r2]
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	208e      	movs	r0, #142	; 0x8e
 80042ba:	183b      	adds	r3, r7, r0
 80042bc:	1a8a      	subs	r2, r1, r2
 80042be:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	225a      	movs	r2, #90	; 0x5a
 80042c4:	5a9b      	ldrh	r3, [r3, r2]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d100      	bne.n	80042ce <HAL_UART_IRQHandler+0x442>
 80042cc:	e0ae      	b.n	800442c <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 80042ce:	183b      	adds	r3, r7, r0
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d100      	bne.n	80042d8 <HAL_UART_IRQHandler+0x44c>
 80042d6:	e0a9      	b.n	800442c <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d8:	f3ef 8310 	mrs	r3, PRIMASK
 80042dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80042de:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e0:	2488      	movs	r4, #136	; 0x88
 80042e2:	193a      	adds	r2, r7, r4
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	2301      	movs	r3, #1
 80042e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f383 8810 	msr	PRIMASK, r3
}
 80042f0:	46c0      	nop			; (mov r8, r8)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	494f      	ldr	r1, [pc, #316]	; (800443c <HAL_UART_IRQHandler+0x5b0>)
 80042fe:	400a      	ands	r2, r1
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	193b      	adds	r3, r7, r4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f383 8810 	msr	PRIMASK, r3
}
 800430e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004310:	f3ef 8310 	mrs	r3, PRIMASK
 8004314:	61bb      	str	r3, [r7, #24]
  return(result);
 8004316:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004318:	2484      	movs	r4, #132	; 0x84
 800431a:	193a      	adds	r2, r7, r4
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	2301      	movs	r3, #1
 8004320:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f383 8810 	msr	PRIMASK, r3
}
 8004328:	46c0      	nop			; (mov r8, r8)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2101      	movs	r1, #1
 8004336:	438a      	bics	r2, r1
 8004338:	609a      	str	r2, [r3, #8]
 800433a:	193b      	adds	r3, r7, r4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	f383 8810 	msr	PRIMASK, r3
}
 8004346:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800435a:	f3ef 8310 	mrs	r3, PRIMASK
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004362:	2480      	movs	r4, #128	; 0x80
 8004364:	193a      	adds	r2, r7, r4
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	2301      	movs	r3, #1
 800436a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	f383 8810 	msr	PRIMASK, r3
}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2110      	movs	r1, #16
 8004380:	438a      	bics	r2, r1
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	193b      	adds	r3, r7, r4
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438c:	f383 8810 	msr	PRIMASK, r3
}
 8004390:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004392:	183b      	adds	r3, r7, r0
 8004394:	881a      	ldrh	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0011      	movs	r1, r2
 800439a:	0018      	movs	r0, r3
 800439c:	f000 f860 	bl	8004460 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043a0:	e044      	b.n	800442c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80043a2:	23a4      	movs	r3, #164	; 0xa4
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	035b      	lsls	r3, r3, #13
 80043ac:	4013      	ands	r3, r2
 80043ae:	d010      	beq.n	80043d2 <HAL_UART_IRQHandler+0x546>
 80043b0:	239c      	movs	r3, #156	; 0x9c
 80043b2:	18fb      	adds	r3, r7, r3
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	03db      	lsls	r3, r3, #15
 80043ba:	4013      	ands	r3, r2
 80043bc:	d009      	beq.n	80043d2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2280      	movs	r2, #128	; 0x80
 80043c4:	0352      	lsls	r2, r2, #13
 80043c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	0018      	movs	r0, r3
 80043cc:	f000 ff8e 	bl	80052ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043d0:	e02f      	b.n	8004432 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043d2:	23a4      	movs	r3, #164	; 0xa4
 80043d4:	18fb      	adds	r3, r7, r3
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2280      	movs	r2, #128	; 0x80
 80043da:	4013      	ands	r3, r2
 80043dc:	d00f      	beq.n	80043fe <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043de:	23a0      	movs	r3, #160	; 0xa0
 80043e0:	18fb      	adds	r3, r7, r3
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2280      	movs	r2, #128	; 0x80
 80043e6:	4013      	ands	r3, r2
 80043e8:	d009      	beq.n	80043fe <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01e      	beq.n	8004430 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	0010      	movs	r0, r2
 80043fa:	4798      	blx	r3
    }
    return;
 80043fc:	e018      	b.n	8004430 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043fe:	23a4      	movs	r3, #164	; 0xa4
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2240      	movs	r2, #64	; 0x40
 8004406:	4013      	ands	r3, r2
 8004408:	d013      	beq.n	8004432 <HAL_UART_IRQHandler+0x5a6>
 800440a:	23a0      	movs	r3, #160	; 0xa0
 800440c:	18fb      	adds	r3, r7, r3
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2240      	movs	r2, #64	; 0x40
 8004412:	4013      	ands	r3, r2
 8004414:	d00d      	beq.n	8004432 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	0018      	movs	r0, r3
 800441a:	f000 fdd4 	bl	8004fc6 <UART_EndTransmit_IT>
    return;
 800441e:	e008      	b.n	8004432 <HAL_UART_IRQHandler+0x5a6>
      return;
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	e006      	b.n	8004432 <HAL_UART_IRQHandler+0x5a6>
    return;
 8004424:	46c0      	nop			; (mov r8, r8)
 8004426:	e004      	b.n	8004432 <HAL_UART_IRQHandler+0x5a6>
      return;
 8004428:	46c0      	nop			; (mov r8, r8)
 800442a:	e002      	b.n	8004432 <HAL_UART_IRQHandler+0x5a6>
      return;
 800442c:	46c0      	nop			; (mov r8, r8)
 800442e:	e000      	b.n	8004432 <HAL_UART_IRQHandler+0x5a6>
    return;
 8004430:	46c0      	nop			; (mov r8, r8)
  }

}
 8004432:	46bd      	mov	sp, r7
 8004434:	b02b      	add	sp, #172	; 0xac
 8004436:	bd90      	pop	{r4, r7, pc}
 8004438:	fffffeff 	.word	0xfffffeff
 800443c:	fffffedf 	.word	0xfffffedf

08004440 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004448:	46c0      	nop			; (mov r8, r8)
 800444a:	46bd      	mov	sp, r7
 800444c:	b002      	add	sp, #8
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004458:	46c0      	nop			; (mov r8, r8)
 800445a:	46bd      	mov	sp, r7
 800445c:	b002      	add	sp, #8
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	000a      	movs	r2, r1
 800446a:	1cbb      	adds	r3, r7, #2
 800446c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	46bd      	mov	sp, r7
 8004472:	b002      	add	sp, #8
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004478:	b5b0      	push	{r4, r5, r7, lr}
 800447a:	b08e      	sub	sp, #56	; 0x38
 800447c:	af00      	add	r7, sp, #0
 800447e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004480:	231a      	movs	r3, #26
 8004482:	2218      	movs	r2, #24
 8004484:	4694      	mov	ip, r2
 8004486:	44bc      	add	ip, r7
 8004488:	4463      	add	r3, ip
 800448a:	2200      	movs	r2, #0
 800448c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	431a      	orrs	r2, r3
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	431a      	orrs	r2, r3
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4ab0      	ldr	r2, [pc, #704]	; (8004770 <UART_SetConfig+0x2f8>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	0019      	movs	r1, r3
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044b8:	430a      	orrs	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	4aac      	ldr	r2, [pc, #688]	; (8004774 <UART_SetConfig+0x2fc>)
 80044c4:	4013      	ands	r3, r2
 80044c6:	0019      	movs	r1, r3
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4aa6      	ldr	r2, [pc, #664]	; (8004778 <UART_SetConfig+0x300>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d004      	beq.n	80044ee <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044ea:	4313      	orrs	r3, r2
 80044ec:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	4aa1      	ldr	r2, [pc, #644]	; (800477c <UART_SetConfig+0x304>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	0019      	movs	r1, r3
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a9d      	ldr	r2, [pc, #628]	; (8004780 <UART_SetConfig+0x308>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d136      	bne.n	800457c <UART_SetConfig+0x104>
 800450e:	4b9d      	ldr	r3, [pc, #628]	; (8004784 <UART_SetConfig+0x30c>)
 8004510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004512:	2203      	movs	r2, #3
 8004514:	4013      	ands	r3, r2
 8004516:	2b03      	cmp	r3, #3
 8004518:	d020      	beq.n	800455c <UART_SetConfig+0xe4>
 800451a:	d827      	bhi.n	800456c <UART_SetConfig+0xf4>
 800451c:	2b02      	cmp	r3, #2
 800451e:	d00d      	beq.n	800453c <UART_SetConfig+0xc4>
 8004520:	d824      	bhi.n	800456c <UART_SetConfig+0xf4>
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <UART_SetConfig+0xb4>
 8004526:	2b01      	cmp	r3, #1
 8004528:	d010      	beq.n	800454c <UART_SetConfig+0xd4>
 800452a:	e01f      	b.n	800456c <UART_SetConfig+0xf4>
 800452c:	231b      	movs	r3, #27
 800452e:	2218      	movs	r2, #24
 8004530:	4694      	mov	ip, r2
 8004532:	44bc      	add	ip, r7
 8004534:	4463      	add	r3, ip
 8004536:	2201      	movs	r2, #1
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	e0c5      	b.n	80046c8 <UART_SetConfig+0x250>
 800453c:	231b      	movs	r3, #27
 800453e:	2218      	movs	r2, #24
 8004540:	4694      	mov	ip, r2
 8004542:	44bc      	add	ip, r7
 8004544:	4463      	add	r3, ip
 8004546:	2202      	movs	r2, #2
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	e0bd      	b.n	80046c8 <UART_SetConfig+0x250>
 800454c:	231b      	movs	r3, #27
 800454e:	2218      	movs	r2, #24
 8004550:	4694      	mov	ip, r2
 8004552:	44bc      	add	ip, r7
 8004554:	4463      	add	r3, ip
 8004556:	2204      	movs	r2, #4
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	e0b5      	b.n	80046c8 <UART_SetConfig+0x250>
 800455c:	231b      	movs	r3, #27
 800455e:	2218      	movs	r2, #24
 8004560:	4694      	mov	ip, r2
 8004562:	44bc      	add	ip, r7
 8004564:	4463      	add	r3, ip
 8004566:	2208      	movs	r2, #8
 8004568:	701a      	strb	r2, [r3, #0]
 800456a:	e0ad      	b.n	80046c8 <UART_SetConfig+0x250>
 800456c:	231b      	movs	r3, #27
 800456e:	2218      	movs	r2, #24
 8004570:	4694      	mov	ip, r2
 8004572:	44bc      	add	ip, r7
 8004574:	4463      	add	r3, ip
 8004576:	2210      	movs	r2, #16
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	e0a5      	b.n	80046c8 <UART_SetConfig+0x250>
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a81      	ldr	r2, [pc, #516]	; (8004788 <UART_SetConfig+0x310>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d136      	bne.n	80045f4 <UART_SetConfig+0x17c>
 8004586:	4b7f      	ldr	r3, [pc, #508]	; (8004784 <UART_SetConfig+0x30c>)
 8004588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458a:	220c      	movs	r2, #12
 800458c:	4013      	ands	r3, r2
 800458e:	2b0c      	cmp	r3, #12
 8004590:	d020      	beq.n	80045d4 <UART_SetConfig+0x15c>
 8004592:	d827      	bhi.n	80045e4 <UART_SetConfig+0x16c>
 8004594:	2b08      	cmp	r3, #8
 8004596:	d00d      	beq.n	80045b4 <UART_SetConfig+0x13c>
 8004598:	d824      	bhi.n	80045e4 <UART_SetConfig+0x16c>
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <UART_SetConfig+0x12c>
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d010      	beq.n	80045c4 <UART_SetConfig+0x14c>
 80045a2:	e01f      	b.n	80045e4 <UART_SetConfig+0x16c>
 80045a4:	231b      	movs	r3, #27
 80045a6:	2218      	movs	r2, #24
 80045a8:	4694      	mov	ip, r2
 80045aa:	44bc      	add	ip, r7
 80045ac:	4463      	add	r3, ip
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	e089      	b.n	80046c8 <UART_SetConfig+0x250>
 80045b4:	231b      	movs	r3, #27
 80045b6:	2218      	movs	r2, #24
 80045b8:	4694      	mov	ip, r2
 80045ba:	44bc      	add	ip, r7
 80045bc:	4463      	add	r3, ip
 80045be:	2202      	movs	r2, #2
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	e081      	b.n	80046c8 <UART_SetConfig+0x250>
 80045c4:	231b      	movs	r3, #27
 80045c6:	2218      	movs	r2, #24
 80045c8:	4694      	mov	ip, r2
 80045ca:	44bc      	add	ip, r7
 80045cc:	4463      	add	r3, ip
 80045ce:	2204      	movs	r2, #4
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	e079      	b.n	80046c8 <UART_SetConfig+0x250>
 80045d4:	231b      	movs	r3, #27
 80045d6:	2218      	movs	r2, #24
 80045d8:	4694      	mov	ip, r2
 80045da:	44bc      	add	ip, r7
 80045dc:	4463      	add	r3, ip
 80045de:	2208      	movs	r2, #8
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	e071      	b.n	80046c8 <UART_SetConfig+0x250>
 80045e4:	231b      	movs	r3, #27
 80045e6:	2218      	movs	r2, #24
 80045e8:	4694      	mov	ip, r2
 80045ea:	44bc      	add	ip, r7
 80045ec:	4463      	add	r3, ip
 80045ee:	2210      	movs	r2, #16
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	e069      	b.n	80046c8 <UART_SetConfig+0x250>
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a64      	ldr	r2, [pc, #400]	; (800478c <UART_SetConfig+0x314>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d107      	bne.n	800460e <UART_SetConfig+0x196>
 80045fe:	231b      	movs	r3, #27
 8004600:	2218      	movs	r2, #24
 8004602:	4694      	mov	ip, r2
 8004604:	44bc      	add	ip, r7
 8004606:	4463      	add	r3, ip
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	e05c      	b.n	80046c8 <UART_SetConfig+0x250>
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a5f      	ldr	r2, [pc, #380]	; (8004790 <UART_SetConfig+0x318>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d107      	bne.n	8004628 <UART_SetConfig+0x1b0>
 8004618:	231b      	movs	r3, #27
 800461a:	2218      	movs	r2, #24
 800461c:	4694      	mov	ip, r2
 800461e:	44bc      	add	ip, r7
 8004620:	4463      	add	r3, ip
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
 8004626:	e04f      	b.n	80046c8 <UART_SetConfig+0x250>
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a52      	ldr	r2, [pc, #328]	; (8004778 <UART_SetConfig+0x300>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d143      	bne.n	80046ba <UART_SetConfig+0x242>
 8004632:	4b54      	ldr	r3, [pc, #336]	; (8004784 <UART_SetConfig+0x30c>)
 8004634:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004636:	23c0      	movs	r3, #192	; 0xc0
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	4013      	ands	r3, r2
 800463c:	22c0      	movs	r2, #192	; 0xc0
 800463e:	0112      	lsls	r2, r2, #4
 8004640:	4293      	cmp	r3, r2
 8004642:	d02a      	beq.n	800469a <UART_SetConfig+0x222>
 8004644:	22c0      	movs	r2, #192	; 0xc0
 8004646:	0112      	lsls	r2, r2, #4
 8004648:	4293      	cmp	r3, r2
 800464a:	d82e      	bhi.n	80046aa <UART_SetConfig+0x232>
 800464c:	2280      	movs	r2, #128	; 0x80
 800464e:	0112      	lsls	r2, r2, #4
 8004650:	4293      	cmp	r3, r2
 8004652:	d012      	beq.n	800467a <UART_SetConfig+0x202>
 8004654:	2280      	movs	r2, #128	; 0x80
 8004656:	0112      	lsls	r2, r2, #4
 8004658:	4293      	cmp	r3, r2
 800465a:	d826      	bhi.n	80046aa <UART_SetConfig+0x232>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d004      	beq.n	800466a <UART_SetConfig+0x1f2>
 8004660:	2280      	movs	r2, #128	; 0x80
 8004662:	00d2      	lsls	r2, r2, #3
 8004664:	4293      	cmp	r3, r2
 8004666:	d010      	beq.n	800468a <UART_SetConfig+0x212>
 8004668:	e01f      	b.n	80046aa <UART_SetConfig+0x232>
 800466a:	231b      	movs	r3, #27
 800466c:	2218      	movs	r2, #24
 800466e:	4694      	mov	ip, r2
 8004670:	44bc      	add	ip, r7
 8004672:	4463      	add	r3, ip
 8004674:	2200      	movs	r2, #0
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	e026      	b.n	80046c8 <UART_SetConfig+0x250>
 800467a:	231b      	movs	r3, #27
 800467c:	2218      	movs	r2, #24
 800467e:	4694      	mov	ip, r2
 8004680:	44bc      	add	ip, r7
 8004682:	4463      	add	r3, ip
 8004684:	2202      	movs	r2, #2
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	e01e      	b.n	80046c8 <UART_SetConfig+0x250>
 800468a:	231b      	movs	r3, #27
 800468c:	2218      	movs	r2, #24
 800468e:	4694      	mov	ip, r2
 8004690:	44bc      	add	ip, r7
 8004692:	4463      	add	r3, ip
 8004694:	2204      	movs	r2, #4
 8004696:	701a      	strb	r2, [r3, #0]
 8004698:	e016      	b.n	80046c8 <UART_SetConfig+0x250>
 800469a:	231b      	movs	r3, #27
 800469c:	2218      	movs	r2, #24
 800469e:	4694      	mov	ip, r2
 80046a0:	44bc      	add	ip, r7
 80046a2:	4463      	add	r3, ip
 80046a4:	2208      	movs	r2, #8
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	e00e      	b.n	80046c8 <UART_SetConfig+0x250>
 80046aa:	231b      	movs	r3, #27
 80046ac:	2218      	movs	r2, #24
 80046ae:	4694      	mov	ip, r2
 80046b0:	44bc      	add	ip, r7
 80046b2:	4463      	add	r3, ip
 80046b4:	2210      	movs	r2, #16
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e006      	b.n	80046c8 <UART_SetConfig+0x250>
 80046ba:	231b      	movs	r3, #27
 80046bc:	2218      	movs	r2, #24
 80046be:	4694      	mov	ip, r2
 80046c0:	44bc      	add	ip, r7
 80046c2:	4463      	add	r3, ip
 80046c4:	2210      	movs	r2, #16
 80046c6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a2a      	ldr	r2, [pc, #168]	; (8004778 <UART_SetConfig+0x300>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d000      	beq.n	80046d4 <UART_SetConfig+0x25c>
 80046d2:	e09e      	b.n	8004812 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046d4:	231b      	movs	r3, #27
 80046d6:	2218      	movs	r2, #24
 80046d8:	4694      	mov	ip, r2
 80046da:	44bc      	add	ip, r7
 80046dc:	4463      	add	r3, ip
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d01d      	beq.n	8004720 <UART_SetConfig+0x2a8>
 80046e4:	dc20      	bgt.n	8004728 <UART_SetConfig+0x2b0>
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d015      	beq.n	8004716 <UART_SetConfig+0x29e>
 80046ea:	dc1d      	bgt.n	8004728 <UART_SetConfig+0x2b0>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <UART_SetConfig+0x27e>
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d005      	beq.n	8004700 <UART_SetConfig+0x288>
 80046f4:	e018      	b.n	8004728 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f6:	f7fe fc6d 	bl	8002fd4 <HAL_RCC_GetPCLK1Freq>
 80046fa:	0003      	movs	r3, r0
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046fe:	e01d      	b.n	800473c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004700:	4b20      	ldr	r3, [pc, #128]	; (8004784 <UART_SetConfig+0x30c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2210      	movs	r2, #16
 8004706:	4013      	ands	r3, r2
 8004708:	d002      	beq.n	8004710 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800470a:	4b22      	ldr	r3, [pc, #136]	; (8004794 <UART_SetConfig+0x31c>)
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800470e:	e015      	b.n	800473c <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8004710:	4b21      	ldr	r3, [pc, #132]	; (8004798 <UART_SetConfig+0x320>)
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004714:	e012      	b.n	800473c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004716:	f7fe fbad 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 800471a:	0003      	movs	r3, r0
 800471c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800471e:	e00d      	b.n	800473c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004726:	e009      	b.n	800473c <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800472c:	231a      	movs	r3, #26
 800472e:	2218      	movs	r2, #24
 8004730:	4694      	mov	ip, r2
 8004732:	44bc      	add	ip, r7
 8004734:	4463      	add	r3, ip
 8004736:	2201      	movs	r2, #1
 8004738:	701a      	strb	r2, [r3, #0]
        break;
 800473a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800473c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d100      	bne.n	8004744 <UART_SetConfig+0x2cc>
 8004742:	e13c      	b.n	80049be <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	0013      	movs	r3, r2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	189b      	adds	r3, r3, r2
 800474e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004750:	429a      	cmp	r2, r3
 8004752:	d305      	bcc.n	8004760 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800475a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800475c:	429a      	cmp	r2, r3
 800475e:	d91d      	bls.n	800479c <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8004760:	231a      	movs	r3, #26
 8004762:	2218      	movs	r2, #24
 8004764:	4694      	mov	ip, r2
 8004766:	44bc      	add	ip, r7
 8004768:	4463      	add	r3, ip
 800476a:	2201      	movs	r2, #1
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	e126      	b.n	80049be <UART_SetConfig+0x546>
 8004770:	efff69f3 	.word	0xefff69f3
 8004774:	ffffcfff 	.word	0xffffcfff
 8004778:	40004800 	.word	0x40004800
 800477c:	fffff4ff 	.word	0xfffff4ff
 8004780:	40013800 	.word	0x40013800
 8004784:	40021000 	.word	0x40021000
 8004788:	40004400 	.word	0x40004400
 800478c:	40004c00 	.word	0x40004c00
 8004790:	40005000 	.word	0x40005000
 8004794:	003d0900 	.word	0x003d0900
 8004798:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800479c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	6939      	ldr	r1, [r7, #16]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	000b      	movs	r3, r1
 80047aa:	0e1b      	lsrs	r3, r3, #24
 80047ac:	0010      	movs	r0, r2
 80047ae:	0205      	lsls	r5, r0, #8
 80047b0:	431d      	orrs	r5, r3
 80047b2:	000b      	movs	r3, r1
 80047b4:	021c      	lsls	r4, r3, #8
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	085b      	lsrs	r3, r3, #1
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	68b8      	ldr	r0, [r7, #8]
 80047c4:	68f9      	ldr	r1, [r7, #12]
 80047c6:	1900      	adds	r0, r0, r4
 80047c8:	4169      	adcs	r1, r5
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	2300      	movs	r3, #0
 80047d2:	607b      	str	r3, [r7, #4]
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f7fb fd34 	bl	8000244 <__aeabi_uldivmod>
 80047dc:	0002      	movs	r2, r0
 80047de:	000b      	movs	r3, r1
 80047e0:	0013      	movs	r3, r2
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e6:	23c0      	movs	r3, #192	; 0xc0
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d309      	bcc.n	8004802 <UART_SetConfig+0x38a>
 80047ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	035b      	lsls	r3, r3, #13
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d204      	bcs.n	8004802 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047fe:	60da      	str	r2, [r3, #12]
 8004800:	e0dd      	b.n	80049be <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004802:	231a      	movs	r3, #26
 8004804:	2218      	movs	r2, #24
 8004806:	4694      	mov	ip, r2
 8004808:	44bc      	add	ip, r7
 800480a:	4463      	add	r3, ip
 800480c:	2201      	movs	r2, #1
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	e0d5      	b.n	80049be <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	69da      	ldr	r2, [r3, #28]
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	429a      	cmp	r2, r3
 800481c:	d000      	beq.n	8004820 <UART_SetConfig+0x3a8>
 800481e:	e074      	b.n	800490a <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8004820:	231b      	movs	r3, #27
 8004822:	2218      	movs	r2, #24
 8004824:	4694      	mov	ip, r2
 8004826:	44bc      	add	ip, r7
 8004828:	4463      	add	r3, ip
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d822      	bhi.n	8004876 <UART_SetConfig+0x3fe>
 8004830:	009a      	lsls	r2, r3, #2
 8004832:	4b6b      	ldr	r3, [pc, #428]	; (80049e0 <UART_SetConfig+0x568>)
 8004834:	18d3      	adds	r3, r2, r3
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800483a:	f7fe fbcb 	bl	8002fd4 <HAL_RCC_GetPCLK1Freq>
 800483e:	0003      	movs	r3, r0
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004842:	e022      	b.n	800488a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004844:	f7fe fbdc 	bl	8003000 <HAL_RCC_GetPCLK2Freq>
 8004848:	0003      	movs	r3, r0
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800484c:	e01d      	b.n	800488a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800484e:	4b65      	ldr	r3, [pc, #404]	; (80049e4 <UART_SetConfig+0x56c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2210      	movs	r2, #16
 8004854:	4013      	ands	r3, r2
 8004856:	d002      	beq.n	800485e <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004858:	4b63      	ldr	r3, [pc, #396]	; (80049e8 <UART_SetConfig+0x570>)
 800485a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800485c:	e015      	b.n	800488a <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800485e:	4b63      	ldr	r3, [pc, #396]	; (80049ec <UART_SetConfig+0x574>)
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004862:	e012      	b.n	800488a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004864:	f7fe fb06 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8004868:	0003      	movs	r3, r0
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800486c:	e00d      	b.n	800488a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800486e:	2380      	movs	r3, #128	; 0x80
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004874:	e009      	b.n	800488a <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800487a:	231a      	movs	r3, #26
 800487c:	2218      	movs	r2, #24
 800487e:	4694      	mov	ip, r2
 8004880:	44bc      	add	ip, r7
 8004882:	4463      	add	r3, ip
 8004884:	2201      	movs	r2, #1
 8004886:	701a      	strb	r2, [r3, #0]
        break;
 8004888:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800488a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d100      	bne.n	8004892 <UART_SetConfig+0x41a>
 8004890:	e095      	b.n	80049be <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	005a      	lsls	r2, r3, #1
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	18d2      	adds	r2, r2, r3
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	0019      	movs	r1, r3
 80048a4:	0010      	movs	r0, r2
 80048a6:	f7fb fc41 	bl	800012c <__udivsi3>
 80048aa:	0003      	movs	r3, r0
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	2b0f      	cmp	r3, #15
 80048b4:	d921      	bls.n	80048fa <UART_SetConfig+0x482>
 80048b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	025b      	lsls	r3, r3, #9
 80048bc:	429a      	cmp	r2, r3
 80048be:	d21c      	bcs.n	80048fa <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	200e      	movs	r0, #14
 80048c6:	2418      	movs	r4, #24
 80048c8:	193b      	adds	r3, r7, r4
 80048ca:	181b      	adds	r3, r3, r0
 80048cc:	210f      	movs	r1, #15
 80048ce:	438a      	bics	r2, r1
 80048d0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2207      	movs	r2, #7
 80048da:	4013      	ands	r3, r2
 80048dc:	b299      	uxth	r1, r3
 80048de:	193b      	adds	r3, r7, r4
 80048e0:	181b      	adds	r3, r3, r0
 80048e2:	193a      	adds	r2, r7, r4
 80048e4:	1812      	adds	r2, r2, r0
 80048e6:	8812      	ldrh	r2, [r2, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	193a      	adds	r2, r7, r4
 80048f2:	1812      	adds	r2, r2, r0
 80048f4:	8812      	ldrh	r2, [r2, #0]
 80048f6:	60da      	str	r2, [r3, #12]
 80048f8:	e061      	b.n	80049be <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80048fa:	231a      	movs	r3, #26
 80048fc:	2218      	movs	r2, #24
 80048fe:	4694      	mov	ip, r2
 8004900:	44bc      	add	ip, r7
 8004902:	4463      	add	r3, ip
 8004904:	2201      	movs	r2, #1
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	e059      	b.n	80049be <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800490a:	231b      	movs	r3, #27
 800490c:	2218      	movs	r2, #24
 800490e:	4694      	mov	ip, r2
 8004910:	44bc      	add	ip, r7
 8004912:	4463      	add	r3, ip
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b08      	cmp	r3, #8
 8004918:	d822      	bhi.n	8004960 <UART_SetConfig+0x4e8>
 800491a:	009a      	lsls	r2, r3, #2
 800491c:	4b34      	ldr	r3, [pc, #208]	; (80049f0 <UART_SetConfig+0x578>)
 800491e:	18d3      	adds	r3, r2, r3
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004924:	f7fe fb56 	bl	8002fd4 <HAL_RCC_GetPCLK1Freq>
 8004928:	0003      	movs	r3, r0
 800492a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800492c:	e022      	b.n	8004974 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800492e:	f7fe fb67 	bl	8003000 <HAL_RCC_GetPCLK2Freq>
 8004932:	0003      	movs	r3, r0
 8004934:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004936:	e01d      	b.n	8004974 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004938:	4b2a      	ldr	r3, [pc, #168]	; (80049e4 <UART_SetConfig+0x56c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2210      	movs	r2, #16
 800493e:	4013      	ands	r3, r2
 8004940:	d002      	beq.n	8004948 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004942:	4b29      	ldr	r3, [pc, #164]	; (80049e8 <UART_SetConfig+0x570>)
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004946:	e015      	b.n	8004974 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8004948:	4b28      	ldr	r3, [pc, #160]	; (80049ec <UART_SetConfig+0x574>)
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800494c:	e012      	b.n	8004974 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800494e:	f7fe fa91 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8004952:	0003      	movs	r3, r0
 8004954:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004956:	e00d      	b.n	8004974 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	021b      	lsls	r3, r3, #8
 800495c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800495e:	e009      	b.n	8004974 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004964:	231a      	movs	r3, #26
 8004966:	2218      	movs	r2, #24
 8004968:	4694      	mov	ip, r2
 800496a:	44bc      	add	ip, r7
 800496c:	4463      	add	r3, ip
 800496e:	2201      	movs	r2, #1
 8004970:	701a      	strb	r2, [r3, #0]
        break;
 8004972:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	2b00      	cmp	r3, #0
 8004978:	d021      	beq.n	80049be <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	085a      	lsrs	r2, r3, #1
 8004980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004982:	18d2      	adds	r2, r2, r3
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	0019      	movs	r1, r3
 800498a:	0010      	movs	r0, r2
 800498c:	f7fb fbce 	bl	800012c <__udivsi3>
 8004990:	0003      	movs	r3, r0
 8004992:	b29b      	uxth	r3, r3
 8004994:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	2b0f      	cmp	r3, #15
 800499a:	d909      	bls.n	80049b0 <UART_SetConfig+0x538>
 800499c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800499e:	2380      	movs	r3, #128	; 0x80
 80049a0:	025b      	lsls	r3, r3, #9
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d204      	bcs.n	80049b0 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049ac:	60da      	str	r2, [r3, #12]
 80049ae:	e006      	b.n	80049be <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80049b0:	231a      	movs	r3, #26
 80049b2:	2218      	movs	r2, #24
 80049b4:	4694      	mov	ip, r2
 80049b6:	44bc      	add	ip, r7
 80049b8:	4463      	add	r3, ip
 80049ba:	2201      	movs	r2, #1
 80049bc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	2200      	movs	r2, #0
 80049c2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	2200      	movs	r2, #0
 80049c8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049ca:	231a      	movs	r3, #26
 80049cc:	2218      	movs	r2, #24
 80049ce:	4694      	mov	ip, r2
 80049d0:	44bc      	add	ip, r7
 80049d2:	4463      	add	r3, ip
 80049d4:	781b      	ldrb	r3, [r3, #0]
}
 80049d6:	0018      	movs	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	b00e      	add	sp, #56	; 0x38
 80049dc:	bdb0      	pop	{r4, r5, r7, pc}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	08005c74 	.word	0x08005c74
 80049e4:	40021000 	.word	0x40021000
 80049e8:	003d0900 	.word	0x003d0900
 80049ec:	00f42400 	.word	0x00f42400
 80049f0:	08005c98 	.word	0x08005c98

080049f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	2201      	movs	r2, #1
 8004a02:	4013      	ands	r3, r2
 8004a04:	d00b      	beq.n	8004a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	4a4a      	ldr	r2, [pc, #296]	; (8004b38 <UART_AdvFeatureConfig+0x144>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	0019      	movs	r1, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	2202      	movs	r2, #2
 8004a24:	4013      	ands	r3, r2
 8004a26:	d00b      	beq.n	8004a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	4a43      	ldr	r2, [pc, #268]	; (8004b3c <UART_AdvFeatureConfig+0x148>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	0019      	movs	r1, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	2204      	movs	r2, #4
 8004a46:	4013      	ands	r3, r2
 8004a48:	d00b      	beq.n	8004a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	4a3b      	ldr	r2, [pc, #236]	; (8004b40 <UART_AdvFeatureConfig+0x14c>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	0019      	movs	r1, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	2208      	movs	r2, #8
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d00b      	beq.n	8004a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	4a34      	ldr	r2, [pc, #208]	; (8004b44 <UART_AdvFeatureConfig+0x150>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	0019      	movs	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	2210      	movs	r2, #16
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d00b      	beq.n	8004aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	4a2c      	ldr	r2, [pc, #176]	; (8004b48 <UART_AdvFeatureConfig+0x154>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	0019      	movs	r1, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	2220      	movs	r2, #32
 8004aac:	4013      	ands	r3, r2
 8004aae:	d00b      	beq.n	8004ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	4a25      	ldr	r2, [pc, #148]	; (8004b4c <UART_AdvFeatureConfig+0x158>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	0019      	movs	r1, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	2240      	movs	r2, #64	; 0x40
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d01d      	beq.n	8004b0e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	4a1d      	ldr	r2, [pc, #116]	; (8004b50 <UART_AdvFeatureConfig+0x15c>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	0019      	movs	r1, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aee:	2380      	movs	r3, #128	; 0x80
 8004af0:	035b      	lsls	r3, r3, #13
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d10b      	bne.n	8004b0e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	4a15      	ldr	r2, [pc, #84]	; (8004b54 <UART_AdvFeatureConfig+0x160>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	0019      	movs	r1, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	2280      	movs	r2, #128	; 0x80
 8004b14:	4013      	ands	r3, r2
 8004b16:	d00b      	beq.n	8004b30 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4a0e      	ldr	r2, [pc, #56]	; (8004b58 <UART_AdvFeatureConfig+0x164>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	0019      	movs	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	605a      	str	r2, [r3, #4]
  }
}
 8004b30:	46c0      	nop			; (mov r8, r8)
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b002      	add	sp, #8
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	fffdffff 	.word	0xfffdffff
 8004b3c:	fffeffff 	.word	0xfffeffff
 8004b40:	fffbffff 	.word	0xfffbffff
 8004b44:	ffff7fff 	.word	0xffff7fff
 8004b48:	ffffefff 	.word	0xffffefff
 8004b4c:	ffffdfff 	.word	0xffffdfff
 8004b50:	ffefffff 	.word	0xffefffff
 8004b54:	ff9fffff 	.word	0xff9fffff
 8004b58:	fff7ffff 	.word	0xfff7ffff

08004b5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2280      	movs	r2, #128	; 0x80
 8004b68:	2100      	movs	r1, #0
 8004b6a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b6c:	f7fd f8fe 	bl	8001d6c <HAL_GetTick>
 8004b70:	0003      	movs	r3, r0
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2208      	movs	r2, #8
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d10c      	bne.n	8004b9c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2280      	movs	r2, #128	; 0x80
 8004b86:	0391      	lsls	r1, r2, #14
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <UART_CheckIdleState+0x8c>)
 8004b8c:	9200      	str	r2, [sp, #0]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f000 f82c 	bl	8004bec <UART_WaitOnFlagUntilTimeout>
 8004b94:	1e03      	subs	r3, r0, #0
 8004b96:	d001      	beq.n	8004b9c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e021      	b.n	8004be0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d10c      	bne.n	8004bc4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2280      	movs	r2, #128	; 0x80
 8004bae:	03d1      	lsls	r1, r2, #15
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	4a0d      	ldr	r2, [pc, #52]	; (8004be8 <UART_CheckIdleState+0x8c>)
 8004bb4:	9200      	str	r2, [sp, #0]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f000 f818 	bl	8004bec <UART_WaitOnFlagUntilTimeout>
 8004bbc:	1e03      	subs	r3, r0, #0
 8004bbe:	d001      	beq.n	8004bc4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e00d      	b.n	8004be0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2274      	movs	r2, #116	; 0x74
 8004bda:	2100      	movs	r1, #0
 8004bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	0018      	movs	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	b004      	add	sp, #16
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	01ffffff 	.word	0x01ffffff

08004bec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b094      	sub	sp, #80	; 0x50
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	1dfb      	adds	r3, r7, #7
 8004bfa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bfc:	e0a3      	b.n	8004d46 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c00:	3301      	adds	r3, #1
 8004c02:	d100      	bne.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004c04:	e09f      	b.n	8004d46 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c06:	f7fd f8b1 	bl	8001d6c <HAL_GetTick>
 8004c0a:	0002      	movs	r2, r0
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d302      	bcc.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d13d      	bne.n	8004c98 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c20:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c24:	647b      	str	r3, [r7, #68]	; 0x44
 8004c26:	2301      	movs	r3, #1
 8004c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	f383 8810 	msr	PRIMASK, r3
}
 8004c30:	46c0      	nop			; (mov r8, r8)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	494c      	ldr	r1, [pc, #304]	; (8004d70 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004c3e:	400a      	ands	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c44:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	f383 8810 	msr	PRIMASK, r3
}
 8004c4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c52:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c56:	643b      	str	r3, [r7, #64]	; 0x40
 8004c58:	2301      	movs	r3, #1
 8004c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5e:	f383 8810 	msr	PRIMASK, r3
}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2101      	movs	r1, #1
 8004c70:	438a      	bics	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c7a:	f383 8810 	msr	PRIMASK, r3
}
 8004c7e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2274      	movs	r2, #116	; 0x74
 8004c90:	2100      	movs	r1, #0
 8004c92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e067      	b.n	8004d68 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d050      	beq.n	8004d46 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	2380      	movs	r3, #128	; 0x80
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	401a      	ands	r2, r3
 8004cb0:	2380      	movs	r3, #128	; 0x80
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d146      	bne.n	8004d46 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2280      	movs	r2, #128	; 0x80
 8004cbe:	0112      	lsls	r2, r2, #4
 8004cc0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc6:	613b      	str	r3, [r7, #16]
  return(result);
 8004cc8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ccc:	2301      	movs	r3, #1
 8004cce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f383 8810 	msr	PRIMASK, r3
}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4923      	ldr	r1, [pc, #140]	; (8004d70 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004ce4:	400a      	ands	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	f383 8810 	msr	PRIMASK, r3
}
 8004cf2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004cfa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cfe:	2301      	movs	r3, #1
 8004d00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	f383 8810 	msr	PRIMASK, r3
}
 8004d08:	46c0      	nop			; (mov r8, r8)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2101      	movs	r1, #1
 8004d16:	438a      	bics	r2, r1
 8004d18:	609a      	str	r2, [r3, #8]
 8004d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	f383 8810 	msr	PRIMASK, r3
}
 8004d24:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2280      	movs	r2, #128	; 0x80
 8004d36:	2120      	movs	r1, #32
 8004d38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2274      	movs	r2, #116	; 0x74
 8004d3e:	2100      	movs	r1, #0
 8004d40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e010      	b.n	8004d68 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	425a      	negs	r2, r3
 8004d56:	4153      	adcs	r3, r2
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	001a      	movs	r2, r3
 8004d5c:	1dfb      	adds	r3, r7, #7
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d100      	bne.n	8004d66 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004d64:	e74b      	b.n	8004bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	0018      	movs	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b014      	add	sp, #80	; 0x50
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	fffffe5f 	.word	0xfffffe5f

08004d74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08c      	sub	sp, #48	; 0x30
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	1dbb      	adds	r3, r7, #6
 8004d80:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1dba      	adds	r2, r7, #6
 8004d8c:	2158      	movs	r1, #88	; 0x58
 8004d8e:	8812      	ldrh	r2, [r2, #0]
 8004d90:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1dba      	adds	r2, r7, #6
 8004d96:	215a      	movs	r1, #90	; 0x5a
 8004d98:	8812      	ldrh	r2, [r2, #0]
 8004d9a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	2380      	movs	r3, #128	; 0x80
 8004da8:	015b      	lsls	r3, r3, #5
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d10d      	bne.n	8004dca <UART_Start_Receive_IT+0x56>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d104      	bne.n	8004dc0 <UART_Start_Receive_IT+0x4c>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	225c      	movs	r2, #92	; 0x5c
 8004dba:	4943      	ldr	r1, [pc, #268]	; (8004ec8 <UART_Start_Receive_IT+0x154>)
 8004dbc:	5299      	strh	r1, [r3, r2]
 8004dbe:	e02e      	b.n	8004e1e <UART_Start_Receive_IT+0xaa>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	225c      	movs	r2, #92	; 0x5c
 8004dc4:	21ff      	movs	r1, #255	; 0xff
 8004dc6:	5299      	strh	r1, [r3, r2]
 8004dc8:	e029      	b.n	8004e1e <UART_Start_Receive_IT+0xaa>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10d      	bne.n	8004dee <UART_Start_Receive_IT+0x7a>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d104      	bne.n	8004de4 <UART_Start_Receive_IT+0x70>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	225c      	movs	r2, #92	; 0x5c
 8004dde:	21ff      	movs	r1, #255	; 0xff
 8004de0:	5299      	strh	r1, [r3, r2]
 8004de2:	e01c      	b.n	8004e1e <UART_Start_Receive_IT+0xaa>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	225c      	movs	r2, #92	; 0x5c
 8004de8:	217f      	movs	r1, #127	; 0x7f
 8004dea:	5299      	strh	r1, [r3, r2]
 8004dec:	e017      	b.n	8004e1e <UART_Start_Receive_IT+0xaa>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	2380      	movs	r3, #128	; 0x80
 8004df4:	055b      	lsls	r3, r3, #21
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d10d      	bne.n	8004e16 <UART_Start_Receive_IT+0xa2>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d104      	bne.n	8004e0c <UART_Start_Receive_IT+0x98>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	225c      	movs	r2, #92	; 0x5c
 8004e06:	217f      	movs	r1, #127	; 0x7f
 8004e08:	5299      	strh	r1, [r3, r2]
 8004e0a:	e008      	b.n	8004e1e <UART_Start_Receive_IT+0xaa>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	225c      	movs	r2, #92	; 0x5c
 8004e10:	213f      	movs	r1, #63	; 0x3f
 8004e12:	5299      	strh	r1, [r3, r2]
 8004e14:	e003      	b.n	8004e1e <UART_Start_Receive_IT+0xaa>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	225c      	movs	r2, #92	; 0x5c
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2280      	movs	r2, #128	; 0x80
 8004e22:	2100      	movs	r1, #0
 8004e24:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2222      	movs	r2, #34	; 0x22
 8004e2a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e30:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e32:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e36:	2301      	movs	r3, #1
 8004e38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	f383 8810 	msr	PRIMASK, r3
}
 8004e40:	46c0      	nop			; (mov r8, r8)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]
 8004e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	f383 8810 	msr	PRIMASK, r3
}
 8004e5c:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	015b      	lsls	r3, r3, #5
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d107      	bne.n	8004e7a <UART_Start_Receive_IT+0x106>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d103      	bne.n	8004e7a <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <UART_Start_Receive_IT+0x158>)
 8004e76:	665a      	str	r2, [r3, #100]	; 0x64
 8004e78:	e002      	b.n	8004e80 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4a14      	ldr	r2, [pc, #80]	; (8004ed0 <UART_Start_Receive_IT+0x15c>)
 8004e7e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2274      	movs	r2, #116	; 0x74
 8004e84:	2100      	movs	r1, #0
 8004e86:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e88:	f3ef 8310 	mrs	r3, PRIMASK
 8004e8c:	613b      	str	r3, [r7, #16]
  return(result);
 8004e8e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e92:	2301      	movs	r3, #1
 8004e94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f383 8810 	msr	PRIMASK, r3
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2190      	movs	r1, #144	; 0x90
 8004eaa:	0049      	lsls	r1, r1, #1
 8004eac:	430a      	orrs	r2, r1
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f383 8810 	msr	PRIMASK, r3
}
 8004eba:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b00c      	add	sp, #48	; 0x30
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	000001ff 	.word	0x000001ff
 8004ecc:	08005185 	.word	0x08005185
 8004ed0:	0800501d 	.word	0x0800501d

08004ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08e      	sub	sp, #56	; 0x38
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004edc:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee0:	617b      	str	r3, [r7, #20]
  return(result);
 8004ee2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	f383 8810 	msr	PRIMASK, r3
}
 8004ef0:	46c0      	nop			; (mov r8, r8)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4925      	ldr	r1, [pc, #148]	; (8004f94 <UART_EndRxTransfer+0xc0>)
 8004efe:	400a      	ands	r2, r1
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f383 8810 	msr	PRIMASK, r3
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f12:	623b      	str	r3, [r7, #32]
  return(result);
 8004f14:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f16:	633b      	str	r3, [r7, #48]	; 0x30
 8004f18:	2301      	movs	r3, #1
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	f383 8810 	msr	PRIMASK, r3
}
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2101      	movs	r1, #1
 8004f30:	438a      	bics	r2, r1
 8004f32:	609a      	str	r2, [r3, #8]
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	f383 8810 	msr	PRIMASK, r3
}
 8004f3e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d118      	bne.n	8004f7a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f48:	f3ef 8310 	mrs	r3, PRIMASK
 8004f4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f52:	2301      	movs	r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f383 8810 	msr	PRIMASK, r3
}
 8004f5c:	46c0      	nop			; (mov r8, r8)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2110      	movs	r1, #16
 8004f6a:	438a      	bics	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f383 8810 	msr	PRIMASK, r3
}
 8004f78:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004f8c:	46c0      	nop			; (mov r8, r8)
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b00e      	add	sp, #56	; 0x38
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	fffffedf 	.word	0xfffffedf

08004f98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	225a      	movs	r2, #90	; 0x5a
 8004faa:	2100      	movs	r1, #0
 8004fac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2252      	movs	r2, #82	; 0x52
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f7ff fa49 	bl	8004450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b004      	add	sp, #16
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b086      	sub	sp, #24
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fce:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	2301      	movs	r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f383 8810 	msr	PRIMASK, r3
}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2140      	movs	r1, #64	; 0x40
 8004ff0:	438a      	bics	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f383 8810 	msr	PRIMASK, r3
}
 8004ffe:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	0018      	movs	r0, r3
 8005010:	f7ff fa16 	bl	8004440 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005014:	46c0      	nop			; (mov r8, r8)
 8005016:	46bd      	mov	sp, r7
 8005018:	b006      	add	sp, #24
 800501a:	bd80      	pop	{r7, pc}

0800501c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b090      	sub	sp, #64	; 0x40
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005024:	203e      	movs	r0, #62	; 0x3e
 8005026:	183b      	adds	r3, r7, r0
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	215c      	movs	r1, #92	; 0x5c
 800502c:	5a52      	ldrh	r2, [r2, r1]
 800502e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005034:	2b22      	cmp	r3, #34	; 0x22
 8005036:	d000      	beq.n	800503a <UART_RxISR_8BIT+0x1e>
 8005038:	e095      	b.n	8005166 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005040:	213c      	movs	r1, #60	; 0x3c
 8005042:	187b      	adds	r3, r7, r1
 8005044:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005046:	187b      	adds	r3, r7, r1
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	183b      	adds	r3, r7, r0
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b2d9      	uxtb	r1, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	400a      	ands	r2, r1
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	225a      	movs	r2, #90	; 0x5a
 800506a:	5a9b      	ldrh	r3, [r3, r2]
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b299      	uxth	r1, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	225a      	movs	r2, #90	; 0x5a
 8005076:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	225a      	movs	r2, #90	; 0x5a
 800507c:	5a9b      	ldrh	r3, [r3, r2]
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d178      	bne.n	8005176 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005084:	f3ef 8310 	mrs	r3, PRIMASK
 8005088:	61bb      	str	r3, [r7, #24]
  return(result);
 800508a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800508c:	63bb      	str	r3, [r7, #56]	; 0x38
 800508e:	2301      	movs	r3, #1
 8005090:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	f383 8810 	msr	PRIMASK, r3
}
 8005098:	46c0      	nop			; (mov r8, r8)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4936      	ldr	r1, [pc, #216]	; (8005180 <UART_RxISR_8BIT+0x164>)
 80050a6:	400a      	ands	r2, r1
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	f383 8810 	msr	PRIMASK, r3
}
 80050b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b6:	f3ef 8310 	mrs	r3, PRIMASK
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050be:	637b      	str	r3, [r7, #52]	; 0x34
 80050c0:	2301      	movs	r3, #1
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	f383 8810 	msr	PRIMASK, r3
}
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2101      	movs	r1, #1
 80050d8:	438a      	bics	r2, r1
 80050da:	609a      	str	r2, [r3, #8]
 80050dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	f383 8810 	msr	PRIMASK, r3
}
 80050e6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d12f      	bne.n	800515c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005102:	f3ef 8310 	mrs	r3, PRIMASK
 8005106:	60fb      	str	r3, [r7, #12]
  return(result);
 8005108:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800510a:	633b      	str	r3, [r7, #48]	; 0x30
 800510c:	2301      	movs	r3, #1
 800510e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f383 8810 	msr	PRIMASK, r3
}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2110      	movs	r1, #16
 8005124:	438a      	bics	r2, r1
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f383 8810 	msr	PRIMASK, r3
}
 8005132:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	2210      	movs	r2, #16
 800513c:	4013      	ands	r3, r2
 800513e:	2b10      	cmp	r3, #16
 8005140:	d103      	bne.n	800514a <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2210      	movs	r2, #16
 8005148:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2258      	movs	r2, #88	; 0x58
 800514e:	5a9a      	ldrh	r2, [r3, r2]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	0011      	movs	r1, r2
 8005154:	0018      	movs	r0, r3
 8005156:	f7ff f983 	bl	8004460 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800515a:	e00c      	b.n	8005176 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	0018      	movs	r0, r3
 8005160:	f7fb ff10 	bl	8000f84 <HAL_UART_RxCpltCallback>
}
 8005164:	e007      	b.n	8005176 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699a      	ldr	r2, [r3, #24]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2108      	movs	r1, #8
 8005172:	430a      	orrs	r2, r1
 8005174:	619a      	str	r2, [r3, #24]
}
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	46bd      	mov	sp, r7
 800517a:	b010      	add	sp, #64	; 0x40
 800517c:	bd80      	pop	{r7, pc}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	fffffedf 	.word	0xfffffedf

08005184 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b090      	sub	sp, #64	; 0x40
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800518c:	203e      	movs	r0, #62	; 0x3e
 800518e:	183b      	adds	r3, r7, r0
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	215c      	movs	r1, #92	; 0x5c
 8005194:	5a52      	ldrh	r2, [r2, r1]
 8005196:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800519c:	2b22      	cmp	r3, #34	; 0x22
 800519e:	d000      	beq.n	80051a2 <UART_RxISR_16BIT+0x1e>
 80051a0:	e095      	b.n	80052ce <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051a8:	213c      	movs	r1, #60	; 0x3c
 80051aa:	187b      	adds	r3, r7, r1
 80051ac:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b2:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80051b4:	187b      	adds	r3, r7, r1
 80051b6:	183a      	adds	r2, r7, r0
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	8812      	ldrh	r2, [r2, #0]
 80051bc:	4013      	ands	r3, r2
 80051be:	b29a      	uxth	r2, r3
 80051c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c8:	1c9a      	adds	r2, r3, #2
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	225a      	movs	r2, #90	; 0x5a
 80051d2:	5a9b      	ldrh	r3, [r3, r2]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b299      	uxth	r1, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	225a      	movs	r2, #90	; 0x5a
 80051de:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	225a      	movs	r2, #90	; 0x5a
 80051e4:	5a9b      	ldrh	r3, [r3, r2]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d178      	bne.n	80052de <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ec:	f3ef 8310 	mrs	r3, PRIMASK
 80051f0:	617b      	str	r3, [r7, #20]
  return(result);
 80051f2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051f4:	637b      	str	r3, [r7, #52]	; 0x34
 80051f6:	2301      	movs	r3, #1
 80051f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	f383 8810 	msr	PRIMASK, r3
}
 8005200:	46c0      	nop			; (mov r8, r8)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4936      	ldr	r1, [pc, #216]	; (80052e8 <UART_RxISR_16BIT+0x164>)
 800520e:	400a      	ands	r2, r1
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005214:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f383 8810 	msr	PRIMASK, r3
}
 800521c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800521e:	f3ef 8310 	mrs	r3, PRIMASK
 8005222:	623b      	str	r3, [r7, #32]
  return(result);
 8005224:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005226:	633b      	str	r3, [r7, #48]	; 0x30
 8005228:	2301      	movs	r3, #1
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	f383 8810 	msr	PRIMASK, r3
}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2101      	movs	r1, #1
 8005240:	438a      	bics	r2, r1
 8005242:	609a      	str	r2, [r3, #8]
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	f383 8810 	msr	PRIMASK, r3
}
 800524e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005260:	2b01      	cmp	r3, #1
 8005262:	d12f      	bne.n	80052c4 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800526a:	f3ef 8310 	mrs	r3, PRIMASK
 800526e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005270:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005274:	2301      	movs	r3, #1
 8005276:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f383 8810 	msr	PRIMASK, r3
}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2110      	movs	r1, #16
 800528c:	438a      	bics	r2, r1
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005292:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f383 8810 	msr	PRIMASK, r3
}
 800529a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	2210      	movs	r2, #16
 80052a4:	4013      	ands	r3, r2
 80052a6:	2b10      	cmp	r3, #16
 80052a8:	d103      	bne.n	80052b2 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2210      	movs	r2, #16
 80052b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2258      	movs	r2, #88	; 0x58
 80052b6:	5a9a      	ldrh	r2, [r3, r2]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	0011      	movs	r1, r2
 80052bc:	0018      	movs	r0, r3
 80052be:	f7ff f8cf 	bl	8004460 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052c2:	e00c      	b.n	80052de <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	0018      	movs	r0, r3
 80052c8:	f7fb fe5c 	bl	8000f84 <HAL_UART_RxCpltCallback>
}
 80052cc:	e007      	b.n	80052de <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	699a      	ldr	r2, [r3, #24]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2108      	movs	r1, #8
 80052da:	430a      	orrs	r2, r1
 80052dc:	619a      	str	r2, [r3, #24]
}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	46bd      	mov	sp, r7
 80052e2:	b010      	add	sp, #64	; 0x40
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	fffffedf 	.word	0xfffffedf

080052ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052f4:	46c0      	nop			; (mov r8, r8)
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b002      	add	sp, #8
 80052fa:	bd80      	pop	{r7, pc}

080052fc <__errno>:
 80052fc:	4b01      	ldr	r3, [pc, #4]	; (8005304 <__errno+0x8>)
 80052fe:	6818      	ldr	r0, [r3, #0]
 8005300:	4770      	bx	lr
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	200001c0 	.word	0x200001c0

08005308 <__libc_init_array>:
 8005308:	b570      	push	{r4, r5, r6, lr}
 800530a:	2600      	movs	r6, #0
 800530c:	4d0c      	ldr	r5, [pc, #48]	; (8005340 <__libc_init_array+0x38>)
 800530e:	4c0d      	ldr	r4, [pc, #52]	; (8005344 <__libc_init_array+0x3c>)
 8005310:	1b64      	subs	r4, r4, r5
 8005312:	10a4      	asrs	r4, r4, #2
 8005314:	42a6      	cmp	r6, r4
 8005316:	d109      	bne.n	800532c <__libc_init_array+0x24>
 8005318:	2600      	movs	r6, #0
 800531a:	f000 fc47 	bl	8005bac <_init>
 800531e:	4d0a      	ldr	r5, [pc, #40]	; (8005348 <__libc_init_array+0x40>)
 8005320:	4c0a      	ldr	r4, [pc, #40]	; (800534c <__libc_init_array+0x44>)
 8005322:	1b64      	subs	r4, r4, r5
 8005324:	10a4      	asrs	r4, r4, #2
 8005326:	42a6      	cmp	r6, r4
 8005328:	d105      	bne.n	8005336 <__libc_init_array+0x2e>
 800532a:	bd70      	pop	{r4, r5, r6, pc}
 800532c:	00b3      	lsls	r3, r6, #2
 800532e:	58eb      	ldr	r3, [r5, r3]
 8005330:	4798      	blx	r3
 8005332:	3601      	adds	r6, #1
 8005334:	e7ee      	b.n	8005314 <__libc_init_array+0xc>
 8005336:	00b3      	lsls	r3, r6, #2
 8005338:	58eb      	ldr	r3, [r5, r3]
 800533a:	4798      	blx	r3
 800533c:	3601      	adds	r6, #1
 800533e:	e7f2      	b.n	8005326 <__libc_init_array+0x1e>
 8005340:	08005cf8 	.word	0x08005cf8
 8005344:	08005cf8 	.word	0x08005cf8
 8005348:	08005cf8 	.word	0x08005cf8
 800534c:	08005cfc 	.word	0x08005cfc

08005350 <memcpy>:
 8005350:	2300      	movs	r3, #0
 8005352:	b510      	push	{r4, lr}
 8005354:	429a      	cmp	r2, r3
 8005356:	d100      	bne.n	800535a <memcpy+0xa>
 8005358:	bd10      	pop	{r4, pc}
 800535a:	5ccc      	ldrb	r4, [r1, r3]
 800535c:	54c4      	strb	r4, [r0, r3]
 800535e:	3301      	adds	r3, #1
 8005360:	e7f8      	b.n	8005354 <memcpy+0x4>

08005362 <memset>:
 8005362:	0003      	movs	r3, r0
 8005364:	1882      	adds	r2, r0, r2
 8005366:	4293      	cmp	r3, r2
 8005368:	d100      	bne.n	800536c <memset+0xa>
 800536a:	4770      	bx	lr
 800536c:	7019      	strb	r1, [r3, #0]
 800536e:	3301      	adds	r3, #1
 8005370:	e7f9      	b.n	8005366 <memset+0x4>
	...

08005374 <siprintf>:
 8005374:	b40e      	push	{r1, r2, r3}
 8005376:	b500      	push	{lr}
 8005378:	490b      	ldr	r1, [pc, #44]	; (80053a8 <siprintf+0x34>)
 800537a:	b09c      	sub	sp, #112	; 0x70
 800537c:	ab1d      	add	r3, sp, #116	; 0x74
 800537e:	9002      	str	r0, [sp, #8]
 8005380:	9006      	str	r0, [sp, #24]
 8005382:	9107      	str	r1, [sp, #28]
 8005384:	9104      	str	r1, [sp, #16]
 8005386:	4809      	ldr	r0, [pc, #36]	; (80053ac <siprintf+0x38>)
 8005388:	4909      	ldr	r1, [pc, #36]	; (80053b0 <siprintf+0x3c>)
 800538a:	cb04      	ldmia	r3!, {r2}
 800538c:	9105      	str	r1, [sp, #20]
 800538e:	6800      	ldr	r0, [r0, #0]
 8005390:	a902      	add	r1, sp, #8
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	f000 f870 	bl	8005478 <_svfiprintf_r>
 8005398:	2300      	movs	r3, #0
 800539a:	9a02      	ldr	r2, [sp, #8]
 800539c:	7013      	strb	r3, [r2, #0]
 800539e:	b01c      	add	sp, #112	; 0x70
 80053a0:	bc08      	pop	{r3}
 80053a2:	b003      	add	sp, #12
 80053a4:	4718      	bx	r3
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	7fffffff 	.word	0x7fffffff
 80053ac:	200001c0 	.word	0x200001c0
 80053b0:	ffff0208 	.word	0xffff0208

080053b4 <__ssputs_r>:
 80053b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053b6:	688e      	ldr	r6, [r1, #8]
 80053b8:	b085      	sub	sp, #20
 80053ba:	0007      	movs	r7, r0
 80053bc:	000c      	movs	r4, r1
 80053be:	9203      	str	r2, [sp, #12]
 80053c0:	9301      	str	r3, [sp, #4]
 80053c2:	429e      	cmp	r6, r3
 80053c4:	d83c      	bhi.n	8005440 <__ssputs_r+0x8c>
 80053c6:	2390      	movs	r3, #144	; 0x90
 80053c8:	898a      	ldrh	r2, [r1, #12]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	421a      	tst	r2, r3
 80053ce:	d034      	beq.n	800543a <__ssputs_r+0x86>
 80053d0:	2503      	movs	r5, #3
 80053d2:	6909      	ldr	r1, [r1, #16]
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	1a5b      	subs	r3, r3, r1
 80053d8:	9302      	str	r3, [sp, #8]
 80053da:	6963      	ldr	r3, [r4, #20]
 80053dc:	9802      	ldr	r0, [sp, #8]
 80053de:	435d      	muls	r5, r3
 80053e0:	0feb      	lsrs	r3, r5, #31
 80053e2:	195d      	adds	r5, r3, r5
 80053e4:	9b01      	ldr	r3, [sp, #4]
 80053e6:	106d      	asrs	r5, r5, #1
 80053e8:	3301      	adds	r3, #1
 80053ea:	181b      	adds	r3, r3, r0
 80053ec:	42ab      	cmp	r3, r5
 80053ee:	d900      	bls.n	80053f2 <__ssputs_r+0x3e>
 80053f0:	001d      	movs	r5, r3
 80053f2:	0553      	lsls	r3, r2, #21
 80053f4:	d532      	bpl.n	800545c <__ssputs_r+0xa8>
 80053f6:	0029      	movs	r1, r5
 80053f8:	0038      	movs	r0, r7
 80053fa:	f000 fb27 	bl	8005a4c <_malloc_r>
 80053fe:	1e06      	subs	r6, r0, #0
 8005400:	d109      	bne.n	8005416 <__ssputs_r+0x62>
 8005402:	230c      	movs	r3, #12
 8005404:	603b      	str	r3, [r7, #0]
 8005406:	2340      	movs	r3, #64	; 0x40
 8005408:	2001      	movs	r0, #1
 800540a:	89a2      	ldrh	r2, [r4, #12]
 800540c:	4240      	negs	r0, r0
 800540e:	4313      	orrs	r3, r2
 8005410:	81a3      	strh	r3, [r4, #12]
 8005412:	b005      	add	sp, #20
 8005414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005416:	9a02      	ldr	r2, [sp, #8]
 8005418:	6921      	ldr	r1, [r4, #16]
 800541a:	f7ff ff99 	bl	8005350 <memcpy>
 800541e:	89a3      	ldrh	r3, [r4, #12]
 8005420:	4a14      	ldr	r2, [pc, #80]	; (8005474 <__ssputs_r+0xc0>)
 8005422:	401a      	ands	r2, r3
 8005424:	2380      	movs	r3, #128	; 0x80
 8005426:	4313      	orrs	r3, r2
 8005428:	81a3      	strh	r3, [r4, #12]
 800542a:	9b02      	ldr	r3, [sp, #8]
 800542c:	6126      	str	r6, [r4, #16]
 800542e:	18f6      	adds	r6, r6, r3
 8005430:	6026      	str	r6, [r4, #0]
 8005432:	6165      	str	r5, [r4, #20]
 8005434:	9e01      	ldr	r6, [sp, #4]
 8005436:	1aed      	subs	r5, r5, r3
 8005438:	60a5      	str	r5, [r4, #8]
 800543a:	9b01      	ldr	r3, [sp, #4]
 800543c:	429e      	cmp	r6, r3
 800543e:	d900      	bls.n	8005442 <__ssputs_r+0x8e>
 8005440:	9e01      	ldr	r6, [sp, #4]
 8005442:	0032      	movs	r2, r6
 8005444:	9903      	ldr	r1, [sp, #12]
 8005446:	6820      	ldr	r0, [r4, #0]
 8005448:	f000 faa3 	bl	8005992 <memmove>
 800544c:	68a3      	ldr	r3, [r4, #8]
 800544e:	2000      	movs	r0, #0
 8005450:	1b9b      	subs	r3, r3, r6
 8005452:	60a3      	str	r3, [r4, #8]
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	199e      	adds	r6, r3, r6
 8005458:	6026      	str	r6, [r4, #0]
 800545a:	e7da      	b.n	8005412 <__ssputs_r+0x5e>
 800545c:	002a      	movs	r2, r5
 800545e:	0038      	movs	r0, r7
 8005460:	f000 fb52 	bl	8005b08 <_realloc_r>
 8005464:	1e06      	subs	r6, r0, #0
 8005466:	d1e0      	bne.n	800542a <__ssputs_r+0x76>
 8005468:	0038      	movs	r0, r7
 800546a:	6921      	ldr	r1, [r4, #16]
 800546c:	f000 faa4 	bl	80059b8 <_free_r>
 8005470:	e7c7      	b.n	8005402 <__ssputs_r+0x4e>
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	fffffb7f 	.word	0xfffffb7f

08005478 <_svfiprintf_r>:
 8005478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800547a:	b0a1      	sub	sp, #132	; 0x84
 800547c:	9003      	str	r0, [sp, #12]
 800547e:	001d      	movs	r5, r3
 8005480:	898b      	ldrh	r3, [r1, #12]
 8005482:	000f      	movs	r7, r1
 8005484:	0016      	movs	r6, r2
 8005486:	061b      	lsls	r3, r3, #24
 8005488:	d511      	bpl.n	80054ae <_svfiprintf_r+0x36>
 800548a:	690b      	ldr	r3, [r1, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10e      	bne.n	80054ae <_svfiprintf_r+0x36>
 8005490:	2140      	movs	r1, #64	; 0x40
 8005492:	f000 fadb 	bl	8005a4c <_malloc_r>
 8005496:	6038      	str	r0, [r7, #0]
 8005498:	6138      	str	r0, [r7, #16]
 800549a:	2800      	cmp	r0, #0
 800549c:	d105      	bne.n	80054aa <_svfiprintf_r+0x32>
 800549e:	230c      	movs	r3, #12
 80054a0:	9a03      	ldr	r2, [sp, #12]
 80054a2:	3801      	subs	r0, #1
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	b021      	add	sp, #132	; 0x84
 80054a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054aa:	2340      	movs	r3, #64	; 0x40
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	2300      	movs	r3, #0
 80054b0:	ac08      	add	r4, sp, #32
 80054b2:	6163      	str	r3, [r4, #20]
 80054b4:	3320      	adds	r3, #32
 80054b6:	7663      	strb	r3, [r4, #25]
 80054b8:	3310      	adds	r3, #16
 80054ba:	76a3      	strb	r3, [r4, #26]
 80054bc:	9507      	str	r5, [sp, #28]
 80054be:	0035      	movs	r5, r6
 80054c0:	782b      	ldrb	r3, [r5, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <_svfiprintf_r+0x52>
 80054c6:	2b25      	cmp	r3, #37	; 0x25
 80054c8:	d147      	bne.n	800555a <_svfiprintf_r+0xe2>
 80054ca:	1bab      	subs	r3, r5, r6
 80054cc:	9305      	str	r3, [sp, #20]
 80054ce:	42b5      	cmp	r5, r6
 80054d0:	d00c      	beq.n	80054ec <_svfiprintf_r+0x74>
 80054d2:	0032      	movs	r2, r6
 80054d4:	0039      	movs	r1, r7
 80054d6:	9803      	ldr	r0, [sp, #12]
 80054d8:	f7ff ff6c 	bl	80053b4 <__ssputs_r>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d100      	bne.n	80054e2 <_svfiprintf_r+0x6a>
 80054e0:	e0ae      	b.n	8005640 <_svfiprintf_r+0x1c8>
 80054e2:	6962      	ldr	r2, [r4, #20]
 80054e4:	9b05      	ldr	r3, [sp, #20]
 80054e6:	4694      	mov	ip, r2
 80054e8:	4463      	add	r3, ip
 80054ea:	6163      	str	r3, [r4, #20]
 80054ec:	782b      	ldrb	r3, [r5, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d100      	bne.n	80054f4 <_svfiprintf_r+0x7c>
 80054f2:	e0a5      	b.n	8005640 <_svfiprintf_r+0x1c8>
 80054f4:	2201      	movs	r2, #1
 80054f6:	2300      	movs	r3, #0
 80054f8:	4252      	negs	r2, r2
 80054fa:	6062      	str	r2, [r4, #4]
 80054fc:	a904      	add	r1, sp, #16
 80054fe:	3254      	adds	r2, #84	; 0x54
 8005500:	1852      	adds	r2, r2, r1
 8005502:	1c6e      	adds	r6, r5, #1
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	60e3      	str	r3, [r4, #12]
 8005508:	60a3      	str	r3, [r4, #8]
 800550a:	7013      	strb	r3, [r2, #0]
 800550c:	65a3      	str	r3, [r4, #88]	; 0x58
 800550e:	2205      	movs	r2, #5
 8005510:	7831      	ldrb	r1, [r6, #0]
 8005512:	4854      	ldr	r0, [pc, #336]	; (8005664 <_svfiprintf_r+0x1ec>)
 8005514:	f000 fa32 	bl	800597c <memchr>
 8005518:	1c75      	adds	r5, r6, #1
 800551a:	2800      	cmp	r0, #0
 800551c:	d11f      	bne.n	800555e <_svfiprintf_r+0xe6>
 800551e:	6822      	ldr	r2, [r4, #0]
 8005520:	06d3      	lsls	r3, r2, #27
 8005522:	d504      	bpl.n	800552e <_svfiprintf_r+0xb6>
 8005524:	2353      	movs	r3, #83	; 0x53
 8005526:	a904      	add	r1, sp, #16
 8005528:	185b      	adds	r3, r3, r1
 800552a:	2120      	movs	r1, #32
 800552c:	7019      	strb	r1, [r3, #0]
 800552e:	0713      	lsls	r3, r2, #28
 8005530:	d504      	bpl.n	800553c <_svfiprintf_r+0xc4>
 8005532:	2353      	movs	r3, #83	; 0x53
 8005534:	a904      	add	r1, sp, #16
 8005536:	185b      	adds	r3, r3, r1
 8005538:	212b      	movs	r1, #43	; 0x2b
 800553a:	7019      	strb	r1, [r3, #0]
 800553c:	7833      	ldrb	r3, [r6, #0]
 800553e:	2b2a      	cmp	r3, #42	; 0x2a
 8005540:	d016      	beq.n	8005570 <_svfiprintf_r+0xf8>
 8005542:	0035      	movs	r5, r6
 8005544:	2100      	movs	r1, #0
 8005546:	200a      	movs	r0, #10
 8005548:	68e3      	ldr	r3, [r4, #12]
 800554a:	782a      	ldrb	r2, [r5, #0]
 800554c:	1c6e      	adds	r6, r5, #1
 800554e:	3a30      	subs	r2, #48	; 0x30
 8005550:	2a09      	cmp	r2, #9
 8005552:	d94e      	bls.n	80055f2 <_svfiprintf_r+0x17a>
 8005554:	2900      	cmp	r1, #0
 8005556:	d111      	bne.n	800557c <_svfiprintf_r+0x104>
 8005558:	e017      	b.n	800558a <_svfiprintf_r+0x112>
 800555a:	3501      	adds	r5, #1
 800555c:	e7b0      	b.n	80054c0 <_svfiprintf_r+0x48>
 800555e:	4b41      	ldr	r3, [pc, #260]	; (8005664 <_svfiprintf_r+0x1ec>)
 8005560:	6822      	ldr	r2, [r4, #0]
 8005562:	1ac0      	subs	r0, r0, r3
 8005564:	2301      	movs	r3, #1
 8005566:	4083      	lsls	r3, r0
 8005568:	4313      	orrs	r3, r2
 800556a:	002e      	movs	r6, r5
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	e7ce      	b.n	800550e <_svfiprintf_r+0x96>
 8005570:	9b07      	ldr	r3, [sp, #28]
 8005572:	1d19      	adds	r1, r3, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	9107      	str	r1, [sp, #28]
 8005578:	2b00      	cmp	r3, #0
 800557a:	db01      	blt.n	8005580 <_svfiprintf_r+0x108>
 800557c:	930b      	str	r3, [sp, #44]	; 0x2c
 800557e:	e004      	b.n	800558a <_svfiprintf_r+0x112>
 8005580:	425b      	negs	r3, r3
 8005582:	60e3      	str	r3, [r4, #12]
 8005584:	2302      	movs	r3, #2
 8005586:	4313      	orrs	r3, r2
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	782b      	ldrb	r3, [r5, #0]
 800558c:	2b2e      	cmp	r3, #46	; 0x2e
 800558e:	d10a      	bne.n	80055a6 <_svfiprintf_r+0x12e>
 8005590:	786b      	ldrb	r3, [r5, #1]
 8005592:	2b2a      	cmp	r3, #42	; 0x2a
 8005594:	d135      	bne.n	8005602 <_svfiprintf_r+0x18a>
 8005596:	9b07      	ldr	r3, [sp, #28]
 8005598:	3502      	adds	r5, #2
 800559a:	1d1a      	adds	r2, r3, #4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	9207      	str	r2, [sp, #28]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	db2b      	blt.n	80055fc <_svfiprintf_r+0x184>
 80055a4:	9309      	str	r3, [sp, #36]	; 0x24
 80055a6:	4e30      	ldr	r6, [pc, #192]	; (8005668 <_svfiprintf_r+0x1f0>)
 80055a8:	2203      	movs	r2, #3
 80055aa:	0030      	movs	r0, r6
 80055ac:	7829      	ldrb	r1, [r5, #0]
 80055ae:	f000 f9e5 	bl	800597c <memchr>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d006      	beq.n	80055c4 <_svfiprintf_r+0x14c>
 80055b6:	2340      	movs	r3, #64	; 0x40
 80055b8:	1b80      	subs	r0, r0, r6
 80055ba:	4083      	lsls	r3, r0
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	3501      	adds	r5, #1
 80055c0:	4313      	orrs	r3, r2
 80055c2:	6023      	str	r3, [r4, #0]
 80055c4:	7829      	ldrb	r1, [r5, #0]
 80055c6:	2206      	movs	r2, #6
 80055c8:	4828      	ldr	r0, [pc, #160]	; (800566c <_svfiprintf_r+0x1f4>)
 80055ca:	1c6e      	adds	r6, r5, #1
 80055cc:	7621      	strb	r1, [r4, #24]
 80055ce:	f000 f9d5 	bl	800597c <memchr>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d03c      	beq.n	8005650 <_svfiprintf_r+0x1d8>
 80055d6:	4b26      	ldr	r3, [pc, #152]	; (8005670 <_svfiprintf_r+0x1f8>)
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d125      	bne.n	8005628 <_svfiprintf_r+0x1b0>
 80055dc:	2207      	movs	r2, #7
 80055de:	9b07      	ldr	r3, [sp, #28]
 80055e0:	3307      	adds	r3, #7
 80055e2:	4393      	bics	r3, r2
 80055e4:	3308      	adds	r3, #8
 80055e6:	9307      	str	r3, [sp, #28]
 80055e8:	6963      	ldr	r3, [r4, #20]
 80055ea:	9a04      	ldr	r2, [sp, #16]
 80055ec:	189b      	adds	r3, r3, r2
 80055ee:	6163      	str	r3, [r4, #20]
 80055f0:	e765      	b.n	80054be <_svfiprintf_r+0x46>
 80055f2:	4343      	muls	r3, r0
 80055f4:	0035      	movs	r5, r6
 80055f6:	2101      	movs	r1, #1
 80055f8:	189b      	adds	r3, r3, r2
 80055fa:	e7a6      	b.n	800554a <_svfiprintf_r+0xd2>
 80055fc:	2301      	movs	r3, #1
 80055fe:	425b      	negs	r3, r3
 8005600:	e7d0      	b.n	80055a4 <_svfiprintf_r+0x12c>
 8005602:	2300      	movs	r3, #0
 8005604:	200a      	movs	r0, #10
 8005606:	001a      	movs	r2, r3
 8005608:	3501      	adds	r5, #1
 800560a:	6063      	str	r3, [r4, #4]
 800560c:	7829      	ldrb	r1, [r5, #0]
 800560e:	1c6e      	adds	r6, r5, #1
 8005610:	3930      	subs	r1, #48	; 0x30
 8005612:	2909      	cmp	r1, #9
 8005614:	d903      	bls.n	800561e <_svfiprintf_r+0x1a6>
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0c5      	beq.n	80055a6 <_svfiprintf_r+0x12e>
 800561a:	9209      	str	r2, [sp, #36]	; 0x24
 800561c:	e7c3      	b.n	80055a6 <_svfiprintf_r+0x12e>
 800561e:	4342      	muls	r2, r0
 8005620:	0035      	movs	r5, r6
 8005622:	2301      	movs	r3, #1
 8005624:	1852      	adds	r2, r2, r1
 8005626:	e7f1      	b.n	800560c <_svfiprintf_r+0x194>
 8005628:	ab07      	add	r3, sp, #28
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	003a      	movs	r2, r7
 800562e:	0021      	movs	r1, r4
 8005630:	4b10      	ldr	r3, [pc, #64]	; (8005674 <_svfiprintf_r+0x1fc>)
 8005632:	9803      	ldr	r0, [sp, #12]
 8005634:	e000      	b.n	8005638 <_svfiprintf_r+0x1c0>
 8005636:	bf00      	nop
 8005638:	9004      	str	r0, [sp, #16]
 800563a:	9b04      	ldr	r3, [sp, #16]
 800563c:	3301      	adds	r3, #1
 800563e:	d1d3      	bne.n	80055e8 <_svfiprintf_r+0x170>
 8005640:	89bb      	ldrh	r3, [r7, #12]
 8005642:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005644:	065b      	lsls	r3, r3, #25
 8005646:	d400      	bmi.n	800564a <_svfiprintf_r+0x1d2>
 8005648:	e72d      	b.n	80054a6 <_svfiprintf_r+0x2e>
 800564a:	2001      	movs	r0, #1
 800564c:	4240      	negs	r0, r0
 800564e:	e72a      	b.n	80054a6 <_svfiprintf_r+0x2e>
 8005650:	ab07      	add	r3, sp, #28
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	003a      	movs	r2, r7
 8005656:	0021      	movs	r1, r4
 8005658:	4b06      	ldr	r3, [pc, #24]	; (8005674 <_svfiprintf_r+0x1fc>)
 800565a:	9803      	ldr	r0, [sp, #12]
 800565c:	f000 f87c 	bl	8005758 <_printf_i>
 8005660:	e7ea      	b.n	8005638 <_svfiprintf_r+0x1c0>
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	08005cbc 	.word	0x08005cbc
 8005668:	08005cc2 	.word	0x08005cc2
 800566c:	08005cc6 	.word	0x08005cc6
 8005670:	00000000 	.word	0x00000000
 8005674:	080053b5 	.word	0x080053b5

08005678 <_printf_common>:
 8005678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800567a:	0015      	movs	r5, r2
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	688a      	ldr	r2, [r1, #8]
 8005680:	690b      	ldr	r3, [r1, #16]
 8005682:	000c      	movs	r4, r1
 8005684:	9000      	str	r0, [sp, #0]
 8005686:	4293      	cmp	r3, r2
 8005688:	da00      	bge.n	800568c <_printf_common+0x14>
 800568a:	0013      	movs	r3, r2
 800568c:	0022      	movs	r2, r4
 800568e:	602b      	str	r3, [r5, #0]
 8005690:	3243      	adds	r2, #67	; 0x43
 8005692:	7812      	ldrb	r2, [r2, #0]
 8005694:	2a00      	cmp	r2, #0
 8005696:	d001      	beq.n	800569c <_printf_common+0x24>
 8005698:	3301      	adds	r3, #1
 800569a:	602b      	str	r3, [r5, #0]
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	069b      	lsls	r3, r3, #26
 80056a0:	d502      	bpl.n	80056a8 <_printf_common+0x30>
 80056a2:	682b      	ldr	r3, [r5, #0]
 80056a4:	3302      	adds	r3, #2
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	6822      	ldr	r2, [r4, #0]
 80056aa:	2306      	movs	r3, #6
 80056ac:	0017      	movs	r7, r2
 80056ae:	401f      	ands	r7, r3
 80056b0:	421a      	tst	r2, r3
 80056b2:	d027      	beq.n	8005704 <_printf_common+0x8c>
 80056b4:	0023      	movs	r3, r4
 80056b6:	3343      	adds	r3, #67	; 0x43
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	1e5a      	subs	r2, r3, #1
 80056bc:	4193      	sbcs	r3, r2
 80056be:	6822      	ldr	r2, [r4, #0]
 80056c0:	0692      	lsls	r2, r2, #26
 80056c2:	d430      	bmi.n	8005726 <_printf_common+0xae>
 80056c4:	0022      	movs	r2, r4
 80056c6:	9901      	ldr	r1, [sp, #4]
 80056c8:	9800      	ldr	r0, [sp, #0]
 80056ca:	9e08      	ldr	r6, [sp, #32]
 80056cc:	3243      	adds	r2, #67	; 0x43
 80056ce:	47b0      	blx	r6
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d025      	beq.n	8005720 <_printf_common+0xa8>
 80056d4:	2306      	movs	r3, #6
 80056d6:	6820      	ldr	r0, [r4, #0]
 80056d8:	682a      	ldr	r2, [r5, #0]
 80056da:	68e1      	ldr	r1, [r4, #12]
 80056dc:	2500      	movs	r5, #0
 80056de:	4003      	ands	r3, r0
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d103      	bne.n	80056ec <_printf_common+0x74>
 80056e4:	1a8d      	subs	r5, r1, r2
 80056e6:	43eb      	mvns	r3, r5
 80056e8:	17db      	asrs	r3, r3, #31
 80056ea:	401d      	ands	r5, r3
 80056ec:	68a3      	ldr	r3, [r4, #8]
 80056ee:	6922      	ldr	r2, [r4, #16]
 80056f0:	4293      	cmp	r3, r2
 80056f2:	dd01      	ble.n	80056f8 <_printf_common+0x80>
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	18ed      	adds	r5, r5, r3
 80056f8:	2700      	movs	r7, #0
 80056fa:	42bd      	cmp	r5, r7
 80056fc:	d120      	bne.n	8005740 <_printf_common+0xc8>
 80056fe:	2000      	movs	r0, #0
 8005700:	e010      	b.n	8005724 <_printf_common+0xac>
 8005702:	3701      	adds	r7, #1
 8005704:	68e3      	ldr	r3, [r4, #12]
 8005706:	682a      	ldr	r2, [r5, #0]
 8005708:	1a9b      	subs	r3, r3, r2
 800570a:	42bb      	cmp	r3, r7
 800570c:	ddd2      	ble.n	80056b4 <_printf_common+0x3c>
 800570e:	0022      	movs	r2, r4
 8005710:	2301      	movs	r3, #1
 8005712:	9901      	ldr	r1, [sp, #4]
 8005714:	9800      	ldr	r0, [sp, #0]
 8005716:	9e08      	ldr	r6, [sp, #32]
 8005718:	3219      	adds	r2, #25
 800571a:	47b0      	blx	r6
 800571c:	1c43      	adds	r3, r0, #1
 800571e:	d1f0      	bne.n	8005702 <_printf_common+0x8a>
 8005720:	2001      	movs	r0, #1
 8005722:	4240      	negs	r0, r0
 8005724:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005726:	2030      	movs	r0, #48	; 0x30
 8005728:	18e1      	adds	r1, r4, r3
 800572a:	3143      	adds	r1, #67	; 0x43
 800572c:	7008      	strb	r0, [r1, #0]
 800572e:	0021      	movs	r1, r4
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	3145      	adds	r1, #69	; 0x45
 8005734:	7809      	ldrb	r1, [r1, #0]
 8005736:	18a2      	adds	r2, r4, r2
 8005738:	3243      	adds	r2, #67	; 0x43
 800573a:	3302      	adds	r3, #2
 800573c:	7011      	strb	r1, [r2, #0]
 800573e:	e7c1      	b.n	80056c4 <_printf_common+0x4c>
 8005740:	0022      	movs	r2, r4
 8005742:	2301      	movs	r3, #1
 8005744:	9901      	ldr	r1, [sp, #4]
 8005746:	9800      	ldr	r0, [sp, #0]
 8005748:	9e08      	ldr	r6, [sp, #32]
 800574a:	321a      	adds	r2, #26
 800574c:	47b0      	blx	r6
 800574e:	1c43      	adds	r3, r0, #1
 8005750:	d0e6      	beq.n	8005720 <_printf_common+0xa8>
 8005752:	3701      	adds	r7, #1
 8005754:	e7d1      	b.n	80056fa <_printf_common+0x82>
	...

08005758 <_printf_i>:
 8005758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800575a:	b08b      	sub	sp, #44	; 0x2c
 800575c:	9206      	str	r2, [sp, #24]
 800575e:	000a      	movs	r2, r1
 8005760:	3243      	adds	r2, #67	; 0x43
 8005762:	9307      	str	r3, [sp, #28]
 8005764:	9005      	str	r0, [sp, #20]
 8005766:	9204      	str	r2, [sp, #16]
 8005768:	7e0a      	ldrb	r2, [r1, #24]
 800576a:	000c      	movs	r4, r1
 800576c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800576e:	2a78      	cmp	r2, #120	; 0x78
 8005770:	d806      	bhi.n	8005780 <_printf_i+0x28>
 8005772:	2a62      	cmp	r2, #98	; 0x62
 8005774:	d808      	bhi.n	8005788 <_printf_i+0x30>
 8005776:	2a00      	cmp	r2, #0
 8005778:	d100      	bne.n	800577c <_printf_i+0x24>
 800577a:	e0c0      	b.n	80058fe <_printf_i+0x1a6>
 800577c:	2a58      	cmp	r2, #88	; 0x58
 800577e:	d052      	beq.n	8005826 <_printf_i+0xce>
 8005780:	0026      	movs	r6, r4
 8005782:	3642      	adds	r6, #66	; 0x42
 8005784:	7032      	strb	r2, [r6, #0]
 8005786:	e022      	b.n	80057ce <_printf_i+0x76>
 8005788:	0010      	movs	r0, r2
 800578a:	3863      	subs	r0, #99	; 0x63
 800578c:	2815      	cmp	r0, #21
 800578e:	d8f7      	bhi.n	8005780 <_printf_i+0x28>
 8005790:	f7fa fcc2 	bl	8000118 <__gnu_thumb1_case_shi>
 8005794:	001f0016 	.word	0x001f0016
 8005798:	fff6fff6 	.word	0xfff6fff6
 800579c:	fff6fff6 	.word	0xfff6fff6
 80057a0:	fff6001f 	.word	0xfff6001f
 80057a4:	fff6fff6 	.word	0xfff6fff6
 80057a8:	00a8fff6 	.word	0x00a8fff6
 80057ac:	009a0036 	.word	0x009a0036
 80057b0:	fff6fff6 	.word	0xfff6fff6
 80057b4:	fff600b9 	.word	0xfff600b9
 80057b8:	fff60036 	.word	0xfff60036
 80057bc:	009efff6 	.word	0x009efff6
 80057c0:	0026      	movs	r6, r4
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	3642      	adds	r6, #66	; 0x42
 80057c6:	1d11      	adds	r1, r2, #4
 80057c8:	6019      	str	r1, [r3, #0]
 80057ca:	6813      	ldr	r3, [r2, #0]
 80057cc:	7033      	strb	r3, [r6, #0]
 80057ce:	2301      	movs	r3, #1
 80057d0:	e0a7      	b.n	8005922 <_printf_i+0x1ca>
 80057d2:	6808      	ldr	r0, [r1, #0]
 80057d4:	6819      	ldr	r1, [r3, #0]
 80057d6:	1d0a      	adds	r2, r1, #4
 80057d8:	0605      	lsls	r5, r0, #24
 80057da:	d50b      	bpl.n	80057f4 <_printf_i+0x9c>
 80057dc:	680d      	ldr	r5, [r1, #0]
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	2d00      	cmp	r5, #0
 80057e2:	da03      	bge.n	80057ec <_printf_i+0x94>
 80057e4:	232d      	movs	r3, #45	; 0x2d
 80057e6:	9a04      	ldr	r2, [sp, #16]
 80057e8:	426d      	negs	r5, r5
 80057ea:	7013      	strb	r3, [r2, #0]
 80057ec:	4b61      	ldr	r3, [pc, #388]	; (8005974 <_printf_i+0x21c>)
 80057ee:	270a      	movs	r7, #10
 80057f0:	9303      	str	r3, [sp, #12]
 80057f2:	e032      	b.n	800585a <_printf_i+0x102>
 80057f4:	680d      	ldr	r5, [r1, #0]
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	0641      	lsls	r1, r0, #25
 80057fa:	d5f1      	bpl.n	80057e0 <_printf_i+0x88>
 80057fc:	b22d      	sxth	r5, r5
 80057fe:	e7ef      	b.n	80057e0 <_printf_i+0x88>
 8005800:	680d      	ldr	r5, [r1, #0]
 8005802:	6819      	ldr	r1, [r3, #0]
 8005804:	1d08      	adds	r0, r1, #4
 8005806:	6018      	str	r0, [r3, #0]
 8005808:	062e      	lsls	r6, r5, #24
 800580a:	d501      	bpl.n	8005810 <_printf_i+0xb8>
 800580c:	680d      	ldr	r5, [r1, #0]
 800580e:	e003      	b.n	8005818 <_printf_i+0xc0>
 8005810:	066d      	lsls	r5, r5, #25
 8005812:	d5fb      	bpl.n	800580c <_printf_i+0xb4>
 8005814:	680d      	ldr	r5, [r1, #0]
 8005816:	b2ad      	uxth	r5, r5
 8005818:	4b56      	ldr	r3, [pc, #344]	; (8005974 <_printf_i+0x21c>)
 800581a:	270a      	movs	r7, #10
 800581c:	9303      	str	r3, [sp, #12]
 800581e:	2a6f      	cmp	r2, #111	; 0x6f
 8005820:	d117      	bne.n	8005852 <_printf_i+0xfa>
 8005822:	2708      	movs	r7, #8
 8005824:	e015      	b.n	8005852 <_printf_i+0xfa>
 8005826:	3145      	adds	r1, #69	; 0x45
 8005828:	700a      	strb	r2, [r1, #0]
 800582a:	4a52      	ldr	r2, [pc, #328]	; (8005974 <_printf_i+0x21c>)
 800582c:	9203      	str	r2, [sp, #12]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	6821      	ldr	r1, [r4, #0]
 8005832:	ca20      	ldmia	r2!, {r5}
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	0608      	lsls	r0, r1, #24
 8005838:	d550      	bpl.n	80058dc <_printf_i+0x184>
 800583a:	07cb      	lsls	r3, r1, #31
 800583c:	d502      	bpl.n	8005844 <_printf_i+0xec>
 800583e:	2320      	movs	r3, #32
 8005840:	4319      	orrs	r1, r3
 8005842:	6021      	str	r1, [r4, #0]
 8005844:	2710      	movs	r7, #16
 8005846:	2d00      	cmp	r5, #0
 8005848:	d103      	bne.n	8005852 <_printf_i+0xfa>
 800584a:	2320      	movs	r3, #32
 800584c:	6822      	ldr	r2, [r4, #0]
 800584e:	439a      	bics	r2, r3
 8005850:	6022      	str	r2, [r4, #0]
 8005852:	0023      	movs	r3, r4
 8005854:	2200      	movs	r2, #0
 8005856:	3343      	adds	r3, #67	; 0x43
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	6863      	ldr	r3, [r4, #4]
 800585c:	60a3      	str	r3, [r4, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	db03      	blt.n	800586a <_printf_i+0x112>
 8005862:	2204      	movs	r2, #4
 8005864:	6821      	ldr	r1, [r4, #0]
 8005866:	4391      	bics	r1, r2
 8005868:	6021      	str	r1, [r4, #0]
 800586a:	2d00      	cmp	r5, #0
 800586c:	d102      	bne.n	8005874 <_printf_i+0x11c>
 800586e:	9e04      	ldr	r6, [sp, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00c      	beq.n	800588e <_printf_i+0x136>
 8005874:	9e04      	ldr	r6, [sp, #16]
 8005876:	0028      	movs	r0, r5
 8005878:	0039      	movs	r1, r7
 800587a:	f7fa fcdd 	bl	8000238 <__aeabi_uidivmod>
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	3e01      	subs	r6, #1
 8005882:	5c5b      	ldrb	r3, [r3, r1]
 8005884:	7033      	strb	r3, [r6, #0]
 8005886:	002b      	movs	r3, r5
 8005888:	0005      	movs	r5, r0
 800588a:	429f      	cmp	r7, r3
 800588c:	d9f3      	bls.n	8005876 <_printf_i+0x11e>
 800588e:	2f08      	cmp	r7, #8
 8005890:	d109      	bne.n	80058a6 <_printf_i+0x14e>
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	07db      	lsls	r3, r3, #31
 8005896:	d506      	bpl.n	80058a6 <_printf_i+0x14e>
 8005898:	6863      	ldr	r3, [r4, #4]
 800589a:	6922      	ldr	r2, [r4, #16]
 800589c:	4293      	cmp	r3, r2
 800589e:	dc02      	bgt.n	80058a6 <_printf_i+0x14e>
 80058a0:	2330      	movs	r3, #48	; 0x30
 80058a2:	3e01      	subs	r6, #1
 80058a4:	7033      	strb	r3, [r6, #0]
 80058a6:	9b04      	ldr	r3, [sp, #16]
 80058a8:	1b9b      	subs	r3, r3, r6
 80058aa:	6123      	str	r3, [r4, #16]
 80058ac:	9b07      	ldr	r3, [sp, #28]
 80058ae:	0021      	movs	r1, r4
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	9805      	ldr	r0, [sp, #20]
 80058b4:	9b06      	ldr	r3, [sp, #24]
 80058b6:	aa09      	add	r2, sp, #36	; 0x24
 80058b8:	f7ff fede 	bl	8005678 <_printf_common>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d135      	bne.n	800592c <_printf_i+0x1d4>
 80058c0:	2001      	movs	r0, #1
 80058c2:	4240      	negs	r0, r0
 80058c4:	b00b      	add	sp, #44	; 0x2c
 80058c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058c8:	2220      	movs	r2, #32
 80058ca:	6809      	ldr	r1, [r1, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	6022      	str	r2, [r4, #0]
 80058d0:	0022      	movs	r2, r4
 80058d2:	2178      	movs	r1, #120	; 0x78
 80058d4:	3245      	adds	r2, #69	; 0x45
 80058d6:	7011      	strb	r1, [r2, #0]
 80058d8:	4a27      	ldr	r2, [pc, #156]	; (8005978 <_printf_i+0x220>)
 80058da:	e7a7      	b.n	800582c <_printf_i+0xd4>
 80058dc:	0648      	lsls	r0, r1, #25
 80058de:	d5ac      	bpl.n	800583a <_printf_i+0xe2>
 80058e0:	b2ad      	uxth	r5, r5
 80058e2:	e7aa      	b.n	800583a <_printf_i+0xe2>
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	680d      	ldr	r5, [r1, #0]
 80058e8:	1d10      	adds	r0, r2, #4
 80058ea:	6949      	ldr	r1, [r1, #20]
 80058ec:	6018      	str	r0, [r3, #0]
 80058ee:	6813      	ldr	r3, [r2, #0]
 80058f0:	062e      	lsls	r6, r5, #24
 80058f2:	d501      	bpl.n	80058f8 <_printf_i+0x1a0>
 80058f4:	6019      	str	r1, [r3, #0]
 80058f6:	e002      	b.n	80058fe <_printf_i+0x1a6>
 80058f8:	066d      	lsls	r5, r5, #25
 80058fa:	d5fb      	bpl.n	80058f4 <_printf_i+0x19c>
 80058fc:	8019      	strh	r1, [r3, #0]
 80058fe:	2300      	movs	r3, #0
 8005900:	9e04      	ldr	r6, [sp, #16]
 8005902:	6123      	str	r3, [r4, #16]
 8005904:	e7d2      	b.n	80058ac <_printf_i+0x154>
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	1d11      	adds	r1, r2, #4
 800590a:	6019      	str	r1, [r3, #0]
 800590c:	6816      	ldr	r6, [r2, #0]
 800590e:	2100      	movs	r1, #0
 8005910:	0030      	movs	r0, r6
 8005912:	6862      	ldr	r2, [r4, #4]
 8005914:	f000 f832 	bl	800597c <memchr>
 8005918:	2800      	cmp	r0, #0
 800591a:	d001      	beq.n	8005920 <_printf_i+0x1c8>
 800591c:	1b80      	subs	r0, r0, r6
 800591e:	6060      	str	r0, [r4, #4]
 8005920:	6863      	ldr	r3, [r4, #4]
 8005922:	6123      	str	r3, [r4, #16]
 8005924:	2300      	movs	r3, #0
 8005926:	9a04      	ldr	r2, [sp, #16]
 8005928:	7013      	strb	r3, [r2, #0]
 800592a:	e7bf      	b.n	80058ac <_printf_i+0x154>
 800592c:	6923      	ldr	r3, [r4, #16]
 800592e:	0032      	movs	r2, r6
 8005930:	9906      	ldr	r1, [sp, #24]
 8005932:	9805      	ldr	r0, [sp, #20]
 8005934:	9d07      	ldr	r5, [sp, #28]
 8005936:	47a8      	blx	r5
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d0c1      	beq.n	80058c0 <_printf_i+0x168>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	079b      	lsls	r3, r3, #30
 8005940:	d415      	bmi.n	800596e <_printf_i+0x216>
 8005942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005944:	68e0      	ldr	r0, [r4, #12]
 8005946:	4298      	cmp	r0, r3
 8005948:	dabc      	bge.n	80058c4 <_printf_i+0x16c>
 800594a:	0018      	movs	r0, r3
 800594c:	e7ba      	b.n	80058c4 <_printf_i+0x16c>
 800594e:	0022      	movs	r2, r4
 8005950:	2301      	movs	r3, #1
 8005952:	9906      	ldr	r1, [sp, #24]
 8005954:	9805      	ldr	r0, [sp, #20]
 8005956:	9e07      	ldr	r6, [sp, #28]
 8005958:	3219      	adds	r2, #25
 800595a:	47b0      	blx	r6
 800595c:	1c43      	adds	r3, r0, #1
 800595e:	d0af      	beq.n	80058c0 <_printf_i+0x168>
 8005960:	3501      	adds	r5, #1
 8005962:	68e3      	ldr	r3, [r4, #12]
 8005964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	42ab      	cmp	r3, r5
 800596a:	dcf0      	bgt.n	800594e <_printf_i+0x1f6>
 800596c:	e7e9      	b.n	8005942 <_printf_i+0x1ea>
 800596e:	2500      	movs	r5, #0
 8005970:	e7f7      	b.n	8005962 <_printf_i+0x20a>
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	08005ccd 	.word	0x08005ccd
 8005978:	08005cde 	.word	0x08005cde

0800597c <memchr>:
 800597c:	b2c9      	uxtb	r1, r1
 800597e:	1882      	adds	r2, r0, r2
 8005980:	4290      	cmp	r0, r2
 8005982:	d101      	bne.n	8005988 <memchr+0xc>
 8005984:	2000      	movs	r0, #0
 8005986:	4770      	bx	lr
 8005988:	7803      	ldrb	r3, [r0, #0]
 800598a:	428b      	cmp	r3, r1
 800598c:	d0fb      	beq.n	8005986 <memchr+0xa>
 800598e:	3001      	adds	r0, #1
 8005990:	e7f6      	b.n	8005980 <memchr+0x4>

08005992 <memmove>:
 8005992:	b510      	push	{r4, lr}
 8005994:	4288      	cmp	r0, r1
 8005996:	d902      	bls.n	800599e <memmove+0xc>
 8005998:	188b      	adds	r3, r1, r2
 800599a:	4298      	cmp	r0, r3
 800599c:	d303      	bcc.n	80059a6 <memmove+0x14>
 800599e:	2300      	movs	r3, #0
 80059a0:	e007      	b.n	80059b2 <memmove+0x20>
 80059a2:	5c8b      	ldrb	r3, [r1, r2]
 80059a4:	5483      	strb	r3, [r0, r2]
 80059a6:	3a01      	subs	r2, #1
 80059a8:	d2fb      	bcs.n	80059a2 <memmove+0x10>
 80059aa:	bd10      	pop	{r4, pc}
 80059ac:	5ccc      	ldrb	r4, [r1, r3]
 80059ae:	54c4      	strb	r4, [r0, r3]
 80059b0:	3301      	adds	r3, #1
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d1fa      	bne.n	80059ac <memmove+0x1a>
 80059b6:	e7f8      	b.n	80059aa <memmove+0x18>

080059b8 <_free_r>:
 80059b8:	b570      	push	{r4, r5, r6, lr}
 80059ba:	0005      	movs	r5, r0
 80059bc:	2900      	cmp	r1, #0
 80059be:	d010      	beq.n	80059e2 <_free_r+0x2a>
 80059c0:	1f0c      	subs	r4, r1, #4
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	da00      	bge.n	80059ca <_free_r+0x12>
 80059c8:	18e4      	adds	r4, r4, r3
 80059ca:	0028      	movs	r0, r5
 80059cc:	f000 f8d4 	bl	8005b78 <__malloc_lock>
 80059d0:	4a1d      	ldr	r2, [pc, #116]	; (8005a48 <_free_r+0x90>)
 80059d2:	6813      	ldr	r3, [r2, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d105      	bne.n	80059e4 <_free_r+0x2c>
 80059d8:	6063      	str	r3, [r4, #4]
 80059da:	6014      	str	r4, [r2, #0]
 80059dc:	0028      	movs	r0, r5
 80059de:	f000 f8d3 	bl	8005b88 <__malloc_unlock>
 80059e2:	bd70      	pop	{r4, r5, r6, pc}
 80059e4:	42a3      	cmp	r3, r4
 80059e6:	d908      	bls.n	80059fa <_free_r+0x42>
 80059e8:	6821      	ldr	r1, [r4, #0]
 80059ea:	1860      	adds	r0, r4, r1
 80059ec:	4283      	cmp	r3, r0
 80059ee:	d1f3      	bne.n	80059d8 <_free_r+0x20>
 80059f0:	6818      	ldr	r0, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	1841      	adds	r1, r0, r1
 80059f6:	6021      	str	r1, [r4, #0]
 80059f8:	e7ee      	b.n	80059d8 <_free_r+0x20>
 80059fa:	001a      	movs	r2, r3
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <_free_r+0x4e>
 8005a02:	42a3      	cmp	r3, r4
 8005a04:	d9f9      	bls.n	80059fa <_free_r+0x42>
 8005a06:	6811      	ldr	r1, [r2, #0]
 8005a08:	1850      	adds	r0, r2, r1
 8005a0a:	42a0      	cmp	r0, r4
 8005a0c:	d10b      	bne.n	8005a26 <_free_r+0x6e>
 8005a0e:	6820      	ldr	r0, [r4, #0]
 8005a10:	1809      	adds	r1, r1, r0
 8005a12:	1850      	adds	r0, r2, r1
 8005a14:	6011      	str	r1, [r2, #0]
 8005a16:	4283      	cmp	r3, r0
 8005a18:	d1e0      	bne.n	80059dc <_free_r+0x24>
 8005a1a:	6818      	ldr	r0, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	1841      	adds	r1, r0, r1
 8005a20:	6011      	str	r1, [r2, #0]
 8005a22:	6053      	str	r3, [r2, #4]
 8005a24:	e7da      	b.n	80059dc <_free_r+0x24>
 8005a26:	42a0      	cmp	r0, r4
 8005a28:	d902      	bls.n	8005a30 <_free_r+0x78>
 8005a2a:	230c      	movs	r3, #12
 8005a2c:	602b      	str	r3, [r5, #0]
 8005a2e:	e7d5      	b.n	80059dc <_free_r+0x24>
 8005a30:	6821      	ldr	r1, [r4, #0]
 8005a32:	1860      	adds	r0, r4, r1
 8005a34:	4283      	cmp	r3, r0
 8005a36:	d103      	bne.n	8005a40 <_free_r+0x88>
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	1841      	adds	r1, r0, r1
 8005a3e:	6021      	str	r1, [r4, #0]
 8005a40:	6063      	str	r3, [r4, #4]
 8005a42:	6054      	str	r4, [r2, #4]
 8005a44:	e7ca      	b.n	80059dc <_free_r+0x24>
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	20000490 	.word	0x20000490

08005a4c <_malloc_r>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	2303      	movs	r3, #3
 8005a50:	1ccd      	adds	r5, r1, #3
 8005a52:	439d      	bics	r5, r3
 8005a54:	3508      	adds	r5, #8
 8005a56:	0006      	movs	r6, r0
 8005a58:	2d0c      	cmp	r5, #12
 8005a5a:	d21f      	bcs.n	8005a9c <_malloc_r+0x50>
 8005a5c:	250c      	movs	r5, #12
 8005a5e:	42a9      	cmp	r1, r5
 8005a60:	d81e      	bhi.n	8005aa0 <_malloc_r+0x54>
 8005a62:	0030      	movs	r0, r6
 8005a64:	f000 f888 	bl	8005b78 <__malloc_lock>
 8005a68:	4925      	ldr	r1, [pc, #148]	; (8005b00 <_malloc_r+0xb4>)
 8005a6a:	680a      	ldr	r2, [r1, #0]
 8005a6c:	0014      	movs	r4, r2
 8005a6e:	2c00      	cmp	r4, #0
 8005a70:	d11a      	bne.n	8005aa8 <_malloc_r+0x5c>
 8005a72:	4f24      	ldr	r7, [pc, #144]	; (8005b04 <_malloc_r+0xb8>)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d104      	bne.n	8005a84 <_malloc_r+0x38>
 8005a7a:	0021      	movs	r1, r4
 8005a7c:	0030      	movs	r0, r6
 8005a7e:	f000 f869 	bl	8005b54 <_sbrk_r>
 8005a82:	6038      	str	r0, [r7, #0]
 8005a84:	0029      	movs	r1, r5
 8005a86:	0030      	movs	r0, r6
 8005a88:	f000 f864 	bl	8005b54 <_sbrk_r>
 8005a8c:	1c43      	adds	r3, r0, #1
 8005a8e:	d12b      	bne.n	8005ae8 <_malloc_r+0x9c>
 8005a90:	230c      	movs	r3, #12
 8005a92:	0030      	movs	r0, r6
 8005a94:	6033      	str	r3, [r6, #0]
 8005a96:	f000 f877 	bl	8005b88 <__malloc_unlock>
 8005a9a:	e003      	b.n	8005aa4 <_malloc_r+0x58>
 8005a9c:	2d00      	cmp	r5, #0
 8005a9e:	dade      	bge.n	8005a5e <_malloc_r+0x12>
 8005aa0:	230c      	movs	r3, #12
 8005aa2:	6033      	str	r3, [r6, #0]
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	1b5b      	subs	r3, r3, r5
 8005aac:	d419      	bmi.n	8005ae2 <_malloc_r+0x96>
 8005aae:	2b0b      	cmp	r3, #11
 8005ab0:	d903      	bls.n	8005aba <_malloc_r+0x6e>
 8005ab2:	6023      	str	r3, [r4, #0]
 8005ab4:	18e4      	adds	r4, r4, r3
 8005ab6:	6025      	str	r5, [r4, #0]
 8005ab8:	e003      	b.n	8005ac2 <_malloc_r+0x76>
 8005aba:	6863      	ldr	r3, [r4, #4]
 8005abc:	42a2      	cmp	r2, r4
 8005abe:	d10e      	bne.n	8005ade <_malloc_r+0x92>
 8005ac0:	600b      	str	r3, [r1, #0]
 8005ac2:	0030      	movs	r0, r6
 8005ac4:	f000 f860 	bl	8005b88 <__malloc_unlock>
 8005ac8:	0020      	movs	r0, r4
 8005aca:	2207      	movs	r2, #7
 8005acc:	300b      	adds	r0, #11
 8005ace:	1d23      	adds	r3, r4, #4
 8005ad0:	4390      	bics	r0, r2
 8005ad2:	1ac2      	subs	r2, r0, r3
 8005ad4:	4298      	cmp	r0, r3
 8005ad6:	d0e6      	beq.n	8005aa6 <_malloc_r+0x5a>
 8005ad8:	1a1b      	subs	r3, r3, r0
 8005ada:	50a3      	str	r3, [r4, r2]
 8005adc:	e7e3      	b.n	8005aa6 <_malloc_r+0x5a>
 8005ade:	6053      	str	r3, [r2, #4]
 8005ae0:	e7ef      	b.n	8005ac2 <_malloc_r+0x76>
 8005ae2:	0022      	movs	r2, r4
 8005ae4:	6864      	ldr	r4, [r4, #4]
 8005ae6:	e7c2      	b.n	8005a6e <_malloc_r+0x22>
 8005ae8:	2303      	movs	r3, #3
 8005aea:	1cc4      	adds	r4, r0, #3
 8005aec:	439c      	bics	r4, r3
 8005aee:	42a0      	cmp	r0, r4
 8005af0:	d0e1      	beq.n	8005ab6 <_malloc_r+0x6a>
 8005af2:	1a21      	subs	r1, r4, r0
 8005af4:	0030      	movs	r0, r6
 8005af6:	f000 f82d 	bl	8005b54 <_sbrk_r>
 8005afa:	1c43      	adds	r3, r0, #1
 8005afc:	d1db      	bne.n	8005ab6 <_malloc_r+0x6a>
 8005afe:	e7c7      	b.n	8005a90 <_malloc_r+0x44>
 8005b00:	20000490 	.word	0x20000490
 8005b04:	20000494 	.word	0x20000494

08005b08 <_realloc_r>:
 8005b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0a:	0007      	movs	r7, r0
 8005b0c:	000d      	movs	r5, r1
 8005b0e:	0016      	movs	r6, r2
 8005b10:	2900      	cmp	r1, #0
 8005b12:	d105      	bne.n	8005b20 <_realloc_r+0x18>
 8005b14:	0011      	movs	r1, r2
 8005b16:	f7ff ff99 	bl	8005a4c <_malloc_r>
 8005b1a:	0004      	movs	r4, r0
 8005b1c:	0020      	movs	r0, r4
 8005b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b20:	2a00      	cmp	r2, #0
 8005b22:	d103      	bne.n	8005b2c <_realloc_r+0x24>
 8005b24:	f7ff ff48 	bl	80059b8 <_free_r>
 8005b28:	0034      	movs	r4, r6
 8005b2a:	e7f7      	b.n	8005b1c <_realloc_r+0x14>
 8005b2c:	f000 f834 	bl	8005b98 <_malloc_usable_size_r>
 8005b30:	002c      	movs	r4, r5
 8005b32:	42b0      	cmp	r0, r6
 8005b34:	d2f2      	bcs.n	8005b1c <_realloc_r+0x14>
 8005b36:	0031      	movs	r1, r6
 8005b38:	0038      	movs	r0, r7
 8005b3a:	f7ff ff87 	bl	8005a4c <_malloc_r>
 8005b3e:	1e04      	subs	r4, r0, #0
 8005b40:	d0ec      	beq.n	8005b1c <_realloc_r+0x14>
 8005b42:	0029      	movs	r1, r5
 8005b44:	0032      	movs	r2, r6
 8005b46:	f7ff fc03 	bl	8005350 <memcpy>
 8005b4a:	0029      	movs	r1, r5
 8005b4c:	0038      	movs	r0, r7
 8005b4e:	f7ff ff33 	bl	80059b8 <_free_r>
 8005b52:	e7e3      	b.n	8005b1c <_realloc_r+0x14>

08005b54 <_sbrk_r>:
 8005b54:	2300      	movs	r3, #0
 8005b56:	b570      	push	{r4, r5, r6, lr}
 8005b58:	4d06      	ldr	r5, [pc, #24]	; (8005b74 <_sbrk_r+0x20>)
 8005b5a:	0004      	movs	r4, r0
 8005b5c:	0008      	movs	r0, r1
 8005b5e:	602b      	str	r3, [r5, #0]
 8005b60:	f7fc f838 	bl	8001bd4 <_sbrk>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d103      	bne.n	8005b70 <_sbrk_r+0x1c>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d000      	beq.n	8005b70 <_sbrk_r+0x1c>
 8005b6e:	6023      	str	r3, [r4, #0]
 8005b70:	bd70      	pop	{r4, r5, r6, pc}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	20000644 	.word	0x20000644

08005b78 <__malloc_lock>:
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	4802      	ldr	r0, [pc, #8]	; (8005b84 <__malloc_lock+0xc>)
 8005b7c:	f000 f814 	bl	8005ba8 <__retarget_lock_acquire_recursive>
 8005b80:	bd10      	pop	{r4, pc}
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	2000064c 	.word	0x2000064c

08005b88 <__malloc_unlock>:
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	4802      	ldr	r0, [pc, #8]	; (8005b94 <__malloc_unlock+0xc>)
 8005b8c:	f000 f80d 	bl	8005baa <__retarget_lock_release_recursive>
 8005b90:	bd10      	pop	{r4, pc}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	2000064c 	.word	0x2000064c

08005b98 <_malloc_usable_size_r>:
 8005b98:	1f0b      	subs	r3, r1, #4
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	1f18      	subs	r0, r3, #4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	da01      	bge.n	8005ba6 <_malloc_usable_size_r+0xe>
 8005ba2:	580b      	ldr	r3, [r1, r0]
 8005ba4:	18c0      	adds	r0, r0, r3
 8005ba6:	4770      	bx	lr

08005ba8 <__retarget_lock_acquire_recursive>:
 8005ba8:	4770      	bx	lr

08005baa <__retarget_lock_release_recursive>:
 8005baa:	4770      	bx	lr

08005bac <_init>:
 8005bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bae:	46c0      	nop			; (mov r8, r8)
 8005bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb2:	bc08      	pop	{r3}
 8005bb4:	469e      	mov	lr, r3
 8005bb6:	4770      	bx	lr

08005bb8 <_fini>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bbe:	bc08      	pop	{r3}
 8005bc0:	469e      	mov	lr, r3
 8005bc2:	4770      	bx	lr
