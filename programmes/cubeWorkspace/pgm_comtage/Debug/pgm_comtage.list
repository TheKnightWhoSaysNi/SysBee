
pgm_comtage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005f90  08005f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060bc  080060bc  000202ec  2**0
                  CONTENTS
  4 .ARM          00000008  080060bc  080060bc  000160bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060c4  080060c4  000202ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c4  080060c4  000160c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  080060cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200002f0  080063b8  000202f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000764  080063b8  00020764  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001109f  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000231e  00000000  00000000  000313b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  000336d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  000344f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ed6  00000000  00000000  00035240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107ca  00000000  00000000  0004a116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085294  00000000  00000000  0005a8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dfb74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036cc  00000000  00000000  000dfbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002f0 	.word	0x200002f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005f78 	.word	0x08005f78

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002f4 	.word	0x200002f4
 8000104:	08005f78 	.word	0x08005f78

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f82e 	bl	80004a8 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	0415      	lsls	r5, r2, #16
 800045c:	0c2d      	lsrs	r5, r5, #16
 800045e:	000f      	movs	r7, r1
 8000460:	0001      	movs	r1, r0
 8000462:	002e      	movs	r6, r5
 8000464:	46c6      	mov	lr, r8
 8000466:	4684      	mov	ip, r0
 8000468:	0400      	lsls	r0, r0, #16
 800046a:	0c14      	lsrs	r4, r2, #16
 800046c:	0c00      	lsrs	r0, r0, #16
 800046e:	0c09      	lsrs	r1, r1, #16
 8000470:	4346      	muls	r6, r0
 8000472:	434d      	muls	r5, r1
 8000474:	4360      	muls	r0, r4
 8000476:	4361      	muls	r1, r4
 8000478:	1940      	adds	r0, r0, r5
 800047a:	0c34      	lsrs	r4, r6, #16
 800047c:	1824      	adds	r4, r4, r0
 800047e:	b500      	push	{lr}
 8000480:	42a5      	cmp	r5, r4
 8000482:	d903      	bls.n	800048c <__aeabi_lmul+0x34>
 8000484:	2080      	movs	r0, #128	; 0x80
 8000486:	0240      	lsls	r0, r0, #9
 8000488:	4680      	mov	r8, r0
 800048a:	4441      	add	r1, r8
 800048c:	0c25      	lsrs	r5, r4, #16
 800048e:	186d      	adds	r5, r5, r1
 8000490:	4661      	mov	r1, ip
 8000492:	4359      	muls	r1, r3
 8000494:	437a      	muls	r2, r7
 8000496:	0430      	lsls	r0, r6, #16
 8000498:	1949      	adds	r1, r1, r5
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c00      	lsrs	r0, r0, #16
 800049e:	1820      	adds	r0, r4, r0
 80004a0:	1889      	adds	r1, r1, r2
 80004a2:	bc80      	pop	{r7}
 80004a4:	46b8      	mov	r8, r7
 80004a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004a8 <__udivmoddi4>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	0004      	movs	r4, r0
 80004b6:	000d      	movs	r5, r1
 80004b8:	4692      	mov	sl, r2
 80004ba:	4699      	mov	r9, r3
 80004bc:	b083      	sub	sp, #12
 80004be:	428b      	cmp	r3, r1
 80004c0:	d830      	bhi.n	8000524 <__udivmoddi4+0x7c>
 80004c2:	d02d      	beq.n	8000520 <__udivmoddi4+0x78>
 80004c4:	4649      	mov	r1, r9
 80004c6:	4650      	mov	r0, sl
 80004c8:	f000 f8ba 	bl	8000640 <__clzdi2>
 80004cc:	0029      	movs	r1, r5
 80004ce:	0006      	movs	r6, r0
 80004d0:	0020      	movs	r0, r4
 80004d2:	f000 f8b5 	bl	8000640 <__clzdi2>
 80004d6:	1a33      	subs	r3, r6, r0
 80004d8:	4698      	mov	r8, r3
 80004da:	3b20      	subs	r3, #32
 80004dc:	469b      	mov	fp, r3
 80004de:	d433      	bmi.n	8000548 <__udivmoddi4+0xa0>
 80004e0:	465a      	mov	r2, fp
 80004e2:	4653      	mov	r3, sl
 80004e4:	4093      	lsls	r3, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	001f      	movs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d83a      	bhi.n	800056a <__udivmoddi4+0xc2>
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d100      	bne.n	80004fa <__udivmoddi4+0x52>
 80004f8:	e078      	b.n	80005ec <__udivmoddi4+0x144>
 80004fa:	465b      	mov	r3, fp
 80004fc:	1ba4      	subs	r4, r4, r6
 80004fe:	41bd      	sbcs	r5, r7
 8000500:	2b00      	cmp	r3, #0
 8000502:	da00      	bge.n	8000506 <__udivmoddi4+0x5e>
 8000504:	e075      	b.n	80005f2 <__udivmoddi4+0x14a>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	465a      	mov	r2, fp
 8000512:	4093      	lsls	r3, r2
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	4642      	mov	r2, r8
 800051a:	4093      	lsls	r3, r2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	e028      	b.n	8000572 <__udivmoddi4+0xca>
 8000520:	4282      	cmp	r2, r0
 8000522:	d9cf      	bls.n	80004c4 <__udivmoddi4+0x1c>
 8000524:	2200      	movs	r2, #0
 8000526:	2300      	movs	r3, #0
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <__udivmoddi4+0x8e>
 8000532:	601c      	str	r4, [r3, #0]
 8000534:	605d      	str	r5, [r3, #4]
 8000536:	9800      	ldr	r0, [sp, #0]
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	b003      	add	sp, #12
 800053c:	bcf0      	pop	{r4, r5, r6, r7}
 800053e:	46bb      	mov	fp, r7
 8000540:	46b2      	mov	sl, r6
 8000542:	46a9      	mov	r9, r5
 8000544:	46a0      	mov	r8, r4
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	4642      	mov	r2, r8
 800054a:	2320      	movs	r3, #32
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	4652      	mov	r2, sl
 8000550:	40da      	lsrs	r2, r3
 8000552:	4641      	mov	r1, r8
 8000554:	0013      	movs	r3, r2
 8000556:	464a      	mov	r2, r9
 8000558:	408a      	lsls	r2, r1
 800055a:	0017      	movs	r7, r2
 800055c:	4642      	mov	r2, r8
 800055e:	431f      	orrs	r7, r3
 8000560:	4653      	mov	r3, sl
 8000562:	4093      	lsls	r3, r2
 8000564:	001e      	movs	r6, r3
 8000566:	42af      	cmp	r7, r5
 8000568:	d9c4      	bls.n	80004f4 <__udivmoddi4+0x4c>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	4643      	mov	r3, r8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0d9      	beq.n	800052c <__udivmoddi4+0x84>
 8000578:	07fb      	lsls	r3, r7, #31
 800057a:	0872      	lsrs	r2, r6, #1
 800057c:	431a      	orrs	r2, r3
 800057e:	4646      	mov	r6, r8
 8000580:	087b      	lsrs	r3, r7, #1
 8000582:	e00e      	b.n	80005a2 <__udivmoddi4+0xfa>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d101      	bne.n	800058c <__udivmoddi4+0xe4>
 8000588:	42a2      	cmp	r2, r4
 800058a:	d80c      	bhi.n	80005a6 <__udivmoddi4+0xfe>
 800058c:	1aa4      	subs	r4, r4, r2
 800058e:	419d      	sbcs	r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2100      	movs	r1, #0
 8000598:	3e01      	subs	r6, #1
 800059a:	1824      	adds	r4, r4, r0
 800059c:	414d      	adcs	r5, r1
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d006      	beq.n	80005b0 <__udivmoddi4+0x108>
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	d9ee      	bls.n	8000584 <__udivmoddi4+0xdc>
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d1f8      	bne.n	80005a2 <__udivmoddi4+0xfa>
 80005b0:	9800      	ldr	r0, [sp, #0]
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	465b      	mov	r3, fp
 80005b6:	1900      	adds	r0, r0, r4
 80005b8:	4169      	adcs	r1, r5
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db24      	blt.n	8000608 <__udivmoddi4+0x160>
 80005be:	002b      	movs	r3, r5
 80005c0:	465a      	mov	r2, fp
 80005c2:	4644      	mov	r4, r8
 80005c4:	40d3      	lsrs	r3, r2
 80005c6:	002a      	movs	r2, r5
 80005c8:	40e2      	lsrs	r2, r4
 80005ca:	001c      	movs	r4, r3
 80005cc:	465b      	mov	r3, fp
 80005ce:	0015      	movs	r5, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db2a      	blt.n	800062a <__udivmoddi4+0x182>
 80005d4:	0026      	movs	r6, r4
 80005d6:	409e      	lsls	r6, r3
 80005d8:	0033      	movs	r3, r6
 80005da:	0026      	movs	r6, r4
 80005dc:	4647      	mov	r7, r8
 80005de:	40be      	lsls	r6, r7
 80005e0:	0032      	movs	r2, r6
 80005e2:	1a80      	subs	r0, r0, r2
 80005e4:	4199      	sbcs	r1, r3
 80005e6:	9000      	str	r0, [sp, #0]
 80005e8:	9101      	str	r1, [sp, #4]
 80005ea:	e79f      	b.n	800052c <__udivmoddi4+0x84>
 80005ec:	42a3      	cmp	r3, r4
 80005ee:	d8bc      	bhi.n	800056a <__udivmoddi4+0xc2>
 80005f0:	e783      	b.n	80004fa <__udivmoddi4+0x52>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	9201      	str	r2, [sp, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	40da      	lsrs	r2, r3
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	e786      	b.n	8000516 <__udivmoddi4+0x6e>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	002a      	movs	r2, r5
 8000610:	4646      	mov	r6, r8
 8000612:	409a      	lsls	r2, r3
 8000614:	0023      	movs	r3, r4
 8000616:	40f3      	lsrs	r3, r6
 8000618:	4644      	mov	r4, r8
 800061a:	4313      	orrs	r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	40e2      	lsrs	r2, r4
 8000620:	001c      	movs	r4, r3
 8000622:	465b      	mov	r3, fp
 8000624:	0015      	movs	r5, r2
 8000626:	2b00      	cmp	r3, #0
 8000628:	dad4      	bge.n	80005d4 <__udivmoddi4+0x12c>
 800062a:	4642      	mov	r2, r8
 800062c:	002f      	movs	r7, r5
 800062e:	2320      	movs	r3, #32
 8000630:	0026      	movs	r6, r4
 8000632:	4097      	lsls	r7, r2
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	40de      	lsrs	r6, r3
 8000638:	003b      	movs	r3, r7
 800063a:	4333      	orrs	r3, r6
 800063c:	e7cd      	b.n	80005da <__udivmoddi4+0x132>
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzdi2>:
 8000640:	b510      	push	{r4, lr}
 8000642:	2900      	cmp	r1, #0
 8000644:	d103      	bne.n	800064e <__clzdi2+0xe>
 8000646:	f000 f807 	bl	8000658 <__clzsi2>
 800064a:	3020      	adds	r0, #32
 800064c:	e002      	b.n	8000654 <__clzdi2+0x14>
 800064e:	1c08      	adds	r0, r1, #0
 8000650:	f000 f802 	bl	8000658 <__clzsi2>
 8000654:	bd10      	pop	{r4, pc}
 8000656:	46c0      	nop			; (mov r8, r8)

08000658 <__clzsi2>:
 8000658:	211c      	movs	r1, #28
 800065a:	2301      	movs	r3, #1
 800065c:	041b      	lsls	r3, r3, #16
 800065e:	4298      	cmp	r0, r3
 8000660:	d301      	bcc.n	8000666 <__clzsi2+0xe>
 8000662:	0c00      	lsrs	r0, r0, #16
 8000664:	3910      	subs	r1, #16
 8000666:	0a1b      	lsrs	r3, r3, #8
 8000668:	4298      	cmp	r0, r3
 800066a:	d301      	bcc.n	8000670 <__clzsi2+0x18>
 800066c:	0a00      	lsrs	r0, r0, #8
 800066e:	3908      	subs	r1, #8
 8000670:	091b      	lsrs	r3, r3, #4
 8000672:	4298      	cmp	r0, r3
 8000674:	d301      	bcc.n	800067a <__clzsi2+0x22>
 8000676:	0900      	lsrs	r0, r0, #4
 8000678:	3904      	subs	r1, #4
 800067a:	a202      	add	r2, pc, #8	; (adr r2, 8000684 <__clzsi2+0x2c>)
 800067c:	5c10      	ldrb	r0, [r2, r0]
 800067e:	1840      	adds	r0, r0, r1
 8000680:	4770      	bx	lr
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	02020304 	.word	0x02020304
 8000688:	01010101 	.word	0x01010101
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b08f      	sub	sp, #60	; 0x3c
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f001 fce7 	bl	800206c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f9fd 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 fbb1 	bl	8000e08 <MX_GPIO_Init>
  MX_USART5_UART_Init();
 80006a6:	f000 fb7f 	bl	8000da8 <MX_USART5_UART_Init>
  MX_USART2_UART_Init();
 80006aa:	f000 fb4d 	bl	8000d48 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80006ae:	f000 faf3 	bl	8000c98 <MX_TIM3_Init>
  MX_SPI2_Init();
 80006b2:	f000 fa65 	bl	8000b80 <MX_SPI2_Init>
  MX_TIM2_Init();
 80006b6:	f000 fa9b 	bl	8000bf0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 80006ba:	4bdb      	ldr	r3, [pc, #876]	; (8000a28 <main+0x394>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f003 f8e3 	bl	8003888 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80006c2:	4bda      	ldr	r3, [pc, #872]	; (8000a2c <main+0x398>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f003 f8df 	bl	8003888 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(GPIOB, LED_R, GPIO_PIN_SET);
 80006ca:	4bd9      	ldr	r3, [pc, #868]	; (8000a30 <main+0x39c>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	2104      	movs	r1, #4
 80006d0:	0018      	movs	r0, r3
 80006d2:	f002 f860 	bl	8002796 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_V, GPIO_PIN_RESET);
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	00db      	lsls	r3, r3, #3
 80006da:	48d5      	ldr	r0, [pc, #852]	; (8000a30 <main+0x39c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	0019      	movs	r1, r3
 80006e0:	f002 f859 	bl	8002796 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XBEE_SLEEP, 0);
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	0219      	lsls	r1, r3, #8
 80006e8:	23a0      	movs	r3, #160	; 0xa0
 80006ea:	05db      	lsls	r3, r3, #23
 80006ec:	2200      	movs	r2, #0
 80006ee:	0018      	movs	r0, r3
 80006f0:	f002 f851 	bl	8002796 <HAL_GPIO_WritePin>


  HAL_UART_Receive_IT(&huart5, &xbee_rx_last_byte, 1);
 80006f4:	49cf      	ldr	r1, [pc, #828]	; (8000a34 <main+0x3a0>)
 80006f6:	4bd0      	ldr	r3, [pc, #832]	; (8000a38 <main+0x3a4>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	0018      	movs	r0, r3
 80006fc:	f003 fd44 	bl	8004188 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint16_t timeout;
	  char string[50] = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	3304      	adds	r3, #4
 8000708:	222e      	movs	r2, #46	; 0x2e
 800070a:	2100      	movs	r1, #0
 800070c:	0018      	movs	r0, r3
 800070e:	f005 f80e 	bl	800572e <memset>

	  switch(master_state){
 8000712:	4bca      	ldr	r3, [pc, #808]	; (8000a3c <main+0x3a8>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b05      	cmp	r3, #5
 8000718:	d900      	bls.n	800071c <main+0x88>
 800071a:	e1b7      	b.n	8000a8c <main+0x3f8>
 800071c:	009a      	lsls	r2, r3, #2
 800071e:	4bc8      	ldr	r3, [pc, #800]	; (8000a40 <main+0x3ac>)
 8000720:	18d3      	adds	r3, r2, r3
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	469f      	mov	pc, r3
	  	  case lora_init:
	  		  signal_state = signal_connecting;
 8000726:	4bc7      	ldr	r3, [pc, #796]	; (8000a44 <main+0x3b0>)
 8000728:	2202      	movs	r2, #2
 800072a:	701a      	strb	r2, [r3, #0]
	  		  master_state = xbee_init;
 800072c:	4bc3      	ldr	r3, [pc, #780]	; (8000a3c <main+0x3a8>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
	  	  break;
 8000732:	e1b0      	b.n	8000a96 <main+0x402>
	  	  case xbee_init:
			  switch(xbee_send_state){
 8000734:	4bc4      	ldr	r3, [pc, #784]	; (8000a48 <main+0x3b4>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b05      	cmp	r3, #5
 800073a:	d900      	bls.n	800073e <main+0xaa>
 800073c:	e12d      	b.n	800099a <main+0x306>
 800073e:	009a      	lsls	r2, r3, #2
 8000740:	4bc2      	ldr	r3, [pc, #776]	; (8000a4c <main+0x3b8>)
 8000742:	18d3      	adds	r3, r2, r3
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	469f      	mov	pc, r3

				  case enter_command_mode:
					  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_2);
 8000748:	4bb9      	ldr	r3, [pc, #740]	; (8000a30 <main+0x39c>)
 800074a:	2104      	movs	r1, #4
 800074c:	0018      	movs	r0, r3
 800074e:	f002 f83f 	bl	80027d0 <HAL_GPIO_TogglePin>
					  HAL_UART_Transmit(&huart5, "+++", 3, 100);
 8000752:	49bf      	ldr	r1, [pc, #764]	; (8000a50 <main+0x3bc>)
 8000754:	48b8      	ldr	r0, [pc, #736]	; (8000a38 <main+0x3a4>)
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	2203      	movs	r2, #3
 800075a:	f003 fc6d 	bl	8004038 <HAL_UART_Transmit>
					  timeout = 0;
 800075e:	4bbd      	ldr	r3, [pc, #756]	; (8000a54 <main+0x3c0>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
					  xbee_send_state = command_mode_ok;
 8000764:	4bb8      	ldr	r3, [pc, #736]	; (8000a48 <main+0x3b4>)
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
				  break;
 800076a:	e11d      	b.n	80009a8 <main+0x314>

				  case command_mode_ok:
					  if(cr_flag){
 800076c:	4bba      	ldr	r3, [pc, #744]	; (8000a58 <main+0x3c4>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d01a      	beq.n	80007aa <main+0x116>
						  if(xbee_rx_buffer[cr_flag-2] == 'O' && xbee_rx_buffer[cr_flag-1] == 'K'){
 8000774:	4bb8      	ldr	r3, [pc, #736]	; (8000a58 <main+0x3c4>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	3b02      	subs	r3, #2
 800077a:	4ab8      	ldr	r2, [pc, #736]	; (8000a5c <main+0x3c8>)
 800077c:	5cd3      	ldrb	r3, [r2, r3]
 800077e:	2b4f      	cmp	r3, #79	; 0x4f
 8000780:	d10f      	bne.n	80007a2 <main+0x10e>
 8000782:	4bb5      	ldr	r3, [pc, #724]	; (8000a58 <main+0x3c4>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3b01      	subs	r3, #1
 8000788:	4ab4      	ldr	r2, [pc, #720]	; (8000a5c <main+0x3c8>)
 800078a:	5cd3      	ldrb	r3, [r2, r3]
 800078c:	2b4b      	cmp	r3, #75	; 0x4b
 800078e:	d108      	bne.n	80007a2 <main+0x10e>
							  xbee_send_state = single_command;
 8000790:	4bad      	ldr	r3, [pc, #692]	; (8000a48 <main+0x3b4>)
 8000792:	2204      	movs	r2, #4
 8000794:	701a      	strb	r2, [r3, #0]
							  HAL_Delay(10);
 8000796:	200a      	movs	r0, #10
 8000798:	f001 fcd8 	bl	800214c <HAL_Delay>
							  timeout = 0;
 800079c:	4bad      	ldr	r3, [pc, #692]	; (8000a54 <main+0x3c0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	801a      	strh	r2, [r3, #0]
						  }
						  cr_flag = 0;
 80007a2:	4bad      	ldr	r3, [pc, #692]	; (8000a58 <main+0x3c4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
						  HAL_Delay(1);
						  timeout++;
						  if (timeout >= timeout_duration)
							  xbee_send_state = enter_command_mode;
					  }
				  break;
 80007a8:	e0f9      	b.n	800099e <main+0x30a>
						  HAL_Delay(1);
 80007aa:	2001      	movs	r0, #1
 80007ac:	f001 fcce 	bl	800214c <HAL_Delay>
						  timeout++;
 80007b0:	4ba8      	ldr	r3, [pc, #672]	; (8000a54 <main+0x3c0>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	4ba6      	ldr	r3, [pc, #664]	; (8000a54 <main+0x3c0>)
 80007ba:	801a      	strh	r2, [r3, #0]
						  if (timeout >= timeout_duration)
 80007bc:	4ba5      	ldr	r3, [pc, #660]	; (8000a54 <main+0x3c0>)
 80007be:	881a      	ldrh	r2, [r3, #0]
 80007c0:	23fa      	movs	r3, #250	; 0xfa
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d200      	bcs.n	80007ca <main+0x136>
 80007c8:	e0e9      	b.n	800099e <main+0x30a>
							  xbee_send_state = enter_command_mode;
 80007ca:	4b9f      	ldr	r3, [pc, #636]	; (8000a48 <main+0x3b4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
				  break;
 80007d0:	e0e5      	b.n	800099e <main+0x30a>

				  case single_command:
					  if (xbee_reset==0){
 80007d2:	4ba3      	ldr	r3, [pc, #652]	; (8000a60 <main+0x3cc>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d108      	bne.n	80007ec <main+0x158>
						  HAL_UART_Transmit(&huart5, "ATRE\r", 5, 100);
 80007da:	49a2      	ldr	r1, [pc, #648]	; (8000a64 <main+0x3d0>)
 80007dc:	4896      	ldr	r0, [pc, #600]	; (8000a38 <main+0x3a4>)
 80007de:	2364      	movs	r3, #100	; 0x64
 80007e0:	2205      	movs	r2, #5
 80007e2:	f003 fc29 	bl	8004038 <HAL_UART_Transmit>
						  xbee_reset = 1;
 80007e6:	4b9e      	ldr	r3, [pc, #632]	; (8000a60 <main+0x3cc>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	701a      	strb	r2, [r3, #0]
					  }
					  timeout = 0;
 80007ec:	4b99      	ldr	r3, [pc, #612]	; (8000a54 <main+0x3c0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	801a      	strh	r2, [r3, #0]
					  xbee_send_state = single_command_ok;
 80007f2:	4b95      	ldr	r3, [pc, #596]	; (8000a48 <main+0x3b4>)
 80007f4:	2205      	movs	r2, #5
 80007f6:	701a      	strb	r2, [r3, #0]
				  break;
 80007f8:	e0d6      	b.n	80009a8 <main+0x314>

				  case single_command_ok:
					  if(cr_flag){
 80007fa:	4b97      	ldr	r3, [pc, #604]	; (8000a58 <main+0x3c4>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d01a      	beq.n	8000838 <main+0x1a4>
						  if(xbee_rx_buffer[cr_flag-2] == 'O' && xbee_rx_buffer[cr_flag-1] == 'K'){
 8000802:	4b95      	ldr	r3, [pc, #596]	; (8000a58 <main+0x3c4>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	3b02      	subs	r3, #2
 8000808:	4a94      	ldr	r2, [pc, #592]	; (8000a5c <main+0x3c8>)
 800080a:	5cd3      	ldrb	r3, [r2, r3]
 800080c:	2b4f      	cmp	r3, #79	; 0x4f
 800080e:	d10f      	bne.n	8000830 <main+0x19c>
 8000810:	4b91      	ldr	r3, [pc, #580]	; (8000a58 <main+0x3c4>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	3b01      	subs	r3, #1
 8000816:	4a91      	ldr	r2, [pc, #580]	; (8000a5c <main+0x3c8>)
 8000818:	5cd3      	ldrb	r3, [r2, r3]
 800081a:	2b4b      	cmp	r3, #75	; 0x4b
 800081c:	d108      	bne.n	8000830 <main+0x19c>
							  xbee_send_state = send_config;
 800081e:	4b8a      	ldr	r3, [pc, #552]	; (8000a48 <main+0x3b4>)
 8000820:	2202      	movs	r2, #2
 8000822:	701a      	strb	r2, [r3, #0]
							  HAL_Delay(10);
 8000824:	200a      	movs	r0, #10
 8000826:	f001 fc91 	bl	800214c <HAL_Delay>
							  timeout = 0;
 800082a:	4b8a      	ldr	r3, [pc, #552]	; (8000a54 <main+0x3c0>)
 800082c:	2200      	movs	r2, #0
 800082e:	801a      	strh	r2, [r3, #0]
						  }
						  cr_flag = 0;
 8000830:	4b89      	ldr	r3, [pc, #548]	; (8000a58 <main+0x3c4>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
						  HAL_Delay(1);
						  timeout++;
						  if (timeout >= timeout_duration)
							  xbee_send_state = enter_command_mode;
					  }
				  break;
 8000836:	e0b4      	b.n	80009a2 <main+0x30e>
						  HAL_Delay(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f001 fc87 	bl	800214c <HAL_Delay>
						  timeout++;
 800083e:	4b85      	ldr	r3, [pc, #532]	; (8000a54 <main+0x3c0>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	b29a      	uxth	r2, r3
 8000846:	4b83      	ldr	r3, [pc, #524]	; (8000a54 <main+0x3c0>)
 8000848:	801a      	strh	r2, [r3, #0]
						  if (timeout >= timeout_duration)
 800084a:	4b82      	ldr	r3, [pc, #520]	; (8000a54 <main+0x3c0>)
 800084c:	881a      	ldrh	r2, [r3, #0]
 800084e:	23fa      	movs	r3, #250	; 0xfa
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	429a      	cmp	r2, r3
 8000854:	d200      	bcs.n	8000858 <main+0x1c4>
 8000856:	e0a4      	b.n	80009a2 <main+0x30e>
							  xbee_send_state = enter_command_mode;
 8000858:	4b7b      	ldr	r3, [pc, #492]	; (8000a48 <main+0x3b4>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
				  break;
 800085e:	e0a0      	b.n	80009a2 <main+0x30e>

				  case send_config:

					  if(config_step == config_length){
 8000860:	4b81      	ldr	r3, [pc, #516]	; (8000a68 <main+0x3d4>)
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	4b81      	ldr	r3, [pc, #516]	; (8000a6c <main+0x3d8>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	429a      	cmp	r2, r3
 800086a:	d106      	bne.n	800087a <main+0x1e6>
						  sprintf(string, "ATWR\r");
 800086c:	4a80      	ldr	r2, [pc, #512]	; (8000a70 <main+0x3dc>)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	0011      	movs	r1, r2
 8000872:	0018      	movs	r0, r3
 8000874:	f004 ff64 	bl	8005740 <siprintf>
 8000878:	e018      	b.n	80008ac <main+0x218>
					  }
					  else sprintf(string, "AT%s%s\r", config[config_step][0], config[config_step][1]);
 800087a:	4b7b      	ldr	r3, [pc, #492]	; (8000a68 <main+0x3d4>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	001a      	movs	r2, r3
 8000880:	0013      	movs	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	189b      	adds	r3, r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	4a7a      	ldr	r2, [pc, #488]	; (8000a74 <main+0x3e0>)
 800088a:	189c      	adds	r4, r3, r2
 800088c:	4b76      	ldr	r3, [pc, #472]	; (8000a68 <main+0x3d4>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	001a      	movs	r2, r3
 8000892:	0013      	movs	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	189b      	adds	r3, r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	330a      	adds	r3, #10
 800089c:	001a      	movs	r2, r3
 800089e:	4b75      	ldr	r3, [pc, #468]	; (8000a74 <main+0x3e0>)
 80008a0:	18d3      	adds	r3, r2, r3
 80008a2:	4975      	ldr	r1, [pc, #468]	; (8000a78 <main+0x3e4>)
 80008a4:	1d38      	adds	r0, r7, #4
 80008a6:	0022      	movs	r2, r4
 80008a8:	f004 ff4a 	bl	8005740 <siprintf>


					  HAL_UART_Transmit(&huart5, string, strlen(string), 100);
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	0018      	movs	r0, r3
 80008b0:	f7ff fc2a 	bl	8000108 <strlen>
 80008b4:	0003      	movs	r3, r0
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	1d39      	adds	r1, r7, #4
 80008ba:	485f      	ldr	r0, [pc, #380]	; (8000a38 <main+0x3a4>)
 80008bc:	2364      	movs	r3, #100	; 0x64
 80008be:	f003 fbbb 	bl	8004038 <HAL_UART_Transmit>
					  xbee_send_state = config_ok;
 80008c2:	4b61      	ldr	r3, [pc, #388]	; (8000a48 <main+0x3b4>)
 80008c4:	2203      	movs	r2, #3
 80008c6:	701a      	strb	r2, [r3, #0]
				  break;
 80008c8:	e06e      	b.n	80009a8 <main+0x314>

				  case config_ok:
					  if(cr_flag){
 80008ca:	4b63      	ldr	r3, [pc, #396]	; (8000a58 <main+0x3c4>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d041      	beq.n	8000956 <main+0x2c2>
						  if(xbee_rx_buffer[cr_flag-2] == 'O' && xbee_rx_buffer[cr_flag-1] == 'K'){
 80008d2:	4b61      	ldr	r3, [pc, #388]	; (8000a58 <main+0x3c4>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	3b02      	subs	r3, #2
 80008d8:	4a60      	ldr	r2, [pc, #384]	; (8000a5c <main+0x3c8>)
 80008da:	5cd3      	ldrb	r3, [r2, r3]
 80008dc:	2b4f      	cmp	r3, #79	; 0x4f
 80008de:	d137      	bne.n	8000950 <main+0x2bc>
 80008e0:	4b5d      	ldr	r3, [pc, #372]	; (8000a58 <main+0x3c4>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	4a5d      	ldr	r2, [pc, #372]	; (8000a5c <main+0x3c8>)
 80008e8:	5cd3      	ldrb	r3, [r2, r3]
 80008ea:	2b4b      	cmp	r3, #75	; 0x4b
 80008ec:	d130      	bne.n	8000950 <main+0x2bc>
							  if(config_step == config_length){
 80008ee:	4b5e      	ldr	r3, [pc, #376]	; (8000a68 <main+0x3d4>)
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	4b5e      	ldr	r3, [pc, #376]	; (8000a6c <main+0x3d8>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d11b      	bne.n	8000932 <main+0x29e>
								  HAL_GPIO_WritePin(GPIOB, LED_R, GPIO_PIN_RESET);
 80008fa:	4b4d      	ldr	r3, [pc, #308]	; (8000a30 <main+0x39c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	2104      	movs	r1, #4
 8000900:	0018      	movs	r0, r3
 8000902:	f001 ff48 	bl	8002796 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOB, LED_V, GPIO_PIN_SET);
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	4849      	ldr	r0, [pc, #292]	; (8000a30 <main+0x39c>)
 800090c:	2201      	movs	r2, #1
 800090e:	0019      	movs	r1, r3
 8000910:	f001 ff41 	bl	8002796 <HAL_GPIO_WritePin>
								  xbee_send_state = config_over;
 8000914:	4b4c      	ldr	r3, [pc, #304]	; (8000a48 <main+0x3b4>)
 8000916:	2206      	movs	r2, #6
 8000918:	701a      	strb	r2, [r3, #0]
								  HAL_Delay(10000);
 800091a:	4b58      	ldr	r3, [pc, #352]	; (8000a7c <main+0x3e8>)
 800091c:	0018      	movs	r0, r3
 800091e:	f001 fc15 	bl	800214c <HAL_Delay>
								  master_state = fine_polling;
 8000922:	4b46      	ldr	r3, [pc, #280]	; (8000a3c <main+0x3a8>)
 8000924:	2204      	movs	r2, #4
 8000926:	701a      	strb	r2, [r3, #0]
								  xbee_rx_read_index = xbee_rx_write_index;
 8000928:	4b55      	ldr	r3, [pc, #340]	; (8000a80 <main+0x3ec>)
 800092a:	781a      	ldrb	r2, [r3, #0]
 800092c:	4b55      	ldr	r3, [pc, #340]	; (8000a84 <main+0x3f0>)
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e00e      	b.n	8000950 <main+0x2bc>
							  }
							  else {
								  timeout = 0;
 8000932:	4b48      	ldr	r3, [pc, #288]	; (8000a54 <main+0x3c0>)
 8000934:	2200      	movs	r2, #0
 8000936:	801a      	strh	r2, [r3, #0]
								  config_step++;
 8000938:	4b4b      	ldr	r3, [pc, #300]	; (8000a68 <main+0x3d4>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	b2da      	uxtb	r2, r3
 8000940:	4b49      	ldr	r3, [pc, #292]	; (8000a68 <main+0x3d4>)
 8000942:	701a      	strb	r2, [r3, #0]
								  xbee_send_state = send_config;
 8000944:	4b40      	ldr	r3, [pc, #256]	; (8000a48 <main+0x3b4>)
 8000946:	2202      	movs	r2, #2
 8000948:	701a      	strb	r2, [r3, #0]
								  HAL_Delay(10);
 800094a:	200a      	movs	r0, #10
 800094c:	f001 fbfe 	bl	800214c <HAL_Delay>
							  }
						  }
						  cr_flag = 0;
 8000950:	4b41      	ldr	r3, [pc, #260]	; (8000a58 <main+0x3c4>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
					  }
					  if(xbee_rx_buffer[xbee_rx_write_index-2] == 'O' && xbee_rx_buffer[xbee_rx_write_index-1] == 'K'){
 8000956:	4b4a      	ldr	r3, [pc, #296]	; (8000a80 <main+0x3ec>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	3b02      	subs	r3, #2
 800095c:	4a3f      	ldr	r2, [pc, #252]	; (8000a5c <main+0x3c8>)
 800095e:	5cd3      	ldrb	r3, [r2, r3]
 8000960:	2b4f      	cmp	r3, #79	; 0x4f
 8000962:	d106      	bne.n	8000972 <main+0x2de>
 8000964:	4b46      	ldr	r3, [pc, #280]	; (8000a80 <main+0x3ec>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	3b01      	subs	r3, #1
 800096a:	4a3c      	ldr	r2, [pc, #240]	; (8000a5c <main+0x3c8>)
 800096c:	5cd3      	ldrb	r3, [r2, r3]
 800096e:	2b4b      	cmp	r3, #75	; 0x4b
 8000970:	d012      	beq.n	8000998 <main+0x304>

					  }
					  else {
						  HAL_Delay(1);
 8000972:	2001      	movs	r0, #1
 8000974:	f001 fbea 	bl	800214c <HAL_Delay>
						  timeout++;
 8000978:	4b36      	ldr	r3, [pc, #216]	; (8000a54 <main+0x3c0>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b34      	ldr	r3, [pc, #208]	; (8000a54 <main+0x3c0>)
 8000982:	801a      	strh	r2, [r3, #0]
						  if (timeout >= timeout_duration){
 8000984:	4b33      	ldr	r3, [pc, #204]	; (8000a54 <main+0x3c0>)
 8000986:	881a      	ldrh	r2, [r3, #0]
 8000988:	23fa      	movs	r3, #250	; 0xfa
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	429a      	cmp	r2, r3
 800098e:	d30a      	bcc.n	80009a6 <main+0x312>
							  xbee_send_state = enter_command_mode;
 8000990:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <main+0x3b4>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
							  //config_step = 0;
						  }
					  }
				  break;
 8000996:	e006      	b.n	80009a6 <main+0x312>
 8000998:	e005      	b.n	80009a6 <main+0x312>

				  default:

				  break;
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	e07b      	b.n	8000a96 <main+0x402>
				  break;
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	e079      	b.n	8000a96 <main+0x402>
				  break;
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	e077      	b.n	8000a96 <main+0x402>
				  break;
 80009a6:	46c0      	nop			; (mov r8, r8)

			  }
	      break;
 80009a8:	e075      	b.n	8000a96 <main+0x402>

	  	  case master_idle:
	  		  signal_state = signal_ok;
 80009aa:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <main+0x3b0>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
	  		  HAL_Delay(1000);
 80009b0:	23fa      	movs	r3, #250	; 0xfa
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	0018      	movs	r0, r3
 80009b6:	f001 fbc9 	bl	800214c <HAL_Delay>

	  		  master_state = fine_polling;
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <main+0x3a8>)
 80009bc:	2204      	movs	r2, #4
 80009be:	701a      	strb	r2, [r3, #0]
	  	  break;
 80009c0:	e069      	b.n	8000a96 <main+0x402>

	  	  case sparse_polling:
	  		  signal_state = signal_ok;
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <main+0x3b0>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
	  		  scan_sensors();
 80009c8:	f000 fb1c 	bl	8001004 <scan_sensors>
	  		  HAL_Delay(10); //if a large amount of bees goes in or out
 80009cc:	200a      	movs	r0, #10
 80009ce:	f001 fbbd 	bl	800214c <HAL_Delay>
	  		  if(bee_rate < -1*bee_rate_fine_polling_threshold || bee_rate > 1*bee_rate_fine_polling_threshold){
 80009d2:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <main+0x3f4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	5e9b      	ldrsh	r3, [r3, r2]
 80009d8:	3302      	adds	r3, #2
 80009da:	db04      	blt.n	80009e6 <main+0x352>
 80009dc:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <main+0x3f4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	5e9b      	ldrsh	r3, [r3, r2]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	dd54      	ble.n	8000a90 <main+0x3fc>
	  			  master_state = fine_polling; //we'll trigger a fine_polling
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <main+0x3a8>)
 80009e8:	2204      	movs	r2, #4
 80009ea:	701a      	strb	r2, [r3, #0]
	  		  }
	  	  break;
 80009ec:	e050      	b.n	8000a90 <main+0x3fc>

	  	  case fine_polling:
	  		  signal_state = signal_ok;
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <main+0x3b0>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
	  		  scan_sensors();
 80009f4:	f000 fb06 	bl	8001004 <scan_sensors>
	  		  if(bee_rate < -1*bee_rate_alert_threshold || bee_rate > bee_rate_alert_threshold){
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <main+0x3f4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	5e9b      	ldrsh	r3, [r3, r2]
 80009fe:	3305      	adds	r3, #5
 8000a00:	db04      	blt.n	8000a0c <main+0x378>
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <main+0x3f4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	5e9b      	ldrsh	r3, [r3, r2]
 8000a08:	2b05      	cmp	r3, #5
 8000a0a:	dd43      	ble.n	8000a94 <main+0x400>
	  			  xbee_send_alert();
 8000a0c:	f000 fe6e 	bl	80016ec <xbee_send_alert>
	  			  signal_state = signal_swarming;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <main+0x3b0>)
 8000a12:	2203      	movs	r2, #3
 8000a14:	701a      	strb	r2, [r3, #0]
	  			  bee_rate = 0;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <main+0x3f4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	801a      	strh	r2, [r3, #0]
	  		  }
	  	  break;
 8000a1c:	e03a      	b.n	8000a94 <main+0x400>

	  	  case lora_alert:
	  		  signal_state = signal_swarming;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <main+0x3b0>)
 8000a20:	2203      	movs	r2, #3
 8000a22:	701a      	strb	r2, [r3, #0]
	  	  break;
 8000a24:	e037      	b.n	8000a96 <main+0x402>
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	200005c8 	.word	0x200005c8
 8000a2c:	2000068c 	.word	0x2000068c
 8000a30:	50000400 	.word	0x50000400
 8000a34:	20000322 	.word	0x20000322
 8000a38:	20000608 	.word	0x20000608
 8000a3c:	2000030c 	.word	0x2000030c
 8000a40:	08005fc0 	.word	0x08005fc0
 8000a44:	20000429 	.word	0x20000429
 8000a48:	20000428 	.word	0x20000428
 8000a4c:	08005fd8 	.word	0x08005fd8
 8000a50:	08005f90 	.word	0x08005f90
 8000a54:	2000042a 	.word	0x2000042a
 8000a58:	20000321 	.word	0x20000321
 8000a5c:	20000324 	.word	0x20000324
 8000a60:	20000427 	.word	0x20000427
 8000a64:	08005f94 	.word	0x08005f94
 8000a68:	20000426 	.word	0x20000426
 8000a6c:	20000278 	.word	0x20000278
 8000a70:	08005f9c 	.word	0x08005f9c
 8000a74:	200000e8 	.word	0x200000e8
 8000a78:	08005fa4 	.word	0x08005fa4
 8000a7c:	00002710 	.word	0x00002710
 8000a80:	20000425 	.word	0x20000425
 8000a84:	20000424 	.word	0x20000424
 8000a88:	200005c4 	.word	0x200005c4

	  	  default: break;
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	e002      	b.n	8000a96 <main+0x402>
	  	  break;
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	e000      	b.n	8000a96 <main+0x402>
	  	  break;
 8000a94:	46c0      	nop			; (mov r8, r8)
	  }

	  read_xbee();
 8000a96:	f000 fe51 	bl	800173c <read_xbee>
  {
 8000a9a:	e631      	b.n	8000700 <main+0x6c>

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b09f      	sub	sp, #124	; 0x7c
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	2440      	movs	r4, #64	; 0x40
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	2338      	movs	r3, #56	; 0x38
 8000aaa:	001a      	movs	r2, r3
 8000aac:	2100      	movs	r1, #0
 8000aae:	f004 fe3e 	bl	800572e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab2:	232c      	movs	r3, #44	; 0x2c
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	2314      	movs	r3, #20
 8000aba:	001a      	movs	r2, r3
 8000abc:	2100      	movs	r1, #0
 8000abe:	f004 fe36 	bl	800572e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	2328      	movs	r3, #40	; 0x28
 8000ac8:	001a      	movs	r2, r3
 8000aca:	2100      	movs	r1, #0
 8000acc:	f004 fe2f 	bl	800572e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad0:	4b29      	ldr	r3, [pc, #164]	; (8000b78 <SystemClock_Config+0xdc>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a29      	ldr	r2, [pc, #164]	; (8000b7c <SystemClock_Config+0xe0>)
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <SystemClock_Config+0xdc>)
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	0109      	lsls	r1, r1, #4
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae2:	0021      	movs	r1, r4
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2201      	movs	r2, #1
 8000aee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2210      	movs	r2, #16
 8000af4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2202      	movs	r2, #2
 8000afa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2200      	movs	r2, #0
 8000b00:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	0312      	lsls	r2, r2, #12
 8000b08:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2280      	movs	r2, #128	; 0x80
 8000b0e:	0412      	lsls	r2, r2, #16
 8000b10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	0018      	movs	r0, r3
 8000b16:	f001 fe77 	bl	8002808 <HAL_RCC_OscConfig>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000b1e:	f001 f8f1 	bl	8001d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	212c      	movs	r1, #44	; 0x2c
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	220f      	movs	r2, #15
 8000b28:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2101      	movs	r1, #1
 8000b46:	0018      	movs	r0, r3
 8000b48:	f002 fa32 	bl	8002fb0 <HAL_RCC_ClockConfig>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000b50:	f001 f8d8 	bl	8001d04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2202      	movs	r2, #2
 8000b58:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	0018      	movs	r0, r3
 8000b64:	f002 fc48 	bl	80033f8 <HAL_RCCEx_PeriphCLKConfig>
 8000b68:	1e03      	subs	r3, r0, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b6c:	f001 f8ca 	bl	8001d04 <Error_Handler>
  }
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b01f      	add	sp, #124	; 0x7c
 8000b76:	bd90      	pop	{r4, r7, pc}
 8000b78:	40007000 	.word	0x40007000
 8000b7c:	ffffe7ff 	.word	0xffffe7ff

08000b80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_SPI2_Init+0x68>)
 8000b86:	4a19      	ldr	r2, [pc, #100]	; (8000bec <MX_SPI2_Init+0x6c>)
 8000b88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_SPI2_Init+0x68>)
 8000b8c:	2282      	movs	r2, #130	; 0x82
 8000b8e:	0052      	lsls	r2, r2, #1
 8000b90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_SPI2_Init+0x68>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_SPI2_Init+0x68>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_SPI2_Init+0x68>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_SPI2_Init+0x68>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_SPI2_Init+0x68>)
 8000bac:	2280      	movs	r2, #128	; 0x80
 8000bae:	02d2      	lsls	r2, r2, #11
 8000bb0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_SPI2_Init+0x68>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_SPI2_Init+0x68>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_SPI2_Init+0x68>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_SPI2_Init+0x68>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_SPI2_Init+0x68>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <MX_SPI2_Init+0x68>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f002 fd84 	bl	80036e0 <HAL_SPI_Init>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bdc:	f001 f892 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	20000568 	.word	0x20000568
 8000bec:	40003800 	.word	0x40003800

08000bf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	2308      	movs	r3, #8
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	001a      	movs	r2, r3
 8000c00:	2100      	movs	r1, #0
 8000c02:	f004 fd94 	bl	800572e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c06:	003b      	movs	r3, r7
 8000c08:	0018      	movs	r0, r3
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	2100      	movs	r1, #0
 8000c10:	f004 fd8d 	bl	800572e <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c14:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <MX_TIM2_Init+0xa4>)
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	05d2      	lsls	r2, r2, #23
 8000c1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600;
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <MX_TIM2_Init+0xa4>)
 8000c1e:	22c8      	movs	r2, #200	; 0xc8
 8000c20:	00d2      	lsls	r2, r2, #3
 8000c22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_TIM2_Init+0xa4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_TIM2_Init+0xa4>)
 8000c2c:	22fa      	movs	r2, #250	; 0xfa
 8000c2e:	0092      	lsls	r2, r2, #2
 8000c30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_TIM2_Init+0xa4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_TIM2_Init+0xa4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_TIM2_Init+0xa4>)
 8000c40:	0018      	movs	r0, r3
 8000c42:	f002 fde1 	bl	8003808 <HAL_TIM_Base_Init>
 8000c46:	1e03      	subs	r3, r0, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000c4a:	f001 f85b 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c4e:	2108      	movs	r1, #8
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2280      	movs	r2, #128	; 0x80
 8000c54:	0152      	lsls	r2, r2, #5
 8000c56:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c58:	187a      	adds	r2, r7, r1
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_TIM2_Init+0xa4>)
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f002 ff4c 	bl	8003afc <HAL_TIM_ConfigClockSource>
 8000c64:	1e03      	subs	r3, r0, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000c68:	f001 f84c 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6c:	003b      	movs	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c72:	003b      	movs	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c78:	003a      	movs	r2, r7
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_TIM2_Init+0xa4>)
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f003 f928 	bl	8003ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000c88:	f001 f83c 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b006      	add	sp, #24
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	2000068c 	.word	0x2000068c

08000c98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	2310      	movs	r3, #16
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	2100      	movs	r1, #0
 8000caa:	f004 fd40 	bl	800572e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cae:	003b      	movs	r3, r7
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	f004 fd39 	bl	800572e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <MX_TIM3_Init+0xa0>)
 8000cbe:	4a1f      	ldr	r2, [pc, #124]	; (8000d3c <MX_TIM3_Init+0xa4>)
 8000cc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_TIM3_Init+0xa0>)
 8000cc4:	4a1e      	ldr	r2, [pc, #120]	; (8000d40 <MX_TIM3_Init+0xa8>)
 8000cc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_TIM3_Init+0xa0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4883;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_TIM3_Init+0xa0>)
 8000cd0:	4a1c      	ldr	r2, [pc, #112]	; (8000d44 <MX_TIM3_Init+0xac>)
 8000cd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <MX_TIM3_Init+0xa0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_TIM3_Init+0xa0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_TIM3_Init+0xa0>)
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f002 fd90 	bl	8003808 <HAL_TIM_Base_Init>
 8000ce8:	1e03      	subs	r3, r0, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000cec:	f001 f80a 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2280      	movs	r2, #128	; 0x80
 8000cf6:	0152      	lsls	r2, r2, #5
 8000cf8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cfa:	187a      	adds	r2, r7, r1
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_TIM3_Init+0xa0>)
 8000cfe:	0011      	movs	r1, r2
 8000d00:	0018      	movs	r0, r3
 8000d02:	f002 fefb 	bl	8003afc <HAL_TIM_ConfigClockSource>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d0a:	f000 fffb 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0e:	003b      	movs	r3, r7
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d14:	003b      	movs	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d1a:	003a      	movs	r2, r7
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_TIM3_Init+0xa0>)
 8000d1e:	0011      	movs	r1, r2
 8000d20:	0018      	movs	r0, r3
 8000d22:	f003 f8d7 	bl	8003ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d26:	1e03      	subs	r3, r0, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d2a:	f000 ffeb 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b006      	add	sp, #24
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	200005c8 	.word	0x200005c8
 8000d3c:	40000400 	.word	0x40000400
 8000d40:	0000ffff 	.word	0x0000ffff
 8000d44:	00001313 	.word	0x00001313

08000d48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d4e:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <MX_USART2_UART_Init+0x5c>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d54:	22e1      	movs	r2, #225	; 0xe1
 8000d56:	0252      	lsls	r2, r2, #9
 8000d58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f003 f8ff 	bl	8003f90 <HAL_UART_Init>
 8000d92:	1e03      	subs	r3, r0, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d96:	f000 ffb5 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200006cc 	.word	0x200006cc
 8000da4:	40004400 	.word	0x40004400

08000da8 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_USART5_UART_Init+0x58>)
 8000dae:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <MX_USART5_UART_Init+0x5c>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_USART5_UART_Init+0x58>)
 8000db4:	2296      	movs	r2, #150	; 0x96
 8000db6:	0192      	lsls	r2, r2, #6
 8000db8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_USART5_UART_Init+0x58>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_USART5_UART_Init+0x58>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_USART5_UART_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_USART5_UART_Init+0x58>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_USART5_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_USART5_UART_Init+0x58>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_USART5_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_USART5_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <MX_USART5_UART_Init+0x58>)
 8000dec:	0018      	movs	r0, r3
 8000dee:	f003 f8cf 	bl	8003f90 <HAL_UART_Init>
 8000df2:	1e03      	subs	r3, r0, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 8000df6:	f000 ff85 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000608 	.word	0x20000608
 8000e04:	40005000 	.word	0x40005000

08000e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b08b      	sub	sp, #44	; 0x2c
 8000e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	2414      	movs	r4, #20
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	0018      	movs	r0, r3
 8000e14:	2314      	movs	r3, #20
 8000e16:	001a      	movs	r2, r3
 8000e18:	2100      	movs	r1, #0
 8000e1a:	f004 fc88 	bl	800572e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	4b54      	ldr	r3, [pc, #336]	; (8000f70 <MX_GPIO_Init+0x168>)
 8000e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e22:	4b53      	ldr	r3, [pc, #332]	; (8000f70 <MX_GPIO_Init+0x168>)
 8000e24:	2104      	movs	r1, #4
 8000e26:	430a      	orrs	r2, r1
 8000e28:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e2a:	4b51      	ldr	r3, [pc, #324]	; (8000f70 <MX_GPIO_Init+0x168>)
 8000e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2e:	2204      	movs	r2, #4
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e36:	4b4e      	ldr	r3, [pc, #312]	; (8000f70 <MX_GPIO_Init+0x168>)
 8000e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e3a:	4b4d      	ldr	r3, [pc, #308]	; (8000f70 <MX_GPIO_Init+0x168>)
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e42:	4b4b      	ldr	r3, [pc, #300]	; (8000f70 <MX_GPIO_Init+0x168>)
 8000e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e46:	2280      	movs	r2, #128	; 0x80
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b48      	ldr	r3, [pc, #288]	; (8000f70 <MX_GPIO_Init+0x168>)
 8000e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e52:	4b47      	ldr	r3, [pc, #284]	; (8000f70 <MX_GPIO_Init+0x168>)
 8000e54:	2101      	movs	r1, #1
 8000e56:	430a      	orrs	r2, r1
 8000e58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e5a:	4b45      	ldr	r3, [pc, #276]	; (8000f70 <MX_GPIO_Init+0x168>)
 8000e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5e:	2201      	movs	r2, #1
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	4b42      	ldr	r3, [pc, #264]	; (8000f70 <MX_GPIO_Init+0x168>)
 8000e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e6a:	4b41      	ldr	r3, [pc, #260]	; (8000f70 <MX_GPIO_Init+0x168>)
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e72:	4b3f      	ldr	r3, [pc, #252]	; (8000f70 <MX_GPIO_Init+0x168>)
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	2202      	movs	r2, #2
 8000e78:	4013      	ands	r3, r2
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	019b      	lsls	r3, r3, #6
 8000e82:	483c      	ldr	r0, [pc, #240]	; (8000f74 <MX_GPIO_Init+0x16c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	0019      	movs	r1, r3
 8000e88:	f001 fc85 	bl	8002796 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, S2_Pin|S0_Pin, GPIO_PIN_RESET);
 8000e8c:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <MX_GPIO_Init+0x170>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2103      	movs	r1, #3
 8000e92:	0018      	movs	r0, r3
 8000e94:	f001 fc7f 	bl	8002796 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S1_Pin|LED_EN_Pin|XBEE_SLEEP_Pin, GPIO_PIN_RESET);
 8000e98:	4938      	ldr	r1, [pc, #224]	; (8000f7c <MX_GPIO_Init+0x174>)
 8000e9a:	23a0      	movs	r3, #160	; 0xa0
 8000e9c:	05db      	lsls	r3, r3, #23
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f001 fc78 	bl	8002796 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_V_Pin, GPIO_PIN_RESET);
 8000ea6:	4936      	ldr	r1, [pc, #216]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000ea8:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <MX_GPIO_Init+0x17c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	0018      	movs	r0, r3
 8000eae:	f001 fc72 	bl	8002796 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	2280      	movs	r2, #128	; 0x80
 8000eb6:	0192      	lsls	r2, r2, #6
 8000eb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	193b      	adds	r3, r7, r4
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	193b      	adds	r3, r7, r4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	193b      	adds	r3, r7, r4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	193b      	adds	r3, r7, r4
 8000ece:	4a29      	ldr	r2, [pc, #164]	; (8000f74 <MX_GPIO_Init+0x16c>)
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	0010      	movs	r0, r2
 8000ed4:	f001 fac4 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S0_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S0_Pin;
 8000ed8:	193b      	adds	r3, r7, r4
 8000eda:	2203      	movs	r2, #3
 8000edc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	193b      	adds	r3, r7, r4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <MX_GPIO_Init+0x170>)
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	0010      	movs	r0, r2
 8000ef8:	f001 fab2 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin LED_EN_Pin XBEE_SLEEP_Pin */
  GPIO_InitStruct.Pin = S1_Pin|LED_EN_Pin|XBEE_SLEEP_Pin;
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	4a1f      	ldr	r2, [pc, #124]	; (8000f7c <MX_GPIO_Init+0x174>)
 8000f00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	2201      	movs	r2, #1
 8000f06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	193b      	adds	r3, r7, r4
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	193b      	adds	r3, r7, r4
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	193a      	adds	r2, r7, r4
 8000f16:	23a0      	movs	r3, #160	; 0xa0
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f001 fa9f 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX1_Pin MUX2_Pin */
  GPIO_InitStruct.Pin = MUX1_Pin|MUX2_Pin;
 8000f22:	193b      	adds	r3, r7, r4
 8000f24:	2212      	movs	r2, #18
 8000f26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f28:	193b      	adds	r3, r7, r4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	193a      	adds	r2, r7, r4
 8000f36:	23a0      	movs	r3, #160	; 0xa0
 8000f38:	05db      	lsls	r3, r3, #23
 8000f3a:	0011      	movs	r1, r2
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f001 fa8f 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_V_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_V_Pin;
 8000f42:	0021      	movs	r1, r4
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000f48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <MX_GPIO_Init+0x17c>)
 8000f60:	0019      	movs	r1, r3
 8000f62:	0010      	movs	r0, r2
 8000f64:	f001 fa7c 	bl	8002460 <HAL_GPIO_Init>

}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b00b      	add	sp, #44	; 0x2c
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	40021000 	.word	0x40021000
 8000f74:	50000800 	.word	0x50000800
 8000f78:	50001c00 	.word	0x50001c00
 8000f7c:	00008021 	.word	0x00008021
 8000f80:	00000404 	.word	0x00000404
 8000f84:	50000400 	.word	0x50000400

08000f88 <select_mux>:

/* USER CODE BEGIN 4 */

void select_mux(uint8_t sel){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	0002      	movs	r2, r0
 8000f90:	1dfb      	adds	r3, r7, #7
 8000f92:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1 , (sel & 0b0001)>>0);
 8000f94:	1dfb      	adds	r3, r7, #7
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4817      	ldr	r0, [pc, #92]	; (8000ffc <select_mux+0x74>)
 8000fa0:	001a      	movs	r2, r3
 8000fa2:	2102      	movs	r1, #2
 8000fa4:	f001 fbf7 	bl	8002796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 , (sel & 0b0010)>>1);
 8000fa8:	1dfb      	adds	r3, r7, #7
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	105b      	asrs	r3, r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	23a0      	movs	r3, #160	; 0xa0
 8000fb8:	05db      	lsls	r3, r3, #23
 8000fba:	2101      	movs	r1, #1
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f001 fbea 	bl	8002796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_0 , (sel & 0b0100)>>2);
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	109b      	asrs	r3, r3, #2
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4013      	ands	r3, r2
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	480a      	ldr	r0, [pc, #40]	; (8000ffc <select_mux+0x74>)
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	f001 fbde 	bl	8002796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (sel & 0b1000)>>3);
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	10db      	asrs	r3, r3, #3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	019b      	lsls	r3, r3, #6
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <select_mux+0x78>)
 8000fee:	0019      	movs	r1, r3
 8000ff0:	f001 fbd1 	bl	8002796 <HAL_GPIO_WritePin>
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	50001c00 	.word	0x50001c00
 8001000:	50000800 	.word	0x50000800

08001004 <scan_sensors>:

void scan_sensors(){
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); //turn on the diodes
 800100a:	23a0      	movs	r3, #160	; 0xa0
 800100c:	05db      	lsls	r3, r3, #23
 800100e:	2201      	movs	r2, #1
 8001010:	2120      	movs	r1, #32
 8001012:	0018      	movs	r0, r3
 8001014:	f001 fbbf 	bl	8002796 <HAL_GPIO_WritePin>

  for(uint8_t i=0; i<8; i++) for(uint8_t j=0; j<2; j++){
 8001018:	1dfb      	adds	r3, r7, #7
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	e0f5      	b.n	800120c <scan_sensors+0x208>
 8001020:	1dbb      	adds	r3, r7, #6
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	e0e7      	b.n	80011f8 <scan_sensors+0x1f4>
	  uint8_t sensor_pair_value;
	  select_mux(sensor_pair[8*j+i][0]);
 8001028:	1dbb      	adds	r3, r7, #6
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	00da      	lsls	r2, r3, #3
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	18d2      	adds	r2, r2, r3
 8001034:	4b7f      	ldr	r3, [pc, #508]	; (8001234 <scan_sensors+0x230>)
 8001036:	0052      	lsls	r2, r2, #1
 8001038:	5cd3      	ldrb	r3, [r2, r3]
 800103a:	0018      	movs	r0, r3
 800103c:	f7ff ffa4 	bl	8000f88 <select_mux>
	  sensor_pair_value = (j)? HAL_GPIO_ReadPin(MUX1) : HAL_GPIO_ReadPin(MUX2);
 8001040:	1dbb      	adds	r3, r7, #6
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d008      	beq.n	800105a <scan_sensors+0x56>
 8001048:	23a0      	movs	r3, #160	; 0xa0
 800104a:	05db      	lsls	r3, r3, #23
 800104c:	2102      	movs	r1, #2
 800104e:	0018      	movs	r0, r3
 8001050:	f001 fb84 	bl	800275c <HAL_GPIO_ReadPin>
 8001054:	0003      	movs	r3, r0
 8001056:	001a      	movs	r2, r3
 8001058:	e007      	b.n	800106a <scan_sensors+0x66>
 800105a:	23a0      	movs	r3, #160	; 0xa0
 800105c:	05db      	lsls	r3, r3, #23
 800105e:	2110      	movs	r1, #16
 8001060:	0018      	movs	r0, r3
 8001062:	f001 fb7b 	bl	800275c <HAL_GPIO_ReadPin>
 8001066:	0003      	movs	r3, r0
 8001068:	001a      	movs	r2, r3
 800106a:	1d7b      	adds	r3, r7, #5
 800106c:	701a      	strb	r2, [r3, #0]
	  select_mux(sensor_pair[8*j+i][1]);
 800106e:	1dbb      	adds	r3, r7, #6
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	00da      	lsls	r2, r3, #3
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	18d3      	adds	r3, r2, r3
 800107a:	4a6e      	ldr	r2, [pc, #440]	; (8001234 <scan_sensors+0x230>)
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	18d3      	adds	r3, r2, r3
 8001080:	3301      	adds	r3, #1
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff ff7f 	bl	8000f88 <select_mux>
	  sensor_pair_value += (j)? HAL_GPIO_ReadPin(MUX1)<<1 : HAL_GPIO_ReadPin(MUX2)<<1;
 800108a:	1dbb      	adds	r3, r7, #6
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d008      	beq.n	80010a4 <scan_sensors+0xa0>
 8001092:	23a0      	movs	r3, #160	; 0xa0
 8001094:	05db      	lsls	r3, r3, #23
 8001096:	2102      	movs	r1, #2
 8001098:	0018      	movs	r0, r3
 800109a:	f001 fb5f 	bl	800275c <HAL_GPIO_ReadPin>
 800109e:	0003      	movs	r3, r0
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	e007      	b.n	80010b4 <scan_sensors+0xb0>
 80010a4:	23a0      	movs	r3, #160	; 0xa0
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	2110      	movs	r1, #16
 80010aa:	0018      	movs	r0, r3
 80010ac:	f001 fb56 	bl	800275c <HAL_GPIO_ReadPin>
 80010b0:	0003      	movs	r3, r0
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	b2d9      	uxtb	r1, r3
 80010b6:	1d7b      	adds	r3, r7, #5
 80010b8:	1d7a      	adds	r2, r7, #5
 80010ba:	7812      	ldrb	r2, [r2, #0]
 80010bc:	188a      	adds	r2, r1, r2
 80010be:	701a      	strb	r2, [r3, #0]

	  switch(sensors_state[8*j+i]){
 80010c0:	1dbb      	adds	r3, r7, #6
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	00da      	lsls	r2, r3, #3
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	18d3      	adds	r3, r2, r3
 80010cc:	4a5a      	ldr	r2, [pc, #360]	; (8001238 <scan_sensors+0x234>)
 80010ce:	5cd3      	ldrb	r3, [r2, r3]
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d100      	bne.n	80010d6 <scan_sensors+0xd2>
 80010d4:	e068      	b.n	80011a8 <scan_sensors+0x1a4>
 80010d6:	dd00      	ble.n	80010da <scan_sensors+0xd6>
 80010d8:	e089      	b.n	80011ee <scan_sensors+0x1ea>
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d048      	beq.n	8001170 <scan_sensors+0x16c>
 80010de:	dd00      	ble.n	80010e2 <scan_sensors+0xde>
 80010e0:	e085      	b.n	80011ee <scan_sensors+0x1ea>
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <scan_sensors+0xe8>
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d026      	beq.n	8001138 <scan_sensors+0x134>
 80010ea:	e080      	b.n	80011ee <scan_sensors+0x1ea>
		  case A:
			  if(sensor_pair_value == 0b01){
 80010ec:	1d7b      	adds	r3, r7, #5
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d10e      	bne.n	8001112 <scan_sensors+0x10e>
				  sensors_state[8*j+i] = B;
 80010f4:	1dbb      	adds	r3, r7, #6
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	00da      	lsls	r2, r3, #3
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	18d3      	adds	r3, r2, r3
 8001100:	4a4d      	ldr	r2, [pc, #308]	; (8001238 <scan_sensors+0x234>)
 8001102:	2101      	movs	r1, #1
 8001104:	54d1      	strb	r1, [r2, r3]
				  bee_count--;
 8001106:	4b4d      	ldr	r3, [pc, #308]	; (800123c <scan_sensors+0x238>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	4b4b      	ldr	r3, [pc, #300]	; (800123c <scan_sensors+0x238>)
 800110e:	601a      	str	r2, [r3, #0]
				  bee_count++;
//				  HAL_GPIO_WritePin(GPIOB, LED_R, 0);
//				  HAL_GPIO_WritePin(GPIOB, LED_V, 1);
//				  xbee_send_alert();
			  }
		  break;
 8001110:	e066      	b.n	80011e0 <scan_sensors+0x1dc>
			  else if(sensor_pair_value == 0b10){
 8001112:	1d7b      	adds	r3, r7, #5
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d162      	bne.n	80011e0 <scan_sensors+0x1dc>
				  sensors_state[8*j+i] = D;
 800111a:	1dbb      	adds	r3, r7, #6
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	00da      	lsls	r2, r3, #3
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	18d3      	adds	r3, r2, r3
 8001126:	4a44      	ldr	r2, [pc, #272]	; (8001238 <scan_sensors+0x234>)
 8001128:	2103      	movs	r1, #3
 800112a:	54d1      	strb	r1, [r2, r3]
				  bee_count++;
 800112c:	4b43      	ldr	r3, [pc, #268]	; (800123c <scan_sensors+0x238>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	4b42      	ldr	r3, [pc, #264]	; (800123c <scan_sensors+0x238>)
 8001134:	601a      	str	r2, [r3, #0]
		  break;
 8001136:	e053      	b.n	80011e0 <scan_sensors+0x1dc>

		  case B:
			  if(sensor_pair_value == 0b00) sensors_state[8*j+i] = C;
 8001138:	1d7b      	adds	r3, r7, #5
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d109      	bne.n	8001154 <scan_sensors+0x150>
 8001140:	1dbb      	adds	r3, r7, #6
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	00da      	lsls	r2, r3, #3
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	18d3      	adds	r3, r2, r3
 800114c:	4a3a      	ldr	r2, [pc, #232]	; (8001238 <scan_sensors+0x234>)
 800114e:	2102      	movs	r1, #2
 8001150:	54d1      	strb	r1, [r2, r3]
			  else if (sensor_pair_value == 0b11) sensors_state[8*j+i] = A;
		  break;
 8001152:	e047      	b.n	80011e4 <scan_sensors+0x1e0>
			  else if (sensor_pair_value == 0b11) sensors_state[8*j+i] = A;
 8001154:	1d7b      	adds	r3, r7, #5
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b03      	cmp	r3, #3
 800115a:	d143      	bne.n	80011e4 <scan_sensors+0x1e0>
 800115c:	1dbb      	adds	r3, r7, #6
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	00da      	lsls	r2, r3, #3
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	18d3      	adds	r3, r2, r3
 8001168:	4a33      	ldr	r2, [pc, #204]	; (8001238 <scan_sensors+0x234>)
 800116a:	2100      	movs	r1, #0
 800116c:	54d1      	strb	r1, [r2, r3]
		  break;
 800116e:	e039      	b.n	80011e4 <scan_sensors+0x1e0>

		  case C:
			  if(sensor_pair_value == 0b10) sensors_state[8*j+i] = D;
 8001170:	1d7b      	adds	r3, r7, #5
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d109      	bne.n	800118c <scan_sensors+0x188>
 8001178:	1dbb      	adds	r3, r7, #6
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	00da      	lsls	r2, r3, #3
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	18d3      	adds	r3, r2, r3
 8001184:	4a2c      	ldr	r2, [pc, #176]	; (8001238 <scan_sensors+0x234>)
 8001186:	2103      	movs	r1, #3
 8001188:	54d1      	strb	r1, [r2, r3]
			  else if (sensor_pair_value == 0b01) sensors_state[8*j+i] = B;
		  break;
 800118a:	e02d      	b.n	80011e8 <scan_sensors+0x1e4>
			  else if (sensor_pair_value == 0b01) sensors_state[8*j+i] = B;
 800118c:	1d7b      	adds	r3, r7, #5
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d129      	bne.n	80011e8 <scan_sensors+0x1e4>
 8001194:	1dbb      	adds	r3, r7, #6
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	00da      	lsls	r2, r3, #3
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	18d3      	adds	r3, r2, r3
 80011a0:	4a25      	ldr	r2, [pc, #148]	; (8001238 <scan_sensors+0x234>)
 80011a2:	2101      	movs	r1, #1
 80011a4:	54d1      	strb	r1, [r2, r3]
		  break;
 80011a6:	e01f      	b.n	80011e8 <scan_sensors+0x1e4>

		  case D:
			  if(sensor_pair_value == 0b11) sensors_state[8*j+i] = A;
 80011a8:	1d7b      	adds	r3, r7, #5
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d109      	bne.n	80011c4 <scan_sensors+0x1c0>
 80011b0:	1dbb      	adds	r3, r7, #6
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	00da      	lsls	r2, r3, #3
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	18d3      	adds	r3, r2, r3
 80011bc:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <scan_sensors+0x234>)
 80011be:	2100      	movs	r1, #0
 80011c0:	54d1      	strb	r1, [r2, r3]
			  else if (sensor_pair_value == 0b00) sensors_state[8*j+i] = C;
		  break;
 80011c2:	e013      	b.n	80011ec <scan_sensors+0x1e8>
			  else if (sensor_pair_value == 0b00) sensors_state[8*j+i] = C;
 80011c4:	1d7b      	adds	r3, r7, #5
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10f      	bne.n	80011ec <scan_sensors+0x1e8>
 80011cc:	1dbb      	adds	r3, r7, #6
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	00da      	lsls	r2, r3, #3
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	18d3      	adds	r3, r2, r3
 80011d8:	4a17      	ldr	r2, [pc, #92]	; (8001238 <scan_sensors+0x234>)
 80011da:	2102      	movs	r1, #2
 80011dc:	54d1      	strb	r1, [r2, r3]
		  break;
 80011de:	e005      	b.n	80011ec <scan_sensors+0x1e8>
		  break;
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	e004      	b.n	80011ee <scan_sensors+0x1ea>
		  break;
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	e002      	b.n	80011ee <scan_sensors+0x1ea>
		  break;
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	e000      	b.n	80011ee <scan_sensors+0x1ea>
		  break;
 80011ec:	46c0      	nop			; (mov r8, r8)
  for(uint8_t i=0; i<8; i++) for(uint8_t j=0; j<2; j++){
 80011ee:	1dbb      	adds	r3, r7, #6
 80011f0:	781a      	ldrb	r2, [r3, #0]
 80011f2:	1dbb      	adds	r3, r7, #6
 80011f4:	3201      	adds	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	1dbb      	adds	r3, r7, #6
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d800      	bhi.n	8001202 <scan_sensors+0x1fe>
 8001200:	e712      	b.n	8001028 <scan_sensors+0x24>
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	3201      	adds	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	1dfb      	adds	r3, r7, #7
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b07      	cmp	r3, #7
 8001212:	d800      	bhi.n	8001216 <scan_sensors+0x212>
 8001214:	e704      	b.n	8001020 <scan_sensors+0x1c>
	  }
  }
  if(master_state == sparse_polling) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <scan_sensors+0x23c>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d106      	bne.n	800122c <scan_sensors+0x228>
 800121e:	23a0      	movs	r3, #160	; 0xa0
 8001220:	05db      	lsls	r3, r3, #23
 8001222:	2200      	movs	r2, #0
 8001224:	2120      	movs	r1, #32
 8001226:	0018      	movs	r0, r3
 8001228:	f001 fab5 	bl	8002796 <HAL_GPIO_WritePin>
}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000000 	.word	0x20000000
 8001238:	20000310 	.word	0x20000310
 800123c:	200005c0 	.word	0x200005c0
 8001240:	2000030c 	.word	0x2000030c

08001244 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART5){
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a11      	ldr	r2, [pc, #68]	; (8001298 <HAL_UART_RxCpltCallback+0x54>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d11c      	bne.n	8001290 <HAL_UART_RxCpltCallback+0x4c>
	    xbee_rx_buffer[xbee_rx_write_index] = xbee_rx_last_byte;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_UART_RxCpltCallback+0x58>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	001a      	movs	r2, r3
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_UART_RxCpltCallback+0x5c>)
 800125e:	7819      	ldrb	r1, [r3, #0]
 8001260:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <HAL_UART_RxCpltCallback+0x60>)
 8001262:	5499      	strb	r1, [r3, r2]
	    cr_flag = (xbee_rx_last_byte == 0x0D)? xbee_rx_write_index : 0;
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_UART_RxCpltCallback+0x5c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b0d      	cmp	r3, #13
 800126a:	d102      	bne.n	8001272 <HAL_UART_RxCpltCallback+0x2e>
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_UART_RxCpltCallback+0x58>)
 800126e:	781a      	ldrb	r2, [r3, #0]
 8001270:	e000      	b.n	8001274 <HAL_UART_RxCpltCallback+0x30>
 8001272:	2200      	movs	r2, #0
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <HAL_UART_RxCpltCallback+0x64>)
 8001276:	701a      	strb	r2, [r3, #0]
	    xbee_rx_write_index++;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_UART_RxCpltCallback+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_UART_RxCpltCallback+0x58>)
 8001282:	701a      	strb	r2, [r3, #0]
	    HAL_UART_Receive_IT(&huart5, &xbee_rx_last_byte, 1);
 8001284:	4906      	ldr	r1, [pc, #24]	; (80012a0 <HAL_UART_RxCpltCallback+0x5c>)
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_UART_RxCpltCallback+0x68>)
 8001288:	2201      	movs	r2, #1
 800128a:	0018      	movs	r0, r3
 800128c:	f002 ff7c 	bl	8004188 <HAL_UART_Receive_IT>

	}
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b002      	add	sp, #8
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40005000 	.word	0x40005000
 800129c:	20000425 	.word	0x20000425
 80012a0:	20000322 	.word	0x20000322
 80012a4:	20000324 	.word	0x20000324
 80012a8:	20000321 	.word	0x20000321
 80012ac:	20000608 	.word	0x20000608

080012b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80012bc:	429a      	cmp	r2, r3
 80012be:	d102      	bne.n	80012c6 <HAL_TIM_PeriodElapsedCallback+0x16>
		update_bee_rate();
 80012c0:	f000 f810 	bl	80012e4 <update_bee_rate>
	} else if(htim == &htim2){
		update_signal();
	}
}
 80012c4:	e005      	b.n	80012d2 <HAL_TIM_PeriodElapsedCallback+0x22>
	} else if(htim == &htim2){
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d101      	bne.n	80012d2 <HAL_TIM_PeriodElapsedCallback+0x22>
		update_signal();
 80012ce:	f000 f829 	bl	8001324 <update_signal>
}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	200005c8 	.word	0x200005c8
 80012e0:	2000068c 	.word	0x2000068c

080012e4 <update_bee_rate>:

void update_bee_rate(){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	static long int bee_count_prev = 0;
	alert_sent_flag = 0;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <update_bee_rate+0x30>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
	bee_rate = (bee_count - bee_count_prev);
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <update_bee_rate+0x34>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <update_bee_rate+0x38>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	b21a      	sxth	r2, r3
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <update_bee_rate+0x3c>)
 8001302:	801a      	strh	r2, [r3, #0]
	bee_count_prev = bee_count;
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <update_bee_rate+0x34>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <update_bee_rate+0x38>)
 800130a:	601a      	str	r2, [r3, #0]
}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	20000320 	.word	0x20000320
 8001318:	200005c0 	.word	0x200005c0
 800131c:	2000042c 	.word	0x2000042c
 8001320:	200005c4 	.word	0x200005c4

08001324 <update_signal>:

void update_signal(){
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
	HAL_GPIO_WritePin(GPIOB, LED_R, signals[signal_state][i][0]);
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <update_signal+0x74>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	0019      	movs	r1, r3
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <update_signal+0x78>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	0018      	movs	r0, r3
 8001334:	4a1a      	ldr	r2, [pc, #104]	; (80013a0 <update_signal+0x7c>)
 8001336:	000b      	movs	r3, r1
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	185b      	adds	r3, r3, r1
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	181b      	adds	r3, r3, r0
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	5c9b      	ldrb	r3, [r3, r2]
 8001344:	4817      	ldr	r0, [pc, #92]	; (80013a4 <update_signal+0x80>)
 8001346:	001a      	movs	r2, r3
 8001348:	2104      	movs	r1, #4
 800134a:	f001 fa24 	bl	8002796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_V, signals[signal_state][i][1]);
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <update_signal+0x74>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	0019      	movs	r1, r3
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <update_signal+0x78>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	0018      	movs	r0, r3
 800135a:	4a11      	ldr	r2, [pc, #68]	; (80013a0 <update_signal+0x7c>)
 800135c:	000b      	movs	r3, r1
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	185b      	adds	r3, r3, r1
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	181b      	adds	r3, r3, r0
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	18d3      	adds	r3, r2, r3
 800136a:	3301      	adds	r3, #1
 800136c:	781a      	ldrb	r2, [r3, #0]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	480c      	ldr	r0, [pc, #48]	; (80013a4 <update_signal+0x80>)
 8001374:	0019      	movs	r1, r3
 8001376:	f001 fa0e 	bl	8002796 <HAL_GPIO_WritePin>
	i = (i+1)%20;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <update_signal+0x78>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	2114      	movs	r1, #20
 8001382:	0018      	movs	r0, r3
 8001384:	f7ff f842 	bl	800040c <__aeabi_idivmod>
 8001388:	000b      	movs	r3, r1
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <update_signal+0x78>)
 800138e:	701a      	strb	r2, [r3, #0]
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	20000429 	.word	0x20000429
 800139c:	20000430 	.word	0x20000430
 80013a0:	20000020 	.word	0x20000020
 80013a4:	50000400 	.word	0x50000400

080013a8 <invert_lsB_msB>:

void invert_lsB_msB(uint64_t * var, uint8_t length){
 80013a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013aa:	b08d      	sub	sp, #52	; 0x34
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6178      	str	r0, [r7, #20]
 80013b0:	0008      	movs	r0, r1
 80013b2:	2113      	movs	r1, #19
 80013b4:	1879      	adds	r1, r7, r1
 80013b6:	7008      	strb	r0, [r1, #0]
	uint64_t new_var = 0;
 80013b8:	2000      	movs	r0, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	62b8      	str	r0, [r7, #40]	; 0x28
 80013be:	62f9      	str	r1, [r7, #44]	; 0x2c
	for(uint8_t i=0; i<length; i++){
 80013c0:	2117      	movs	r1, #23
 80013c2:	2010      	movs	r0, #16
 80013c4:	4684      	mov	ip, r0
 80013c6:	44bc      	add	ip, r7
 80013c8:	4461      	add	r1, ip
 80013ca:	2000      	movs	r0, #0
 80013cc:	7008      	strb	r0, [r1, #0]
 80013ce:	e06a      	b.n	80014a6 <invert_lsB_msB+0xfe>
		uint64_t byte = (*var & (0xFF<<(8*i)))>>(8*i);
 80013d0:	6979      	ldr	r1, [r7, #20]
 80013d2:	6808      	ldr	r0, [r1, #0]
 80013d4:	6849      	ldr	r1, [r1, #4]
 80013d6:	6038      	str	r0, [r7, #0]
 80013d8:	6079      	str	r1, [r7, #4]
 80013da:	2617      	movs	r6, #23
 80013dc:	0030      	movs	r0, r6
 80013de:	2110      	movs	r1, #16
 80013e0:	468c      	mov	ip, r1
 80013e2:	44bc      	add	ip, r7
 80013e4:	4466      	add	r6, ip
 80013e6:	7836      	ldrb	r6, [r6, #0]
 80013e8:	00f6      	lsls	r6, r6, #3
 80013ea:	21ff      	movs	r1, #255	; 0xff
 80013ec:	468c      	mov	ip, r1
 80013ee:	4661      	mov	r1, ip
 80013f0:	40b1      	lsls	r1, r6
 80013f2:	000e      	movs	r6, r1
 80013f4:	60be      	str	r6, [r7, #8]
 80013f6:	17f6      	asrs	r6, r6, #31
 80013f8:	60fe      	str	r6, [r7, #12]
 80013fa:	68be      	ldr	r6, [r7, #8]
 80013fc:	0031      	movs	r1, r6
 80013fe:	683e      	ldr	r6, [r7, #0]
 8001400:	4031      	ands	r1, r6
 8001402:	000c      	movs	r4, r1
 8001404:	68fe      	ldr	r6, [r7, #12]
 8001406:	0031      	movs	r1, r6
 8001408:	687e      	ldr	r6, [r7, #4]
 800140a:	4031      	ands	r1, r6
 800140c:	000d      	movs	r5, r1
 800140e:	0006      	movs	r6, r0
 8001410:	2110      	movs	r1, #16
 8001412:	1879      	adds	r1, r7, r1
 8001414:	1989      	adds	r1, r1, r6
 8001416:	7809      	ldrb	r1, [r1, #0]
 8001418:	00c9      	lsls	r1, r1, #3
 800141a:	0008      	movs	r0, r1
 800141c:	3820      	subs	r0, #32
 800141e:	2800      	cmp	r0, #0
 8001420:	db04      	blt.n	800142c <invert_lsB_msB+0x84>
 8001422:	002e      	movs	r6, r5
 8001424:	40c6      	lsrs	r6, r0
 8001426:	0030      	movs	r0, r6
 8001428:	61b8      	str	r0, [r7, #24]
 800142a:	e008      	b.n	800143e <invert_lsB_msB+0x96>
 800142c:	2020      	movs	r0, #32
 800142e:	1a40      	subs	r0, r0, r1
 8001430:	002e      	movs	r6, r5
 8001432:	4086      	lsls	r6, r0
 8001434:	0030      	movs	r0, r6
 8001436:	0026      	movs	r6, r4
 8001438:	40ce      	lsrs	r6, r1
 800143a:	4330      	orrs	r0, r6
 800143c:	61b8      	str	r0, [r7, #24]
 800143e:	0028      	movs	r0, r5
 8001440:	40c8      	lsrs	r0, r1
 8001442:	0001      	movs	r1, r0
 8001444:	61f9      	str	r1, [r7, #28]
		new_var += byte<<((length-1-i)*8);
 8001446:	2113      	movs	r1, #19
 8001448:	1879      	adds	r1, r7, r1
 800144a:	7809      	ldrb	r1, [r1, #0]
 800144c:	1e48      	subs	r0, r1, #1
 800144e:	2117      	movs	r1, #23
 8001450:	2610      	movs	r6, #16
 8001452:	46b4      	mov	ip, r6
 8001454:	44bc      	add	ip, r7
 8001456:	4461      	add	r1, ip
 8001458:	7809      	ldrb	r1, [r1, #0]
 800145a:	1a41      	subs	r1, r0, r1
 800145c:	00c9      	lsls	r1, r1, #3
 800145e:	0008      	movs	r0, r1
 8001460:	3820      	subs	r0, #32
 8001462:	2800      	cmp	r0, #0
 8001464:	db03      	blt.n	800146e <invert_lsB_msB+0xc6>
 8001466:	69be      	ldr	r6, [r7, #24]
 8001468:	4086      	lsls	r6, r0
 800146a:	0033      	movs	r3, r6
 800146c:	e008      	b.n	8001480 <invert_lsB_msB+0xd8>
 800146e:	2020      	movs	r0, #32
 8001470:	1a40      	subs	r0, r0, r1
 8001472:	69be      	ldr	r6, [r7, #24]
 8001474:	40c6      	lsrs	r6, r0
 8001476:	0030      	movs	r0, r6
 8001478:	69fe      	ldr	r6, [r7, #28]
 800147a:	408e      	lsls	r6, r1
 800147c:	0033      	movs	r3, r6
 800147e:	4303      	orrs	r3, r0
 8001480:	69b8      	ldr	r0, [r7, #24]
 8001482:	4088      	lsls	r0, r1
 8001484:	0002      	movs	r2, r0
 8001486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001488:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800148a:	1880      	adds	r0, r0, r2
 800148c:	4159      	adcs	r1, r3
 800148e:	62b8      	str	r0, [r7, #40]	; 0x28
 8001490:	62f9      	str	r1, [r7, #44]	; 0x2c
	for(uint8_t i=0; i<length; i++){
 8001492:	2617      	movs	r6, #23
 8001494:	2110      	movs	r1, #16
 8001496:	1879      	adds	r1, r7, r1
 8001498:	1989      	adds	r1, r1, r6
 800149a:	7808      	ldrb	r0, [r1, #0]
 800149c:	2110      	movs	r1, #16
 800149e:	1879      	adds	r1, r7, r1
 80014a0:	1989      	adds	r1, r1, r6
 80014a2:	3001      	adds	r0, #1
 80014a4:	7008      	strb	r0, [r1, #0]
 80014a6:	2117      	movs	r1, #23
 80014a8:	2010      	movs	r0, #16
 80014aa:	1838      	adds	r0, r7, r0
 80014ac:	1840      	adds	r0, r0, r1
 80014ae:	2113      	movs	r1, #19
 80014b0:	1879      	adds	r1, r7, r1
 80014b2:	7800      	ldrb	r0, [r0, #0]
 80014b4:	7809      	ldrb	r1, [r1, #0]
 80014b6:	4288      	cmp	r0, r1
 80014b8:	d38a      	bcc.n	80013d0 <invert_lsB_msB+0x28>
	}

	*var = new_var;
 80014ba:	6979      	ldr	r1, [r7, #20]
 80014bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c0:	600a      	str	r2, [r1, #0]
 80014c2:	604b      	str	r3, [r1, #4]
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b00d      	add	sp, #52	; 0x34
 80014ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014cc <xbee_send_string>:

void xbee_send_string(uint8_t * string){
 80014cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ce:	b0cf      	sub	sp, #316	; 0x13c
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	struct frame tx_frame = {0};
 80014d4:	4b81      	ldr	r3, [pc, #516]	; (80016dc <xbee_send_string+0x210>)
 80014d6:	229c      	movs	r2, #156	; 0x9c
 80014d8:	0052      	lsls	r2, r2, #1
 80014da:	4694      	mov	ip, r2
 80014dc:	44bc      	add	ip, r7
 80014de:	4463      	add	r3, ip
 80014e0:	0018      	movs	r0, r3
 80014e2:	2390      	movs	r3, #144	; 0x90
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	001a      	movs	r2, r3
 80014e8:	2100      	movs	r1, #0
 80014ea:	f004 f920 	bl	800572e <memset>
	tx_frame.length = 0x0E + strlen(string);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7fe fe09 	bl	8000108 <strlen>
 80014f6:	0003      	movs	r3, r0
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	330e      	adds	r3, #14
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	4b77      	ldr	r3, [pc, #476]	; (80016dc <xbee_send_string+0x210>)
 8001500:	219c      	movs	r1, #156	; 0x9c
 8001502:	0049      	lsls	r1, r1, #1
 8001504:	468c      	mov	ip, r1
 8001506:	44bc      	add	ip, r7
 8001508:	4463      	add	r3, ip
 800150a:	801a      	strh	r2, [r3, #0]
	invert_lsB_msB((uint64_t*)&tx_frame.length, 2);
 800150c:	2608      	movs	r6, #8
 800150e:	19bb      	adds	r3, r7, r6
 8001510:	2102      	movs	r1, #2
 8001512:	0018      	movs	r0, r3
 8001514:	f7ff ff48 	bl	80013a8 <invert_lsB_msB>
	tx_frame.type = 0x10;
 8001518:	4b70      	ldr	r3, [pc, #448]	; (80016dc <xbee_send_string+0x210>)
 800151a:	229c      	movs	r2, #156	; 0x9c
 800151c:	0052      	lsls	r2, r2, #1
 800151e:	4694      	mov	ip, r2
 8001520:	44bc      	add	ip, r7
 8001522:	4463      	add	r3, ip
 8001524:	2210      	movs	r2, #16
 8001526:	709a      	strb	r2, [r3, #2]
	tx_frame.id = 0x01;
 8001528:	4b6c      	ldr	r3, [pc, #432]	; (80016dc <xbee_send_string+0x210>)
 800152a:	229c      	movs	r2, #156	; 0x9c
 800152c:	0052      	lsls	r2, r2, #1
 800152e:	4694      	mov	ip, r2
 8001530:	44bc      	add	ip, r7
 8001532:	4463      	add	r3, ip
 8001534:	2201      	movs	r2, #1
 8001536:	70da      	strb	r2, [r3, #3]
	tx_frame.address64 = 0xFFFF;
 8001538:	4b68      	ldr	r3, [pc, #416]	; (80016dc <xbee_send_string+0x210>)
 800153a:	229c      	movs	r2, #156	; 0x9c
 800153c:	0052      	lsls	r2, r2, #1
 800153e:	18ba      	adds	r2, r7, r2
 8001540:	18d1      	adds	r1, r2, r3
 8001542:	4a67      	ldr	r2, [pc, #412]	; (80016e0 <xbee_send_string+0x214>)
 8001544:	2300      	movs	r3, #0
 8001546:	608a      	str	r2, [r1, #8]
 8001548:	60cb      	str	r3, [r1, #12]
	invert_lsB_msB((uint64_t*)&tx_frame.address64, 8);
 800154a:	19bb      	adds	r3, r7, r6
 800154c:	3308      	adds	r3, #8
 800154e:	2108      	movs	r1, #8
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff ff29 	bl	80013a8 <invert_lsB_msB>
	tx_frame.address16 = 0xFFFE;
 8001556:	4b61      	ldr	r3, [pc, #388]	; (80016dc <xbee_send_string+0x210>)
 8001558:	229c      	movs	r2, #156	; 0x9c
 800155a:	0052      	lsls	r2, r2, #1
 800155c:	4694      	mov	ip, r2
 800155e:	44bc      	add	ip, r7
 8001560:	4463      	add	r3, ip
 8001562:	2202      	movs	r2, #2
 8001564:	4252      	negs	r2, r2
 8001566:	821a      	strh	r2, [r3, #16]
	invert_lsB_msB((uint64_t*)&tx_frame.address16, 2);
 8001568:	19bb      	adds	r3, r7, r6
 800156a:	3310      	adds	r3, #16
 800156c:	2102      	movs	r1, #2
 800156e:	0018      	movs	r0, r3
 8001570:	f7ff ff1a 	bl	80013a8 <invert_lsB_msB>
	memcpy(tx_frame.content, string, strlen(string));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	0018      	movs	r0, r3
 8001578:	f7fe fdc6 	bl	8000108 <strlen>
 800157c:	0002      	movs	r2, r0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	19bb      	adds	r3, r7, r6
 8001582:	3313      	adds	r3, #19
 8001584:	0018      	movs	r0, r3
 8001586:	f004 f8c9 	bl	800571c <memcpy>

	uint64_t sum = 0;
 800158a:	2200      	movs	r2, #0
 800158c:	2300      	movs	r3, #0
 800158e:	2198      	movs	r1, #152	; 0x98
 8001590:	0049      	lsls	r1, r1, #1
 8001592:	1879      	adds	r1, r7, r1
 8001594:	600a      	str	r2, [r1, #0]
 8001596:	604b      	str	r3, [r1, #4]
	uint16_t frame_length;
	frame_length = 275;
 8001598:	2394      	movs	r3, #148	; 0x94
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	18fb      	adds	r3, r7, r3
 800159e:	2214      	movs	r2, #20
 80015a0:	32ff      	adds	r2, #255	; 0xff
 80015a2:	801a      	strh	r2, [r3, #0]
	uint8_t * ptr = (void *)&tx_frame+2;
 80015a4:	19bb      	adds	r3, r7, r6
 80015a6:	3302      	adds	r3, #2
 80015a8:	2296      	movs	r2, #150	; 0x96
 80015aa:	0052      	lsls	r2, r2, #1
 80015ac:	18ba      	adds	r2, r7, r2
 80015ae:	6013      	str	r3, [r2, #0]
	for(uint16_t i=0; i<frame_length-2; i++){
 80015b0:	2395      	movs	r3, #149	; 0x95
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	2200      	movs	r2, #0
 80015b8:	801a      	strh	r2, [r3, #0]
 80015ba:	e01d      	b.n	80015f8 <xbee_send_string+0x12c>
		sum += *ptr;
 80015bc:	2196      	movs	r1, #150	; 0x96
 80015be:	0049      	lsls	r1, r1, #1
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	001c      	movs	r4, r3
 80015c8:	2300      	movs	r3, #0
 80015ca:	001d      	movs	r5, r3
 80015cc:	2098      	movs	r0, #152	; 0x98
 80015ce:	0040      	lsls	r0, r0, #1
 80015d0:	183b      	adds	r3, r7, r0
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	1912      	adds	r2, r2, r4
 80015d8:	416b      	adcs	r3, r5
 80015da:	1838      	adds	r0, r7, r0
 80015dc:	6002      	str	r2, [r0, #0]
 80015de:	6043      	str	r3, [r0, #4]
		ptr++;
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	187a      	adds	r2, r7, r1
 80015e8:	6013      	str	r3, [r2, #0]
	for(uint16_t i=0; i<frame_length-2; i++){
 80015ea:	2195      	movs	r1, #149	; 0x95
 80015ec:	0049      	lsls	r1, r1, #1
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	881a      	ldrh	r2, [r3, #0]
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	3201      	adds	r2, #1
 80015f6:	801a      	strh	r2, [r3, #0]
 80015f8:	2395      	movs	r3, #149	; 0x95
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	18fb      	adds	r3, r7, r3
 80015fe:	881a      	ldrh	r2, [r3, #0]
 8001600:	2394      	movs	r3, #148	; 0x94
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	18fb      	adds	r3, r7, r3
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	3b02      	subs	r3, #2
 800160a:	429a      	cmp	r2, r3
 800160c:	dbd6      	blt.n	80015bc <xbee_send_string+0xf0>
	}

	tx_frame.check_sum = 0xFF - (sum & 0xFF);
 800160e:	2398      	movs	r3, #152	; 0x98
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	1c13      	adds	r3, r2, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	b2d9      	uxtb	r1, r3
 8001620:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <xbee_send_string+0x210>)
 8001622:	229c      	movs	r2, #156	; 0x9c
 8001624:	0052      	lsls	r2, r2, #1
 8001626:	18ba      	adds	r2, r7, r2
 8001628:	18d2      	adds	r2, r2, r3
 800162a:	238c      	movs	r3, #140	; 0x8c
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	54d1      	strb	r1, [r2, r3]


	HAL_UART_Transmit(&huart5, "~", 1, 100);
 8001630:	492c      	ldr	r1, [pc, #176]	; (80016e4 <xbee_send_string+0x218>)
 8001632:	482d      	ldr	r0, [pc, #180]	; (80016e8 <xbee_send_string+0x21c>)
 8001634:	2364      	movs	r3, #100	; 0x64
 8001636:	2201      	movs	r2, #1
 8001638:	f002 fcfe 	bl	8004038 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, (uint8_t*)&tx_frame.length, 2, 100);
 800163c:	2408      	movs	r4, #8
 800163e:	1939      	adds	r1, r7, r4
 8001640:	4829      	ldr	r0, [pc, #164]	; (80016e8 <xbee_send_string+0x21c>)
 8001642:	2364      	movs	r3, #100	; 0x64
 8001644:	2202      	movs	r2, #2
 8001646:	f002 fcf7 	bl	8004038 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.type, 1, 100);
 800164a:	193b      	adds	r3, r7, r4
 800164c:	1c99      	adds	r1, r3, #2
 800164e:	4826      	ldr	r0, [pc, #152]	; (80016e8 <xbee_send_string+0x21c>)
 8001650:	2364      	movs	r3, #100	; 0x64
 8001652:	2201      	movs	r2, #1
 8001654:	f002 fcf0 	bl	8004038 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.id, 1, 100);
 8001658:	193b      	adds	r3, r7, r4
 800165a:	1cd9      	adds	r1, r3, #3
 800165c:	4822      	ldr	r0, [pc, #136]	; (80016e8 <xbee_send_string+0x21c>)
 800165e:	2364      	movs	r3, #100	; 0x64
 8001660:	2201      	movs	r2, #1
 8001662:	f002 fce9 	bl	8004038 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.address64, 8, 100);
 8001666:	193b      	adds	r3, r7, r4
 8001668:	3308      	adds	r3, #8
 800166a:	0019      	movs	r1, r3
 800166c:	481e      	ldr	r0, [pc, #120]	; (80016e8 <xbee_send_string+0x21c>)
 800166e:	2364      	movs	r3, #100	; 0x64
 8001670:	2208      	movs	r2, #8
 8001672:	f002 fce1 	bl	8004038 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.address16, 2, 100);
 8001676:	193b      	adds	r3, r7, r4
 8001678:	3310      	adds	r3, #16
 800167a:	0019      	movs	r1, r3
 800167c:	481a      	ldr	r0, [pc, #104]	; (80016e8 <xbee_send_string+0x21c>)
 800167e:	2364      	movs	r3, #100	; 0x64
 8001680:	2202      	movs	r2, #2
 8001682:	f002 fcd9 	bl	8004038 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.content_index, 1, 100);
 8001686:	193b      	adds	r3, r7, r4
 8001688:	3314      	adds	r3, #20
 800168a:	33ff      	adds	r3, #255	; 0xff
 800168c:	0019      	movs	r1, r3
 800168e:	4816      	ldr	r0, [pc, #88]	; (80016e8 <xbee_send_string+0x21c>)
 8001690:	2364      	movs	r3, #100	; 0x64
 8001692:	2201      	movs	r2, #1
 8001694:	f002 fcd0 	bl	8004038 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.option, 1, 100);
 8001698:	193b      	adds	r3, r7, r4
 800169a:	3312      	adds	r3, #18
 800169c:	0019      	movs	r1, r3
 800169e:	4812      	ldr	r0, [pc, #72]	; (80016e8 <xbee_send_string+0x21c>)
 80016a0:	2364      	movs	r3, #100	; 0x64
 80016a2:	2201      	movs	r2, #1
 80016a4:	f002 fcc8 	bl	8004038 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.content, strlen(string), 100);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	0018      	movs	r0, r3
 80016ac:	f7fe fd2c 	bl	8000108 <strlen>
 80016b0:	0003      	movs	r3, r0
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	193b      	adds	r3, r7, r4
 80016b6:	3313      	adds	r3, #19
 80016b8:	0019      	movs	r1, r3
 80016ba:	480b      	ldr	r0, [pc, #44]	; (80016e8 <xbee_send_string+0x21c>)
 80016bc:	2364      	movs	r3, #100	; 0x64
 80016be:	f002 fcbb 	bl	8004038 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.check_sum, 1, 100);
 80016c2:	193b      	adds	r3, r7, r4
 80016c4:	3319      	adds	r3, #25
 80016c6:	33ff      	adds	r3, #255	; 0xff
 80016c8:	0019      	movs	r1, r3
 80016ca:	4807      	ldr	r0, [pc, #28]	; (80016e8 <xbee_send_string+0x21c>)
 80016cc:	2364      	movs	r3, #100	; 0x64
 80016ce:	2201      	movs	r2, #1
 80016d0:	f002 fcb2 	bl	8004038 <HAL_UART_Transmit>
}
 80016d4:	46c0      	nop			; (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b04f      	add	sp, #316	; 0x13c
 80016da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016dc:	fffffed0 	.word	0xfffffed0
 80016e0:	0000ffff 	.word	0x0000ffff
 80016e4:	08005fac 	.word	0x08005fac
 80016e8:	20000608 	.word	0x20000608

080016ec <xbee_send_alert>:
void xbee_send_alert(){
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b0c3      	sub	sp, #268	; 0x10c
 80016f0:	af02      	add	r7, sp, #8
	if(alert_sent_flag == 0){
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <xbee_send_alert+0x3c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d112      	bne.n	8001720 <xbee_send_alert+0x34>
		alert_sent_flag = 1;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <xbee_send_alert+0x3c>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
		uint8_t string[256];
		sprintf(string, "E %s %li %li\r", config[1][1], bee_count, bee_rate);
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <xbee_send_alert+0x40>)
 8001702:	681c      	ldr	r4, [r3, #0]
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <xbee_send_alert+0x44>)
 8001706:	2200      	movs	r2, #0
 8001708:	5e9b      	ldrsh	r3, [r3, r2]
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <xbee_send_alert+0x48>)
 800170c:	490a      	ldr	r1, [pc, #40]	; (8001738 <xbee_send_alert+0x4c>)
 800170e:	0038      	movs	r0, r7
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	0023      	movs	r3, r4
 8001714:	f004 f814 	bl	8005740 <siprintf>
		xbee_send_string(string);
 8001718:	003b      	movs	r3, r7
 800171a:	0018      	movs	r0, r3
 800171c:	f7ff fed6 	bl	80014cc <xbee_send_string>
	}

}
 8001720:	46c0      	nop			; (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	b041      	add	sp, #260	; 0x104
 8001726:	bd90      	pop	{r4, r7, pc}
 8001728:	20000320 	.word	0x20000320
 800172c:	200005c0 	.word	0x200005c0
 8001730:	200005c4 	.word	0x200005c4
 8001734:	20000106 	.word	0x20000106
 8001738:	08005fb0 	.word	0x08005fb0

0800173c <read_xbee>:


void read_xbee(){
 800173c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173e:	b099      	sub	sp, #100	; 0x64
 8001740:	af00      	add	r7, sp, #0
  static struct frame received_frame = {0};

  if(xbee_rx_read_index<xbee_rx_write_index && master_state != xbee_init){
 8001742:	4bcd      	ldr	r3, [pc, #820]	; (8001a78 <read_xbee+0x33c>)
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	4bcd      	ldr	r3, [pc, #820]	; (8001a7c <read_xbee+0x340>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d300      	bcc.n	8001750 <read_xbee+0x14>
 800174e:	e2c8      	b.n	8001ce2 <read_xbee+0x5a6>
 8001750:	4bcb      	ldr	r3, [pc, #812]	; (8001a80 <read_xbee+0x344>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d100      	bne.n	800175a <read_xbee+0x1e>
 8001758:	e2c3      	b.n	8001ce2 <read_xbee+0x5a6>
	  uint64_t sum = 0;
 800175a:	2200      	movs	r2, #0
 800175c:	2300      	movs	r3, #0
 800175e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001760:	65fb      	str	r3, [r7, #92]	; 0x5c
	  static uint8_t multiple_byte_step;

	  switch (xbee_receive_state){
 8001762:	4bc8      	ldr	r3, [pc, #800]	; (8001a84 <read_xbee+0x348>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b0a      	cmp	r3, #10
 8001768:	d900      	bls.n	800176c <read_xbee+0x30>
 800176a:	e2b4      	b.n	8001cd6 <read_xbee+0x59a>
 800176c:	009a      	lsls	r2, r3, #2
 800176e:	4bc6      	ldr	r3, [pc, #792]	; (8001a88 <read_xbee+0x34c>)
 8001770:	18d3      	adds	r3, r2, r3
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	469f      	mov	pc, r3
		  case idle:
			  if(xbee_rx_buffer[xbee_rx_read_index] == 0x7E){
 8001776:	4bc0      	ldr	r3, [pc, #768]	; (8001a78 <read_xbee+0x33c>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	001a      	movs	r2, r3
 800177c:	4bc3      	ldr	r3, [pc, #780]	; (8001a8c <read_xbee+0x350>)
 800177e:	5c9b      	ldrb	r3, [r3, r2]
 8001780:	2b7e      	cmp	r3, #126	; 0x7e
 8001782:	d000      	beq.n	8001786 <read_xbee+0x4a>
 8001784:	e2a6      	b.n	8001cd4 <read_xbee+0x598>
				  xbee_receive_state = frame_length;
 8001786:	4bbf      	ldr	r3, [pc, #764]	; (8001a84 <read_xbee+0x348>)
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
			  }
			  /*else if (lora_requested && xbee_rx_buffer[xbee_rx_read_index] == 0xAA){
				  is_coordinator = True;
				  lora_requested = False;
			  }*/
		  break;
 800178c:	e2a2      	b.n	8001cd4 <read_xbee+0x598>

		  case frame_length:
			  received_frame.length += ((uint16_t)(xbee_rx_buffer[xbee_rx_read_index])) << (8-8*multiple_byte_step) ;
 800178e:	4bc0      	ldr	r3, [pc, #768]	; (8001a90 <read_xbee+0x354>)
 8001790:	881a      	ldrh	r2, [r3, #0]
 8001792:	4bb9      	ldr	r3, [pc, #740]	; (8001a78 <read_xbee+0x33c>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	0019      	movs	r1, r3
 8001798:	4bbc      	ldr	r3, [pc, #752]	; (8001a8c <read_xbee+0x350>)
 800179a:	5c5b      	ldrb	r3, [r3, r1]
 800179c:	0019      	movs	r1, r3
 800179e:	4bbd      	ldr	r3, [pc, #756]	; (8001a94 <read_xbee+0x358>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	0018      	movs	r0, r3
 80017a4:	2301      	movs	r3, #1
 80017a6:	1a1b      	subs	r3, r3, r0
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4099      	lsls	r1, r3
 80017ac:	000b      	movs	r3, r1
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	18d3      	adds	r3, r2, r3
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	4bb6      	ldr	r3, [pc, #728]	; (8001a90 <read_xbee+0x354>)
 80017b6:	801a      	strh	r2, [r3, #0]
			  if(multiple_byte_step){
 80017b8:	4bb6      	ldr	r3, [pc, #728]	; (8001a94 <read_xbee+0x358>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <read_xbee+0x92>
				  multiple_byte_step = 0;
 80017c0:	4bb4      	ldr	r3, [pc, #720]	; (8001a94 <read_xbee+0x358>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
				  xbee_receive_state = frame_type;
 80017c6:	4baf      	ldr	r3, [pc, #700]	; (8001a84 <read_xbee+0x348>)
 80017c8:	2202      	movs	r2, #2
 80017ca:	701a      	strb	r2, [r3, #0]
			  }
			  else{
				  multiple_byte_step++;
			  }
		  break;
 80017cc:	e283      	b.n	8001cd6 <read_xbee+0x59a>
				  multiple_byte_step++;
 80017ce:	4bb1      	ldr	r3, [pc, #708]	; (8001a94 <read_xbee+0x358>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4baf      	ldr	r3, [pc, #700]	; (8001a94 <read_xbee+0x358>)
 80017d8:	701a      	strb	r2, [r3, #0]
		  break;
 80017da:	e27c      	b.n	8001cd6 <read_xbee+0x59a>

		  case frame_type:
			  received_frame.type = xbee_rx_buffer[xbee_rx_read_index];
 80017dc:	4ba6      	ldr	r3, [pc, #664]	; (8001a78 <read_xbee+0x33c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	001a      	movs	r2, r3
 80017e2:	4baa      	ldr	r3, [pc, #680]	; (8001a8c <read_xbee+0x350>)
 80017e4:	5c9a      	ldrb	r2, [r3, r2]
 80017e6:	4baa      	ldr	r3, [pc, #680]	; (8001a90 <read_xbee+0x354>)
 80017e8:	709a      	strb	r2, [r3, #2]
			  switch(received_frame.type){
 80017ea:	4ba9      	ldr	r3, [pc, #676]	; (8001a90 <read_xbee+0x354>)
 80017ec:	789b      	ldrb	r3, [r3, #2]
 80017ee:	2b90      	cmp	r3, #144	; 0x90
 80017f0:	d002      	beq.n	80017f8 <read_xbee+0xbc>
 80017f2:	2b97      	cmp	r3, #151	; 0x97
 80017f4:	d004      	beq.n	8001800 <read_xbee+0xc4>
 80017f6:	e007      	b.n	8001808 <read_xbee+0xcc>
				  case receive_packet: xbee_receive_state = frame_address64; break;
 80017f8:	4ba2      	ldr	r3, [pc, #648]	; (8001a84 <read_xbee+0x348>)
 80017fa:	2204      	movs	r2, #4
 80017fc:	701a      	strb	r2, [r3, #0]
 80017fe:	e00b      	b.n	8001818 <read_xbee+0xdc>
				  case remote_command_response: xbee_receive_state = frame_id; break;
 8001800:	4ba0      	ldr	r3, [pc, #640]	; (8001a84 <read_xbee+0x348>)
 8001802:	2203      	movs	r2, #3
 8001804:	701a      	strb	r2, [r3, #0]
 8001806:	e007      	b.n	8001818 <read_xbee+0xdc>
				  default: xbee_rx_read_index = xbee_rx_write_index;
 8001808:	4b9c      	ldr	r3, [pc, #624]	; (8001a7c <read_xbee+0x340>)
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	4b9a      	ldr	r3, [pc, #616]	; (8001a78 <read_xbee+0x33c>)
 800180e:	701a      	strb	r2, [r3, #0]
						   xbee_receive_state = idle;
 8001810:	4b9c      	ldr	r3, [pc, #624]	; (8001a84 <read_xbee+0x348>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
				  break;
 8001816:	46c0      	nop			; (mov r8, r8)
			  }

			  multiple_byte_step = 0;
 8001818:	4b9e      	ldr	r3, [pc, #632]	; (8001a94 <read_xbee+0x358>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
		  break;
 800181e:	e25a      	b.n	8001cd6 <read_xbee+0x59a>

		  case frame_id:
			  received_frame.id = xbee_rx_buffer[xbee_rx_read_index];
 8001820:	4b95      	ldr	r3, [pc, #596]	; (8001a78 <read_xbee+0x33c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	001a      	movs	r2, r3
 8001826:	4b99      	ldr	r3, [pc, #612]	; (8001a8c <read_xbee+0x350>)
 8001828:	5c9a      	ldrb	r2, [r3, r2]
 800182a:	4b99      	ldr	r3, [pc, #612]	; (8001a90 <read_xbee+0x354>)
 800182c:	70da      	strb	r2, [r3, #3]
			  xbee_receive_state = frame_address64;
 800182e:	4b95      	ldr	r3, [pc, #596]	; (8001a84 <read_xbee+0x348>)
 8001830:	2204      	movs	r2, #4
 8001832:	701a      	strb	r2, [r3, #0]
		  break;
 8001834:	e24f      	b.n	8001cd6 <read_xbee+0x59a>

		  case frame_address64:
			  received_frame.address64 += ((uint64_t)xbee_rx_buffer[xbee_rx_read_index]) << (56-8*multiple_byte_step);
 8001836:	4b96      	ldr	r3, [pc, #600]	; (8001a90 <read_xbee+0x354>)
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	498e      	ldr	r1, [pc, #568]	; (8001a78 <read_xbee+0x33c>)
 800183e:	7809      	ldrb	r1, [r1, #0]
 8001840:	0008      	movs	r0, r1
 8001842:	4992      	ldr	r1, [pc, #584]	; (8001a8c <read_xbee+0x350>)
 8001844:	5c09      	ldrb	r1, [r1, r0]
 8001846:	64b9      	str	r1, [r7, #72]	; 0x48
 8001848:	2100      	movs	r1, #0
 800184a:	64f9      	str	r1, [r7, #76]	; 0x4c
 800184c:	4991      	ldr	r1, [pc, #580]	; (8001a94 <read_xbee+0x358>)
 800184e:	7809      	ldrb	r1, [r1, #0]
 8001850:	0008      	movs	r0, r1
 8001852:	2107      	movs	r1, #7
 8001854:	1a09      	subs	r1, r1, r0
 8001856:	00c9      	lsls	r1, r1, #3
 8001858:	0008      	movs	r0, r1
 800185a:	3820      	subs	r0, #32
 800185c:	2800      	cmp	r0, #0
 800185e:	db03      	blt.n	8001868 <read_xbee+0x12c>
 8001860:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 8001862:	4086      	lsls	r6, r0
 8001864:	0035      	movs	r5, r6
 8001866:	e008      	b.n	800187a <read_xbee+0x13e>
 8001868:	2020      	movs	r0, #32
 800186a:	1a40      	subs	r0, r0, r1
 800186c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 800186e:	40c6      	lsrs	r6, r0
 8001870:	0030      	movs	r0, r6
 8001872:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8001874:	408e      	lsls	r6, r1
 8001876:	0035      	movs	r5, r6
 8001878:	4305      	orrs	r5, r0
 800187a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800187c:	4088      	lsls	r0, r1
 800187e:	0004      	movs	r4, r0
 8001880:	1912      	adds	r2, r2, r4
 8001882:	416b      	adcs	r3, r5
 8001884:	4982      	ldr	r1, [pc, #520]	; (8001a90 <read_xbee+0x354>)
 8001886:	608a      	str	r2, [r1, #8]
 8001888:	60cb      	str	r3, [r1, #12]

			  if(multiple_byte_step == 7){
 800188a:	4b82      	ldr	r3, [pc, #520]	; (8001a94 <read_xbee+0x358>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b07      	cmp	r3, #7
 8001890:	d106      	bne.n	80018a0 <read_xbee+0x164>
				  xbee_receive_state = frame_address16;
 8001892:	4b7c      	ldr	r3, [pc, #496]	; (8001a84 <read_xbee+0x348>)
 8001894:	2205      	movs	r2, #5
 8001896:	701a      	strb	r2, [r3, #0]
				  multiple_byte_step = 0;
 8001898:	4b7e      	ldr	r3, [pc, #504]	; (8001a94 <read_xbee+0x358>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
			  }
			  else multiple_byte_step++;
		  break;
 800189e:	e21a      	b.n	8001cd6 <read_xbee+0x59a>
			  else multiple_byte_step++;
 80018a0:	4b7c      	ldr	r3, [pc, #496]	; (8001a94 <read_xbee+0x358>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b7a      	ldr	r3, [pc, #488]	; (8001a94 <read_xbee+0x358>)
 80018aa:	701a      	strb	r2, [r3, #0]
		  break;
 80018ac:	e213      	b.n	8001cd6 <read_xbee+0x59a>

		  case frame_address16:
			  received_frame.address16 += ((uint16_t)xbee_rx_buffer[xbee_rx_read_index]) << (8-8*multiple_byte_step);
 80018ae:	4b78      	ldr	r3, [pc, #480]	; (8001a90 <read_xbee+0x354>)
 80018b0:	8a1a      	ldrh	r2, [r3, #16]
 80018b2:	4b71      	ldr	r3, [pc, #452]	; (8001a78 <read_xbee+0x33c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	0019      	movs	r1, r3
 80018b8:	4b74      	ldr	r3, [pc, #464]	; (8001a8c <read_xbee+0x350>)
 80018ba:	5c5b      	ldrb	r3, [r3, r1]
 80018bc:	0019      	movs	r1, r3
 80018be:	4b75      	ldr	r3, [pc, #468]	; (8001a94 <read_xbee+0x358>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	0018      	movs	r0, r3
 80018c4:	2301      	movs	r3, #1
 80018c6:	1a1b      	subs	r3, r3, r0
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4099      	lsls	r1, r3
 80018cc:	000b      	movs	r3, r1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	18d3      	adds	r3, r2, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	4b6e      	ldr	r3, [pc, #440]	; (8001a90 <read_xbee+0x354>)
 80018d6:	821a      	strh	r2, [r3, #16]
			  if(multiple_byte_step == 1){
 80018d8:	4b6e      	ldr	r3, [pc, #440]	; (8001a94 <read_xbee+0x358>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d11a      	bne.n	8001916 <read_xbee+0x1da>
				  switch(received_frame.type){
 80018e0:	4b6b      	ldr	r3, [pc, #428]	; (8001a90 <read_xbee+0x354>)
 80018e2:	789b      	ldrb	r3, [r3, #2]
 80018e4:	2b90      	cmp	r3, #144	; 0x90
 80018e6:	d002      	beq.n	80018ee <read_xbee+0x1b2>
 80018e8:	2b97      	cmp	r3, #151	; 0x97
 80018ea:	d004      	beq.n	80018f6 <read_xbee+0x1ba>
 80018ec:	e007      	b.n	80018fe <read_xbee+0x1c2>
					  case receive_packet: xbee_receive_state = frame_option; break;
 80018ee:	4b65      	ldr	r3, [pc, #404]	; (8001a84 <read_xbee+0x348>)
 80018f0:	2206      	movs	r2, #6
 80018f2:	701a      	strb	r2, [r3, #0]
 80018f4:	e00b      	b.n	800190e <read_xbee+0x1d2>
					  case remote_command_response: xbee_receive_state = frame_at_status; break;
 80018f6:	4b63      	ldr	r3, [pc, #396]	; (8001a84 <read_xbee+0x348>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	e007      	b.n	800190e <read_xbee+0x1d2>
					  default: xbee_rx_read_index = xbee_rx_write_index;
 80018fe:	4b5f      	ldr	r3, [pc, #380]	; (8001a7c <read_xbee+0x340>)
 8001900:	781a      	ldrb	r2, [r3, #0]
 8001902:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <read_xbee+0x33c>)
 8001904:	701a      	strb	r2, [r3, #0]
							   xbee_receive_state = idle;
 8001906:	4b5f      	ldr	r3, [pc, #380]	; (8001a84 <read_xbee+0x348>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
					  break;
 800190c:	46c0      	nop			; (mov r8, r8)
				  }

				  multiple_byte_step = 0;
 800190e:	4b61      	ldr	r3, [pc, #388]	; (8001a94 <read_xbee+0x358>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
			  }
			  else multiple_byte_step++;
		  break;
 8001914:	e1df      	b.n	8001cd6 <read_xbee+0x59a>
			  else multiple_byte_step++;
 8001916:	4b5f      	ldr	r3, [pc, #380]	; (8001a94 <read_xbee+0x358>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	3301      	adds	r3, #1
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b5d      	ldr	r3, [pc, #372]	; (8001a94 <read_xbee+0x358>)
 8001920:	701a      	strb	r2, [r3, #0]
		  break;
 8001922:	e1d8      	b.n	8001cd6 <read_xbee+0x59a>

		  case frame_option:
			  received_frame.option = xbee_rx_buffer[xbee_rx_read_index];
 8001924:	4b54      	ldr	r3, [pc, #336]	; (8001a78 <read_xbee+0x33c>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	001a      	movs	r2, r3
 800192a:	4b58      	ldr	r3, [pc, #352]	; (8001a8c <read_xbee+0x350>)
 800192c:	5c9a      	ldrb	r2, [r3, r2]
 800192e:	4b58      	ldr	r3, [pc, #352]	; (8001a90 <read_xbee+0x354>)
 8001930:	749a      	strb	r2, [r3, #18]
			  xbee_receive_state = frame_content;
 8001932:	4b54      	ldr	r3, [pc, #336]	; (8001a84 <read_xbee+0x348>)
 8001934:	2208      	movs	r2, #8
 8001936:	701a      	strb	r2, [r3, #0]
		  break;
 8001938:	e1cd      	b.n	8001cd6 <read_xbee+0x59a>

		  case frame_at_status:
			  received_frame.command_status[multiple_byte_step] = xbee_rx_buffer[xbee_rx_read_index];
 800193a:	4b4f      	ldr	r3, [pc, #316]	; (8001a78 <read_xbee+0x33c>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	001a      	movs	r2, r3
 8001940:	4b54      	ldr	r3, [pc, #336]	; (8001a94 <read_xbee+0x358>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	0018      	movs	r0, r3
 8001946:	4b51      	ldr	r3, [pc, #324]	; (8001a8c <read_xbee+0x350>)
 8001948:	5c99      	ldrb	r1, [r3, r2]
 800194a:	4a51      	ldr	r2, [pc, #324]	; (8001a90 <read_xbee+0x354>)
 800194c:	238a      	movs	r3, #138	; 0x8a
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	1812      	adds	r2, r2, r0
 8001952:	18d3      	adds	r3, r2, r3
 8001954:	1c0a      	adds	r2, r1, #0
 8001956:	701a      	strb	r2, [r3, #0]
			  if(multiple_byte_step == 2){
 8001958:	4b4e      	ldr	r3, [pc, #312]	; (8001a94 <read_xbee+0x358>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d106      	bne.n	800196e <read_xbee+0x232>
				  multiple_byte_step = 0;
 8001960:	4b4c      	ldr	r3, [pc, #304]	; (8001a94 <read_xbee+0x358>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
				  xbee_receive_state = frame_content;
 8001966:	4b47      	ldr	r3, [pc, #284]	; (8001a84 <read_xbee+0x348>)
 8001968:	2208      	movs	r2, #8
 800196a:	701a      	strb	r2, [r3, #0]
			  }
			  else multiple_byte_step++;
		  break;
 800196c:	e1b3      	b.n	8001cd6 <read_xbee+0x59a>
			  else multiple_byte_step++;
 800196e:	4b49      	ldr	r3, [pc, #292]	; (8001a94 <read_xbee+0x358>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4b47      	ldr	r3, [pc, #284]	; (8001a94 <read_xbee+0x358>)
 8001978:	701a      	strb	r2, [r3, #0]
		  break;
 800197a:	e1ac      	b.n	8001cd6 <read_xbee+0x59a>

		  case frame_content:
			  received_frame.content[received_frame.content_index] = xbee_rx_buffer[xbee_rx_read_index];
 800197c:	4b3e      	ldr	r3, [pc, #248]	; (8001a78 <read_xbee+0x33c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	0018      	movs	r0, r3
 8001982:	4a43      	ldr	r2, [pc, #268]	; (8001a90 <read_xbee+0x354>)
 8001984:	2314      	movs	r3, #20
 8001986:	33ff      	adds	r3, #255	; 0xff
 8001988:	5cd3      	ldrb	r3, [r2, r3]
 800198a:	0019      	movs	r1, r3
 800198c:	4b3f      	ldr	r3, [pc, #252]	; (8001a8c <read_xbee+0x350>)
 800198e:	5c1a      	ldrb	r2, [r3, r0]
 8001990:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <read_xbee+0x354>)
 8001992:	185b      	adds	r3, r3, r1
 8001994:	74da      	strb	r2, [r3, #19]
			  if(((received_frame.content_index == received_frame.length-13) && received_frame.type==receive_packet) || ((received_frame.content_index == received_frame.length-16) && (received_frame.type==remote_command_response)))
 8001996:	4a3e      	ldr	r2, [pc, #248]	; (8001a90 <read_xbee+0x354>)
 8001998:	2314      	movs	r3, #20
 800199a:	33ff      	adds	r3, #255	; 0xff
 800199c:	5cd3      	ldrb	r3, [r2, r3]
 800199e:	001a      	movs	r2, r3
 80019a0:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <read_xbee+0x354>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	3b0d      	subs	r3, #13
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d103      	bne.n	80019b2 <read_xbee+0x276>
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <read_xbee+0x354>)
 80019ac:	789b      	ldrb	r3, [r3, #2]
 80019ae:	2b90      	cmp	r3, #144	; 0x90
 80019b0:	d00d      	beq.n	80019ce <read_xbee+0x292>
 80019b2:	4a37      	ldr	r2, [pc, #220]	; (8001a90 <read_xbee+0x354>)
 80019b4:	2314      	movs	r3, #20
 80019b6:	33ff      	adds	r3, #255	; 0xff
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	001a      	movs	r2, r3
 80019bc:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <read_xbee+0x354>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	3b10      	subs	r3, #16
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d107      	bne.n	80019d6 <read_xbee+0x29a>
 80019c6:	4b32      	ldr	r3, [pc, #200]	; (8001a90 <read_xbee+0x354>)
 80019c8:	789b      	ldrb	r3, [r3, #2]
 80019ca:	2b97      	cmp	r3, #151	; 0x97
 80019cc:	d103      	bne.n	80019d6 <read_xbee+0x29a>
				  xbee_receive_state = check_sum;
 80019ce:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <read_xbee+0x348>)
 80019d0:	2209      	movs	r2, #9
 80019d2:	701a      	strb	r2, [r3, #0]
			  else
				  received_frame.content_index++;
		  break;
 80019d4:	e17f      	b.n	8001cd6 <read_xbee+0x59a>
				  received_frame.content_index++;
 80019d6:	4a2e      	ldr	r2, [pc, #184]	; (8001a90 <read_xbee+0x354>)
 80019d8:	2314      	movs	r3, #20
 80019da:	33ff      	adds	r3, #255	; 0xff
 80019dc:	5cd3      	ldrb	r3, [r2, r3]
 80019de:	3301      	adds	r3, #1
 80019e0:	b2d9      	uxtb	r1, r3
 80019e2:	4a2b      	ldr	r2, [pc, #172]	; (8001a90 <read_xbee+0x354>)
 80019e4:	2314      	movs	r3, #20
 80019e6:	33ff      	adds	r3, #255	; 0xff
 80019e8:	54d1      	strb	r1, [r2, r3]
		  break;
 80019ea:	e174      	b.n	8001cd6 <read_xbee+0x59a>

		  case check_sum:
			  received_frame.check_sum = xbee_rx_buffer[xbee_rx_read_index];
 80019ec:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <read_xbee+0x33c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	001a      	movs	r2, r3
 80019f2:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <read_xbee+0x350>)
 80019f4:	5c98      	ldrb	r0, [r3, r2]
 80019f6:	4926      	ldr	r1, [pc, #152]	; (8001a90 <read_xbee+0x354>)
 80019f8:	238c      	movs	r3, #140	; 0x8c
 80019fa:	005a      	lsls	r2, r3, #1
 80019fc:	1c03      	adds	r3, r0, #0
 80019fe:	548b      	strb	r3, [r1, r2]
			  for(uint8_t i=0; i<8; i++) sum += (((uint64_t)0xFF<<(56-8*i)) & received_frame.address64)>>(56-8*i);
 8001a00:	2357      	movs	r3, #87	; 0x57
 8001a02:	18fa      	adds	r2, r7, r3
 8001a04:	2300      	movs	r3, #0
 8001a06:	7013      	strb	r3, [r2, #0]
 8001a08:	e064      	b.n	8001ad4 <read_xbee+0x398>
 8001a0a:	2357      	movs	r3, #87	; 0x57
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	781a      	ldrb	r2, [r3, #0]
 8001a10:	2307      	movs	r3, #7
 8001a12:	1a9b      	subs	r3, r3, r2
 8001a14:	00d9      	lsls	r1, r3, #3
 8001a16:	000a      	movs	r2, r1
 8001a18:	3a20      	subs	r2, #32
 8001a1a:	2a00      	cmp	r2, #0
 8001a1c:	db03      	blt.n	8001a26 <read_xbee+0x2ea>
 8001a1e:	23ff      	movs	r3, #255	; 0xff
 8001a20:	4093      	lsls	r3, r2
 8001a22:	647b      	str	r3, [r7, #68]	; 0x44
 8001a24:	e00a      	b.n	8001a3c <read_xbee+0x300>
 8001a26:	2320      	movs	r3, #32
 8001a28:	1a5a      	subs	r2, r3, r1
 8001a2a:	23ff      	movs	r3, #255	; 0xff
 8001a2c:	40d3      	lsrs	r3, r2
 8001a2e:	001a      	movs	r2, r3
 8001a30:	2300      	movs	r3, #0
 8001a32:	408b      	lsls	r3, r1
 8001a34:	647b      	str	r3, [r7, #68]	; 0x44
 8001a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a3c:	23ff      	movs	r3, #255	; 0xff
 8001a3e:	408b      	lsls	r3, r1
 8001a40:	643b      	str	r3, [r7, #64]	; 0x40
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <read_xbee+0x354>)
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0011      	movs	r1, r2
 8001a4a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8001a4c:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8001a4e:	0020      	movs	r0, r4
 8001a50:	4008      	ands	r0, r1
 8001a52:	6338      	str	r0, [r7, #48]	; 0x30
 8001a54:	002a      	movs	r2, r5
 8001a56:	401a      	ands	r2, r3
 8001a58:	637a      	str	r2, [r7, #52]	; 0x34
 8001a5a:	2357      	movs	r3, #87	; 0x57
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	2307      	movs	r3, #7
 8001a62:	1a9b      	subs	r3, r3, r2
 8001a64:	00da      	lsls	r2, r3, #3
 8001a66:	0013      	movs	r3, r2
 8001a68:	3b20      	subs	r3, #32
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	db14      	blt.n	8001a98 <read_xbee+0x35c>
 8001a6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a70:	40d9      	lsrs	r1, r3
 8001a72:	63b9      	str	r1, [r7, #56]	; 0x38
 8001a74:	e01d      	b.n	8001ab2 <read_xbee+0x376>
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	20000424 	.word	0x20000424
 8001a7c:	20000425 	.word	0x20000425
 8001a80:	2000030c 	.word	0x2000030c
 8001a84:	200005c6 	.word	0x200005c6
 8001a88:	08005ff0 	.word	0x08005ff0
 8001a8c:	20000324 	.word	0x20000324
 8001a90:	20000438 	.word	0x20000438
 8001a94:	20000558 	.word	0x20000558
 8001a98:	2320      	movs	r3, #32
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001aa0:	000c      	movs	r4, r1
 8001aa2:	409c      	lsls	r4, r3
 8001aa4:	0023      	movs	r3, r4
 8001aa6:	0001      	movs	r1, r0
 8001aa8:	40d1      	lsrs	r1, r2
 8001aaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8001aac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001aae:	4319      	orrs	r1, r3
 8001ab0:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab4:	40d3      	lsrs	r3, r2
 8001ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ab8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001abc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001abe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ac0:	1812      	adds	r2, r2, r0
 8001ac2:	414b      	adcs	r3, r1
 8001ac4:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ac8:	2257      	movs	r2, #87	; 0x57
 8001aca:	18bb      	adds	r3, r7, r2
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	18ba      	adds	r2, r7, r2
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	7013      	strb	r3, [r2, #0]
 8001ad4:	2357      	movs	r3, #87	; 0x57
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b07      	cmp	r3, #7
 8001adc:	d995      	bls.n	8001a0a <read_xbee+0x2ce>
			  for(uint8_t i=0; i<2; i++) sum += (((uint16_t)0xFF<<(8-8*i)) & received_frame.address16)>>(8-i*8);
 8001ade:	2356      	movs	r3, #86	; 0x56
 8001ae0:	18fa      	adds	r2, r7, r3
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	7013      	strb	r3, [r2, #0]
 8001ae6:	e024      	b.n	8001b32 <read_xbee+0x3f6>
 8001ae8:	2056      	movs	r0, #86	; 0x56
 8001aea:	183b      	adds	r3, r7, r0
 8001aec:	781a      	ldrb	r2, [r3, #0]
 8001aee:	2301      	movs	r3, #1
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	00da      	lsls	r2, r3, #3
 8001af4:	23ff      	movs	r3, #255	; 0xff
 8001af6:	4093      	lsls	r3, r2
 8001af8:	001a      	movs	r2, r3
 8001afa:	4b7c      	ldr	r3, [pc, #496]	; (8001cec <read_xbee+0x5b0>)
 8001afc:	8a1b      	ldrh	r3, [r3, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	0019      	movs	r1, r3
 8001b02:	0004      	movs	r4, r0
 8001b04:	183b      	adds	r3, r7, r0
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	2301      	movs	r3, #1
 8001b0a:	1a9b      	subs	r3, r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4119      	asrs	r1, r3
 8001b10:	000b      	movs	r3, r1
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b14:	17db      	asrs	r3, r3, #31
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b20:	1812      	adds	r2, r2, r0
 8001b22:	414b      	adcs	r3, r1
 8001b24:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b28:	193b      	adds	r3, r7, r4
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	193a      	adds	r2, r7, r4
 8001b2e:	3301      	adds	r3, #1
 8001b30:	7013      	strb	r3, [r2, #0]
 8001b32:	2356      	movs	r3, #86	; 0x56
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d9d5      	bls.n	8001ae8 <read_xbee+0x3ac>
			  if(received_frame.id==receive_packet) for(uint16_t i=0; i<received_frame.length-12; i++) sum += received_frame.content[i];
 8001b3c:	4b6b      	ldr	r3, [pc, #428]	; (8001cec <read_xbee+0x5b0>)
 8001b3e:	78db      	ldrb	r3, [r3, #3]
 8001b40:	2b90      	cmp	r3, #144	; 0x90
 8001b42:	d123      	bne.n	8001b8c <read_xbee+0x450>
 8001b44:	2354      	movs	r3, #84	; 0x54
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	2200      	movs	r2, #0
 8001b4a:	801a      	strh	r2, [r3, #0]
 8001b4c:	e015      	b.n	8001b7a <read_xbee+0x43e>
 8001b4e:	2454      	movs	r4, #84	; 0x54
 8001b50:	193b      	adds	r3, r7, r4
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	4a65      	ldr	r2, [pc, #404]	; (8001cec <read_xbee+0x5b0>)
 8001b56:	18d3      	adds	r3, r2, r3
 8001b58:	7cdb      	ldrb	r3, [r3, #19]
 8001b5a:	623b      	str	r3, [r7, #32]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b64:	6a38      	ldr	r0, [r7, #32]
 8001b66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b68:	1812      	adds	r2, r2, r0
 8001b6a:	414b      	adcs	r3, r1
 8001b6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b70:	193b      	adds	r3, r7, r4
 8001b72:	881a      	ldrh	r2, [r3, #0]
 8001b74:	193b      	adds	r3, r7, r4
 8001b76:	3201      	adds	r2, #1
 8001b78:	801a      	strh	r2, [r3, #0]
 8001b7a:	2354      	movs	r3, #84	; 0x54
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	881a      	ldrh	r2, [r3, #0]
 8001b80:	4b5a      	ldr	r3, [pc, #360]	; (8001cec <read_xbee+0x5b0>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	3b0c      	subs	r3, #12
 8001b86:	429a      	cmp	r2, r3
 8001b88:	dbe1      	blt.n	8001b4e <read_xbee+0x412>
 8001b8a:	e049      	b.n	8001c20 <read_xbee+0x4e4>
			  else if(received_frame.type==remote_command_response){
 8001b8c:	4b57      	ldr	r3, [pc, #348]	; (8001cec <read_xbee+0x5b0>)
 8001b8e:	789b      	ldrb	r3, [r3, #2]
 8001b90:	2b97      	cmp	r3, #151	; 0x97
 8001b92:	d145      	bne.n	8001c20 <read_xbee+0x4e4>
				  for(uint16_t i=0; i<received_frame.length-15; i++) sum += received_frame.content[i];
 8001b94:	2352      	movs	r3, #82	; 0x52
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	2200      	movs	r2, #0
 8001b9a:	801a      	strh	r2, [r3, #0]
 8001b9c:	e015      	b.n	8001bca <read_xbee+0x48e>
 8001b9e:	2452      	movs	r4, #82	; 0x52
 8001ba0:	193b      	adds	r3, r7, r4
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	4a51      	ldr	r2, [pc, #324]	; (8001cec <read_xbee+0x5b0>)
 8001ba6:	18d3      	adds	r3, r2, r3
 8001ba8:	7cdb      	ldrb	r3, [r3, #19]
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb4:	69b8      	ldr	r0, [r7, #24]
 8001bb6:	69f9      	ldr	r1, [r7, #28]
 8001bb8:	1812      	adds	r2, r2, r0
 8001bba:	414b      	adcs	r3, r1
 8001bbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8001bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bc0:	193b      	adds	r3, r7, r4
 8001bc2:	881a      	ldrh	r2, [r3, #0]
 8001bc4:	193b      	adds	r3, r7, r4
 8001bc6:	3201      	adds	r2, #1
 8001bc8:	801a      	strh	r2, [r3, #0]
 8001bca:	2352      	movs	r3, #82	; 0x52
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	881a      	ldrh	r2, [r3, #0]
 8001bd0:	4b46      	ldr	r3, [pc, #280]	; (8001cec <read_xbee+0x5b0>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	3b0f      	subs	r3, #15
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	dbe1      	blt.n	8001b9e <read_xbee+0x462>
				  for(uint8_t i=0; i<4; i++) sum += received_frame.command_status[i];
 8001bda:	2351      	movs	r3, #81	; 0x51
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	e018      	b.n	8001c16 <read_xbee+0x4da>
 8001be4:	2451      	movs	r4, #81	; 0x51
 8001be6:	193b      	adds	r3, r7, r4
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	4940      	ldr	r1, [pc, #256]	; (8001cec <read_xbee+0x5b0>)
 8001bec:	238a      	movs	r3, #138	; 0x8a
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	188a      	adds	r2, r1, r2
 8001bf2:	18d3      	adds	r3, r2, r3
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c00:	6938      	ldr	r0, [r7, #16]
 8001c02:	6979      	ldr	r1, [r7, #20]
 8001c04:	1812      	adds	r2, r2, r0
 8001c06:	414b      	adcs	r3, r1
 8001c08:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c0c:	193b      	adds	r3, r7, r4
 8001c0e:	781a      	ldrb	r2, [r3, #0]
 8001c10:	193b      	adds	r3, r7, r4
 8001c12:	3201      	adds	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
 8001c16:	2351      	movs	r3, #81	; 0x51
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d9e1      	bls.n	8001be4 <read_xbee+0x4a8>
			  }
			  sum += received_frame.type + received_frame.option + received_frame.id + received_frame.check_sum;
 8001c20:	4b32      	ldr	r3, [pc, #200]	; (8001cec <read_xbee+0x5b0>)
 8001c22:	789b      	ldrb	r3, [r3, #2]
 8001c24:	001a      	movs	r2, r3
 8001c26:	4b31      	ldr	r3, [pc, #196]	; (8001cec <read_xbee+0x5b0>)
 8001c28:	7c9b      	ldrb	r3, [r3, #18]
 8001c2a:	18d3      	adds	r3, r2, r3
 8001c2c:	4a2f      	ldr	r2, [pc, #188]	; (8001cec <read_xbee+0x5b0>)
 8001c2e:	78d2      	ldrb	r2, [r2, #3]
 8001c30:	189b      	adds	r3, r3, r2
 8001c32:	492e      	ldr	r1, [pc, #184]	; (8001cec <read_xbee+0x5b0>)
 8001c34:	228c      	movs	r2, #140	; 0x8c
 8001c36:	0052      	lsls	r2, r2, #1
 8001c38:	5c8a      	ldrb	r2, [r1, r2]
 8001c3a:	189b      	adds	r3, r3, r2
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	17db      	asrs	r3, r3, #31
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c46:	68b8      	ldr	r0, [r7, #8]
 8001c48:	68f9      	ldr	r1, [r7, #12]
 8001c4a:	1812      	adds	r2, r2, r0
 8001c4c:	414b      	adcs	r3, r1
 8001c4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c50:	65fb      	str	r3, [r7, #92]	; 0x5c
			  received_frame.check_sum_ok = (sum & 0xFF) == 0xFF;
 8001c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c54:	22ff      	movs	r2, #255	; 0xff
 8001c56:	4013      	ands	r3, r2
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	4013      	ands	r3, r2
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	2301      	movs	r3, #1
 8001c64:	6839      	ldr	r1, [r7, #0]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	0008      	movs	r0, r1
 8001c6a:	28ff      	cmp	r0, #255	; 0xff
 8001c6c:	d101      	bne.n	8001c72 <read_xbee+0x536>
 8001c6e:	2a00      	cmp	r2, #0
 8001c70:	d000      	beq.n	8001c74 <read_xbee+0x538>
 8001c72:	2300      	movs	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	0019      	movs	r1, r3
 8001c78:	4a1c      	ldr	r2, [pc, #112]	; (8001cec <read_xbee+0x5b0>)
 8001c7a:	231a      	movs	r3, #26
 8001c7c:	33ff      	adds	r3, #255	; 0xff
 8001c7e:	54d1      	strb	r1, [r2, r3]
			  xbee_receive_state = process_content;
 8001c80:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <read_xbee+0x5b4>)
 8001c82:	220a      	movs	r2, #10
 8001c84:	701a      	strb	r2, [r3, #0]
			  xbee_rx_read_index--;
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <read_xbee+0x5b8>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <read_xbee+0x5b8>)
 8001c90:	701a      	strb	r2, [r3, #0]
		  break;
 8001c92:	e020      	b.n	8001cd6 <read_xbee+0x59a>

		  case process_content:

			  switch(received_frame.content[0]){
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <read_xbee+0x5b0>)
 8001c96:	7cdb      	ldrb	r3, [r3, #19]
 8001c98:	2b45      	cmp	r3, #69	; 0x45
 8001c9a:	d103      	bne.n	8001ca4 <read_xbee+0x568>
			  	  case 'E':
			  		  master_state = lora_alert;
 8001c9c:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <read_xbee+0x5bc>)
 8001c9e:	2205      	movs	r2, #5
 8001ca0:	701a      	strb	r2, [r3, #0]
			  	  break;
 8001ca2:	46c0      	nop			; (mov r8, r8)
			  }
	  		  xbee_receive_state = idle;
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <read_xbee+0x5b4>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
			  memset(&received_frame, 0, sizeof(received_frame));
 8001caa:	2390      	movs	r3, #144	; 0x90
 8001cac:	005a      	lsls	r2, r3, #1
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <read_xbee+0x5b0>)
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f003 fd3b 	bl	800572e <memset>
			  memset(&xbee_rx_buffer, 0, sizeof(xbee_rx_buffer));
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	005a      	lsls	r2, r3, #1
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <read_xbee+0x5c0>)
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f003 fd34 	bl	800572e <memset>
			  xbee_rx_read_index = 0xFF;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <read_xbee+0x5b8>)
 8001cc8:	22ff      	movs	r2, #255	; 0xff
 8001cca:	701a      	strb	r2, [r3, #0]
			  xbee_rx_write_index = 0;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <read_xbee+0x5c4>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]

		  break;
 8001cd2:	e000      	b.n	8001cd6 <read_xbee+0x59a>
		  break;
 8001cd4:	46c0      	nop			; (mov r8, r8)
	  }

	  xbee_rx_read_index += 1;
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <read_xbee+0x5b8>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <read_xbee+0x5b8>)
 8001ce0:	701a      	strb	r2, [r3, #0]

  }
}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b019      	add	sp, #100	; 0x64
 8001ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	20000438 	.word	0x20000438
 8001cf0:	200005c6 	.word	0x200005c6
 8001cf4:	20000424 	.word	0x20000424
 8001cf8:	2000030c 	.word	0x2000030c
 8001cfc:	20000324 	.word	0x20000324
 8001d00:	20000425 	.word	0x20000425

08001d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d08:	b672      	cpsid	i
}
 8001d0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <Error_Handler+0x8>
	...

08001d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <HAL_MspInit+0x24>)
 8001d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_MspInit+0x24>)
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <HAL_MspInit+0x24>)
 8001d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <HAL_MspInit+0x24>)
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	0549      	lsls	r1, r1, #21
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000

08001d38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	240c      	movs	r4, #12
 8001d42:	193b      	adds	r3, r7, r4
 8001d44:	0018      	movs	r0, r3
 8001d46:	2314      	movs	r3, #20
 8001d48:	001a      	movs	r2, r3
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	f003 fcef 	bl	800572e <memset>
  if(hspi->Instance==SPI2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <HAL_SPI_MspInit+0x80>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d129      	bne.n	8001dae <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <HAL_SPI_MspInit+0x84>)
 8001d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <HAL_SPI_MspInit+0x84>)
 8001d60:	2180      	movs	r1, #128	; 0x80
 8001d62:	01c9      	lsls	r1, r1, #7
 8001d64:	430a      	orrs	r2, r1
 8001d66:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <HAL_SPI_MspInit+0x84>)
 8001d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <HAL_SPI_MspInit+0x84>)
 8001d6e:	2102      	movs	r1, #2
 8001d70:	430a      	orrs	r2, r1
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_SPI_MspInit+0x84>)
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	2202      	movs	r2, #2
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d80:	193b      	adds	r3, r7, r4
 8001d82:	22f0      	movs	r2, #240	; 0xf0
 8001d84:	0212      	lsls	r2, r2, #8
 8001d86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	0021      	movs	r1, r4
 8001d8a:	187b      	adds	r3, r7, r1
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da2:	187b      	adds	r3, r7, r1
 8001da4:	4a06      	ldr	r2, [pc, #24]	; (8001dc0 <HAL_SPI_MspInit+0x88>)
 8001da6:	0019      	movs	r1, r3
 8001da8:	0010      	movs	r0, r2
 8001daa:	f000 fb59 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b009      	add	sp, #36	; 0x24
 8001db4:	bd90      	pop	{r4, r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	40003800 	.word	0x40003800
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	50000400 	.word	0x50000400

08001dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	05db      	lsls	r3, r3, #23
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d10e      	bne.n	8001df6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_TIM_Base_MspInit+0x60>)
 8001dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_TIM_Base_MspInit+0x60>)
 8001dde:	2101      	movs	r1, #1
 8001de0:	430a      	orrs	r2, r1
 8001de2:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2100      	movs	r1, #0
 8001de8:	200f      	movs	r0, #15
 8001dea:	f000 fa7f 	bl	80022ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dee:	200f      	movs	r0, #15
 8001df0:	f000 fa91 	bl	8002316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001df4:	e012      	b.n	8001e1c <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM3)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <HAL_TIM_Base_MspInit+0x64>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d10d      	bne.n	8001e1c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_TIM_Base_MspInit+0x60>)
 8001e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <HAL_TIM_Base_MspInit+0x60>)
 8001e06:	2102      	movs	r1, #2
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2010      	movs	r0, #16
 8001e12:	f000 fa6b 	bl	80022ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e16:	2010      	movs	r0, #16
 8001e18:	f000 fa7d 	bl	8002316 <HAL_NVIC_EnableIRQ>
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b002      	add	sp, #8
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40000400 	.word	0x40000400

08001e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b08b      	sub	sp, #44	; 0x2c
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	2414      	movs	r4, #20
 8001e36:	193b      	adds	r3, r7, r4
 8001e38:	0018      	movs	r0, r3
 8001e3a:	2314      	movs	r3, #20
 8001e3c:	001a      	movs	r2, r3
 8001e3e:	2100      	movs	r1, #0
 8001e40:	f003 fc75 	bl	800572e <memset>
  if(huart->Instance==USART2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a33      	ldr	r2, [pc, #204]	; (8001f18 <HAL_UART_MspInit+0xec>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d12a      	bne.n	8001ea4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e4e:	4b33      	ldr	r3, [pc, #204]	; (8001f1c <HAL_UART_MspInit+0xf0>)
 8001e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e52:	4b32      	ldr	r3, [pc, #200]	; (8001f1c <HAL_UART_MspInit+0xf0>)
 8001e54:	2180      	movs	r1, #128	; 0x80
 8001e56:	0289      	lsls	r1, r1, #10
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5c:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <HAL_UART_MspInit+0xf0>)
 8001e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e60:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <HAL_UART_MspInit+0xf0>)
 8001e62:	2101      	movs	r1, #1
 8001e64:	430a      	orrs	r2, r1
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e68:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <HAL_UART_MspInit+0xf0>)
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e74:	0021      	movs	r1, r4
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	220c      	movs	r2, #12
 8001e7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	2202      	movs	r2, #2
 8001e80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	187b      	adds	r3, r7, r1
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001e8e:	187b      	adds	r3, r7, r1
 8001e90:	2204      	movs	r2, #4
 8001e92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	187a      	adds	r2, r7, r1
 8001e96:	23a0      	movs	r3, #160	; 0xa0
 8001e98:	05db      	lsls	r3, r3, #23
 8001e9a:	0011      	movs	r1, r2
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f000 fadf 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8001ea2:	e035      	b.n	8001f10 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART5)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1d      	ldr	r2, [pc, #116]	; (8001f20 <HAL_UART_MspInit+0xf4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d130      	bne.n	8001f10 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART5_CLK_ENABLE();
 8001eae:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_UART_MspInit+0xf0>)
 8001eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_UART_MspInit+0xf0>)
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	0349      	lsls	r1, r1, #13
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebc:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_UART_MspInit+0xf0>)
 8001ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec0:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <HAL_UART_MspInit+0xf0>)
 8001ec2:	2102      	movs	r1, #2
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_UART_MspInit+0xf0>)
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	2202      	movs	r2, #2
 8001ece:	4013      	ands	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001ed4:	2114      	movs	r1, #20
 8001ed6:	187b      	adds	r3, r7, r1
 8001ed8:	2218      	movs	r2, #24
 8001eda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	187b      	adds	r3, r7, r1
 8001ede:	2202      	movs	r2, #2
 8001ee0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	187b      	adds	r3, r7, r1
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	2203      	movs	r2, #3
 8001eec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8001eee:	187b      	adds	r3, r7, r1
 8001ef0:	2206      	movs	r2, #6
 8001ef2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <HAL_UART_MspInit+0xf8>)
 8001ef8:	0019      	movs	r1, r3
 8001efa:	0010      	movs	r0, r2
 8001efc:	f000 fab0 	bl	8002460 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2100      	movs	r1, #0
 8001f04:	200e      	movs	r0, #14
 8001f06:	f000 f9f1 	bl	80022ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8001f0a:	200e      	movs	r0, #14
 8001f0c:	f000 fa03 	bl	8002316 <HAL_NVIC_EnableIRQ>
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b00b      	add	sp, #44	; 0x2c
 8001f16:	bd90      	pop	{r4, r7, pc}
 8001f18:	40004400 	.word	0x40004400
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40005000 	.word	0x40005000
 8001f24:	50000400 	.word	0x50000400

08001f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <NMI_Handler+0x4>

08001f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <HardFault_Handler+0x4>

08001f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f38:	46c0      	nop			; (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f4c:	f000 f8e2 	bl	8002114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <USART4_5_IRQHandler+0x14>)
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f002 f97a 	bl	8004258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	20000608 	.word	0x20000608

08001f70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <TIM2_IRQHandler+0x14>)
 8001f76:	0018      	movs	r0, r3
 8001f78:	f001 fcd8 	bl	800392c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f7c:	46c0      	nop			; (mov r8, r8)
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	2000068c 	.word	0x2000068c

08001f88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <TIM3_IRQHandler+0x14>)
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f001 fccc 	bl	800392c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	200005c8 	.word	0x200005c8

08001fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <_sbrk+0x5c>)
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <_sbrk+0x60>)
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <_sbrk+0x64>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <_sbrk+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	18d3      	adds	r3, r2, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd0:	f003 fb7a 	bl	80056c8 <__errno>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	425b      	negs	r3, r3
 8001fde:	e009      	b.n	8001ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	18d2      	adds	r2, r2, r3
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <_sbrk+0x64>)
 8001ff0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
}
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b006      	add	sp, #24
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20005000 	.word	0x20005000
 8002000:	00000400 	.word	0x00000400
 8002004:	2000055c 	.word	0x2000055c
 8002008:	20000768 	.word	0x20000768

0800200c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002010:	46c0      	nop			; (mov r8, r8)
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002018:	480d      	ldr	r0, [pc, #52]	; (8002050 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800201a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800201c:	480d      	ldr	r0, [pc, #52]	; (8002054 <LoopForever+0x6>)
  ldr r1, =_edata
 800201e:	490e      	ldr	r1, [pc, #56]	; (8002058 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002020:	4a0e      	ldr	r2, [pc, #56]	; (800205c <LoopForever+0xe>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002024:	e002      	b.n	800202c <LoopCopyDataInit>

08002026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202a:	3304      	adds	r3, #4

0800202c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800202c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002030:	d3f9      	bcc.n	8002026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002034:	4c0b      	ldr	r4, [pc, #44]	; (8002064 <LoopForever+0x16>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002038:	e001      	b.n	800203e <LoopFillZerobss>

0800203a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800203c:	3204      	adds	r2, #4

0800203e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002040:	d3fb      	bcc.n	800203a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002042:	f7ff ffe3 	bl	800200c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002046:	f003 fb45 	bl	80056d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800204a:	f7fe fb23 	bl	8000694 <main>

0800204e <LoopForever>:

LoopForever:
    b LoopForever
 800204e:	e7fe      	b.n	800204e <LoopForever>
   ldr   r0, =_estack
 8002050:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002058:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 800205c:	080060cc 	.word	0x080060cc
  ldr r2, =_sbss
 8002060:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8002064:	20000764 	.word	0x20000764

08002068 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002068:	e7fe      	b.n	8002068 <ADC1_COMP_IRQHandler>
	...

0800206c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002072:	1dfb      	adds	r3, r7, #7
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_Init+0x3c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_Init+0x3c>)
 800207e:	2140      	movs	r1, #64	; 0x40
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002084:	2003      	movs	r0, #3
 8002086:	f000 f811 	bl	80020ac <HAL_InitTick>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d003      	beq.n	8002096 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800208e:	1dfb      	adds	r3, r7, #7
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	e001      	b.n	800209a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002096:	f7ff fe3b 	bl	8001d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800209a:	1dfb      	adds	r3, r7, #7
 800209c:	781b      	ldrb	r3, [r3, #0]
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b002      	add	sp, #8
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	40022000 	.word	0x40022000

080020ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <HAL_InitTick+0x5c>)
 80020b6:	681c      	ldr	r4, [r3, #0]
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_InitTick+0x60>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	0019      	movs	r1, r3
 80020be:	23fa      	movs	r3, #250	; 0xfa
 80020c0:	0098      	lsls	r0, r3, #2
 80020c2:	f7fe f833 	bl	800012c <__udivsi3>
 80020c6:	0003      	movs	r3, r0
 80020c8:	0019      	movs	r1, r3
 80020ca:	0020      	movs	r0, r4
 80020cc:	f7fe f82e 	bl	800012c <__udivsi3>
 80020d0:	0003      	movs	r3, r0
 80020d2:	0018      	movs	r0, r3
 80020d4:	f000 f92f 	bl	8002336 <HAL_SYSTICK_Config>
 80020d8:	1e03      	subs	r3, r0, #0
 80020da:	d001      	beq.n	80020e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e00f      	b.n	8002100 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d80b      	bhi.n	80020fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	2301      	movs	r3, #1
 80020ea:	425b      	negs	r3, r3
 80020ec:	2200      	movs	r2, #0
 80020ee:	0018      	movs	r0, r3
 80020f0:	f000 f8fc 	bl	80022ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_InitTick+0x64>)
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e000      	b.n	8002100 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b003      	add	sp, #12
 8002106:	bd90      	pop	{r4, r7, pc}
 8002108:	2000027c 	.word	0x2000027c
 800210c:	20000284 	.word	0x20000284
 8002110:	20000280 	.word	0x20000280

08002114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_IncTick+0x1c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	001a      	movs	r2, r3
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_IncTick+0x20>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	18d2      	adds	r2, r2, r3
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_IncTick+0x20>)
 8002126:	601a      	str	r2, [r3, #0]
}
 8002128:	46c0      	nop			; (mov r8, r8)
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	20000284 	.word	0x20000284
 8002134:	20000750 	.word	0x20000750

08002138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  return uwTick;
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <HAL_GetTick+0x10>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	20000750 	.word	0x20000750

0800214c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002154:	f7ff fff0 	bl	8002138 <HAL_GetTick>
 8002158:	0003      	movs	r3, r0
 800215a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3301      	adds	r3, #1
 8002164:	d005      	beq.n	8002172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_Delay+0x44>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	001a      	movs	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	189b      	adds	r3, r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	f7ff ffe0 	bl	8002138 <HAL_GetTick>
 8002178:	0002      	movs	r2, r0
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	429a      	cmp	r2, r3
 8002182:	d8f7      	bhi.n	8002174 <HAL_Delay+0x28>
  {
  }
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	b004      	add	sp, #16
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	20000284 	.word	0x20000284

08002194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	0002      	movs	r2, r0
 800219c:	1dfb      	adds	r3, r7, #7
 800219e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	1dfb      	adds	r3, r7, #7
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b7f      	cmp	r3, #127	; 0x7f
 80021a6:	d809      	bhi.n	80021bc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a8:	1dfb      	adds	r3, r7, #7
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	001a      	movs	r2, r3
 80021ae:	231f      	movs	r3, #31
 80021b0:	401a      	ands	r2, r3
 80021b2:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <__NVIC_EnableIRQ+0x30>)
 80021b4:	2101      	movs	r1, #1
 80021b6:	4091      	lsls	r1, r2
 80021b8:	000a      	movs	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]
  }
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b002      	add	sp, #8
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	e000e100 	.word	0xe000e100

080021c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	0002      	movs	r2, r0
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	1dfb      	adds	r3, r7, #7
 80021d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	1dfb      	adds	r3, r7, #7
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b7f      	cmp	r3, #127	; 0x7f
 80021dc:	d828      	bhi.n	8002230 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021de:	4a2f      	ldr	r2, [pc, #188]	; (800229c <__NVIC_SetPriority+0xd4>)
 80021e0:	1dfb      	adds	r3, r7, #7
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b25b      	sxtb	r3, r3
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	33c0      	adds	r3, #192	; 0xc0
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	589b      	ldr	r3, [r3, r2]
 80021ee:	1dfa      	adds	r2, r7, #7
 80021f0:	7812      	ldrb	r2, [r2, #0]
 80021f2:	0011      	movs	r1, r2
 80021f4:	2203      	movs	r2, #3
 80021f6:	400a      	ands	r2, r1
 80021f8:	00d2      	lsls	r2, r2, #3
 80021fa:	21ff      	movs	r1, #255	; 0xff
 80021fc:	4091      	lsls	r1, r2
 80021fe:	000a      	movs	r2, r1
 8002200:	43d2      	mvns	r2, r2
 8002202:	401a      	ands	r2, r3
 8002204:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	019b      	lsls	r3, r3, #6
 800220a:	22ff      	movs	r2, #255	; 0xff
 800220c:	401a      	ands	r2, r3
 800220e:	1dfb      	adds	r3, r7, #7
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	0018      	movs	r0, r3
 8002214:	2303      	movs	r3, #3
 8002216:	4003      	ands	r3, r0
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800221c:	481f      	ldr	r0, [pc, #124]	; (800229c <__NVIC_SetPriority+0xd4>)
 800221e:	1dfb      	adds	r3, r7, #7
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	b25b      	sxtb	r3, r3
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	430a      	orrs	r2, r1
 8002228:	33c0      	adds	r3, #192	; 0xc0
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800222e:	e031      	b.n	8002294 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002230:	4a1b      	ldr	r2, [pc, #108]	; (80022a0 <__NVIC_SetPriority+0xd8>)
 8002232:	1dfb      	adds	r3, r7, #7
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	0019      	movs	r1, r3
 8002238:	230f      	movs	r3, #15
 800223a:	400b      	ands	r3, r1
 800223c:	3b08      	subs	r3, #8
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	3306      	adds	r3, #6
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	18d3      	adds	r3, r2, r3
 8002246:	3304      	adds	r3, #4
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	1dfa      	adds	r2, r7, #7
 800224c:	7812      	ldrb	r2, [r2, #0]
 800224e:	0011      	movs	r1, r2
 8002250:	2203      	movs	r2, #3
 8002252:	400a      	ands	r2, r1
 8002254:	00d2      	lsls	r2, r2, #3
 8002256:	21ff      	movs	r1, #255	; 0xff
 8002258:	4091      	lsls	r1, r2
 800225a:	000a      	movs	r2, r1
 800225c:	43d2      	mvns	r2, r2
 800225e:	401a      	ands	r2, r3
 8002260:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	019b      	lsls	r3, r3, #6
 8002266:	22ff      	movs	r2, #255	; 0xff
 8002268:	401a      	ands	r2, r3
 800226a:	1dfb      	adds	r3, r7, #7
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	0018      	movs	r0, r3
 8002270:	2303      	movs	r3, #3
 8002272:	4003      	ands	r3, r0
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002278:	4809      	ldr	r0, [pc, #36]	; (80022a0 <__NVIC_SetPriority+0xd8>)
 800227a:	1dfb      	adds	r3, r7, #7
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	001c      	movs	r4, r3
 8002280:	230f      	movs	r3, #15
 8002282:	4023      	ands	r3, r4
 8002284:	3b08      	subs	r3, #8
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	430a      	orrs	r2, r1
 800228a:	3306      	adds	r3, #6
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	18c3      	adds	r3, r0, r3
 8002290:	3304      	adds	r3, #4
 8002292:	601a      	str	r2, [r3, #0]
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b003      	add	sp, #12
 800229a:	bd90      	pop	{r4, r7, pc}
 800229c:	e000e100 	.word	0xe000e100
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	1e5a      	subs	r2, r3, #1
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	045b      	lsls	r3, r3, #17
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d301      	bcc.n	80022bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b8:	2301      	movs	r3, #1
 80022ba:	e010      	b.n	80022de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <SysTick_Config+0x44>)
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	3a01      	subs	r2, #1
 80022c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c4:	2301      	movs	r3, #1
 80022c6:	425b      	negs	r3, r3
 80022c8:	2103      	movs	r1, #3
 80022ca:	0018      	movs	r0, r3
 80022cc:	f7ff ff7c 	bl	80021c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <SysTick_Config+0x44>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <SysTick_Config+0x44>)
 80022d8:	2207      	movs	r2, #7
 80022da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022dc:	2300      	movs	r3, #0
}
 80022de:	0018      	movs	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b002      	add	sp, #8
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	e000e010 	.word	0xe000e010

080022ec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	210f      	movs	r1, #15
 80022f8:	187b      	adds	r3, r7, r1
 80022fa:	1c02      	adds	r2, r0, #0
 80022fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	187b      	adds	r3, r7, r1
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b25b      	sxtb	r3, r3
 8002306:	0011      	movs	r1, r2
 8002308:	0018      	movs	r0, r3
 800230a:	f7ff ff5d 	bl	80021c8 <__NVIC_SetPriority>
}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	46bd      	mov	sp, r7
 8002312:	b004      	add	sp, #16
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	0002      	movs	r2, r0
 800231e:	1dfb      	adds	r3, r7, #7
 8002320:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002322:	1dfb      	adds	r3, r7, #7
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b25b      	sxtb	r3, r3
 8002328:	0018      	movs	r0, r3
 800232a:	f7ff ff33 	bl	8002194 <__NVIC_EnableIRQ>
}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	46bd      	mov	sp, r7
 8002332:	b002      	add	sp, #8
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	0018      	movs	r0, r3
 8002342:	f7ff ffaf 	bl	80022a4 <SysTick_Config>
 8002346:	0003      	movs	r3, r0
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	230f      	movs	r3, #15
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2225      	movs	r2, #37	; 0x25
 8002364:	5c9b      	ldrb	r3, [r3, r2]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d008      	beq.n	800237e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2204      	movs	r2, #4
 8002370:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2224      	movs	r2, #36	; 0x24
 8002376:	2100      	movs	r1, #0
 8002378:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e024      	b.n	80023c8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	210e      	movs	r1, #14
 800238a:	438a      	bics	r2, r1
 800238c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2101      	movs	r1, #1
 800239a:	438a      	bics	r2, r1
 800239c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	221c      	movs	r2, #28
 80023a4:	401a      	ands	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2101      	movs	r1, #1
 80023ac:	4091      	lsls	r1, r2
 80023ae:	000a      	movs	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2225      	movs	r2, #37	; 0x25
 80023b6:	2101      	movs	r1, #1
 80023b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2224      	movs	r2, #36	; 0x24
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]

    return status;
 80023c2:	230f      	movs	r3, #15
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b004      	add	sp, #16
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d8:	210f      	movs	r1, #15
 80023da:	187b      	adds	r3, r7, r1
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2225      	movs	r2, #37	; 0x25
 80023e4:	5c9b      	ldrb	r3, [r3, r2]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d006      	beq.n	80023fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2204      	movs	r2, #4
 80023f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80023f2:	187b      	adds	r3, r7, r1
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	e02a      	b.n	8002450 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	210e      	movs	r1, #14
 8002406:	438a      	bics	r2, r1
 8002408:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	438a      	bics	r2, r1
 8002418:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	221c      	movs	r2, #28
 8002420:	401a      	ands	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	2101      	movs	r1, #1
 8002428:	4091      	lsls	r1, r2
 800242a:	000a      	movs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2225      	movs	r2, #37	; 0x25
 8002432:	2101      	movs	r1, #1
 8002434:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2224      	movs	r2, #36	; 0x24
 800243a:	2100      	movs	r1, #0
 800243c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	2b00      	cmp	r3, #0
 8002444:	d004      	beq.n	8002450 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	0010      	movs	r0, r2
 800244e:	4798      	blx	r3
    }
  }
  return status;
 8002450:	230f      	movs	r3, #15
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	781b      	ldrb	r3, [r3, #0]
}
 8002456:	0018      	movs	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	b004      	add	sp, #16
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002476:	e155      	b.n	8002724 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2101      	movs	r1, #1
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4091      	lsls	r1, r2
 8002482:	000a      	movs	r2, r1
 8002484:	4013      	ands	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d100      	bne.n	8002490 <HAL_GPIO_Init+0x30>
 800248e:	e146      	b.n	800271e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2203      	movs	r2, #3
 8002496:	4013      	ands	r3, r2
 8002498:	2b01      	cmp	r3, #1
 800249a:	d005      	beq.n	80024a8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2203      	movs	r2, #3
 80024a2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d130      	bne.n	800250a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	409a      	lsls	r2, r3
 80024b6:	0013      	movs	r3, r2
 80024b8:	43da      	mvns	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	409a      	lsls	r2, r3
 80024ca:	0013      	movs	r3, r2
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024de:	2201      	movs	r2, #1
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	409a      	lsls	r2, r3
 80024e4:	0013      	movs	r3, r2
 80024e6:	43da      	mvns	r2, r3
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	2201      	movs	r2, #1
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
 80024fc:	0013      	movs	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2203      	movs	r2, #3
 8002510:	4013      	ands	r3, r2
 8002512:	2b03      	cmp	r3, #3
 8002514:	d017      	beq.n	8002546 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	409a      	lsls	r2, r3
 8002524:	0013      	movs	r3, r2
 8002526:	43da      	mvns	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	409a      	lsls	r2, r3
 8002538:	0013      	movs	r3, r2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2203      	movs	r2, #3
 800254c:	4013      	ands	r3, r2
 800254e:	2b02      	cmp	r3, #2
 8002550:	d123      	bne.n	800259a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	0092      	lsls	r2, r2, #2
 800255c:	58d3      	ldr	r3, [r2, r3]
 800255e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2207      	movs	r2, #7
 8002564:	4013      	ands	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	220f      	movs	r2, #15
 800256a:	409a      	lsls	r2, r3
 800256c:	0013      	movs	r3, r2
 800256e:	43da      	mvns	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2107      	movs	r1, #7
 800257e:	400b      	ands	r3, r1
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	409a      	lsls	r2, r3
 8002584:	0013      	movs	r3, r2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	08da      	lsrs	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3208      	adds	r2, #8
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	6939      	ldr	r1, [r7, #16]
 8002598:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	409a      	lsls	r2, r3
 80025a8:	0013      	movs	r3, r2
 80025aa:	43da      	mvns	r2, r3
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2203      	movs	r2, #3
 80025b8:	401a      	ands	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	409a      	lsls	r2, r3
 80025c0:	0013      	movs	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	23c0      	movs	r3, #192	; 0xc0
 80025d4:	029b      	lsls	r3, r3, #10
 80025d6:	4013      	ands	r3, r2
 80025d8:	d100      	bne.n	80025dc <HAL_GPIO_Init+0x17c>
 80025da:	e0a0      	b.n	800271e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025dc:	4b57      	ldr	r3, [pc, #348]	; (800273c <HAL_GPIO_Init+0x2dc>)
 80025de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e0:	4b56      	ldr	r3, [pc, #344]	; (800273c <HAL_GPIO_Init+0x2dc>)
 80025e2:	2101      	movs	r1, #1
 80025e4:	430a      	orrs	r2, r1
 80025e6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80025e8:	4a55      	ldr	r2, [pc, #340]	; (8002740 <HAL_GPIO_Init+0x2e0>)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	3302      	adds	r3, #2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	589b      	ldr	r3, [r3, r2]
 80025f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2203      	movs	r2, #3
 80025fa:	4013      	ands	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	220f      	movs	r2, #15
 8002600:	409a      	lsls	r2, r3
 8002602:	0013      	movs	r3, r2
 8002604:	43da      	mvns	r2, r3
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	23a0      	movs	r3, #160	; 0xa0
 8002610:	05db      	lsls	r3, r3, #23
 8002612:	429a      	cmp	r2, r3
 8002614:	d01f      	beq.n	8002656 <HAL_GPIO_Init+0x1f6>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4a      	ldr	r2, [pc, #296]	; (8002744 <HAL_GPIO_Init+0x2e4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d019      	beq.n	8002652 <HAL_GPIO_Init+0x1f2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a49      	ldr	r2, [pc, #292]	; (8002748 <HAL_GPIO_Init+0x2e8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d013      	beq.n	800264e <HAL_GPIO_Init+0x1ee>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a48      	ldr	r2, [pc, #288]	; (800274c <HAL_GPIO_Init+0x2ec>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00d      	beq.n	800264a <HAL_GPIO_Init+0x1ea>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a47      	ldr	r2, [pc, #284]	; (8002750 <HAL_GPIO_Init+0x2f0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <HAL_GPIO_Init+0x1e6>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a46      	ldr	r2, [pc, #280]	; (8002754 <HAL_GPIO_Init+0x2f4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d101      	bne.n	8002642 <HAL_GPIO_Init+0x1e2>
 800263e:	2305      	movs	r3, #5
 8002640:	e00a      	b.n	8002658 <HAL_GPIO_Init+0x1f8>
 8002642:	2306      	movs	r3, #6
 8002644:	e008      	b.n	8002658 <HAL_GPIO_Init+0x1f8>
 8002646:	2304      	movs	r3, #4
 8002648:	e006      	b.n	8002658 <HAL_GPIO_Init+0x1f8>
 800264a:	2303      	movs	r3, #3
 800264c:	e004      	b.n	8002658 <HAL_GPIO_Init+0x1f8>
 800264e:	2302      	movs	r3, #2
 8002650:	e002      	b.n	8002658 <HAL_GPIO_Init+0x1f8>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_GPIO_Init+0x1f8>
 8002656:	2300      	movs	r3, #0
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	2103      	movs	r1, #3
 800265c:	400a      	ands	r2, r1
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	4093      	lsls	r3, r2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002668:	4935      	ldr	r1, [pc, #212]	; (8002740 <HAL_GPIO_Init+0x2e0>)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	3302      	adds	r3, #2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002676:	4b38      	ldr	r3, [pc, #224]	; (8002758 <HAL_GPIO_Init+0x2f8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	43da      	mvns	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	025b      	lsls	r3, r3, #9
 800268e:	4013      	ands	r3, r2
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800269a:	4b2f      	ldr	r3, [pc, #188]	; (8002758 <HAL_GPIO_Init+0x2f8>)
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_GPIO_Init+0x2f8>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	43da      	mvns	r2, r3
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4013      	ands	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	029b      	lsls	r3, r3, #10
 80026b8:	4013      	ands	r3, r2
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026c4:	4b24      	ldr	r3, [pc, #144]	; (8002758 <HAL_GPIO_Init+0x2f8>)
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <HAL_GPIO_Init+0x2f8>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	43da      	mvns	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	035b      	lsls	r3, r3, #13
 80026e2:	4013      	ands	r3, r2
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <HAL_GPIO_Init+0x2f8>)
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_GPIO_Init+0x2f8>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43da      	mvns	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	039b      	lsls	r3, r3, #14
 800270c:	4013      	ands	r3, r2
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_GPIO_Init+0x2f8>)
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3301      	adds	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	40da      	lsrs	r2, r3
 800272c:	1e13      	subs	r3, r2, #0
 800272e:	d000      	beq.n	8002732 <HAL_GPIO_Init+0x2d2>
 8002730:	e6a2      	b.n	8002478 <HAL_GPIO_Init+0x18>
  }
}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b006      	add	sp, #24
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	40010000 	.word	0x40010000
 8002744:	50000400 	.word	0x50000400
 8002748:	50000800 	.word	0x50000800
 800274c:	50000c00 	.word	0x50000c00
 8002750:	50001000 	.word	0x50001000
 8002754:	50001c00 	.word	0x50001c00
 8002758:	40010400 	.word	0x40010400

0800275c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	000a      	movs	r2, r1
 8002766:	1cbb      	adds	r3, r7, #2
 8002768:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	1cba      	adds	r2, r7, #2
 8002770:	8812      	ldrh	r2, [r2, #0]
 8002772:	4013      	ands	r3, r2
 8002774:	d004      	beq.n	8002780 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002776:	230f      	movs	r3, #15
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	2201      	movs	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	e003      	b.n	8002788 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002780:	230f      	movs	r3, #15
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002788:	230f      	movs	r3, #15
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	781b      	ldrb	r3, [r3, #0]
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b004      	add	sp, #16
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	0008      	movs	r0, r1
 80027a0:	0011      	movs	r1, r2
 80027a2:	1cbb      	adds	r3, r7, #2
 80027a4:	1c02      	adds	r2, r0, #0
 80027a6:	801a      	strh	r2, [r3, #0]
 80027a8:	1c7b      	adds	r3, r7, #1
 80027aa:	1c0a      	adds	r2, r1, #0
 80027ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027ae:	1c7b      	adds	r3, r7, #1
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b6:	1cbb      	adds	r3, r7, #2
 80027b8:	881a      	ldrh	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80027be:	e003      	b.n	80027c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80027c0:	1cbb      	adds	r3, r7, #2
 80027c2:	881a      	ldrh	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b002      	add	sp, #8
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	000a      	movs	r2, r1
 80027da:	1cbb      	adds	r3, r7, #2
 80027dc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027e4:	1cbb      	adds	r3, r7, #2
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4013      	ands	r3, r2
 80027ec:	041a      	lsls	r2, r3, #16
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	1cb9      	adds	r1, r7, #2
 80027f4:	8809      	ldrh	r1, [r1, #0]
 80027f6:	400b      	ands	r3, r1
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	619a      	str	r2, [r3, #24]
}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	b004      	add	sp, #16
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002808:	b5b0      	push	{r4, r5, r7, lr}
 800280a:	b08a      	sub	sp, #40	; 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	f000 fbbf 	bl	8002f9a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281c:	4bc9      	ldr	r3, [pc, #804]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	220c      	movs	r2, #12
 8002822:	4013      	ands	r3, r2
 8002824:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002826:	4bc7      	ldr	r3, [pc, #796]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	025b      	lsls	r3, r3, #9
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2201      	movs	r2, #1
 8002838:	4013      	ands	r3, r2
 800283a:	d100      	bne.n	800283e <HAL_RCC_OscConfig+0x36>
 800283c:	e07e      	b.n	800293c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d007      	beq.n	8002854 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2b0c      	cmp	r3, #12
 8002848:	d112      	bne.n	8002870 <HAL_RCC_OscConfig+0x68>
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	025b      	lsls	r3, r3, #9
 8002850:	429a      	cmp	r2, r3
 8002852:	d10d      	bne.n	8002870 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002854:	4bbb      	ldr	r3, [pc, #748]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	029b      	lsls	r3, r3, #10
 800285c:	4013      	ands	r3, r2
 800285e:	d100      	bne.n	8002862 <HAL_RCC_OscConfig+0x5a>
 8002860:	e06b      	b.n	800293a <HAL_RCC_OscConfig+0x132>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d167      	bne.n	800293a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	f000 fb95 	bl	8002f9a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	025b      	lsls	r3, r3, #9
 8002878:	429a      	cmp	r2, r3
 800287a:	d107      	bne.n	800288c <HAL_RCC_OscConfig+0x84>
 800287c:	4bb1      	ldr	r3, [pc, #708]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4bb0      	ldr	r3, [pc, #704]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002882:	2180      	movs	r1, #128	; 0x80
 8002884:	0249      	lsls	r1, r1, #9
 8002886:	430a      	orrs	r2, r1
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	e027      	b.n	80028dc <HAL_RCC_OscConfig+0xd4>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	23a0      	movs	r3, #160	; 0xa0
 8002892:	02db      	lsls	r3, r3, #11
 8002894:	429a      	cmp	r2, r3
 8002896:	d10e      	bne.n	80028b6 <HAL_RCC_OscConfig+0xae>
 8002898:	4baa      	ldr	r3, [pc, #680]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4ba9      	ldr	r3, [pc, #676]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 800289e:	2180      	movs	r1, #128	; 0x80
 80028a0:	02c9      	lsls	r1, r1, #11
 80028a2:	430a      	orrs	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	4ba7      	ldr	r3, [pc, #668]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4ba6      	ldr	r3, [pc, #664]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 80028ac:	2180      	movs	r1, #128	; 0x80
 80028ae:	0249      	lsls	r1, r1, #9
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	e012      	b.n	80028dc <HAL_RCC_OscConfig+0xd4>
 80028b6:	4ba3      	ldr	r3, [pc, #652]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4ba2      	ldr	r3, [pc, #648]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 80028bc:	49a2      	ldr	r1, [pc, #648]	; (8002b48 <HAL_RCC_OscConfig+0x340>)
 80028be:	400a      	ands	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	4ba0      	ldr	r3, [pc, #640]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	025b      	lsls	r3, r3, #9
 80028ca:	4013      	ands	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4b9c      	ldr	r3, [pc, #624]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b9b      	ldr	r3, [pc, #620]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 80028d6:	499d      	ldr	r1, [pc, #628]	; (8002b4c <HAL_RCC_OscConfig+0x344>)
 80028d8:	400a      	ands	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d015      	beq.n	8002910 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7ff fc28 	bl	8002138 <HAL_GetTick>
 80028e8:	0003      	movs	r3, r0
 80028ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ec:	e009      	b.n	8002902 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ee:	f7ff fc23 	bl	8002138 <HAL_GetTick>
 80028f2:	0002      	movs	r2, r0
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b64      	cmp	r3, #100	; 0x64
 80028fa:	d902      	bls.n	8002902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	f000 fb4c 	bl	8002f9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002902:	4b90      	ldr	r3, [pc, #576]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	029b      	lsls	r3, r3, #10
 800290a:	4013      	ands	r3, r2
 800290c:	d0ef      	beq.n	80028ee <HAL_RCC_OscConfig+0xe6>
 800290e:	e015      	b.n	800293c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7ff fc12 	bl	8002138 <HAL_GetTick>
 8002914:	0003      	movs	r3, r0
 8002916:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800291a:	f7ff fc0d 	bl	8002138 <HAL_GetTick>
 800291e:	0002      	movs	r2, r0
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b64      	cmp	r3, #100	; 0x64
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e336      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800292c:	4b85      	ldr	r3, [pc, #532]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	029b      	lsls	r3, r3, #10
 8002934:	4013      	ands	r3, r2
 8002936:	d1f0      	bne.n	800291a <HAL_RCC_OscConfig+0x112>
 8002938:	e000      	b.n	800293c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2202      	movs	r2, #2
 8002942:	4013      	ands	r3, r2
 8002944:	d100      	bne.n	8002948 <HAL_RCC_OscConfig+0x140>
 8002946:	e099      	b.n	8002a7c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	2220      	movs	r2, #32
 8002952:	4013      	ands	r3, r2
 8002954:	d009      	beq.n	800296a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002956:	4b7b      	ldr	r3, [pc, #492]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	4b7a      	ldr	r3, [pc, #488]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 800295c:	2120      	movs	r1, #32
 800295e:	430a      	orrs	r2, r1
 8002960:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	2220      	movs	r2, #32
 8002966:	4393      	bics	r3, r2
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	2b04      	cmp	r3, #4
 800296e:	d005      	beq.n	800297c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2b0c      	cmp	r3, #12
 8002974:	d13e      	bne.n	80029f4 <HAL_RCC_OscConfig+0x1ec>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d13b      	bne.n	80029f4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800297c:	4b71      	ldr	r3, [pc, #452]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2204      	movs	r2, #4
 8002982:	4013      	ands	r3, r2
 8002984:	d004      	beq.n	8002990 <HAL_RCC_OscConfig+0x188>
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e304      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002990:	4b6c      	ldr	r3, [pc, #432]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a6e      	ldr	r2, [pc, #440]	; (8002b50 <HAL_RCC_OscConfig+0x348>)
 8002996:	4013      	ands	r3, r2
 8002998:	0019      	movs	r1, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	021a      	lsls	r2, r3, #8
 80029a0:	4b68      	ldr	r3, [pc, #416]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80029a6:	4b67      	ldr	r3, [pc, #412]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2209      	movs	r2, #9
 80029ac:	4393      	bics	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	4b64      	ldr	r3, [pc, #400]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 80029b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029b8:	f000 fc42 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80029bc:	0001      	movs	r1, r0
 80029be:	4b61      	ldr	r3, [pc, #388]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	091b      	lsrs	r3, r3, #4
 80029c4:	220f      	movs	r2, #15
 80029c6:	4013      	ands	r3, r2
 80029c8:	4a62      	ldr	r2, [pc, #392]	; (8002b54 <HAL_RCC_OscConfig+0x34c>)
 80029ca:	5cd3      	ldrb	r3, [r2, r3]
 80029cc:	000a      	movs	r2, r1
 80029ce:	40da      	lsrs	r2, r3
 80029d0:	4b61      	ldr	r3, [pc, #388]	; (8002b58 <HAL_RCC_OscConfig+0x350>)
 80029d2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80029d4:	4b61      	ldr	r3, [pc, #388]	; (8002b5c <HAL_RCC_OscConfig+0x354>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2513      	movs	r5, #19
 80029da:	197c      	adds	r4, r7, r5
 80029dc:	0018      	movs	r0, r3
 80029de:	f7ff fb65 	bl	80020ac <HAL_InitTick>
 80029e2:	0003      	movs	r3, r0
 80029e4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80029e6:	197b      	adds	r3, r7, r5
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d046      	beq.n	8002a7c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80029ee:	197b      	adds	r3, r7, r5
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	e2d2      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d027      	beq.n	8002a4a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80029fa:	4b52      	ldr	r3, [pc, #328]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2209      	movs	r2, #9
 8002a00:	4393      	bics	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	4b4f      	ldr	r3, [pc, #316]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7ff fb94 	bl	8002138 <HAL_GetTick>
 8002a10:	0003      	movs	r3, r0
 8002a12:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a16:	f7ff fb8f 	bl	8002138 <HAL_GetTick>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e2b8      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a28:	4b46      	ldr	r3, [pc, #280]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d0f1      	beq.n	8002a16 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a32:	4b44      	ldr	r3, [pc, #272]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4a46      	ldr	r2, [pc, #280]	; (8002b50 <HAL_RCC_OscConfig+0x348>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	021a      	lsls	r2, r3, #8
 8002a42:	4b40      	ldr	r3, [pc, #256]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002a44:	430a      	orrs	r2, r1
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	e018      	b.n	8002a7c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4a:	4b3e      	ldr	r3, [pc, #248]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4b3d      	ldr	r3, [pc, #244]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002a50:	2101      	movs	r1, #1
 8002a52:	438a      	bics	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7ff fb6f 	bl	8002138 <HAL_GetTick>
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a60:	f7ff fb6a 	bl	8002138 <HAL_GetTick>
 8002a64:	0002      	movs	r2, r0
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e293      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a72:	4b34      	ldr	r3, [pc, #208]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2204      	movs	r2, #4
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d1f1      	bne.n	8002a60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2210      	movs	r2, #16
 8002a82:	4013      	ands	r3, r2
 8002a84:	d100      	bne.n	8002a88 <HAL_RCC_OscConfig+0x280>
 8002a86:	e0a2      	b.n	8002bce <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d140      	bne.n	8002b10 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a8e:	4b2d      	ldr	r3, [pc, #180]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4013      	ands	r3, r2
 8002a98:	d005      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x29e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e279      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa6:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4a2d      	ldr	r2, [pc, #180]	; (8002b60 <HAL_RCC_OscConfig+0x358>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	0019      	movs	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab4:	4b23      	ldr	r3, [pc, #140]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	0a19      	lsrs	r1, r3, #8
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	061a      	lsls	r2, r3, #24
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002aca:	430a      	orrs	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	0b5b      	lsrs	r3, r3, #13
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	2280      	movs	r2, #128	; 0x80
 8002ad8:	0212      	lsls	r2, r2, #8
 8002ada:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	210f      	movs	r1, #15
 8002ae4:	400b      	ands	r3, r1
 8002ae6:	491b      	ldr	r1, [pc, #108]	; (8002b54 <HAL_RCC_OscConfig+0x34c>)
 8002ae8:	5ccb      	ldrb	r3, [r1, r3]
 8002aea:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002aec:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <HAL_RCC_OscConfig+0x350>)
 8002aee:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <HAL_RCC_OscConfig+0x354>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2513      	movs	r5, #19
 8002af6:	197c      	adds	r4, r7, r5
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff fad7 	bl	80020ac <HAL_InitTick>
 8002afe:	0003      	movs	r3, r0
 8002b00:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002b02:	197b      	adds	r3, r7, r5
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d061      	beq.n	8002bce <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002b0a:	197b      	adds	r3, r7, r5
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	e244      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d040      	beq.n	8002b9a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <HAL_RCC_OscConfig+0x33c>)
 8002b1e:	2180      	movs	r1, #128	; 0x80
 8002b20:	0049      	lsls	r1, r1, #1
 8002b22:	430a      	orrs	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7ff fb07 	bl	8002138 <HAL_GetTick>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b2e:	e019      	b.n	8002b64 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b30:	f7ff fb02 	bl	8002138 <HAL_GetTick>
 8002b34:	0002      	movs	r2, r0
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d912      	bls.n	8002b64 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e22b      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	40021000 	.word	0x40021000
 8002b48:	fffeffff 	.word	0xfffeffff
 8002b4c:	fffbffff 	.word	0xfffbffff
 8002b50:	ffffe0ff 	.word	0xffffe0ff
 8002b54:	0800601c 	.word	0x0800601c
 8002b58:	2000027c 	.word	0x2000027c
 8002b5c:	20000280 	.word	0x20000280
 8002b60:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b64:	4bca      	ldr	r3, [pc, #808]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d0df      	beq.n	8002b30 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b70:	4bc7      	ldr	r3, [pc, #796]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4ac7      	ldr	r2, [pc, #796]	; (8002e94 <HAL_RCC_OscConfig+0x68c>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	0019      	movs	r1, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b7e:	4bc4      	ldr	r3, [pc, #784]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002b80:	430a      	orrs	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b84:	4bc2      	ldr	r3, [pc, #776]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	0a19      	lsrs	r1, r3, #8
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	061a      	lsls	r2, r3, #24
 8002b92:	4bbf      	ldr	r3, [pc, #764]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002b94:	430a      	orrs	r2, r1
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	e019      	b.n	8002bce <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b9a:	4bbd      	ldr	r3, [pc, #756]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4bbc      	ldr	r3, [pc, #752]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002ba0:	49bd      	ldr	r1, [pc, #756]	; (8002e98 <HAL_RCC_OscConfig+0x690>)
 8002ba2:	400a      	ands	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7ff fac7 	bl	8002138 <HAL_GetTick>
 8002baa:	0003      	movs	r3, r0
 8002bac:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bb0:	f7ff fac2 	bl	8002138 <HAL_GetTick>
 8002bb4:	0002      	movs	r2, r0
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e1eb      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002bc2:	4bb3      	ldr	r3, [pc, #716]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d036      	beq.n	8002c46 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d019      	beq.n	8002c14 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be0:	4bab      	ldr	r3, [pc, #684]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002be2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002be4:	4baa      	ldr	r3, [pc, #680]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002be6:	2101      	movs	r1, #1
 8002be8:	430a      	orrs	r2, r1
 8002bea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bec:	f7ff faa4 	bl	8002138 <HAL_GetTick>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf6:	f7ff fa9f 	bl	8002138 <HAL_GetTick>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e1c8      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c08:	4ba1      	ldr	r3, [pc, #644]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d0f1      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x3ee>
 8002c12:	e018      	b.n	8002c46 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c14:	4b9e      	ldr	r3, [pc, #632]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002c16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c18:	4b9d      	ldr	r3, [pc, #628]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	438a      	bics	r2, r1
 8002c1e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c20:	f7ff fa8a 	bl	8002138 <HAL_GetTick>
 8002c24:	0003      	movs	r3, r0
 8002c26:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2a:	f7ff fa85 	bl	8002138 <HAL_GetTick>
 8002c2e:	0002      	movs	r2, r0
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e1ae      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c3c:	4b94      	ldr	r3, [pc, #592]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c40:	2202      	movs	r2, #2
 8002c42:	4013      	ands	r3, r2
 8002c44:	d1f1      	bne.n	8002c2a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d100      	bne.n	8002c52 <HAL_RCC_OscConfig+0x44a>
 8002c50:	e0ae      	b.n	8002db0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c52:	2023      	movs	r0, #35	; 0x23
 8002c54:	183b      	adds	r3, r7, r0
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5a:	4b8d      	ldr	r3, [pc, #564]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	055b      	lsls	r3, r3, #21
 8002c62:	4013      	ands	r3, r2
 8002c64:	d109      	bne.n	8002c7a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	4b8a      	ldr	r3, [pc, #552]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c6a:	4b89      	ldr	r3, [pc, #548]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002c6c:	2180      	movs	r1, #128	; 0x80
 8002c6e:	0549      	lsls	r1, r1, #21
 8002c70:	430a      	orrs	r2, r1
 8002c72:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002c74:	183b      	adds	r3, r7, r0
 8002c76:	2201      	movs	r2, #1
 8002c78:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7a:	4b88      	ldr	r3, [pc, #544]	; (8002e9c <HAL_RCC_OscConfig+0x694>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4013      	ands	r3, r2
 8002c84:	d11a      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c86:	4b85      	ldr	r3, [pc, #532]	; (8002e9c <HAL_RCC_OscConfig+0x694>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4b84      	ldr	r3, [pc, #528]	; (8002e9c <HAL_RCC_OscConfig+0x694>)
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	0049      	lsls	r1, r1, #1
 8002c90:	430a      	orrs	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c94:	f7ff fa50 	bl	8002138 <HAL_GetTick>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9e:	f7ff fa4b 	bl	8002138 <HAL_GetTick>
 8002ca2:	0002      	movs	r2, r0
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b64      	cmp	r3, #100	; 0x64
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e174      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	4b7a      	ldr	r3, [pc, #488]	; (8002e9c <HAL_RCC_OscConfig+0x694>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x4d0>
 8002cc8:	4b71      	ldr	r3, [pc, #452]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002cca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ccc:	4b70      	ldr	r3, [pc, #448]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002cce:	2180      	movs	r1, #128	; 0x80
 8002cd0:	0049      	lsls	r1, r1, #1
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	651a      	str	r2, [r3, #80]	; 0x50
 8002cd6:	e031      	b.n	8002d3c <HAL_RCC_OscConfig+0x534>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10c      	bne.n	8002cfa <HAL_RCC_OscConfig+0x4f2>
 8002ce0:	4b6b      	ldr	r3, [pc, #428]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002ce2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ce4:	4b6a      	ldr	r3, [pc, #424]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002ce6:	496c      	ldr	r1, [pc, #432]	; (8002e98 <HAL_RCC_OscConfig+0x690>)
 8002ce8:	400a      	ands	r2, r1
 8002cea:	651a      	str	r2, [r3, #80]	; 0x50
 8002cec:	4b68      	ldr	r3, [pc, #416]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002cee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cf0:	4b67      	ldr	r3, [pc, #412]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002cf2:	496b      	ldr	r1, [pc, #428]	; (8002ea0 <HAL_RCC_OscConfig+0x698>)
 8002cf4:	400a      	ands	r2, r1
 8002cf6:	651a      	str	r2, [r3, #80]	; 0x50
 8002cf8:	e020      	b.n	8002d3c <HAL_RCC_OscConfig+0x534>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	23a0      	movs	r3, #160	; 0xa0
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d10e      	bne.n	8002d24 <HAL_RCC_OscConfig+0x51c>
 8002d06:	4b62      	ldr	r3, [pc, #392]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002d08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d0a:	4b61      	ldr	r3, [pc, #388]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002d0c:	2180      	movs	r1, #128	; 0x80
 8002d0e:	00c9      	lsls	r1, r1, #3
 8002d10:	430a      	orrs	r2, r1
 8002d12:	651a      	str	r2, [r3, #80]	; 0x50
 8002d14:	4b5e      	ldr	r3, [pc, #376]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002d16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d18:	4b5d      	ldr	r3, [pc, #372]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	0049      	lsls	r1, r1, #1
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	651a      	str	r2, [r3, #80]	; 0x50
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0x534>
 8002d24:	4b5a      	ldr	r3, [pc, #360]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002d26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d28:	4b59      	ldr	r3, [pc, #356]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002d2a:	495b      	ldr	r1, [pc, #364]	; (8002e98 <HAL_RCC_OscConfig+0x690>)
 8002d2c:	400a      	ands	r2, r1
 8002d2e:	651a      	str	r2, [r3, #80]	; 0x50
 8002d30:	4b57      	ldr	r3, [pc, #348]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002d32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d34:	4b56      	ldr	r3, [pc, #344]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002d36:	495a      	ldr	r1, [pc, #360]	; (8002ea0 <HAL_RCC_OscConfig+0x698>)
 8002d38:	400a      	ands	r2, r1
 8002d3a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d015      	beq.n	8002d70 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d44:	f7ff f9f8 	bl	8002138 <HAL_GetTick>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d4c:	e009      	b.n	8002d62 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7ff f9f3 	bl	8002138 <HAL_GetTick>
 8002d52:	0002      	movs	r2, r0
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	4a52      	ldr	r2, [pc, #328]	; (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e11b      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d62:	4b4b      	ldr	r3, [pc, #300]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002d64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d0ef      	beq.n	8002d4e <HAL_RCC_OscConfig+0x546>
 8002d6e:	e014      	b.n	8002d9a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d70:	f7ff f9e2 	bl	8002138 <HAL_GetTick>
 8002d74:	0003      	movs	r3, r0
 8002d76:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d78:	e009      	b.n	8002d8e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7ff f9dd 	bl	8002138 <HAL_GetTick>
 8002d7e:	0002      	movs	r2, r0
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	4a47      	ldr	r2, [pc, #284]	; (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e105      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d8e:	4b40      	ldr	r3, [pc, #256]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4013      	ands	r3, r2
 8002d98:	d1ef      	bne.n	8002d7a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d9a:	2323      	movs	r3, #35	; 0x23
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d105      	bne.n	8002db0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da4:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002da8:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002daa:	493f      	ldr	r1, [pc, #252]	; (8002ea8 <HAL_RCC_OscConfig+0x6a0>)
 8002dac:	400a      	ands	r2, r1
 8002dae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2220      	movs	r2, #32
 8002db6:	4013      	ands	r3, r2
 8002db8:	d049      	beq.n	8002e4e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d026      	beq.n	8002e10 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002dc2:	4b33      	ldr	r3, [pc, #204]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002dc8:	2101      	movs	r1, #1
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	4b30      	ldr	r3, [pc, #192]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dda:	4b34      	ldr	r3, [pc, #208]	; (8002eac <HAL_RCC_OscConfig+0x6a4>)
 8002ddc:	6a1a      	ldr	r2, [r3, #32]
 8002dde:	4b33      	ldr	r3, [pc, #204]	; (8002eac <HAL_RCC_OscConfig+0x6a4>)
 8002de0:	2180      	movs	r1, #128	; 0x80
 8002de2:	0189      	lsls	r1, r1, #6
 8002de4:	430a      	orrs	r2, r1
 8002de6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7ff f9a6 	bl	8002138 <HAL_GetTick>
 8002dec:	0003      	movs	r3, r0
 8002dee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002df2:	f7ff f9a1 	bl	8002138 <HAL_GetTick>
 8002df6:	0002      	movs	r2, r0
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e0ca      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e04:	4b22      	ldr	r3, [pc, #136]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d0f1      	beq.n	8002df2 <HAL_RCC_OscConfig+0x5ea>
 8002e0e:	e01e      	b.n	8002e4e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002e10:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002e16:	2101      	movs	r1, #1
 8002e18:	438a      	bics	r2, r1
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	4b23      	ldr	r3, [pc, #140]	; (8002eac <HAL_RCC_OscConfig+0x6a4>)
 8002e1e:	6a1a      	ldr	r2, [r3, #32]
 8002e20:	4b22      	ldr	r3, [pc, #136]	; (8002eac <HAL_RCC_OscConfig+0x6a4>)
 8002e22:	4923      	ldr	r1, [pc, #140]	; (8002eb0 <HAL_RCC_OscConfig+0x6a8>)
 8002e24:	400a      	ands	r2, r1
 8002e26:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7ff f986 	bl	8002138 <HAL_GetTick>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e32:	f7ff f981 	bl	8002138 <HAL_GetTick>
 8002e36:	0002      	movs	r2, r0
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e0aa      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d1f1      	bne.n	8002e32 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d100      	bne.n	8002e58 <HAL_RCC_OscConfig+0x650>
 8002e56:	e09f      	b.n	8002f98 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b0c      	cmp	r3, #12
 8002e5c:	d100      	bne.n	8002e60 <HAL_RCC_OscConfig+0x658>
 8002e5e:	e078      	b.n	8002f52 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d159      	bne.n	8002f1c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <HAL_RCC_OscConfig+0x688>)
 8002e6e:	4911      	ldr	r1, [pc, #68]	; (8002eb4 <HAL_RCC_OscConfig+0x6ac>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7ff f960 	bl	8002138 <HAL_GetTick>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e7c:	e01c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7ff f95b 	bl	8002138 <HAL_GetTick>
 8002e82:	0002      	movs	r2, r0
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d915      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e084      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
 8002e90:	40021000 	.word	0x40021000
 8002e94:	ffff1fff 	.word	0xffff1fff
 8002e98:	fffffeff 	.word	0xfffffeff
 8002e9c:	40007000 	.word	0x40007000
 8002ea0:	fffffbff 	.word	0xfffffbff
 8002ea4:	00001388 	.word	0x00001388
 8002ea8:	efffffff 	.word	0xefffffff
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	ffffdfff 	.word	0xffffdfff
 8002eb4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002eb8:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <HAL_RCC_OscConfig+0x79c>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	049b      	lsls	r3, r3, #18
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d1dc      	bne.n	8002e7e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec4:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <HAL_RCC_OscConfig+0x79c>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4a37      	ldr	r2, [pc, #220]	; (8002fa8 <HAL_RCC_OscConfig+0x7a0>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	0019      	movs	r1, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002edc:	431a      	orrs	r2, r3
 8002ede:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_RCC_OscConfig+0x79c>)
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee4:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <HAL_RCC_OscConfig+0x79c>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <HAL_RCC_OscConfig+0x79c>)
 8002eea:	2180      	movs	r1, #128	; 0x80
 8002eec:	0449      	lsls	r1, r1, #17
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef2:	f7ff f921 	bl	8002138 <HAL_GetTick>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002efc:	f7ff f91c 	bl	8002138 <HAL_GetTick>
 8002f00:	0002      	movs	r2, r0
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e045      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002f0e:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <HAL_RCC_OscConfig+0x79c>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	049b      	lsls	r3, r3, #18
 8002f16:	4013      	ands	r3, r2
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x6f4>
 8002f1a:	e03d      	b.n	8002f98 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1c:	4b21      	ldr	r3, [pc, #132]	; (8002fa4 <HAL_RCC_OscConfig+0x79c>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <HAL_RCC_OscConfig+0x79c>)
 8002f22:	4922      	ldr	r1, [pc, #136]	; (8002fac <HAL_RCC_OscConfig+0x7a4>)
 8002f24:	400a      	ands	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7ff f906 	bl	8002138 <HAL_GetTick>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f32:	f7ff f901 	bl	8002138 <HAL_GetTick>
 8002f36:	0002      	movs	r2, r0
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e02a      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f44:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <HAL_RCC_OscConfig+0x79c>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	049b      	lsls	r3, r3, #18
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x72a>
 8002f50:	e022      	b.n	8002f98 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e01d      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_RCC_OscConfig+0x79c>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	025b      	lsls	r3, r3, #9
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d10f      	bne.n	8002f94 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	23f0      	movs	r3, #240	; 0xf0
 8002f78:	039b      	lsls	r3, r3, #14
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d107      	bne.n	8002f94 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	23c0      	movs	r3, #192	; 0xc0
 8002f88:	041b      	lsls	r3, r3, #16
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b00a      	add	sp, #40	; 0x28
 8002fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	ff02ffff 	.word	0xff02ffff
 8002fac:	feffffff 	.word	0xfeffffff

08002fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb0:	b5b0      	push	{r4, r5, r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e128      	b.n	8003216 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b96      	ldr	r3, [pc, #600]	; (8003220 <HAL_RCC_ClockConfig+0x270>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	4013      	ands	r3, r2
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d91e      	bls.n	8003010 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b93      	ldr	r3, [pc, #588]	; (8003220 <HAL_RCC_ClockConfig+0x270>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	4393      	bics	r3, r2
 8002fda:	0019      	movs	r1, r3
 8002fdc:	4b90      	ldr	r3, [pc, #576]	; (8003220 <HAL_RCC_ClockConfig+0x270>)
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fe4:	f7ff f8a8 	bl	8002138 <HAL_GetTick>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fec:	e009      	b.n	8003002 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fee:	f7ff f8a3 	bl	8002138 <HAL_GetTick>
 8002ff2:	0002      	movs	r2, r0
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	4a8a      	ldr	r2, [pc, #552]	; (8003224 <HAL_RCC_ClockConfig+0x274>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e109      	b.n	8003216 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b87      	ldr	r3, [pc, #540]	; (8003220 <HAL_RCC_ClockConfig+0x270>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2201      	movs	r2, #1
 8003008:	4013      	ands	r3, r2
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d1ee      	bne.n	8002fee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2202      	movs	r2, #2
 8003016:	4013      	ands	r3, r2
 8003018:	d009      	beq.n	800302e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800301a:	4b83      	ldr	r3, [pc, #524]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	22f0      	movs	r2, #240	; 0xf0
 8003020:	4393      	bics	r3, r2
 8003022:	0019      	movs	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	4b7f      	ldr	r3, [pc, #508]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 800302a:	430a      	orrs	r2, r1
 800302c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2201      	movs	r2, #1
 8003034:	4013      	ands	r3, r2
 8003036:	d100      	bne.n	800303a <HAL_RCC_ClockConfig+0x8a>
 8003038:	e089      	b.n	800314e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d107      	bne.n	8003052 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003042:	4b79      	ldr	r3, [pc, #484]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	029b      	lsls	r3, r3, #10
 800304a:	4013      	ands	r3, r2
 800304c:	d120      	bne.n	8003090 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e0e1      	b.n	8003216 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b03      	cmp	r3, #3
 8003058:	d107      	bne.n	800306a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800305a:	4b73      	ldr	r3, [pc, #460]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	049b      	lsls	r3, r3, #18
 8003062:	4013      	ands	r3, r2
 8003064:	d114      	bne.n	8003090 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e0d5      	b.n	8003216 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d106      	bne.n	8003080 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003072:	4b6d      	ldr	r3, [pc, #436]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2204      	movs	r2, #4
 8003078:	4013      	ands	r3, r2
 800307a:	d109      	bne.n	8003090 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0ca      	b.n	8003216 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003080:	4b69      	ldr	r3, [pc, #420]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4013      	ands	r3, r2
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0c2      	b.n	8003216 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003090:	4b65      	ldr	r3, [pc, #404]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2203      	movs	r2, #3
 8003096:	4393      	bics	r3, r2
 8003098:	0019      	movs	r1, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	4b62      	ldr	r3, [pc, #392]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 80030a0:	430a      	orrs	r2, r1
 80030a2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a4:	f7ff f848 	bl	8002138 <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d111      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030b4:	e009      	b.n	80030ca <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b6:	f7ff f83f 	bl	8002138 <HAL_GetTick>
 80030ba:	0002      	movs	r2, r0
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	4a58      	ldr	r2, [pc, #352]	; (8003224 <HAL_RCC_ClockConfig+0x274>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e0a5      	b.n	8003216 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030ca:	4b57      	ldr	r3, [pc, #348]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	220c      	movs	r2, #12
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d1ef      	bne.n	80030b6 <HAL_RCC_ClockConfig+0x106>
 80030d6:	e03a      	b.n	800314e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d111      	bne.n	8003104 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e0:	e009      	b.n	80030f6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e2:	f7ff f829 	bl	8002138 <HAL_GetTick>
 80030e6:	0002      	movs	r2, r0
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	4a4d      	ldr	r2, [pc, #308]	; (8003224 <HAL_RCC_ClockConfig+0x274>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e08f      	b.n	8003216 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030f6:	4b4c      	ldr	r3, [pc, #304]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	220c      	movs	r2, #12
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d1ef      	bne.n	80030e2 <HAL_RCC_ClockConfig+0x132>
 8003102:	e024      	b.n	800314e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d11b      	bne.n	8003144 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800310c:	e009      	b.n	8003122 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310e:	f7ff f813 	bl	8002138 <HAL_GetTick>
 8003112:	0002      	movs	r2, r0
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	4a42      	ldr	r2, [pc, #264]	; (8003224 <HAL_RCC_ClockConfig+0x274>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e079      	b.n	8003216 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003122:	4b41      	ldr	r3, [pc, #260]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	220c      	movs	r2, #12
 8003128:	4013      	ands	r3, r2
 800312a:	2b04      	cmp	r3, #4
 800312c:	d1ef      	bne.n	800310e <HAL_RCC_ClockConfig+0x15e>
 800312e:	e00e      	b.n	800314e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003130:	f7ff f802 	bl	8002138 <HAL_GetTick>
 8003134:	0002      	movs	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <HAL_RCC_ClockConfig+0x274>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e068      	b.n	8003216 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003144:	4b38      	ldr	r3, [pc, #224]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	220c      	movs	r2, #12
 800314a:	4013      	ands	r3, r2
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800314e:	4b34      	ldr	r3, [pc, #208]	; (8003220 <HAL_RCC_ClockConfig+0x270>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2201      	movs	r2, #1
 8003154:	4013      	ands	r3, r2
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d21e      	bcs.n	800319a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315c:	4b30      	ldr	r3, [pc, #192]	; (8003220 <HAL_RCC_ClockConfig+0x270>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2201      	movs	r2, #1
 8003162:	4393      	bics	r3, r2
 8003164:	0019      	movs	r1, r3
 8003166:	4b2e      	ldr	r3, [pc, #184]	; (8003220 <HAL_RCC_ClockConfig+0x270>)
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800316e:	f7fe ffe3 	bl	8002138 <HAL_GetTick>
 8003172:	0003      	movs	r3, r0
 8003174:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	e009      	b.n	800318c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003178:	f7fe ffde 	bl	8002138 <HAL_GetTick>
 800317c:	0002      	movs	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	4a28      	ldr	r2, [pc, #160]	; (8003224 <HAL_RCC_ClockConfig+0x274>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e044      	b.n	8003216 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318c:	4b24      	ldr	r3, [pc, #144]	; (8003220 <HAL_RCC_ClockConfig+0x270>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2201      	movs	r2, #1
 8003192:	4013      	ands	r3, r2
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d1ee      	bne.n	8003178 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2204      	movs	r2, #4
 80031a0:	4013      	ands	r3, r2
 80031a2:	d009      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a4:	4b20      	ldr	r3, [pc, #128]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4a20      	ldr	r2, [pc, #128]	; (800322c <HAL_RCC_ClockConfig+0x27c>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	0019      	movs	r1, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 80031b4:	430a      	orrs	r2, r1
 80031b6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2208      	movs	r2, #8
 80031be:	4013      	ands	r3, r2
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031c2:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	4a1a      	ldr	r2, [pc, #104]	; (8003230 <HAL_RCC_ClockConfig+0x280>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	00da      	lsls	r2, r3, #3
 80031d2:	4b15      	ldr	r3, [pc, #84]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 80031d4:	430a      	orrs	r2, r1
 80031d6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031d8:	f000 f832 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80031dc:	0001      	movs	r1, r0
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	091b      	lsrs	r3, r3, #4
 80031e4:	220f      	movs	r2, #15
 80031e6:	4013      	ands	r3, r2
 80031e8:	4a12      	ldr	r2, [pc, #72]	; (8003234 <HAL_RCC_ClockConfig+0x284>)
 80031ea:	5cd3      	ldrb	r3, [r2, r3]
 80031ec:	000a      	movs	r2, r1
 80031ee:	40da      	lsrs	r2, r3
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_RCC_ClockConfig+0x288>)
 80031f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <HAL_RCC_ClockConfig+0x28c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	250b      	movs	r5, #11
 80031fa:	197c      	adds	r4, r7, r5
 80031fc:	0018      	movs	r0, r3
 80031fe:	f7fe ff55 	bl	80020ac <HAL_InitTick>
 8003202:	0003      	movs	r3, r0
 8003204:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003206:	197b      	adds	r3, r7, r5
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800320e:	197b      	adds	r3, r7, r5
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	e000      	b.n	8003216 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b004      	add	sp, #16
 800321c:	bdb0      	pop	{r4, r5, r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	40022000 	.word	0x40022000
 8003224:	00001388 	.word	0x00001388
 8003228:	40021000 	.word	0x40021000
 800322c:	fffff8ff 	.word	0xfffff8ff
 8003230:	ffffc7ff 	.word	0xffffc7ff
 8003234:	0800601c 	.word	0x0800601c
 8003238:	2000027c 	.word	0x2000027c
 800323c:	20000280 	.word	0x20000280

08003240 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003240:	b5b0      	push	{r4, r5, r7, lr}
 8003242:	b08e      	sub	sp, #56	; 0x38
 8003244:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003246:	4b4c      	ldr	r3, [pc, #304]	; (8003378 <HAL_RCC_GetSysClockFreq+0x138>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800324c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800324e:	230c      	movs	r3, #12
 8003250:	4013      	ands	r3, r2
 8003252:	2b0c      	cmp	r3, #12
 8003254:	d014      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x40>
 8003256:	d900      	bls.n	800325a <HAL_RCC_GetSysClockFreq+0x1a>
 8003258:	e07b      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0x112>
 800325a:	2b04      	cmp	r3, #4
 800325c:	d002      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x24>
 800325e:	2b08      	cmp	r3, #8
 8003260:	d00b      	beq.n	800327a <HAL_RCC_GetSysClockFreq+0x3a>
 8003262:	e076      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003264:	4b44      	ldr	r3, [pc, #272]	; (8003378 <HAL_RCC_GetSysClockFreq+0x138>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2210      	movs	r2, #16
 800326a:	4013      	ands	r3, r2
 800326c:	d002      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800326e:	4b43      	ldr	r3, [pc, #268]	; (800337c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003270:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003272:	e07c      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003274:	4b42      	ldr	r3, [pc, #264]	; (8003380 <HAL_RCC_GetSysClockFreq+0x140>)
 8003276:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003278:	e079      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800327a:	4b42      	ldr	r3, [pc, #264]	; (8003384 <HAL_RCC_GetSysClockFreq+0x144>)
 800327c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800327e:	e076      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	0c9a      	lsrs	r2, r3, #18
 8003284:	230f      	movs	r3, #15
 8003286:	401a      	ands	r2, r3
 8003288:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <HAL_RCC_GetSysClockFreq+0x148>)
 800328a:	5c9b      	ldrb	r3, [r3, r2]
 800328c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003290:	0d9a      	lsrs	r2, r3, #22
 8003292:	2303      	movs	r3, #3
 8003294:	4013      	ands	r3, r2
 8003296:	3301      	adds	r3, #1
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800329a:	4b37      	ldr	r3, [pc, #220]	; (8003378 <HAL_RCC_GetSysClockFreq+0x138>)
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	025b      	lsls	r3, r3, #9
 80032a2:	4013      	ands	r3, r2
 80032a4:	d01a      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	4a35      	ldr	r2, [pc, #212]	; (8003384 <HAL_RCC_GetSysClockFreq+0x144>)
 80032b0:	2300      	movs	r3, #0
 80032b2:	69b8      	ldr	r0, [r7, #24]
 80032b4:	69f9      	ldr	r1, [r7, #28]
 80032b6:	f7fd f8cf 	bl	8000458 <__aeabi_lmul>
 80032ba:	0002      	movs	r2, r0
 80032bc:	000b      	movs	r3, r1
 80032be:	0010      	movs	r0, r2
 80032c0:	0019      	movs	r1, r3
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f7fd f8a3 	bl	8000418 <__aeabi_uldivmod>
 80032d2:	0002      	movs	r2, r0
 80032d4:	000b      	movs	r3, r1
 80032d6:	0013      	movs	r3, r2
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
 80032da:	e037      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80032dc:	4b26      	ldr	r3, [pc, #152]	; (8003378 <HAL_RCC_GetSysClockFreq+0x138>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2210      	movs	r2, #16
 80032e2:	4013      	ands	r3, r2
 80032e4:	d01a      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80032e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	4a23      	ldr	r2, [pc, #140]	; (800337c <HAL_RCC_GetSysClockFreq+0x13c>)
 80032f0:	2300      	movs	r3, #0
 80032f2:	68b8      	ldr	r0, [r7, #8]
 80032f4:	68f9      	ldr	r1, [r7, #12]
 80032f6:	f7fd f8af 	bl	8000458 <__aeabi_lmul>
 80032fa:	0002      	movs	r2, r0
 80032fc:	000b      	movs	r3, r1
 80032fe:	0010      	movs	r0, r2
 8003300:	0019      	movs	r1, r3
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	2300      	movs	r3, #0
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f7fd f883 	bl	8000418 <__aeabi_uldivmod>
 8003312:	0002      	movs	r2, r0
 8003314:	000b      	movs	r3, r1
 8003316:	0013      	movs	r3, r2
 8003318:	637b      	str	r3, [r7, #52]	; 0x34
 800331a:	e017      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	0018      	movs	r0, r3
 8003320:	2300      	movs	r3, #0
 8003322:	0019      	movs	r1, r3
 8003324:	4a16      	ldr	r2, [pc, #88]	; (8003380 <HAL_RCC_GetSysClockFreq+0x140>)
 8003326:	2300      	movs	r3, #0
 8003328:	f7fd f896 	bl	8000458 <__aeabi_lmul>
 800332c:	0002      	movs	r2, r0
 800332e:	000b      	movs	r3, r1
 8003330:	0010      	movs	r0, r2
 8003332:	0019      	movs	r1, r3
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	001c      	movs	r4, r3
 8003338:	2300      	movs	r3, #0
 800333a:	001d      	movs	r5, r3
 800333c:	0022      	movs	r2, r4
 800333e:	002b      	movs	r3, r5
 8003340:	f7fd f86a 	bl	8000418 <__aeabi_uldivmod>
 8003344:	0002      	movs	r2, r0
 8003346:	000b      	movs	r3, r1
 8003348:	0013      	movs	r3, r2
 800334a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800334c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003350:	e00d      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003352:	4b09      	ldr	r3, [pc, #36]	; (8003378 <HAL_RCC_GetSysClockFreq+0x138>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	0b5b      	lsrs	r3, r3, #13
 8003358:	2207      	movs	r2, #7
 800335a:	4013      	ands	r3, r2
 800335c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	3301      	adds	r3, #1
 8003362:	2280      	movs	r2, #128	; 0x80
 8003364:	0212      	lsls	r2, r2, #8
 8003366:	409a      	lsls	r2, r3
 8003368:	0013      	movs	r3, r2
 800336a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800336c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003370:	0018      	movs	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	b00e      	add	sp, #56	; 0x38
 8003376:	bdb0      	pop	{r4, r5, r7, pc}
 8003378:	40021000 	.word	0x40021000
 800337c:	003d0900 	.word	0x003d0900
 8003380:	00f42400 	.word	0x00f42400
 8003384:	007a1200 	.word	0x007a1200
 8003388:	08006034 	.word	0x08006034

0800338c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003390:	4b02      	ldr	r3, [pc, #8]	; (800339c <HAL_RCC_GetHCLKFreq+0x10>)
 8003392:	681b      	ldr	r3, [r3, #0]
}
 8003394:	0018      	movs	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	2000027c 	.word	0x2000027c

080033a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033a4:	f7ff fff2 	bl	800338c <HAL_RCC_GetHCLKFreq>
 80033a8:	0001      	movs	r1, r0
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	2207      	movs	r2, #7
 80033b2:	4013      	ands	r3, r2
 80033b4:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	40d9      	lsrs	r1, r3
 80033ba:	000b      	movs	r3, r1
}
 80033bc:	0018      	movs	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	40021000 	.word	0x40021000
 80033c8:	0800602c 	.word	0x0800602c

080033cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033d0:	f7ff ffdc 	bl	800338c <HAL_RCC_GetHCLKFreq>
 80033d4:	0001      	movs	r1, r0
 80033d6:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	0adb      	lsrs	r3, r3, #11
 80033dc:	2207      	movs	r2, #7
 80033de:	4013      	ands	r3, r2
 80033e0:	4a04      	ldr	r2, [pc, #16]	; (80033f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033e2:	5cd3      	ldrb	r3, [r2, r3]
 80033e4:	40d9      	lsrs	r1, r3
 80033e6:	000b      	movs	r3, r1
}
 80033e8:	0018      	movs	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	40021000 	.word	0x40021000
 80033f4:	0800602c 	.word	0x0800602c

080033f8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003400:	2317      	movs	r3, #23
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2220      	movs	r2, #32
 800340e:	4013      	ands	r3, r2
 8003410:	d106      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	4013      	ands	r3, r2
 800341c:	d100      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800341e:	e0d9      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003420:	4ba4      	ldr	r3, [pc, #656]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003424:	2380      	movs	r3, #128	; 0x80
 8003426:	055b      	lsls	r3, r3, #21
 8003428:	4013      	ands	r3, r2
 800342a:	d10a      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342c:	4ba1      	ldr	r3, [pc, #644]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800342e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003430:	4ba0      	ldr	r3, [pc, #640]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003432:	2180      	movs	r1, #128	; 0x80
 8003434:	0549      	lsls	r1, r1, #21
 8003436:	430a      	orrs	r2, r1
 8003438:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800343a:	2317      	movs	r3, #23
 800343c:	18fb      	adds	r3, r7, r3
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003442:	4b9d      	ldr	r3, [pc, #628]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4013      	ands	r3, r2
 800344c:	d11a      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344e:	4b9a      	ldr	r3, [pc, #616]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4b99      	ldr	r3, [pc, #612]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003454:	2180      	movs	r1, #128	; 0x80
 8003456:	0049      	lsls	r1, r1, #1
 8003458:	430a      	orrs	r2, r1
 800345a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345c:	f7fe fe6c 	bl	8002138 <HAL_GetTick>
 8003460:	0003      	movs	r3, r0
 8003462:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	e008      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003466:	f7fe fe67 	bl	8002138 <HAL_GetTick>
 800346a:	0002      	movs	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b64      	cmp	r3, #100	; 0x64
 8003472:	d901      	bls.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e118      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	4b8f      	ldr	r3, [pc, #572]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	4013      	ands	r3, r2
 8003482:	d0f0      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003484:	4b8b      	ldr	r3, [pc, #556]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	23c0      	movs	r3, #192	; 0xc0
 800348a:	039b      	lsls	r3, r3, #14
 800348c:	4013      	ands	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	23c0      	movs	r3, #192	; 0xc0
 8003496:	039b      	lsls	r3, r3, #14
 8003498:	4013      	ands	r3, r2
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	429a      	cmp	r2, r3
 800349e:	d107      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	23c0      	movs	r3, #192	; 0xc0
 80034a6:	039b      	lsls	r3, r3, #14
 80034a8:	4013      	ands	r3, r2
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d013      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	23c0      	movs	r3, #192	; 0xc0
 80034b6:	029b      	lsls	r3, r3, #10
 80034b8:	401a      	ands	r2, r3
 80034ba:	23c0      	movs	r3, #192	; 0xc0
 80034bc:	029b      	lsls	r3, r3, #10
 80034be:	429a      	cmp	r2, r3
 80034c0:	d10a      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80034c2:	4b7c      	ldr	r3, [pc, #496]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	029b      	lsls	r3, r3, #10
 80034ca:	401a      	ands	r2, r3
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	029b      	lsls	r3, r3, #10
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d101      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0e8      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80034d8:	4b76      	ldr	r3, [pc, #472]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80034da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034dc:	23c0      	movs	r3, #192	; 0xc0
 80034de:	029b      	lsls	r3, r3, #10
 80034e0:	4013      	ands	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d049      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	23c0      	movs	r3, #192	; 0xc0
 80034f0:	029b      	lsls	r3, r3, #10
 80034f2:	4013      	ands	r3, r2
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d004      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2220      	movs	r2, #32
 8003500:	4013      	ands	r3, r2
 8003502:	d10d      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	23c0      	movs	r3, #192	; 0xc0
 800350a:	029b      	lsls	r3, r3, #10
 800350c:	4013      	ands	r3, r2
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	429a      	cmp	r2, r3
 8003512:	d034      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	4013      	ands	r3, r2
 800351e:	d02e      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003520:	4b64      	ldr	r3, [pc, #400]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003524:	4a65      	ldr	r2, [pc, #404]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003526:	4013      	ands	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800352a:	4b62      	ldr	r3, [pc, #392]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800352c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800352e:	4b61      	ldr	r3, [pc, #388]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003530:	2180      	movs	r1, #128	; 0x80
 8003532:	0309      	lsls	r1, r1, #12
 8003534:	430a      	orrs	r2, r1
 8003536:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003538:	4b5e      	ldr	r3, [pc, #376]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800353a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800353c:	4b5d      	ldr	r3, [pc, #372]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800353e:	4960      	ldr	r1, [pc, #384]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003540:	400a      	ands	r2, r1
 8003542:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003544:	4b5b      	ldr	r3, [pc, #364]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4013      	ands	r3, r2
 8003552:	d014      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7fe fdf0 	bl	8002138 <HAL_GetTick>
 8003558:	0003      	movs	r3, r0
 800355a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800355c:	e009      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fe fdeb 	bl	8002138 <HAL_GetTick>
 8003562:	0002      	movs	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	4a56      	ldr	r2, [pc, #344]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e09b      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003572:	4b50      	ldr	r3, [pc, #320]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003574:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4013      	ands	r3, r2
 800357c:	d0ef      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	23c0      	movs	r3, #192	; 0xc0
 8003584:	029b      	lsls	r3, r3, #10
 8003586:	401a      	ands	r2, r3
 8003588:	23c0      	movs	r3, #192	; 0xc0
 800358a:	029b      	lsls	r3, r3, #10
 800358c:	429a      	cmp	r2, r3
 800358e:	d10c      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003590:	4b48      	ldr	r3, [pc, #288]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a4c      	ldr	r2, [pc, #304]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003596:	4013      	ands	r3, r2
 8003598:	0019      	movs	r1, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	23c0      	movs	r3, #192	; 0xc0
 80035a0:	039b      	lsls	r3, r3, #14
 80035a2:	401a      	ands	r2, r3
 80035a4:	4b43      	ldr	r3, [pc, #268]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80035a6:	430a      	orrs	r2, r1
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	4b42      	ldr	r3, [pc, #264]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80035ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	23c0      	movs	r3, #192	; 0xc0
 80035b4:	029b      	lsls	r3, r3, #10
 80035b6:	401a      	ands	r2, r3
 80035b8:	4b3e      	ldr	r3, [pc, #248]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80035ba:	430a      	orrs	r2, r1
 80035bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035be:	2317      	movs	r3, #23
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d105      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c8:	4b3a      	ldr	r3, [pc, #232]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80035ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035cc:	4b39      	ldr	r3, [pc, #228]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80035ce:	493f      	ldr	r1, [pc, #252]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035d0:	400a      	ands	r2, r1
 80035d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2201      	movs	r2, #1
 80035da:	4013      	ands	r3, r2
 80035dc:	d009      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035de:	4b35      	ldr	r3, [pc, #212]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80035e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e2:	2203      	movs	r2, #3
 80035e4:	4393      	bics	r3, r2
 80035e6:	0019      	movs	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	4b31      	ldr	r3, [pc, #196]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80035ee:	430a      	orrs	r2, r1
 80035f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2202      	movs	r2, #2
 80035f8:	4013      	ands	r3, r2
 80035fa:	d009      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035fc:	4b2d      	ldr	r3, [pc, #180]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80035fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003600:	220c      	movs	r2, #12
 8003602:	4393      	bics	r3, r2
 8003604:	0019      	movs	r1, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	4b2a      	ldr	r3, [pc, #168]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800360c:	430a      	orrs	r2, r1
 800360e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2204      	movs	r2, #4
 8003616:	4013      	ands	r3, r2
 8003618:	d009      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800361a:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800361c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361e:	4a2c      	ldr	r2, [pc, #176]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003620:	4013      	ands	r3, r2
 8003622:	0019      	movs	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800362a:	430a      	orrs	r2, r1
 800362c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2208      	movs	r2, #8
 8003634:	4013      	ands	r3, r2
 8003636:	d009      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003638:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800363a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363c:	4a25      	ldr	r2, [pc, #148]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800363e:	4013      	ands	r3, r2
 8003640:	0019      	movs	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003648:	430a      	orrs	r2, r1
 800364a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4013      	ands	r3, r2
 8003656:	d009      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003658:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800365a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365c:	4a17      	ldr	r2, [pc, #92]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800365e:	4013      	ands	r3, r2
 8003660:	0019      	movs	r1, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69da      	ldr	r2, [r3, #28]
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003668:	430a      	orrs	r2, r1
 800366a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2240      	movs	r2, #64	; 0x40
 8003672:	4013      	ands	r3, r2
 8003674:	d009      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003676:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367a:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800367c:	4013      	ands	r3, r2
 800367e:	0019      	movs	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003686:	430a      	orrs	r2, r1
 8003688:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2280      	movs	r2, #128	; 0x80
 8003690:	4013      	ands	r3, r2
 8003692:	d009      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003694:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003698:	4a10      	ldr	r2, [pc, #64]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800369a:	4013      	ands	r3, r2
 800369c:	0019      	movs	r1, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1a      	ldr	r2, [r3, #32]
 80036a2:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036a4:	430a      	orrs	r2, r1
 80036a6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	0018      	movs	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b006      	add	sp, #24
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40007000 	.word	0x40007000
 80036bc:	fffcffff 	.word	0xfffcffff
 80036c0:	fff7ffff 	.word	0xfff7ffff
 80036c4:	00001388 	.word	0x00001388
 80036c8:	ffcfffff 	.word	0xffcfffff
 80036cc:	efffffff 	.word	0xefffffff
 80036d0:	fffff3ff 	.word	0xfffff3ff
 80036d4:	ffffcfff 	.word	0xffffcfff
 80036d8:	fbffffff 	.word	0xfbffffff
 80036dc:	fff3ffff 	.word	0xfff3ffff

080036e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e083      	b.n	80037fa <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	2382      	movs	r3, #130	; 0x82
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	429a      	cmp	r2, r3
 8003704:	d009      	beq.n	800371a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	61da      	str	r2, [r3, #28]
 800370c:	e005      	b.n	800371a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2251      	movs	r2, #81	; 0x51
 8003724:	5c9b      	ldrb	r3, [r3, r2]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d107      	bne.n	800373c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2250      	movs	r2, #80	; 0x50
 8003730:	2100      	movs	r1, #0
 8003732:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	0018      	movs	r0, r3
 8003738:	f7fe fafe 	bl	8001d38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2251      	movs	r2, #81	; 0x51
 8003740:	2102      	movs	r1, #2
 8003742:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2140      	movs	r1, #64	; 0x40
 8003750:	438a      	bics	r2, r1
 8003752:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	2382      	movs	r3, #130	; 0x82
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	401a      	ands	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6899      	ldr	r1, [r3, #8]
 8003762:	2384      	movs	r3, #132	; 0x84
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	400b      	ands	r3, r1
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68d9      	ldr	r1, [r3, #12]
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	400b      	ands	r3, r1
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2102      	movs	r1, #2
 800377c:	400b      	ands	r3, r1
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	2101      	movs	r1, #1
 8003786:	400b      	ands	r3, r1
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6999      	ldr	r1, [r3, #24]
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	400b      	ands	r3, r1
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	2138      	movs	r1, #56	; 0x38
 800379c:	400b      	ands	r3, r1
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	2180      	movs	r1, #128	; 0x80
 80037a6:	400b      	ands	r3, r1
 80037a8:	431a      	orrs	r2, r3
 80037aa:	0011      	movs	r1, r2
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	019b      	lsls	r3, r3, #6
 80037b4:	401a      	ands	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	0c1b      	lsrs	r3, r3, #16
 80037c4:	2204      	movs	r2, #4
 80037c6:	4013      	ands	r3, r2
 80037c8:	0019      	movs	r1, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	2210      	movs	r2, #16
 80037d0:	401a      	ands	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69da      	ldr	r2, [r3, #28]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4907      	ldr	r1, [pc, #28]	; (8003804 <HAL_SPI_Init+0x124>)
 80037e6:	400a      	ands	r2, r1
 80037e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2251      	movs	r2, #81	; 0x51
 80037f4:	2101      	movs	r1, #1
 80037f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	0018      	movs	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b002      	add	sp, #8
 8003800:	bd80      	pop	{r7, pc}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	fffff7ff 	.word	0xfffff7ff

08003808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e032      	b.n	8003880 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2239      	movs	r2, #57	; 0x39
 800381e:	5c9b      	ldrb	r3, [r3, r2]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d107      	bne.n	8003836 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2238      	movs	r2, #56	; 0x38
 800382a:	2100      	movs	r1, #0
 800382c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	0018      	movs	r0, r3
 8003832:	f7fe fac7 	bl	8001dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2239      	movs	r2, #57	; 0x39
 800383a:	2102      	movs	r1, #2
 800383c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3304      	adds	r3, #4
 8003846:	0019      	movs	r1, r3
 8003848:	0010      	movs	r0, r2
 800384a:	f000 fa4b 	bl	8003ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	223e      	movs	r2, #62	; 0x3e
 8003852:	2101      	movs	r1, #1
 8003854:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	223a      	movs	r2, #58	; 0x3a
 800385a:	2101      	movs	r1, #1
 800385c:	5499      	strb	r1, [r3, r2]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	223b      	movs	r2, #59	; 0x3b
 8003862:	2101      	movs	r1, #1
 8003864:	5499      	strb	r1, [r3, r2]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	223c      	movs	r2, #60	; 0x3c
 800386a:	2101      	movs	r1, #1
 800386c:	5499      	strb	r1, [r3, r2]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	223d      	movs	r2, #61	; 0x3d
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2239      	movs	r2, #57	; 0x39
 800387a:	2101      	movs	r1, #1
 800387c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	0018      	movs	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	b002      	add	sp, #8
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2239      	movs	r2, #57	; 0x39
 8003894:	5c9b      	ldrb	r3, [r3, r2]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d001      	beq.n	80038a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e03b      	b.n	8003918 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2239      	movs	r2, #57	; 0x39
 80038a4:	2102      	movs	r1, #2
 80038a6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2101      	movs	r1, #1
 80038b4:	430a      	orrs	r2, r1
 80038b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	05db      	lsls	r3, r3, #23
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d00e      	beq.n	80038e2 <HAL_TIM_Base_Start_IT+0x5a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <HAL_TIM_Base_Start_IT+0x98>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d009      	beq.n	80038e2 <HAL_TIM_Base_Start_IT+0x5a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a14      	ldr	r2, [pc, #80]	; (8003924 <HAL_TIM_Base_Start_IT+0x9c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_TIM_Base_Start_IT+0x5a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a12      	ldr	r2, [pc, #72]	; (8003928 <HAL_TIM_Base_Start_IT+0xa0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d111      	bne.n	8003906 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2207      	movs	r2, #7
 80038ea:	4013      	ands	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b06      	cmp	r3, #6
 80038f2:	d010      	beq.n	8003916 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2101      	movs	r1, #1
 8003900:	430a      	orrs	r2, r1
 8003902:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003904:	e007      	b.n	8003916 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2101      	movs	r1, #1
 8003912:	430a      	orrs	r2, r1
 8003914:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	0018      	movs	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	b004      	add	sp, #16
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40000400 	.word	0x40000400
 8003924:	40010800 	.word	0x40010800
 8003928:	40011400 	.word	0x40011400

0800392c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2202      	movs	r2, #2
 800393c:	4013      	ands	r3, r2
 800393e:	2b02      	cmp	r3, #2
 8003940:	d124      	bne.n	800398c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2202      	movs	r2, #2
 800394a:	4013      	ands	r3, r2
 800394c:	2b02      	cmp	r3, #2
 800394e:	d11d      	bne.n	800398c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2203      	movs	r2, #3
 8003956:	4252      	negs	r2, r2
 8003958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2203      	movs	r2, #3
 8003968:	4013      	ands	r3, r2
 800396a:	d004      	beq.n	8003976 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	0018      	movs	r0, r3
 8003970:	f000 f9a0 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 8003974:	e007      	b.n	8003986 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	0018      	movs	r0, r3
 800397a:	f000 f993 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	0018      	movs	r0, r3
 8003982:	f000 f99f 	bl	8003cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2204      	movs	r2, #4
 8003994:	4013      	ands	r3, r2
 8003996:	2b04      	cmp	r3, #4
 8003998:	d125      	bne.n	80039e6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	2204      	movs	r2, #4
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d11e      	bne.n	80039e6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2205      	movs	r2, #5
 80039ae:	4252      	negs	r2, r2
 80039b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	23c0      	movs	r3, #192	; 0xc0
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4013      	ands	r3, r2
 80039c4:	d004      	beq.n	80039d0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	0018      	movs	r0, r3
 80039ca:	f000 f973 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 80039ce:	e007      	b.n	80039e0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	0018      	movs	r0, r3
 80039d4:	f000 f966 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	0018      	movs	r0, r3
 80039dc:	f000 f972 	bl	8003cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	2208      	movs	r2, #8
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d124      	bne.n	8003a3e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	2208      	movs	r2, #8
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d11d      	bne.n	8003a3e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2209      	movs	r2, #9
 8003a08:	4252      	negs	r2, r2
 8003a0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	2203      	movs	r2, #3
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d004      	beq.n	8003a28 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	0018      	movs	r0, r3
 8003a22:	f000 f947 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 8003a26:	e007      	b.n	8003a38 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f000 f93a 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	0018      	movs	r0, r3
 8003a34:	f000 f946 	bl	8003cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	2210      	movs	r2, #16
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b10      	cmp	r3, #16
 8003a4a:	d125      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2210      	movs	r2, #16
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b10      	cmp	r3, #16
 8003a58:	d11e      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2211      	movs	r2, #17
 8003a60:	4252      	negs	r2, r2
 8003a62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2208      	movs	r2, #8
 8003a68:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	23c0      	movs	r3, #192	; 0xc0
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4013      	ands	r3, r2
 8003a76:	d004      	beq.n	8003a82 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f000 f91a 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 8003a80:	e007      	b.n	8003a92 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	0018      	movs	r0, r3
 8003a86:	f000 f90d 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f000 f919 	bl	8003cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d10f      	bne.n	8003ac6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d108      	bne.n	8003ac6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	4252      	negs	r2, r2
 8003abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f7fd fbf5 	bl	80012b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2240      	movs	r2, #64	; 0x40
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b40      	cmp	r3, #64	; 0x40
 8003ad2:	d10f      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2240      	movs	r2, #64	; 0x40
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b40      	cmp	r3, #64	; 0x40
 8003ae0:	d108      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2241      	movs	r2, #65	; 0x41
 8003ae8:	4252      	negs	r2, r2
 8003aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 f8f0 	bl	8003cd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b002      	add	sp, #8
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b06:	230f      	movs	r3, #15
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2238      	movs	r2, #56	; 0x38
 8003b12:	5c9b      	ldrb	r3, [r3, r2]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_TIM_ConfigClockSource+0x20>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e0bc      	b.n	8003c96 <HAL_TIM_ConfigClockSource+0x19a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2238      	movs	r2, #56	; 0x38
 8003b20:	2101      	movs	r1, #1
 8003b22:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2239      	movs	r2, #57	; 0x39
 8003b28:	2102      	movs	r1, #2
 8003b2a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2277      	movs	r2, #119	; 0x77
 8003b38:	4393      	bics	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4a58      	ldr	r2, [pc, #352]	; (8003ca0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2280      	movs	r2, #128	; 0x80
 8003b52:	0192      	lsls	r2, r2, #6
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d040      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0xde>
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	0192      	lsls	r2, r2, #6
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d900      	bls.n	8003b62 <HAL_TIM_ConfigClockSource+0x66>
 8003b60:	e088      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
 8003b62:	2280      	movs	r2, #128	; 0x80
 8003b64:	0152      	lsls	r2, r2, #5
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d100      	bne.n	8003b6c <HAL_TIM_ConfigClockSource+0x70>
 8003b6a:	e088      	b.n	8003c7e <HAL_TIM_ConfigClockSource+0x182>
 8003b6c:	2280      	movs	r2, #128	; 0x80
 8003b6e:	0152      	lsls	r2, r2, #5
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d900      	bls.n	8003b76 <HAL_TIM_ConfigClockSource+0x7a>
 8003b74:	e07e      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
 8003b76:	2b70      	cmp	r3, #112	; 0x70
 8003b78:	d018      	beq.n	8003bac <HAL_TIM_ConfigClockSource+0xb0>
 8003b7a:	d900      	bls.n	8003b7e <HAL_TIM_ConfigClockSource+0x82>
 8003b7c:	e07a      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
 8003b7e:	2b60      	cmp	r3, #96	; 0x60
 8003b80:	d04f      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0x126>
 8003b82:	d900      	bls.n	8003b86 <HAL_TIM_ConfigClockSource+0x8a>
 8003b84:	e076      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
 8003b86:	2b50      	cmp	r3, #80	; 0x50
 8003b88:	d03b      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x106>
 8003b8a:	d900      	bls.n	8003b8e <HAL_TIM_ConfigClockSource+0x92>
 8003b8c:	e072      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d057      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x146>
 8003b92:	d900      	bls.n	8003b96 <HAL_TIM_ConfigClockSource+0x9a>
 8003b94:	e06e      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
 8003b96:	2b30      	cmp	r3, #48	; 0x30
 8003b98:	d063      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x166>
 8003b9a:	d86b      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d060      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x166>
 8003ba0:	d868      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d05d      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x166>
 8003ba6:	2b10      	cmp	r3, #16
 8003ba8:	d05b      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x166>
 8003baa:	e063      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6899      	ldr	r1, [r3, #8]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f000 f96a 	bl	8003e94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2277      	movs	r2, #119	; 0x77
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	609a      	str	r2, [r3, #8]
      break;
 8003bd8:	e052      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6899      	ldr	r1, [r3, #8]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f000 f953 	bl	8003e94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	01c9      	lsls	r1, r1, #7
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	609a      	str	r2, [r3, #8]
      break;
 8003c00:	e03e      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6859      	ldr	r1, [r3, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	001a      	movs	r2, r3
 8003c10:	f000 f8c6 	bl	8003da0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2150      	movs	r1, #80	; 0x50
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f000 f920 	bl	8003e60 <TIM_ITRx_SetConfig>
      break;
 8003c20:	e02e      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	001a      	movs	r2, r3
 8003c30:	f000 f8e4 	bl	8003dfc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2160      	movs	r1, #96	; 0x60
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f000 f910 	bl	8003e60 <TIM_ITRx_SetConfig>
      break;
 8003c40:	e01e      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6859      	ldr	r1, [r3, #4]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	001a      	movs	r2, r3
 8003c50:	f000 f8a6 	bl	8003da0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2140      	movs	r1, #64	; 0x40
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f000 f900 	bl	8003e60 <TIM_ITRx_SetConfig>
      break;
 8003c60:	e00e      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	0010      	movs	r0, r2
 8003c6e:	f000 f8f7 	bl	8003e60 <TIM_ITRx_SetConfig>
      break;
 8003c72:	e005      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003c74:	230f      	movs	r3, #15
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
      break;
 8003c7c:	e000      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003c7e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2239      	movs	r2, #57	; 0x39
 8003c84:	2101      	movs	r1, #1
 8003c86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2238      	movs	r2, #56	; 0x38
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	5499      	strb	r1, [r3, r2]

  return status;
 8003c90:	230f      	movs	r3, #15
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	781b      	ldrb	r3, [r3, #0]
}
 8003c96:	0018      	movs	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b004      	add	sp, #16
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	ffff00ff 	.word	0xffff00ff

08003ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cac:	46c0      	nop			; (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b002      	add	sp, #8
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cbc:	46c0      	nop			; (mov r8, r8)
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b002      	add	sp, #8
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ccc:	46c0      	nop			; (mov r8, r8)
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b002      	add	sp, #8
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	05db      	lsls	r3, r3, #23
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d00b      	beq.n	8003d16 <TIM_Base_SetConfig+0x32>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a23      	ldr	r2, [pc, #140]	; (8003d90 <TIM_Base_SetConfig+0xac>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d007      	beq.n	8003d16 <TIM_Base_SetConfig+0x32>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a22      	ldr	r2, [pc, #136]	; (8003d94 <TIM_Base_SetConfig+0xb0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d003      	beq.n	8003d16 <TIM_Base_SetConfig+0x32>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a21      	ldr	r2, [pc, #132]	; (8003d98 <TIM_Base_SetConfig+0xb4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d108      	bne.n	8003d28 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2270      	movs	r2, #112	; 0x70
 8003d1a:	4393      	bics	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	2380      	movs	r3, #128	; 0x80
 8003d2c:	05db      	lsls	r3, r3, #23
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d00b      	beq.n	8003d4a <TIM_Base_SetConfig+0x66>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a16      	ldr	r2, [pc, #88]	; (8003d90 <TIM_Base_SetConfig+0xac>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d007      	beq.n	8003d4a <TIM_Base_SetConfig+0x66>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a15      	ldr	r2, [pc, #84]	; (8003d94 <TIM_Base_SetConfig+0xb0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d003      	beq.n	8003d4a <TIM_Base_SetConfig+0x66>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a14      	ldr	r2, [pc, #80]	; (8003d98 <TIM_Base_SetConfig+0xb4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d108      	bne.n	8003d5c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4a13      	ldr	r2, [pc, #76]	; (8003d9c <TIM_Base_SetConfig+0xb8>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2280      	movs	r2, #128	; 0x80
 8003d60:	4393      	bics	r3, r2
 8003d62:	001a      	movs	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	615a      	str	r2, [r3, #20]
}
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b004      	add	sp, #16
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40000400 	.word	0x40000400
 8003d94:	40010800 	.word	0x40010800
 8003d98:	40011400 	.word	0x40011400
 8003d9c:	fffffcff 	.word	0xfffffcff

08003da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	2201      	movs	r2, #1
 8003db8:	4393      	bics	r3, r2
 8003dba:	001a      	movs	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	22f0      	movs	r2, #240	; 0xf0
 8003dca:	4393      	bics	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	220a      	movs	r2, #10
 8003ddc:	4393      	bics	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	621a      	str	r2, [r3, #32]
}
 8003df4:	46c0      	nop			; (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b006      	add	sp, #24
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	4393      	bics	r3, r2
 8003e10:	001a      	movs	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	4a0d      	ldr	r2, [pc, #52]	; (8003e5c <TIM_TI2_ConfigInputStage+0x60>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	031b      	lsls	r3, r3, #12
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	22a0      	movs	r2, #160	; 0xa0
 8003e38:	4393      	bics	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	621a      	str	r2, [r3, #32]
}
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b006      	add	sp, #24
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	ffff0fff 	.word	0xffff0fff

08003e60 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2270      	movs	r2, #112	; 0x70
 8003e74:	4393      	bics	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	2207      	movs	r2, #7
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	609a      	str	r2, [r3, #8]
}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b004      	add	sp, #16
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <TIM_ETR_SetConfig+0x3c>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	021a      	lsls	r2, r3, #8
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	609a      	str	r2, [r3, #8]
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b006      	add	sp, #24
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	ffff00ff 	.word	0xffff00ff

08003ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2238      	movs	r2, #56	; 0x38
 8003ee2:	5c9b      	ldrb	r3, [r3, r2]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e047      	b.n	8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2238      	movs	r2, #56	; 0x38
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2239      	movs	r2, #57	; 0x39
 8003ef8:	2102      	movs	r1, #2
 8003efa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2270      	movs	r2, #112	; 0x70
 8003f10:	4393      	bics	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	2380      	movs	r3, #128	; 0x80
 8003f2c:	05db      	lsls	r3, r3, #23
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d00e      	beq.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d009      	beq.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a11      	ldr	r2, [pc, #68]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d004      	beq.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a10      	ldr	r2, [pc, #64]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d10c      	bne.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2280      	movs	r2, #128	; 0x80
 8003f54:	4393      	bics	r3, r2
 8003f56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2239      	movs	r2, #57	; 0x39
 8003f6e:	2101      	movs	r1, #1
 8003f70:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2238      	movs	r2, #56	; 0x38
 8003f76:	2100      	movs	r1, #0
 8003f78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b004      	add	sp, #16
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40010800 	.word	0x40010800
 8003f8c:	40011400 	.word	0x40011400

08003f90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e044      	b.n	800402c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d107      	bne.n	8003fba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2274      	movs	r2, #116	; 0x74
 8003fae:	2100      	movs	r1, #0
 8003fb0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f7fd ff39 	bl	8001e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2224      	movs	r2, #36	; 0x24
 8003fbe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2101      	movs	r1, #1
 8003fcc:	438a      	bics	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f000 fc36 	bl	8004844 <UART_SetConfig>
 8003fd8:	0003      	movs	r3, r0
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e024      	b.n	800402c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0018      	movs	r0, r3
 8003fee:	f000 fee7 	bl	8004dc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	490d      	ldr	r1, [pc, #52]	; (8004034 <HAL_UART_Init+0xa4>)
 8003ffe:	400a      	ands	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	212a      	movs	r1, #42	; 0x2a
 800400e:	438a      	bics	r2, r1
 8004010:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2101      	movs	r1, #1
 800401e:	430a      	orrs	r2, r1
 8004020:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	0018      	movs	r0, r3
 8004026:	f000 ff7f 	bl	8004f28 <UART_CheckIdleState>
 800402a:	0003      	movs	r3, r0
}
 800402c:	0018      	movs	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	b002      	add	sp, #8
 8004032:	bd80      	pop	{r7, pc}
 8004034:	ffffb7ff 	.word	0xffffb7ff

08004038 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08a      	sub	sp, #40	; 0x28
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	1dbb      	adds	r3, r7, #6
 8004046:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800404c:	2b20      	cmp	r3, #32
 800404e:	d000      	beq.n	8004052 <HAL_UART_Transmit+0x1a>
 8004050:	e095      	b.n	800417e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_UART_Transmit+0x28>
 8004058:	1dbb      	adds	r3, r7, #6
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e08d      	b.n	8004180 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	015b      	lsls	r3, r3, #5
 800406c:	429a      	cmp	r2, r3
 800406e:	d109      	bne.n	8004084 <HAL_UART_Transmit+0x4c>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d105      	bne.n	8004084 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2201      	movs	r2, #1
 800407c:	4013      	ands	r3, r2
 800407e:	d001      	beq.n	8004084 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e07d      	b.n	8004180 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2274      	movs	r2, #116	; 0x74
 8004088:	5c9b      	ldrb	r3, [r3, r2]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_UART_Transmit+0x5a>
 800408e:	2302      	movs	r3, #2
 8004090:	e076      	b.n	8004180 <HAL_UART_Transmit+0x148>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2274      	movs	r2, #116	; 0x74
 8004096:	2101      	movs	r1, #1
 8004098:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2280      	movs	r2, #128	; 0x80
 800409e:	2100      	movs	r1, #0
 80040a0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2221      	movs	r2, #33	; 0x21
 80040a6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040a8:	f7fe f846 	bl	8002138 <HAL_GetTick>
 80040ac:	0003      	movs	r3, r0
 80040ae:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	1dba      	adds	r2, r7, #6
 80040b4:	2150      	movs	r1, #80	; 0x50
 80040b6:	8812      	ldrh	r2, [r2, #0]
 80040b8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1dba      	adds	r2, r7, #6
 80040be:	2152      	movs	r1, #82	; 0x52
 80040c0:	8812      	ldrh	r2, [r2, #0]
 80040c2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	015b      	lsls	r3, r3, #5
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d108      	bne.n	80040e2 <HAL_UART_Transmit+0xaa>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d104      	bne.n	80040e2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	61bb      	str	r3, [r7, #24]
 80040e0:	e003      	b.n	80040ea <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2274      	movs	r2, #116	; 0x74
 80040ee:	2100      	movs	r1, #0
 80040f0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80040f2:	e02c      	b.n	800414e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	0013      	movs	r3, r2
 80040fe:	2200      	movs	r2, #0
 8004100:	2180      	movs	r1, #128	; 0x80
 8004102:	f000 ff59 	bl	8004fb8 <UART_WaitOnFlagUntilTimeout>
 8004106:	1e03      	subs	r3, r0, #0
 8004108:	d001      	beq.n	800410e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e038      	b.n	8004180 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10b      	bne.n	800412c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	001a      	movs	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	05d2      	lsls	r2, r2, #23
 8004120:	0dd2      	lsrs	r2, r2, #23
 8004122:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	3302      	adds	r3, #2
 8004128:	61bb      	str	r3, [r7, #24]
 800412a:	e007      	b.n	800413c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	781a      	ldrb	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	3301      	adds	r3, #1
 800413a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2252      	movs	r2, #82	; 0x52
 8004140:	5a9b      	ldrh	r3, [r3, r2]
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b299      	uxth	r1, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2252      	movs	r2, #82	; 0x52
 800414c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2252      	movs	r2, #82	; 0x52
 8004152:	5a9b      	ldrh	r3, [r3, r2]
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1cc      	bne.n	80040f4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	0013      	movs	r3, r2
 8004164:	2200      	movs	r2, #0
 8004166:	2140      	movs	r1, #64	; 0x40
 8004168:	f000 ff26 	bl	8004fb8 <UART_WaitOnFlagUntilTimeout>
 800416c:	1e03      	subs	r3, r0, #0
 800416e:	d001      	beq.n	8004174 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e005      	b.n	8004180 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	0018      	movs	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	b008      	add	sp, #32
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	1dbb      	adds	r3, r7, #6
 8004194:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800419a:	2b20      	cmp	r3, #32
 800419c:	d155      	bne.n	800424a <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_UART_Receive_IT+0x24>
 80041a4:	1dbb      	adds	r3, r7, #6
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e04d      	b.n	800424c <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	015b      	lsls	r3, r3, #5
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d109      	bne.n	80041d0 <HAL_UART_Receive_IT+0x48>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2201      	movs	r2, #1
 80041c8:	4013      	ands	r3, r2
 80041ca:	d001      	beq.n	80041d0 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e03d      	b.n	800424c <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2274      	movs	r2, #116	; 0x74
 80041d4:	5c9b      	ldrb	r3, [r3, r2]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_UART_Receive_IT+0x56>
 80041da:	2302      	movs	r3, #2
 80041dc:	e036      	b.n	800424c <HAL_UART_Receive_IT+0xc4>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2274      	movs	r2, #116	; 0x74
 80041e2:	2101      	movs	r1, #1
 80041e4:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a18      	ldr	r2, [pc, #96]	; (8004254 <HAL_UART_Receive_IT+0xcc>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d020      	beq.n	8004238 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	041b      	lsls	r3, r3, #16
 8004200:	4013      	ands	r3, r2
 8004202:	d019      	beq.n	8004238 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004204:	f3ef 8310 	mrs	r3, PRIMASK
 8004208:	613b      	str	r3, [r7, #16]
  return(result);
 800420a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	2301      	movs	r3, #1
 8004210:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f383 8810 	msr	PRIMASK, r3
}
 8004218:	46c0      	nop			; (mov r8, r8)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2180      	movs	r1, #128	; 0x80
 8004226:	04c9      	lsls	r1, r1, #19
 8004228:	430a      	orrs	r2, r1
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f383 8810 	msr	PRIMASK, r3
}
 8004236:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004238:	1dbb      	adds	r3, r7, #6
 800423a:	881a      	ldrh	r2, [r3, #0]
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	0018      	movs	r0, r3
 8004242:	f000 ff7d 	bl	8005140 <UART_Start_Receive_IT>
 8004246:	0003      	movs	r3, r0
 8004248:	e000      	b.n	800424c <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800424a:	2302      	movs	r3, #2
  }
}
 800424c:	0018      	movs	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	b008      	add	sp, #32
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40004800 	.word	0x40004800

08004258 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004258:	b590      	push	{r4, r7, lr}
 800425a:	b0ab      	sub	sp, #172	; 0xac
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	22a4      	movs	r2, #164	; 0xa4
 8004268:	18b9      	adds	r1, r7, r2
 800426a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	20a0      	movs	r0, #160	; 0xa0
 8004274:	1839      	adds	r1, r7, r0
 8004276:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	219c      	movs	r1, #156	; 0x9c
 8004280:	1879      	adds	r1, r7, r1
 8004282:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004284:	0011      	movs	r1, r2
 8004286:	18bb      	adds	r3, r7, r2
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a99      	ldr	r2, [pc, #612]	; (80044f0 <HAL_UART_IRQHandler+0x298>)
 800428c:	4013      	ands	r3, r2
 800428e:	2298      	movs	r2, #152	; 0x98
 8004290:	18bc      	adds	r4, r7, r2
 8004292:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004294:	18bb      	adds	r3, r7, r2
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d114      	bne.n	80042c6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800429c:	187b      	adds	r3, r7, r1
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2220      	movs	r2, #32
 80042a2:	4013      	ands	r3, r2
 80042a4:	d00f      	beq.n	80042c6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042a6:	183b      	adds	r3, r7, r0
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2220      	movs	r2, #32
 80042ac:	4013      	ands	r3, r2
 80042ae:	d00a      	beq.n	80042c6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d100      	bne.n	80042ba <HAL_UART_IRQHandler+0x62>
 80042b8:	e298      	b.n	80047ec <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	0010      	movs	r0, r2
 80042c2:	4798      	blx	r3
      }
      return;
 80042c4:	e292      	b.n	80047ec <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80042c6:	2398      	movs	r3, #152	; 0x98
 80042c8:	18fb      	adds	r3, r7, r3
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d100      	bne.n	80042d2 <HAL_UART_IRQHandler+0x7a>
 80042d0:	e114      	b.n	80044fc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80042d2:	239c      	movs	r3, #156	; 0x9c
 80042d4:	18fb      	adds	r3, r7, r3
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2201      	movs	r2, #1
 80042da:	4013      	ands	r3, r2
 80042dc:	d106      	bne.n	80042ec <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80042de:	23a0      	movs	r3, #160	; 0xa0
 80042e0:	18fb      	adds	r3, r7, r3
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a83      	ldr	r2, [pc, #524]	; (80044f4 <HAL_UART_IRQHandler+0x29c>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	d100      	bne.n	80042ec <HAL_UART_IRQHandler+0x94>
 80042ea:	e107      	b.n	80044fc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042ec:	23a4      	movs	r3, #164	; 0xa4
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2201      	movs	r2, #1
 80042f4:	4013      	ands	r3, r2
 80042f6:	d012      	beq.n	800431e <HAL_UART_IRQHandler+0xc6>
 80042f8:	23a0      	movs	r3, #160	; 0xa0
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	2380      	movs	r3, #128	; 0x80
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	4013      	ands	r3, r2
 8004304:	d00b      	beq.n	800431e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2201      	movs	r2, #1
 800430c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2280      	movs	r2, #128	; 0x80
 8004312:	589b      	ldr	r3, [r3, r2]
 8004314:	2201      	movs	r2, #1
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2180      	movs	r1, #128	; 0x80
 800431c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800431e:	23a4      	movs	r3, #164	; 0xa4
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2202      	movs	r2, #2
 8004326:	4013      	ands	r3, r2
 8004328:	d011      	beq.n	800434e <HAL_UART_IRQHandler+0xf6>
 800432a:	239c      	movs	r3, #156	; 0x9c
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2201      	movs	r2, #1
 8004332:	4013      	ands	r3, r2
 8004334:	d00b      	beq.n	800434e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2202      	movs	r2, #2
 800433c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2280      	movs	r2, #128	; 0x80
 8004342:	589b      	ldr	r3, [r3, r2]
 8004344:	2204      	movs	r2, #4
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2180      	movs	r1, #128	; 0x80
 800434c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800434e:	23a4      	movs	r3, #164	; 0xa4
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2204      	movs	r2, #4
 8004356:	4013      	ands	r3, r2
 8004358:	d011      	beq.n	800437e <HAL_UART_IRQHandler+0x126>
 800435a:	239c      	movs	r3, #156	; 0x9c
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2201      	movs	r2, #1
 8004362:	4013      	ands	r3, r2
 8004364:	d00b      	beq.n	800437e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2204      	movs	r2, #4
 800436c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2280      	movs	r2, #128	; 0x80
 8004372:	589b      	ldr	r3, [r3, r2]
 8004374:	2202      	movs	r2, #2
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2180      	movs	r1, #128	; 0x80
 800437c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800437e:	23a4      	movs	r3, #164	; 0xa4
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2208      	movs	r2, #8
 8004386:	4013      	ands	r3, r2
 8004388:	d017      	beq.n	80043ba <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800438a:	23a0      	movs	r3, #160	; 0xa0
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2220      	movs	r2, #32
 8004392:	4013      	ands	r3, r2
 8004394:	d105      	bne.n	80043a2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004396:	239c      	movs	r3, #156	; 0x9c
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2201      	movs	r2, #1
 800439e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043a0:	d00b      	beq.n	80043ba <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2208      	movs	r2, #8
 80043a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2280      	movs	r2, #128	; 0x80
 80043ae:	589b      	ldr	r3, [r3, r2]
 80043b0:	2208      	movs	r2, #8
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2180      	movs	r1, #128	; 0x80
 80043b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043ba:	23a4      	movs	r3, #164	; 0xa4
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	4013      	ands	r3, r2
 80043c6:	d013      	beq.n	80043f0 <HAL_UART_IRQHandler+0x198>
 80043c8:	23a0      	movs	r3, #160	; 0xa0
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	04db      	lsls	r3, r3, #19
 80043d2:	4013      	ands	r3, r2
 80043d4:	d00c      	beq.n	80043f0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2280      	movs	r2, #128	; 0x80
 80043dc:	0112      	lsls	r2, r2, #4
 80043de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2280      	movs	r2, #128	; 0x80
 80043e4:	589b      	ldr	r3, [r3, r2]
 80043e6:	2220      	movs	r2, #32
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2180      	movs	r1, #128	; 0x80
 80043ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2280      	movs	r2, #128	; 0x80
 80043f4:	589b      	ldr	r3, [r3, r2]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d100      	bne.n	80043fc <HAL_UART_IRQHandler+0x1a4>
 80043fa:	e1f9      	b.n	80047f0 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043fc:	23a4      	movs	r3, #164	; 0xa4
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2220      	movs	r2, #32
 8004404:	4013      	ands	r3, r2
 8004406:	d00e      	beq.n	8004426 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004408:	23a0      	movs	r3, #160	; 0xa0
 800440a:	18fb      	adds	r3, r7, r3
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2220      	movs	r2, #32
 8004410:	4013      	ands	r3, r2
 8004412:	d008      	beq.n	8004426 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004418:	2b00      	cmp	r3, #0
 800441a:	d004      	beq.n	8004426 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	0010      	movs	r0, r2
 8004424:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2280      	movs	r2, #128	; 0x80
 800442a:	589b      	ldr	r3, [r3, r2]
 800442c:	2194      	movs	r1, #148	; 0x94
 800442e:	187a      	adds	r2, r7, r1
 8004430:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2240      	movs	r2, #64	; 0x40
 800443a:	4013      	ands	r3, r2
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	d004      	beq.n	800444a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004440:	187b      	adds	r3, r7, r1
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2228      	movs	r2, #40	; 0x28
 8004446:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004448:	d047      	beq.n	80044da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	0018      	movs	r0, r3
 800444e:	f000 ff27 	bl	80052a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2240      	movs	r2, #64	; 0x40
 800445a:	4013      	ands	r3, r2
 800445c:	2b40      	cmp	r3, #64	; 0x40
 800445e:	d137      	bne.n	80044d0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004460:	f3ef 8310 	mrs	r3, PRIMASK
 8004464:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004468:	2090      	movs	r0, #144	; 0x90
 800446a:	183a      	adds	r2, r7, r0
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	2301      	movs	r3, #1
 8004470:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004472:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004474:	f383 8810 	msr	PRIMASK, r3
}
 8004478:	46c0      	nop			; (mov r8, r8)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2140      	movs	r1, #64	; 0x40
 8004486:	438a      	bics	r2, r1
 8004488:	609a      	str	r2, [r3, #8]
 800448a:	183b      	adds	r3, r7, r0
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004492:	f383 8810 	msr	PRIMASK, r3
}
 8004496:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449c:	2b00      	cmp	r3, #0
 800449e:	d012      	beq.n	80044c6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	4a14      	ldr	r2, [pc, #80]	; (80044f8 <HAL_UART_IRQHandler+0x2a0>)
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	0018      	movs	r0, r3
 80044ae:	f7fd ff8f 	bl	80023d0 <HAL_DMA_Abort_IT>
 80044b2:	1e03      	subs	r3, r0, #0
 80044b4:	d01a      	beq.n	80044ec <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c0:	0018      	movs	r0, r3
 80044c2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c4:	e012      	b.n	80044ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	0018      	movs	r0, r3
 80044ca:	f000 f9a7 	bl	800481c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ce:	e00d      	b.n	80044ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	0018      	movs	r0, r3
 80044d4:	f000 f9a2 	bl	800481c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d8:	e008      	b.n	80044ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	0018      	movs	r0, r3
 80044de:	f000 f99d 	bl	800481c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2280      	movs	r2, #128	; 0x80
 80044e6:	2100      	movs	r1, #0
 80044e8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80044ea:	e181      	b.n	80047f0 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ec:	46c0      	nop			; (mov r8, r8)
    return;
 80044ee:	e17f      	b.n	80047f0 <HAL_UART_IRQHandler+0x598>
 80044f0:	0000080f 	.word	0x0000080f
 80044f4:	04000120 	.word	0x04000120
 80044f8:	08005365 	.word	0x08005365

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004500:	2b01      	cmp	r3, #1
 8004502:	d000      	beq.n	8004506 <HAL_UART_IRQHandler+0x2ae>
 8004504:	e133      	b.n	800476e <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004506:	23a4      	movs	r3, #164	; 0xa4
 8004508:	18fb      	adds	r3, r7, r3
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2210      	movs	r2, #16
 800450e:	4013      	ands	r3, r2
 8004510:	d100      	bne.n	8004514 <HAL_UART_IRQHandler+0x2bc>
 8004512:	e12c      	b.n	800476e <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004514:	23a0      	movs	r3, #160	; 0xa0
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2210      	movs	r2, #16
 800451c:	4013      	ands	r3, r2
 800451e:	d100      	bne.n	8004522 <HAL_UART_IRQHandler+0x2ca>
 8004520:	e125      	b.n	800476e <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2210      	movs	r2, #16
 8004528:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2240      	movs	r2, #64	; 0x40
 8004532:	4013      	ands	r3, r2
 8004534:	2b40      	cmp	r3, #64	; 0x40
 8004536:	d000      	beq.n	800453a <HAL_UART_IRQHandler+0x2e2>
 8004538:	e09d      	b.n	8004676 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	217e      	movs	r1, #126	; 0x7e
 8004544:	187b      	adds	r3, r7, r1
 8004546:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004548:	187b      	adds	r3, r7, r1
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d100      	bne.n	8004552 <HAL_UART_IRQHandler+0x2fa>
 8004550:	e150      	b.n	80047f4 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2258      	movs	r2, #88	; 0x58
 8004556:	5a9b      	ldrh	r3, [r3, r2]
 8004558:	187a      	adds	r2, r7, r1
 800455a:	8812      	ldrh	r2, [r2, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d300      	bcc.n	8004562 <HAL_UART_IRQHandler+0x30a>
 8004560:	e148      	b.n	80047f4 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	187a      	adds	r2, r7, r1
 8004566:	215a      	movs	r1, #90	; 0x5a
 8004568:	8812      	ldrh	r2, [r2, #0]
 800456a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2220      	movs	r2, #32
 8004576:	4013      	ands	r3, r2
 8004578:	d16e      	bne.n	8004658 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800457a:	f3ef 8310 	mrs	r3, PRIMASK
 800457e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004582:	67bb      	str	r3, [r7, #120]	; 0x78
 8004584:	2301      	movs	r3, #1
 8004586:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458a:	f383 8810 	msr	PRIMASK, r3
}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	499a      	ldr	r1, [pc, #616]	; (8004804 <HAL_UART_IRQHandler+0x5ac>)
 800459c:	400a      	ands	r2, r1
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a6:	f383 8810 	msr	PRIMASK, r3
}
 80045aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ac:	f3ef 8310 	mrs	r3, PRIMASK
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80045b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b4:	677b      	str	r3, [r7, #116]	; 0x74
 80045b6:	2301      	movs	r3, #1
 80045b8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045bc:	f383 8810 	msr	PRIMASK, r3
}
 80045c0:	46c0      	nop			; (mov r8, r8)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2101      	movs	r1, #1
 80045ce:	438a      	bics	r2, r1
 80045d0:	609a      	str	r2, [r3, #8]
 80045d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045d4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045d8:	f383 8810 	msr	PRIMASK, r3
}
 80045dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045de:	f3ef 8310 	mrs	r3, PRIMASK
 80045e2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80045e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045e6:	673b      	str	r3, [r7, #112]	; 0x70
 80045e8:	2301      	movs	r3, #1
 80045ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ee:	f383 8810 	msr	PRIMASK, r3
}
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2140      	movs	r1, #64	; 0x40
 8004600:	438a      	bics	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
 8004604:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004606:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800460a:	f383 8810 	msr	PRIMASK, r3
}
 800460e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800461c:	f3ef 8310 	mrs	r3, PRIMASK
 8004620:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004622:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004624:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004626:	2301      	movs	r3, #1
 8004628:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800462a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800462c:	f383 8810 	msr	PRIMASK, r3
}
 8004630:	46c0      	nop			; (mov r8, r8)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2110      	movs	r1, #16
 800463e:	438a      	bics	r2, r1
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004644:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004648:	f383 8810 	msr	PRIMASK, r3
}
 800464c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	0018      	movs	r0, r3
 8004654:	f7fd fe7c 	bl	8002350 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2258      	movs	r2, #88	; 0x58
 800465c:	5a9a      	ldrh	r2, [r3, r2]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	215a      	movs	r1, #90	; 0x5a
 8004662:	5a5b      	ldrh	r3, [r3, r1]
 8004664:	b29b      	uxth	r3, r3
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	b29a      	uxth	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0011      	movs	r1, r2
 800466e:	0018      	movs	r0, r3
 8004670:	f000 f8dc 	bl	800482c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004674:	e0be      	b.n	80047f4 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2258      	movs	r2, #88	; 0x58
 800467a:	5a99      	ldrh	r1, [r3, r2]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	225a      	movs	r2, #90	; 0x5a
 8004680:	5a9b      	ldrh	r3, [r3, r2]
 8004682:	b29a      	uxth	r2, r3
 8004684:	208e      	movs	r0, #142	; 0x8e
 8004686:	183b      	adds	r3, r7, r0
 8004688:	1a8a      	subs	r2, r1, r2
 800468a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	225a      	movs	r2, #90	; 0x5a
 8004690:	5a9b      	ldrh	r3, [r3, r2]
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d100      	bne.n	800469a <HAL_UART_IRQHandler+0x442>
 8004698:	e0ae      	b.n	80047f8 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 800469a:	183b      	adds	r3, r7, r0
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d100      	bne.n	80046a4 <HAL_UART_IRQHandler+0x44c>
 80046a2:	e0a9      	b.n	80047f8 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a4:	f3ef 8310 	mrs	r3, PRIMASK
 80046a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80046aa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ac:	2488      	movs	r4, #136	; 0x88
 80046ae:	193a      	adds	r2, r7, r4
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	2301      	movs	r3, #1
 80046b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f383 8810 	msr	PRIMASK, r3
}
 80046bc:	46c0      	nop			; (mov r8, r8)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	494f      	ldr	r1, [pc, #316]	; (8004808 <HAL_UART_IRQHandler+0x5b0>)
 80046ca:	400a      	ands	r2, r1
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	193b      	adds	r3, r7, r4
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f383 8810 	msr	PRIMASK, r3
}
 80046da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046dc:	f3ef 8310 	mrs	r3, PRIMASK
 80046e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80046e2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e4:	2484      	movs	r4, #132	; 0x84
 80046e6:	193a      	adds	r2, r7, r4
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	2301      	movs	r3, #1
 80046ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	f383 8810 	msr	PRIMASK, r3
}
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2101      	movs	r1, #1
 8004702:	438a      	bics	r2, r1
 8004704:	609a      	str	r2, [r3, #8]
 8004706:	193b      	adds	r3, r7, r4
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	f383 8810 	msr	PRIMASK, r3
}
 8004712:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004726:	f3ef 8310 	mrs	r3, PRIMASK
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800472e:	2480      	movs	r4, #128	; 0x80
 8004730:	193a      	adds	r2, r7, r4
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	2301      	movs	r3, #1
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	f383 8810 	msr	PRIMASK, r3
}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2110      	movs	r1, #16
 800474c:	438a      	bics	r2, r1
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	193b      	adds	r3, r7, r4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	f383 8810 	msr	PRIMASK, r3
}
 800475c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800475e:	183b      	adds	r3, r7, r0
 8004760:	881a      	ldrh	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0011      	movs	r1, r2
 8004766:	0018      	movs	r0, r3
 8004768:	f000 f860 	bl	800482c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800476c:	e044      	b.n	80047f8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800476e:	23a4      	movs	r3, #164	; 0xa4
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	035b      	lsls	r3, r3, #13
 8004778:	4013      	ands	r3, r2
 800477a:	d010      	beq.n	800479e <HAL_UART_IRQHandler+0x546>
 800477c:	239c      	movs	r3, #156	; 0x9c
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	2380      	movs	r3, #128	; 0x80
 8004784:	03db      	lsls	r3, r3, #15
 8004786:	4013      	ands	r3, r2
 8004788:	d009      	beq.n	800479e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2280      	movs	r2, #128	; 0x80
 8004790:	0352      	lsls	r2, r2, #13
 8004792:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	0018      	movs	r0, r3
 8004798:	f000 ff8e 	bl	80056b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800479c:	e02f      	b.n	80047fe <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800479e:	23a4      	movs	r3, #164	; 0xa4
 80047a0:	18fb      	adds	r3, r7, r3
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2280      	movs	r2, #128	; 0x80
 80047a6:	4013      	ands	r3, r2
 80047a8:	d00f      	beq.n	80047ca <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80047aa:	23a0      	movs	r3, #160	; 0xa0
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2280      	movs	r2, #128	; 0x80
 80047b2:	4013      	ands	r3, r2
 80047b4:	d009      	beq.n	80047ca <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01e      	beq.n	80047fc <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	0010      	movs	r0, r2
 80047c6:	4798      	blx	r3
    }
    return;
 80047c8:	e018      	b.n	80047fc <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047ca:	23a4      	movs	r3, #164	; 0xa4
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2240      	movs	r2, #64	; 0x40
 80047d2:	4013      	ands	r3, r2
 80047d4:	d013      	beq.n	80047fe <HAL_UART_IRQHandler+0x5a6>
 80047d6:	23a0      	movs	r3, #160	; 0xa0
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2240      	movs	r2, #64	; 0x40
 80047de:	4013      	ands	r3, r2
 80047e0:	d00d      	beq.n	80047fe <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f000 fdd4 	bl	8005392 <UART_EndTransmit_IT>
    return;
 80047ea:	e008      	b.n	80047fe <HAL_UART_IRQHandler+0x5a6>
      return;
 80047ec:	46c0      	nop			; (mov r8, r8)
 80047ee:	e006      	b.n	80047fe <HAL_UART_IRQHandler+0x5a6>
    return;
 80047f0:	46c0      	nop			; (mov r8, r8)
 80047f2:	e004      	b.n	80047fe <HAL_UART_IRQHandler+0x5a6>
      return;
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	e002      	b.n	80047fe <HAL_UART_IRQHandler+0x5a6>
      return;
 80047f8:	46c0      	nop			; (mov r8, r8)
 80047fa:	e000      	b.n	80047fe <HAL_UART_IRQHandler+0x5a6>
    return;
 80047fc:	46c0      	nop			; (mov r8, r8)
  }

}
 80047fe:	46bd      	mov	sp, r7
 8004800:	b02b      	add	sp, #172	; 0xac
 8004802:	bd90      	pop	{r4, r7, pc}
 8004804:	fffffeff 	.word	0xfffffeff
 8004808:	fffffedf 	.word	0xfffffedf

0800480c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	46bd      	mov	sp, r7
 8004818:	b002      	add	sp, #8
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	46bd      	mov	sp, r7
 8004828:	b002      	add	sp, #8
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	000a      	movs	r2, r1
 8004836:	1cbb      	adds	r3, r7, #2
 8004838:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	46bd      	mov	sp, r7
 800483e:	b002      	add	sp, #8
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004844:	b5b0      	push	{r4, r5, r7, lr}
 8004846:	b08e      	sub	sp, #56	; 0x38
 8004848:	af00      	add	r7, sp, #0
 800484a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800484c:	231a      	movs	r3, #26
 800484e:	2218      	movs	r2, #24
 8004850:	4694      	mov	ip, r2
 8004852:	44bc      	add	ip, r7
 8004854:	4463      	add	r3, ip
 8004856:	2200      	movs	r2, #0
 8004858:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	431a      	orrs	r2, r3
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	431a      	orrs	r2, r3
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	4313      	orrs	r3, r2
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4ab0      	ldr	r2, [pc, #704]	; (8004b3c <UART_SetConfig+0x2f8>)
 800487a:	4013      	ands	r3, r2
 800487c:	0019      	movs	r1, r3
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004884:	430a      	orrs	r2, r1
 8004886:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	4aac      	ldr	r2, [pc, #688]	; (8004b40 <UART_SetConfig+0x2fc>)
 8004890:	4013      	ands	r3, r2
 8004892:	0019      	movs	r1, r3
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4aa6      	ldr	r2, [pc, #664]	; (8004b44 <UART_SetConfig+0x300>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048b6:	4313      	orrs	r3, r2
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4aa1      	ldr	r2, [pc, #644]	; (8004b48 <UART_SetConfig+0x304>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	0019      	movs	r1, r3
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048cc:	430a      	orrs	r2, r1
 80048ce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a9d      	ldr	r2, [pc, #628]	; (8004b4c <UART_SetConfig+0x308>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d136      	bne.n	8004948 <UART_SetConfig+0x104>
 80048da:	4b9d      	ldr	r3, [pc, #628]	; (8004b50 <UART_SetConfig+0x30c>)
 80048dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048de:	2203      	movs	r2, #3
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d020      	beq.n	8004928 <UART_SetConfig+0xe4>
 80048e6:	d827      	bhi.n	8004938 <UART_SetConfig+0xf4>
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d00d      	beq.n	8004908 <UART_SetConfig+0xc4>
 80048ec:	d824      	bhi.n	8004938 <UART_SetConfig+0xf4>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <UART_SetConfig+0xb4>
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d010      	beq.n	8004918 <UART_SetConfig+0xd4>
 80048f6:	e01f      	b.n	8004938 <UART_SetConfig+0xf4>
 80048f8:	231b      	movs	r3, #27
 80048fa:	2218      	movs	r2, #24
 80048fc:	4694      	mov	ip, r2
 80048fe:	44bc      	add	ip, r7
 8004900:	4463      	add	r3, ip
 8004902:	2201      	movs	r2, #1
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	e0c5      	b.n	8004a94 <UART_SetConfig+0x250>
 8004908:	231b      	movs	r3, #27
 800490a:	2218      	movs	r2, #24
 800490c:	4694      	mov	ip, r2
 800490e:	44bc      	add	ip, r7
 8004910:	4463      	add	r3, ip
 8004912:	2202      	movs	r2, #2
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	e0bd      	b.n	8004a94 <UART_SetConfig+0x250>
 8004918:	231b      	movs	r3, #27
 800491a:	2218      	movs	r2, #24
 800491c:	4694      	mov	ip, r2
 800491e:	44bc      	add	ip, r7
 8004920:	4463      	add	r3, ip
 8004922:	2204      	movs	r2, #4
 8004924:	701a      	strb	r2, [r3, #0]
 8004926:	e0b5      	b.n	8004a94 <UART_SetConfig+0x250>
 8004928:	231b      	movs	r3, #27
 800492a:	2218      	movs	r2, #24
 800492c:	4694      	mov	ip, r2
 800492e:	44bc      	add	ip, r7
 8004930:	4463      	add	r3, ip
 8004932:	2208      	movs	r2, #8
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	e0ad      	b.n	8004a94 <UART_SetConfig+0x250>
 8004938:	231b      	movs	r3, #27
 800493a:	2218      	movs	r2, #24
 800493c:	4694      	mov	ip, r2
 800493e:	44bc      	add	ip, r7
 8004940:	4463      	add	r3, ip
 8004942:	2210      	movs	r2, #16
 8004944:	701a      	strb	r2, [r3, #0]
 8004946:	e0a5      	b.n	8004a94 <UART_SetConfig+0x250>
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a81      	ldr	r2, [pc, #516]	; (8004b54 <UART_SetConfig+0x310>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d136      	bne.n	80049c0 <UART_SetConfig+0x17c>
 8004952:	4b7f      	ldr	r3, [pc, #508]	; (8004b50 <UART_SetConfig+0x30c>)
 8004954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004956:	220c      	movs	r2, #12
 8004958:	4013      	ands	r3, r2
 800495a:	2b0c      	cmp	r3, #12
 800495c:	d020      	beq.n	80049a0 <UART_SetConfig+0x15c>
 800495e:	d827      	bhi.n	80049b0 <UART_SetConfig+0x16c>
 8004960:	2b08      	cmp	r3, #8
 8004962:	d00d      	beq.n	8004980 <UART_SetConfig+0x13c>
 8004964:	d824      	bhi.n	80049b0 <UART_SetConfig+0x16c>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <UART_SetConfig+0x12c>
 800496a:	2b04      	cmp	r3, #4
 800496c:	d010      	beq.n	8004990 <UART_SetConfig+0x14c>
 800496e:	e01f      	b.n	80049b0 <UART_SetConfig+0x16c>
 8004970:	231b      	movs	r3, #27
 8004972:	2218      	movs	r2, #24
 8004974:	4694      	mov	ip, r2
 8004976:	44bc      	add	ip, r7
 8004978:	4463      	add	r3, ip
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	e089      	b.n	8004a94 <UART_SetConfig+0x250>
 8004980:	231b      	movs	r3, #27
 8004982:	2218      	movs	r2, #24
 8004984:	4694      	mov	ip, r2
 8004986:	44bc      	add	ip, r7
 8004988:	4463      	add	r3, ip
 800498a:	2202      	movs	r2, #2
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	e081      	b.n	8004a94 <UART_SetConfig+0x250>
 8004990:	231b      	movs	r3, #27
 8004992:	2218      	movs	r2, #24
 8004994:	4694      	mov	ip, r2
 8004996:	44bc      	add	ip, r7
 8004998:	4463      	add	r3, ip
 800499a:	2204      	movs	r2, #4
 800499c:	701a      	strb	r2, [r3, #0]
 800499e:	e079      	b.n	8004a94 <UART_SetConfig+0x250>
 80049a0:	231b      	movs	r3, #27
 80049a2:	2218      	movs	r2, #24
 80049a4:	4694      	mov	ip, r2
 80049a6:	44bc      	add	ip, r7
 80049a8:	4463      	add	r3, ip
 80049aa:	2208      	movs	r2, #8
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	e071      	b.n	8004a94 <UART_SetConfig+0x250>
 80049b0:	231b      	movs	r3, #27
 80049b2:	2218      	movs	r2, #24
 80049b4:	4694      	mov	ip, r2
 80049b6:	44bc      	add	ip, r7
 80049b8:	4463      	add	r3, ip
 80049ba:	2210      	movs	r2, #16
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	e069      	b.n	8004a94 <UART_SetConfig+0x250>
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a64      	ldr	r2, [pc, #400]	; (8004b58 <UART_SetConfig+0x314>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d107      	bne.n	80049da <UART_SetConfig+0x196>
 80049ca:	231b      	movs	r3, #27
 80049cc:	2218      	movs	r2, #24
 80049ce:	4694      	mov	ip, r2
 80049d0:	44bc      	add	ip, r7
 80049d2:	4463      	add	r3, ip
 80049d4:	2200      	movs	r2, #0
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	e05c      	b.n	8004a94 <UART_SetConfig+0x250>
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a5f      	ldr	r2, [pc, #380]	; (8004b5c <UART_SetConfig+0x318>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d107      	bne.n	80049f4 <UART_SetConfig+0x1b0>
 80049e4:	231b      	movs	r3, #27
 80049e6:	2218      	movs	r2, #24
 80049e8:	4694      	mov	ip, r2
 80049ea:	44bc      	add	ip, r7
 80049ec:	4463      	add	r3, ip
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	e04f      	b.n	8004a94 <UART_SetConfig+0x250>
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a52      	ldr	r2, [pc, #328]	; (8004b44 <UART_SetConfig+0x300>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d143      	bne.n	8004a86 <UART_SetConfig+0x242>
 80049fe:	4b54      	ldr	r3, [pc, #336]	; (8004b50 <UART_SetConfig+0x30c>)
 8004a00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a02:	23c0      	movs	r3, #192	; 0xc0
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	4013      	ands	r3, r2
 8004a08:	22c0      	movs	r2, #192	; 0xc0
 8004a0a:	0112      	lsls	r2, r2, #4
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d02a      	beq.n	8004a66 <UART_SetConfig+0x222>
 8004a10:	22c0      	movs	r2, #192	; 0xc0
 8004a12:	0112      	lsls	r2, r2, #4
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d82e      	bhi.n	8004a76 <UART_SetConfig+0x232>
 8004a18:	2280      	movs	r2, #128	; 0x80
 8004a1a:	0112      	lsls	r2, r2, #4
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d012      	beq.n	8004a46 <UART_SetConfig+0x202>
 8004a20:	2280      	movs	r2, #128	; 0x80
 8004a22:	0112      	lsls	r2, r2, #4
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d826      	bhi.n	8004a76 <UART_SetConfig+0x232>
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d004      	beq.n	8004a36 <UART_SetConfig+0x1f2>
 8004a2c:	2280      	movs	r2, #128	; 0x80
 8004a2e:	00d2      	lsls	r2, r2, #3
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d010      	beq.n	8004a56 <UART_SetConfig+0x212>
 8004a34:	e01f      	b.n	8004a76 <UART_SetConfig+0x232>
 8004a36:	231b      	movs	r3, #27
 8004a38:	2218      	movs	r2, #24
 8004a3a:	4694      	mov	ip, r2
 8004a3c:	44bc      	add	ip, r7
 8004a3e:	4463      	add	r3, ip
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	e026      	b.n	8004a94 <UART_SetConfig+0x250>
 8004a46:	231b      	movs	r3, #27
 8004a48:	2218      	movs	r2, #24
 8004a4a:	4694      	mov	ip, r2
 8004a4c:	44bc      	add	ip, r7
 8004a4e:	4463      	add	r3, ip
 8004a50:	2202      	movs	r2, #2
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	e01e      	b.n	8004a94 <UART_SetConfig+0x250>
 8004a56:	231b      	movs	r3, #27
 8004a58:	2218      	movs	r2, #24
 8004a5a:	4694      	mov	ip, r2
 8004a5c:	44bc      	add	ip, r7
 8004a5e:	4463      	add	r3, ip
 8004a60:	2204      	movs	r2, #4
 8004a62:	701a      	strb	r2, [r3, #0]
 8004a64:	e016      	b.n	8004a94 <UART_SetConfig+0x250>
 8004a66:	231b      	movs	r3, #27
 8004a68:	2218      	movs	r2, #24
 8004a6a:	4694      	mov	ip, r2
 8004a6c:	44bc      	add	ip, r7
 8004a6e:	4463      	add	r3, ip
 8004a70:	2208      	movs	r2, #8
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	e00e      	b.n	8004a94 <UART_SetConfig+0x250>
 8004a76:	231b      	movs	r3, #27
 8004a78:	2218      	movs	r2, #24
 8004a7a:	4694      	mov	ip, r2
 8004a7c:	44bc      	add	ip, r7
 8004a7e:	4463      	add	r3, ip
 8004a80:	2210      	movs	r2, #16
 8004a82:	701a      	strb	r2, [r3, #0]
 8004a84:	e006      	b.n	8004a94 <UART_SetConfig+0x250>
 8004a86:	231b      	movs	r3, #27
 8004a88:	2218      	movs	r2, #24
 8004a8a:	4694      	mov	ip, r2
 8004a8c:	44bc      	add	ip, r7
 8004a8e:	4463      	add	r3, ip
 8004a90:	2210      	movs	r2, #16
 8004a92:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a2a      	ldr	r2, [pc, #168]	; (8004b44 <UART_SetConfig+0x300>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d000      	beq.n	8004aa0 <UART_SetConfig+0x25c>
 8004a9e:	e09e      	b.n	8004bde <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004aa0:	231b      	movs	r3, #27
 8004aa2:	2218      	movs	r2, #24
 8004aa4:	4694      	mov	ip, r2
 8004aa6:	44bc      	add	ip, r7
 8004aa8:	4463      	add	r3, ip
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d01d      	beq.n	8004aec <UART_SetConfig+0x2a8>
 8004ab0:	dc20      	bgt.n	8004af4 <UART_SetConfig+0x2b0>
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d015      	beq.n	8004ae2 <UART_SetConfig+0x29e>
 8004ab6:	dc1d      	bgt.n	8004af4 <UART_SetConfig+0x2b0>
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <UART_SetConfig+0x27e>
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d005      	beq.n	8004acc <UART_SetConfig+0x288>
 8004ac0:	e018      	b.n	8004af4 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac2:	f7fe fc6d 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004aca:	e01d      	b.n	8004b08 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004acc:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <UART_SetConfig+0x30c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2210      	movs	r2, #16
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d002      	beq.n	8004adc <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004ad6:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <UART_SetConfig+0x31c>)
 8004ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ada:	e015      	b.n	8004b08 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8004adc:	4b21      	ldr	r3, [pc, #132]	; (8004b64 <UART_SetConfig+0x320>)
 8004ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ae0:	e012      	b.n	8004b08 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ae2:	f7fe fbad 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 8004ae6:	0003      	movs	r3, r0
 8004ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004aea:	e00d      	b.n	8004b08 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004af2:	e009      	b.n	8004b08 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004af8:	231a      	movs	r3, #26
 8004afa:	2218      	movs	r2, #24
 8004afc:	4694      	mov	ip, r2
 8004afe:	44bc      	add	ip, r7
 8004b00:	4463      	add	r3, ip
 8004b02:	2201      	movs	r2, #1
 8004b04:	701a      	strb	r2, [r3, #0]
        break;
 8004b06:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d100      	bne.n	8004b10 <UART_SetConfig+0x2cc>
 8004b0e:	e13c      	b.n	8004d8a <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	0013      	movs	r3, r2
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	189b      	adds	r3, r3, r2
 8004b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d305      	bcc.n	8004b2c <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d91d      	bls.n	8004b68 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8004b2c:	231a      	movs	r3, #26
 8004b2e:	2218      	movs	r2, #24
 8004b30:	4694      	mov	ip, r2
 8004b32:	44bc      	add	ip, r7
 8004b34:	4463      	add	r3, ip
 8004b36:	2201      	movs	r2, #1
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	e126      	b.n	8004d8a <UART_SetConfig+0x546>
 8004b3c:	efff69f3 	.word	0xefff69f3
 8004b40:	ffffcfff 	.word	0xffffcfff
 8004b44:	40004800 	.word	0x40004800
 8004b48:	fffff4ff 	.word	0xfffff4ff
 8004b4c:	40013800 	.word	0x40013800
 8004b50:	40021000 	.word	0x40021000
 8004b54:	40004400 	.word	0x40004400
 8004b58:	40004c00 	.word	0x40004c00
 8004b5c:	40005000 	.word	0x40005000
 8004b60:	003d0900 	.word	0x003d0900
 8004b64:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	6939      	ldr	r1, [r7, #16]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	000b      	movs	r3, r1
 8004b76:	0e1b      	lsrs	r3, r3, #24
 8004b78:	0010      	movs	r0, r2
 8004b7a:	0205      	lsls	r5, r0, #8
 8004b7c:	431d      	orrs	r5, r3
 8004b7e:	000b      	movs	r3, r1
 8004b80:	021c      	lsls	r4, r3, #8
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	68b8      	ldr	r0, [r7, #8]
 8004b90:	68f9      	ldr	r1, [r7, #12]
 8004b92:	1900      	adds	r0, r0, r4
 8004b94:	4169      	adcs	r1, r5
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	607b      	str	r3, [r7, #4]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f7fb fc38 	bl	8000418 <__aeabi_uldivmod>
 8004ba8:	0002      	movs	r2, r0
 8004baa:	000b      	movs	r3, r1
 8004bac:	0013      	movs	r3, r2
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bb2:	23c0      	movs	r3, #192	; 0xc0
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d309      	bcc.n	8004bce <UART_SetConfig+0x38a>
 8004bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	035b      	lsls	r3, r3, #13
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d204      	bcs.n	8004bce <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bca:	60da      	str	r2, [r3, #12]
 8004bcc:	e0dd      	b.n	8004d8a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004bce:	231a      	movs	r3, #26
 8004bd0:	2218      	movs	r2, #24
 8004bd2:	4694      	mov	ip, r2
 8004bd4:	44bc      	add	ip, r7
 8004bd6:	4463      	add	r3, ip
 8004bd8:	2201      	movs	r2, #1
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	e0d5      	b.n	8004d8a <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	69da      	ldr	r2, [r3, #28]
 8004be2:	2380      	movs	r3, #128	; 0x80
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d000      	beq.n	8004bec <UART_SetConfig+0x3a8>
 8004bea:	e074      	b.n	8004cd6 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8004bec:	231b      	movs	r3, #27
 8004bee:	2218      	movs	r2, #24
 8004bf0:	4694      	mov	ip, r2
 8004bf2:	44bc      	add	ip, r7
 8004bf4:	4463      	add	r3, ip
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d822      	bhi.n	8004c42 <UART_SetConfig+0x3fe>
 8004bfc:	009a      	lsls	r2, r3, #2
 8004bfe:	4b6b      	ldr	r3, [pc, #428]	; (8004dac <UART_SetConfig+0x568>)
 8004c00:	18d3      	adds	r3, r2, r3
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c06:	f7fe fbcb 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c0e:	e022      	b.n	8004c56 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c10:	f7fe fbdc 	bl	80033cc <HAL_RCC_GetPCLK2Freq>
 8004c14:	0003      	movs	r3, r0
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c18:	e01d      	b.n	8004c56 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c1a:	4b65      	ldr	r3, [pc, #404]	; (8004db0 <UART_SetConfig+0x56c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2210      	movs	r2, #16
 8004c20:	4013      	ands	r3, r2
 8004c22:	d002      	beq.n	8004c2a <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004c24:	4b63      	ldr	r3, [pc, #396]	; (8004db4 <UART_SetConfig+0x570>)
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c28:	e015      	b.n	8004c56 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8004c2a:	4b63      	ldr	r3, [pc, #396]	; (8004db8 <UART_SetConfig+0x574>)
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c2e:	e012      	b.n	8004c56 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c30:	f7fe fb06 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 8004c34:	0003      	movs	r3, r0
 8004c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c38:	e00d      	b.n	8004c56 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c40:	e009      	b.n	8004c56 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004c46:	231a      	movs	r3, #26
 8004c48:	2218      	movs	r2, #24
 8004c4a:	4694      	mov	ip, r2
 8004c4c:	44bc      	add	ip, r7
 8004c4e:	4463      	add	r3, ip
 8004c50:	2201      	movs	r2, #1
 8004c52:	701a      	strb	r2, [r3, #0]
        break;
 8004c54:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d100      	bne.n	8004c5e <UART_SetConfig+0x41a>
 8004c5c:	e095      	b.n	8004d8a <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c60:	005a      	lsls	r2, r3, #1
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	18d2      	adds	r2, r2, r3
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	0019      	movs	r1, r3
 8004c70:	0010      	movs	r0, r2
 8004c72:	f7fb fa5b 	bl	800012c <__udivsi3>
 8004c76:	0003      	movs	r3, r0
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	2b0f      	cmp	r3, #15
 8004c80:	d921      	bls.n	8004cc6 <UART_SetConfig+0x482>
 8004c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	025b      	lsls	r3, r3, #9
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d21c      	bcs.n	8004cc6 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	200e      	movs	r0, #14
 8004c92:	2418      	movs	r4, #24
 8004c94:	193b      	adds	r3, r7, r4
 8004c96:	181b      	adds	r3, r3, r0
 8004c98:	210f      	movs	r1, #15
 8004c9a:	438a      	bics	r2, r1
 8004c9c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	085b      	lsrs	r3, r3, #1
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2207      	movs	r2, #7
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	b299      	uxth	r1, r3
 8004caa:	193b      	adds	r3, r7, r4
 8004cac:	181b      	adds	r3, r3, r0
 8004cae:	193a      	adds	r2, r7, r4
 8004cb0:	1812      	adds	r2, r2, r0
 8004cb2:	8812      	ldrh	r2, [r2, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	193a      	adds	r2, r7, r4
 8004cbe:	1812      	adds	r2, r2, r0
 8004cc0:	8812      	ldrh	r2, [r2, #0]
 8004cc2:	60da      	str	r2, [r3, #12]
 8004cc4:	e061      	b.n	8004d8a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004cc6:	231a      	movs	r3, #26
 8004cc8:	2218      	movs	r2, #24
 8004cca:	4694      	mov	ip, r2
 8004ccc:	44bc      	add	ip, r7
 8004cce:	4463      	add	r3, ip
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	701a      	strb	r2, [r3, #0]
 8004cd4:	e059      	b.n	8004d8a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cd6:	231b      	movs	r3, #27
 8004cd8:	2218      	movs	r2, #24
 8004cda:	4694      	mov	ip, r2
 8004cdc:	44bc      	add	ip, r7
 8004cde:	4463      	add	r3, ip
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	d822      	bhi.n	8004d2c <UART_SetConfig+0x4e8>
 8004ce6:	009a      	lsls	r2, r3, #2
 8004ce8:	4b34      	ldr	r3, [pc, #208]	; (8004dbc <UART_SetConfig+0x578>)
 8004cea:	18d3      	adds	r3, r2, r3
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf0:	f7fe fb56 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cf8:	e022      	b.n	8004d40 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cfa:	f7fe fb67 	bl	80033cc <HAL_RCC_GetPCLK2Freq>
 8004cfe:	0003      	movs	r3, r0
 8004d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d02:	e01d      	b.n	8004d40 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d04:	4b2a      	ldr	r3, [pc, #168]	; (8004db0 <UART_SetConfig+0x56c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2210      	movs	r2, #16
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d002      	beq.n	8004d14 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004d0e:	4b29      	ldr	r3, [pc, #164]	; (8004db4 <UART_SetConfig+0x570>)
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d12:	e015      	b.n	8004d40 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8004d14:	4b28      	ldr	r3, [pc, #160]	; (8004db8 <UART_SetConfig+0x574>)
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d18:	e012      	b.n	8004d40 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d1a:	f7fe fa91 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 8004d1e:	0003      	movs	r3, r0
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d22:	e00d      	b.n	8004d40 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d24:	2380      	movs	r3, #128	; 0x80
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d2a:	e009      	b.n	8004d40 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004d30:	231a      	movs	r3, #26
 8004d32:	2218      	movs	r2, #24
 8004d34:	4694      	mov	ip, r2
 8004d36:	44bc      	add	ip, r7
 8004d38:	4463      	add	r3, ip
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	701a      	strb	r2, [r3, #0]
        break;
 8004d3e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d021      	beq.n	8004d8a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	085a      	lsrs	r2, r3, #1
 8004d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4e:	18d2      	adds	r2, r2, r3
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	0019      	movs	r1, r3
 8004d56:	0010      	movs	r0, r2
 8004d58:	f7fb f9e8 	bl	800012c <__udivsi3>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	2b0f      	cmp	r3, #15
 8004d66:	d909      	bls.n	8004d7c <UART_SetConfig+0x538>
 8004d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d6a:	2380      	movs	r3, #128	; 0x80
 8004d6c:	025b      	lsls	r3, r3, #9
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d204      	bcs.n	8004d7c <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d78:	60da      	str	r2, [r3, #12]
 8004d7a:	e006      	b.n	8004d8a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004d7c:	231a      	movs	r3, #26
 8004d7e:	2218      	movs	r2, #24
 8004d80:	4694      	mov	ip, r2
 8004d82:	44bc      	add	ip, r7
 8004d84:	4463      	add	r3, ip
 8004d86:	2201      	movs	r2, #1
 8004d88:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2200      	movs	r2, #0
 8004d94:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d96:	231a      	movs	r3, #26
 8004d98:	2218      	movs	r2, #24
 8004d9a:	4694      	mov	ip, r2
 8004d9c:	44bc      	add	ip, r7
 8004d9e:	4463      	add	r3, ip
 8004da0:	781b      	ldrb	r3, [r3, #0]
}
 8004da2:	0018      	movs	r0, r3
 8004da4:	46bd      	mov	sp, r7
 8004da6:	b00e      	add	sp, #56	; 0x38
 8004da8:	bdb0      	pop	{r4, r5, r7, pc}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	08006040 	.word	0x08006040
 8004db0:	40021000 	.word	0x40021000
 8004db4:	003d0900 	.word	0x003d0900
 8004db8:	00f42400 	.word	0x00f42400
 8004dbc:	08006064 	.word	0x08006064

08004dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	2201      	movs	r2, #1
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d00b      	beq.n	8004dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	4a4a      	ldr	r2, [pc, #296]	; (8004f04 <UART_AdvFeatureConfig+0x144>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	0019      	movs	r1, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2202      	movs	r2, #2
 8004df0:	4013      	ands	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	4a43      	ldr	r2, [pc, #268]	; (8004f08 <UART_AdvFeatureConfig+0x148>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	0019      	movs	r1, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	2204      	movs	r2, #4
 8004e12:	4013      	ands	r3, r2
 8004e14:	d00b      	beq.n	8004e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4a3b      	ldr	r2, [pc, #236]	; (8004f0c <UART_AdvFeatureConfig+0x14c>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	0019      	movs	r1, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	2208      	movs	r2, #8
 8004e34:	4013      	ands	r3, r2
 8004e36:	d00b      	beq.n	8004e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	4a34      	ldr	r2, [pc, #208]	; (8004f10 <UART_AdvFeatureConfig+0x150>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	0019      	movs	r1, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	2210      	movs	r2, #16
 8004e56:	4013      	ands	r3, r2
 8004e58:	d00b      	beq.n	8004e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	4a2c      	ldr	r2, [pc, #176]	; (8004f14 <UART_AdvFeatureConfig+0x154>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	0019      	movs	r1, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	2220      	movs	r2, #32
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d00b      	beq.n	8004e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	4a25      	ldr	r2, [pc, #148]	; (8004f18 <UART_AdvFeatureConfig+0x158>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	0019      	movs	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	2240      	movs	r2, #64	; 0x40
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d01d      	beq.n	8004eda <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <UART_AdvFeatureConfig+0x15c>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	0019      	movs	r1, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eba:	2380      	movs	r3, #128	; 0x80
 8004ebc:	035b      	lsls	r3, r3, #13
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d10b      	bne.n	8004eda <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	4a15      	ldr	r2, [pc, #84]	; (8004f20 <UART_AdvFeatureConfig+0x160>)
 8004eca:	4013      	ands	r3, r2
 8004ecc:	0019      	movs	r1, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	2280      	movs	r2, #128	; 0x80
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d00b      	beq.n	8004efc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	4a0e      	ldr	r2, [pc, #56]	; (8004f24 <UART_AdvFeatureConfig+0x164>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	0019      	movs	r1, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
  }
}
 8004efc:	46c0      	nop			; (mov r8, r8)
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b002      	add	sp, #8
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	fffdffff 	.word	0xfffdffff
 8004f08:	fffeffff 	.word	0xfffeffff
 8004f0c:	fffbffff 	.word	0xfffbffff
 8004f10:	ffff7fff 	.word	0xffff7fff
 8004f14:	ffffefff 	.word	0xffffefff
 8004f18:	ffffdfff 	.word	0xffffdfff
 8004f1c:	ffefffff 	.word	0xffefffff
 8004f20:	ff9fffff 	.word	0xff9fffff
 8004f24:	fff7ffff 	.word	0xfff7ffff

08004f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2280      	movs	r2, #128	; 0x80
 8004f34:	2100      	movs	r1, #0
 8004f36:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f38:	f7fd f8fe 	bl	8002138 <HAL_GetTick>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2208      	movs	r2, #8
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d10c      	bne.n	8004f68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2280      	movs	r2, #128	; 0x80
 8004f52:	0391      	lsls	r1, r2, #14
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4a17      	ldr	r2, [pc, #92]	; (8004fb4 <UART_CheckIdleState+0x8c>)
 8004f58:	9200      	str	r2, [sp, #0]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f000 f82c 	bl	8004fb8 <UART_WaitOnFlagUntilTimeout>
 8004f60:	1e03      	subs	r3, r0, #0
 8004f62:	d001      	beq.n	8004f68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e021      	b.n	8004fac <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2204      	movs	r2, #4
 8004f70:	4013      	ands	r3, r2
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d10c      	bne.n	8004f90 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2280      	movs	r2, #128	; 0x80
 8004f7a:	03d1      	lsls	r1, r2, #15
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	4a0d      	ldr	r2, [pc, #52]	; (8004fb4 <UART_CheckIdleState+0x8c>)
 8004f80:	9200      	str	r2, [sp, #0]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f000 f818 	bl	8004fb8 <UART_WaitOnFlagUntilTimeout>
 8004f88:	1e03      	subs	r3, r0, #0
 8004f8a:	d001      	beq.n	8004f90 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e00d      	b.n	8004fac <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2274      	movs	r2, #116	; 0x74
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	0018      	movs	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b004      	add	sp, #16
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	01ffffff 	.word	0x01ffffff

08004fb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b094      	sub	sp, #80	; 0x50
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	1dfb      	adds	r3, r7, #7
 8004fc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc8:	e0a3      	b.n	8005112 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fcc:	3301      	adds	r3, #1
 8004fce:	d100      	bne.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004fd0:	e09f      	b.n	8005112 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd2:	f7fd f8b1 	bl	8002138 <HAL_GetTick>
 8004fd6:	0002      	movs	r2, r0
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d302      	bcc.n	8004fe8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d13d      	bne.n	8005064 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	f383 8810 	msr	PRIMASK, r3
}
 8004ffc:	46c0      	nop			; (mov r8, r8)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	494c      	ldr	r1, [pc, #304]	; (800513c <UART_WaitOnFlagUntilTimeout+0x184>)
 800500a:	400a      	ands	r2, r1
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005010:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	f383 8810 	msr	PRIMASK, r3
}
 8005018:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800501a:	f3ef 8310 	mrs	r3, PRIMASK
 800501e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005022:	643b      	str	r3, [r7, #64]	; 0x40
 8005024:	2301      	movs	r3, #1
 8005026:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502a:	f383 8810 	msr	PRIMASK, r3
}
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2101      	movs	r1, #1
 800503c:	438a      	bics	r2, r1
 800503e:	609a      	str	r2, [r3, #8]
 8005040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005042:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005046:	f383 8810 	msr	PRIMASK, r3
}
 800504a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2220      	movs	r2, #32
 8005056:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2274      	movs	r2, #116	; 0x74
 800505c:	2100      	movs	r1, #0
 800505e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e067      	b.n	8005134 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2204      	movs	r2, #4
 800506c:	4013      	ands	r3, r2
 800506e:	d050      	beq.n	8005112 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	69da      	ldr	r2, [r3, #28]
 8005076:	2380      	movs	r3, #128	; 0x80
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	401a      	ands	r2, r3
 800507c:	2380      	movs	r3, #128	; 0x80
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	429a      	cmp	r2, r3
 8005082:	d146      	bne.n	8005112 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2280      	movs	r2, #128	; 0x80
 800508a:	0112      	lsls	r2, r2, #4
 800508c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800508e:	f3ef 8310 	mrs	r3, PRIMASK
 8005092:	613b      	str	r3, [r7, #16]
  return(result);
 8005094:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005098:	2301      	movs	r3, #1
 800509a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f383 8810 	msr	PRIMASK, r3
}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4923      	ldr	r1, [pc, #140]	; (800513c <UART_WaitOnFlagUntilTimeout+0x184>)
 80050b0:	400a      	ands	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	f383 8810 	msr	PRIMASK, r3
}
 80050be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050c0:	f3ef 8310 	mrs	r3, PRIMASK
 80050c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80050c6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ca:	2301      	movs	r3, #1
 80050cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	f383 8810 	msr	PRIMASK, r3
}
 80050d4:	46c0      	nop			; (mov r8, r8)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2101      	movs	r1, #1
 80050e2:	438a      	bics	r2, r1
 80050e4:	609a      	str	r2, [r3, #8]
 80050e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	f383 8810 	msr	PRIMASK, r3
}
 80050f0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2220      	movs	r2, #32
 80050f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2280      	movs	r2, #128	; 0x80
 8005102:	2120      	movs	r1, #32
 8005104:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2274      	movs	r2, #116	; 0x74
 800510a:	2100      	movs	r1, #0
 800510c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e010      	b.n	8005134 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	4013      	ands	r3, r2
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	425a      	negs	r2, r3
 8005122:	4153      	adcs	r3, r2
 8005124:	b2db      	uxtb	r3, r3
 8005126:	001a      	movs	r2, r3
 8005128:	1dfb      	adds	r3, r7, #7
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d100      	bne.n	8005132 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005130:	e74b      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	0018      	movs	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	b014      	add	sp, #80	; 0x50
 800513a:	bd80      	pop	{r7, pc}
 800513c:	fffffe5f 	.word	0xfffffe5f

08005140 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08c      	sub	sp, #48	; 0x30
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	1dbb      	adds	r3, r7, #6
 800514c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	1dba      	adds	r2, r7, #6
 8005158:	2158      	movs	r1, #88	; 0x58
 800515a:	8812      	ldrh	r2, [r2, #0]
 800515c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1dba      	adds	r2, r7, #6
 8005162:	215a      	movs	r1, #90	; 0x5a
 8005164:	8812      	ldrh	r2, [r2, #0]
 8005166:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	2380      	movs	r3, #128	; 0x80
 8005174:	015b      	lsls	r3, r3, #5
 8005176:	429a      	cmp	r2, r3
 8005178:	d10d      	bne.n	8005196 <UART_Start_Receive_IT+0x56>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d104      	bne.n	800518c <UART_Start_Receive_IT+0x4c>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	225c      	movs	r2, #92	; 0x5c
 8005186:	4943      	ldr	r1, [pc, #268]	; (8005294 <UART_Start_Receive_IT+0x154>)
 8005188:	5299      	strh	r1, [r3, r2]
 800518a:	e02e      	b.n	80051ea <UART_Start_Receive_IT+0xaa>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	225c      	movs	r2, #92	; 0x5c
 8005190:	21ff      	movs	r1, #255	; 0xff
 8005192:	5299      	strh	r1, [r3, r2]
 8005194:	e029      	b.n	80051ea <UART_Start_Receive_IT+0xaa>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10d      	bne.n	80051ba <UART_Start_Receive_IT+0x7a>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d104      	bne.n	80051b0 <UART_Start_Receive_IT+0x70>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	225c      	movs	r2, #92	; 0x5c
 80051aa:	21ff      	movs	r1, #255	; 0xff
 80051ac:	5299      	strh	r1, [r3, r2]
 80051ae:	e01c      	b.n	80051ea <UART_Start_Receive_IT+0xaa>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	225c      	movs	r2, #92	; 0x5c
 80051b4:	217f      	movs	r1, #127	; 0x7f
 80051b6:	5299      	strh	r1, [r3, r2]
 80051b8:	e017      	b.n	80051ea <UART_Start_Receive_IT+0xaa>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	2380      	movs	r3, #128	; 0x80
 80051c0:	055b      	lsls	r3, r3, #21
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d10d      	bne.n	80051e2 <UART_Start_Receive_IT+0xa2>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d104      	bne.n	80051d8 <UART_Start_Receive_IT+0x98>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	225c      	movs	r2, #92	; 0x5c
 80051d2:	217f      	movs	r1, #127	; 0x7f
 80051d4:	5299      	strh	r1, [r3, r2]
 80051d6:	e008      	b.n	80051ea <UART_Start_Receive_IT+0xaa>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	225c      	movs	r2, #92	; 0x5c
 80051dc:	213f      	movs	r1, #63	; 0x3f
 80051de:	5299      	strh	r1, [r3, r2]
 80051e0:	e003      	b.n	80051ea <UART_Start_Receive_IT+0xaa>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	225c      	movs	r2, #92	; 0x5c
 80051e6:	2100      	movs	r1, #0
 80051e8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2280      	movs	r2, #128	; 0x80
 80051ee:	2100      	movs	r1, #0
 80051f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2222      	movs	r2, #34	; 0x22
 80051f6:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051f8:	f3ef 8310 	mrs	r3, PRIMASK
 80051fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80051fe:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005202:	2301      	movs	r3, #1
 8005204:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	f383 8810 	msr	PRIMASK, r3
}
 800520c:	46c0      	nop			; (mov r8, r8)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2101      	movs	r1, #1
 800521a:	430a      	orrs	r2, r1
 800521c:	609a      	str	r2, [r3, #8]
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	f383 8810 	msr	PRIMASK, r3
}
 8005228:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	2380      	movs	r3, #128	; 0x80
 8005230:	015b      	lsls	r3, r3, #5
 8005232:	429a      	cmp	r2, r3
 8005234:	d107      	bne.n	8005246 <UART_Start_Receive_IT+0x106>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d103      	bne.n	8005246 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4a15      	ldr	r2, [pc, #84]	; (8005298 <UART_Start_Receive_IT+0x158>)
 8005242:	665a      	str	r2, [r3, #100]	; 0x64
 8005244:	e002      	b.n	800524c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4a14      	ldr	r2, [pc, #80]	; (800529c <UART_Start_Receive_IT+0x15c>)
 800524a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2274      	movs	r2, #116	; 0x74
 8005250:	2100      	movs	r1, #0
 8005252:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005254:	f3ef 8310 	mrs	r3, PRIMASK
 8005258:	613b      	str	r3, [r7, #16]
  return(result);
 800525a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28
 800525e:	2301      	movs	r3, #1
 8005260:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f383 8810 	msr	PRIMASK, r3
}
 8005268:	46c0      	nop			; (mov r8, r8)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2190      	movs	r1, #144	; 0x90
 8005276:	0049      	lsls	r1, r1, #1
 8005278:	430a      	orrs	r2, r1
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f383 8810 	msr	PRIMASK, r3
}
 8005286:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	0018      	movs	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	b00c      	add	sp, #48	; 0x30
 8005290:	bd80      	pop	{r7, pc}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	000001ff 	.word	0x000001ff
 8005298:	08005551 	.word	0x08005551
 800529c:	080053e9 	.word	0x080053e9

080052a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08e      	sub	sp, #56	; 0x38
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a8:	f3ef 8310 	mrs	r3, PRIMASK
 80052ac:	617b      	str	r3, [r7, #20]
  return(result);
 80052ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b0:	637b      	str	r3, [r7, #52]	; 0x34
 80052b2:	2301      	movs	r3, #1
 80052b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	f383 8810 	msr	PRIMASK, r3
}
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4925      	ldr	r1, [pc, #148]	; (8005360 <UART_EndRxTransfer+0xc0>)
 80052ca:	400a      	ands	r2, r1
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	f383 8810 	msr	PRIMASK, r3
}
 80052d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052da:	f3ef 8310 	mrs	r3, PRIMASK
 80052de:	623b      	str	r3, [r7, #32]
  return(result);
 80052e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e2:	633b      	str	r3, [r7, #48]	; 0x30
 80052e4:	2301      	movs	r3, #1
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	f383 8810 	msr	PRIMASK, r3
}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2101      	movs	r1, #1
 80052fc:	438a      	bics	r2, r1
 80052fe:	609a      	str	r2, [r3, #8]
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	f383 8810 	msr	PRIMASK, r3
}
 800530a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005310:	2b01      	cmp	r3, #1
 8005312:	d118      	bne.n	8005346 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005314:	f3ef 8310 	mrs	r3, PRIMASK
 8005318:	60bb      	str	r3, [r7, #8]
  return(result);
 800531a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800531e:	2301      	movs	r3, #1
 8005320:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f383 8810 	msr	PRIMASK, r3
}
 8005328:	46c0      	nop			; (mov r8, r8)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2110      	movs	r1, #16
 8005336:	438a      	bics	r2, r1
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f383 8810 	msr	PRIMASK, r3
}
 8005344:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2220      	movs	r2, #32
 800534a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005358:	46c0      	nop			; (mov r8, r8)
 800535a:	46bd      	mov	sp, r7
 800535c:	b00e      	add	sp, #56	; 0x38
 800535e:	bd80      	pop	{r7, pc}
 8005360:	fffffedf 	.word	0xfffffedf

08005364 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005370:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	225a      	movs	r2, #90	; 0x5a
 8005376:	2100      	movs	r1, #0
 8005378:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2252      	movs	r2, #82	; 0x52
 800537e:	2100      	movs	r1, #0
 8005380:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	0018      	movs	r0, r3
 8005386:	f7ff fa49 	bl	800481c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	46bd      	mov	sp, r7
 800538e:	b004      	add	sp, #16
 8005390:	bd80      	pop	{r7, pc}

08005392 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b086      	sub	sp, #24
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800539a:	f3ef 8310 	mrs	r3, PRIMASK
 800539e:	60bb      	str	r3, [r7, #8]
  return(result);
 80053a0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	2301      	movs	r3, #1
 80053a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f383 8810 	msr	PRIMASK, r3
}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2140      	movs	r1, #64	; 0x40
 80053bc:	438a      	bics	r2, r1
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f383 8810 	msr	PRIMASK, r3
}
 80053ca:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	0018      	movs	r0, r3
 80053dc:	f7ff fa16 	bl	800480c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053e0:	46c0      	nop			; (mov r8, r8)
 80053e2:	46bd      	mov	sp, r7
 80053e4:	b006      	add	sp, #24
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b090      	sub	sp, #64	; 0x40
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053f0:	203e      	movs	r0, #62	; 0x3e
 80053f2:	183b      	adds	r3, r7, r0
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	215c      	movs	r1, #92	; 0x5c
 80053f8:	5a52      	ldrh	r2, [r2, r1]
 80053fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005400:	2b22      	cmp	r3, #34	; 0x22
 8005402:	d000      	beq.n	8005406 <UART_RxISR_8BIT+0x1e>
 8005404:	e095      	b.n	8005532 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800540c:	213c      	movs	r1, #60	; 0x3c
 800540e:	187b      	adds	r3, r7, r1
 8005410:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005412:	187b      	adds	r3, r7, r1
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b2da      	uxtb	r2, r3
 8005418:	183b      	adds	r3, r7, r0
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b2d9      	uxtb	r1, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	400a      	ands	r2, r1
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	225a      	movs	r2, #90	; 0x5a
 8005436:	5a9b      	ldrh	r3, [r3, r2]
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b299      	uxth	r1, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	225a      	movs	r2, #90	; 0x5a
 8005442:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	225a      	movs	r2, #90	; 0x5a
 8005448:	5a9b      	ldrh	r3, [r3, r2]
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d178      	bne.n	8005542 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005450:	f3ef 8310 	mrs	r3, PRIMASK
 8005454:	61bb      	str	r3, [r7, #24]
  return(result);
 8005456:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005458:	63bb      	str	r3, [r7, #56]	; 0x38
 800545a:	2301      	movs	r3, #1
 800545c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	f383 8810 	msr	PRIMASK, r3
}
 8005464:	46c0      	nop			; (mov r8, r8)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4936      	ldr	r1, [pc, #216]	; (800554c <UART_RxISR_8BIT+0x164>)
 8005472:	400a      	ands	r2, r1
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	f383 8810 	msr	PRIMASK, r3
}
 8005480:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005482:	f3ef 8310 	mrs	r3, PRIMASK
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548a:	637b      	str	r3, [r7, #52]	; 0x34
 800548c:	2301      	movs	r3, #1
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	f383 8810 	msr	PRIMASK, r3
}
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2101      	movs	r1, #1
 80054a4:	438a      	bics	r2, r1
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ae:	f383 8810 	msr	PRIMASK, r3
}
 80054b2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d12f      	bne.n	8005528 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ce:	f3ef 8310 	mrs	r3, PRIMASK
 80054d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80054d4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d6:	633b      	str	r3, [r7, #48]	; 0x30
 80054d8:	2301      	movs	r3, #1
 80054da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f383 8810 	msr	PRIMASK, r3
}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2110      	movs	r1, #16
 80054f0:	438a      	bics	r2, r1
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f383 8810 	msr	PRIMASK, r3
}
 80054fe:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	2210      	movs	r2, #16
 8005508:	4013      	ands	r3, r2
 800550a:	2b10      	cmp	r3, #16
 800550c:	d103      	bne.n	8005516 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2210      	movs	r2, #16
 8005514:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2258      	movs	r2, #88	; 0x58
 800551a:	5a9a      	ldrh	r2, [r3, r2]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	0011      	movs	r1, r2
 8005520:	0018      	movs	r0, r3
 8005522:	f7ff f983 	bl	800482c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005526:	e00c      	b.n	8005542 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	0018      	movs	r0, r3
 800552c:	f7fb fe8a 	bl	8001244 <HAL_UART_RxCpltCallback>
}
 8005530:	e007      	b.n	8005542 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2108      	movs	r1, #8
 800553e:	430a      	orrs	r2, r1
 8005540:	619a      	str	r2, [r3, #24]
}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	46bd      	mov	sp, r7
 8005546:	b010      	add	sp, #64	; 0x40
 8005548:	bd80      	pop	{r7, pc}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	fffffedf 	.word	0xfffffedf

08005550 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b090      	sub	sp, #64	; 0x40
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005558:	203e      	movs	r0, #62	; 0x3e
 800555a:	183b      	adds	r3, r7, r0
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	215c      	movs	r1, #92	; 0x5c
 8005560:	5a52      	ldrh	r2, [r2, r1]
 8005562:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005568:	2b22      	cmp	r3, #34	; 0x22
 800556a:	d000      	beq.n	800556e <UART_RxISR_16BIT+0x1e>
 800556c:	e095      	b.n	800569a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005574:	213c      	movs	r1, #60	; 0x3c
 8005576:	187b      	adds	r3, r7, r1
 8005578:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005580:	187b      	adds	r3, r7, r1
 8005582:	183a      	adds	r2, r7, r0
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	8812      	ldrh	r2, [r2, #0]
 8005588:	4013      	ands	r3, r2
 800558a:	b29a      	uxth	r2, r3
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005594:	1c9a      	adds	r2, r3, #2
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	225a      	movs	r2, #90	; 0x5a
 800559e:	5a9b      	ldrh	r3, [r3, r2]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b299      	uxth	r1, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	225a      	movs	r2, #90	; 0x5a
 80055aa:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	225a      	movs	r2, #90	; 0x5a
 80055b0:	5a9b      	ldrh	r3, [r3, r2]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d178      	bne.n	80056aa <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055b8:	f3ef 8310 	mrs	r3, PRIMASK
 80055bc:	617b      	str	r3, [r7, #20]
  return(result);
 80055be:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055c0:	637b      	str	r3, [r7, #52]	; 0x34
 80055c2:	2301      	movs	r3, #1
 80055c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f383 8810 	msr	PRIMASK, r3
}
 80055cc:	46c0      	nop			; (mov r8, r8)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4936      	ldr	r1, [pc, #216]	; (80056b4 <UART_RxISR_16BIT+0x164>)
 80055da:	400a      	ands	r2, r1
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f383 8810 	msr	PRIMASK, r3
}
 80055e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ea:	f3ef 8310 	mrs	r3, PRIMASK
 80055ee:	623b      	str	r3, [r7, #32]
  return(result);
 80055f0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f2:	633b      	str	r3, [r7, #48]	; 0x30
 80055f4:	2301      	movs	r3, #1
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	f383 8810 	msr	PRIMASK, r3
}
 80055fe:	46c0      	nop			; (mov r8, r8)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2101      	movs	r1, #1
 800560c:	438a      	bics	r2, r1
 800560e:	609a      	str	r2, [r3, #8]
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	f383 8810 	msr	PRIMASK, r3
}
 800561a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800562c:	2b01      	cmp	r3, #1
 800562e:	d12f      	bne.n	8005690 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005636:	f3ef 8310 	mrs	r3, PRIMASK
 800563a:	60bb      	str	r3, [r7, #8]
  return(result);
 800563c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800563e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005640:	2301      	movs	r3, #1
 8005642:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f383 8810 	msr	PRIMASK, r3
}
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2110      	movs	r1, #16
 8005658:	438a      	bics	r2, r1
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f383 8810 	msr	PRIMASK, r3
}
 8005666:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	2210      	movs	r2, #16
 8005670:	4013      	ands	r3, r2
 8005672:	2b10      	cmp	r3, #16
 8005674:	d103      	bne.n	800567e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2210      	movs	r2, #16
 800567c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2258      	movs	r2, #88	; 0x58
 8005682:	5a9a      	ldrh	r2, [r3, r2]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	0011      	movs	r1, r2
 8005688:	0018      	movs	r0, r3
 800568a:	f7ff f8cf 	bl	800482c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800568e:	e00c      	b.n	80056aa <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	0018      	movs	r0, r3
 8005694:	f7fb fdd6 	bl	8001244 <HAL_UART_RxCpltCallback>
}
 8005698:	e007      	b.n	80056aa <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699a      	ldr	r2, [r3, #24]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2108      	movs	r1, #8
 80056a6:	430a      	orrs	r2, r1
 80056a8:	619a      	str	r2, [r3, #24]
}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b010      	add	sp, #64	; 0x40
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	fffffedf 	.word	0xfffffedf

080056b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80056c0:	46c0      	nop			; (mov r8, r8)
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b002      	add	sp, #8
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <__errno>:
 80056c8:	4b01      	ldr	r3, [pc, #4]	; (80056d0 <__errno+0x8>)
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	4770      	bx	lr
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	20000288 	.word	0x20000288

080056d4 <__libc_init_array>:
 80056d4:	b570      	push	{r4, r5, r6, lr}
 80056d6:	2600      	movs	r6, #0
 80056d8:	4d0c      	ldr	r5, [pc, #48]	; (800570c <__libc_init_array+0x38>)
 80056da:	4c0d      	ldr	r4, [pc, #52]	; (8005710 <__libc_init_array+0x3c>)
 80056dc:	1b64      	subs	r4, r4, r5
 80056de:	10a4      	asrs	r4, r4, #2
 80056e0:	42a6      	cmp	r6, r4
 80056e2:	d109      	bne.n	80056f8 <__libc_init_array+0x24>
 80056e4:	2600      	movs	r6, #0
 80056e6:	f000 fc47 	bl	8005f78 <_init>
 80056ea:	4d0a      	ldr	r5, [pc, #40]	; (8005714 <__libc_init_array+0x40>)
 80056ec:	4c0a      	ldr	r4, [pc, #40]	; (8005718 <__libc_init_array+0x44>)
 80056ee:	1b64      	subs	r4, r4, r5
 80056f0:	10a4      	asrs	r4, r4, #2
 80056f2:	42a6      	cmp	r6, r4
 80056f4:	d105      	bne.n	8005702 <__libc_init_array+0x2e>
 80056f6:	bd70      	pop	{r4, r5, r6, pc}
 80056f8:	00b3      	lsls	r3, r6, #2
 80056fa:	58eb      	ldr	r3, [r5, r3]
 80056fc:	4798      	blx	r3
 80056fe:	3601      	adds	r6, #1
 8005700:	e7ee      	b.n	80056e0 <__libc_init_array+0xc>
 8005702:	00b3      	lsls	r3, r6, #2
 8005704:	58eb      	ldr	r3, [r5, r3]
 8005706:	4798      	blx	r3
 8005708:	3601      	adds	r6, #1
 800570a:	e7f2      	b.n	80056f2 <__libc_init_array+0x1e>
 800570c:	080060c4 	.word	0x080060c4
 8005710:	080060c4 	.word	0x080060c4
 8005714:	080060c4 	.word	0x080060c4
 8005718:	080060c8 	.word	0x080060c8

0800571c <memcpy>:
 800571c:	2300      	movs	r3, #0
 800571e:	b510      	push	{r4, lr}
 8005720:	429a      	cmp	r2, r3
 8005722:	d100      	bne.n	8005726 <memcpy+0xa>
 8005724:	bd10      	pop	{r4, pc}
 8005726:	5ccc      	ldrb	r4, [r1, r3]
 8005728:	54c4      	strb	r4, [r0, r3]
 800572a:	3301      	adds	r3, #1
 800572c:	e7f8      	b.n	8005720 <memcpy+0x4>

0800572e <memset>:
 800572e:	0003      	movs	r3, r0
 8005730:	1882      	adds	r2, r0, r2
 8005732:	4293      	cmp	r3, r2
 8005734:	d100      	bne.n	8005738 <memset+0xa>
 8005736:	4770      	bx	lr
 8005738:	7019      	strb	r1, [r3, #0]
 800573a:	3301      	adds	r3, #1
 800573c:	e7f9      	b.n	8005732 <memset+0x4>
	...

08005740 <siprintf>:
 8005740:	b40e      	push	{r1, r2, r3}
 8005742:	b500      	push	{lr}
 8005744:	490b      	ldr	r1, [pc, #44]	; (8005774 <siprintf+0x34>)
 8005746:	b09c      	sub	sp, #112	; 0x70
 8005748:	ab1d      	add	r3, sp, #116	; 0x74
 800574a:	9002      	str	r0, [sp, #8]
 800574c:	9006      	str	r0, [sp, #24]
 800574e:	9107      	str	r1, [sp, #28]
 8005750:	9104      	str	r1, [sp, #16]
 8005752:	4809      	ldr	r0, [pc, #36]	; (8005778 <siprintf+0x38>)
 8005754:	4909      	ldr	r1, [pc, #36]	; (800577c <siprintf+0x3c>)
 8005756:	cb04      	ldmia	r3!, {r2}
 8005758:	9105      	str	r1, [sp, #20]
 800575a:	6800      	ldr	r0, [r0, #0]
 800575c:	a902      	add	r1, sp, #8
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	f000 f870 	bl	8005844 <_svfiprintf_r>
 8005764:	2300      	movs	r3, #0
 8005766:	9a02      	ldr	r2, [sp, #8]
 8005768:	7013      	strb	r3, [r2, #0]
 800576a:	b01c      	add	sp, #112	; 0x70
 800576c:	bc08      	pop	{r3}
 800576e:	b003      	add	sp, #12
 8005770:	4718      	bx	r3
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	7fffffff 	.word	0x7fffffff
 8005778:	20000288 	.word	0x20000288
 800577c:	ffff0208 	.word	0xffff0208

08005780 <__ssputs_r>:
 8005780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005782:	688e      	ldr	r6, [r1, #8]
 8005784:	b085      	sub	sp, #20
 8005786:	0007      	movs	r7, r0
 8005788:	000c      	movs	r4, r1
 800578a:	9203      	str	r2, [sp, #12]
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	429e      	cmp	r6, r3
 8005790:	d83c      	bhi.n	800580c <__ssputs_r+0x8c>
 8005792:	2390      	movs	r3, #144	; 0x90
 8005794:	898a      	ldrh	r2, [r1, #12]
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	421a      	tst	r2, r3
 800579a:	d034      	beq.n	8005806 <__ssputs_r+0x86>
 800579c:	2503      	movs	r5, #3
 800579e:	6909      	ldr	r1, [r1, #16]
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	1a5b      	subs	r3, r3, r1
 80057a4:	9302      	str	r3, [sp, #8]
 80057a6:	6963      	ldr	r3, [r4, #20]
 80057a8:	9802      	ldr	r0, [sp, #8]
 80057aa:	435d      	muls	r5, r3
 80057ac:	0feb      	lsrs	r3, r5, #31
 80057ae:	195d      	adds	r5, r3, r5
 80057b0:	9b01      	ldr	r3, [sp, #4]
 80057b2:	106d      	asrs	r5, r5, #1
 80057b4:	3301      	adds	r3, #1
 80057b6:	181b      	adds	r3, r3, r0
 80057b8:	42ab      	cmp	r3, r5
 80057ba:	d900      	bls.n	80057be <__ssputs_r+0x3e>
 80057bc:	001d      	movs	r5, r3
 80057be:	0553      	lsls	r3, r2, #21
 80057c0:	d532      	bpl.n	8005828 <__ssputs_r+0xa8>
 80057c2:	0029      	movs	r1, r5
 80057c4:	0038      	movs	r0, r7
 80057c6:	f000 fb27 	bl	8005e18 <_malloc_r>
 80057ca:	1e06      	subs	r6, r0, #0
 80057cc:	d109      	bne.n	80057e2 <__ssputs_r+0x62>
 80057ce:	230c      	movs	r3, #12
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	2340      	movs	r3, #64	; 0x40
 80057d4:	2001      	movs	r0, #1
 80057d6:	89a2      	ldrh	r2, [r4, #12]
 80057d8:	4240      	negs	r0, r0
 80057da:	4313      	orrs	r3, r2
 80057dc:	81a3      	strh	r3, [r4, #12]
 80057de:	b005      	add	sp, #20
 80057e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e2:	9a02      	ldr	r2, [sp, #8]
 80057e4:	6921      	ldr	r1, [r4, #16]
 80057e6:	f7ff ff99 	bl	800571c <memcpy>
 80057ea:	89a3      	ldrh	r3, [r4, #12]
 80057ec:	4a14      	ldr	r2, [pc, #80]	; (8005840 <__ssputs_r+0xc0>)
 80057ee:	401a      	ands	r2, r3
 80057f0:	2380      	movs	r3, #128	; 0x80
 80057f2:	4313      	orrs	r3, r2
 80057f4:	81a3      	strh	r3, [r4, #12]
 80057f6:	9b02      	ldr	r3, [sp, #8]
 80057f8:	6126      	str	r6, [r4, #16]
 80057fa:	18f6      	adds	r6, r6, r3
 80057fc:	6026      	str	r6, [r4, #0]
 80057fe:	6165      	str	r5, [r4, #20]
 8005800:	9e01      	ldr	r6, [sp, #4]
 8005802:	1aed      	subs	r5, r5, r3
 8005804:	60a5      	str	r5, [r4, #8]
 8005806:	9b01      	ldr	r3, [sp, #4]
 8005808:	429e      	cmp	r6, r3
 800580a:	d900      	bls.n	800580e <__ssputs_r+0x8e>
 800580c:	9e01      	ldr	r6, [sp, #4]
 800580e:	0032      	movs	r2, r6
 8005810:	9903      	ldr	r1, [sp, #12]
 8005812:	6820      	ldr	r0, [r4, #0]
 8005814:	f000 faa3 	bl	8005d5e <memmove>
 8005818:	68a3      	ldr	r3, [r4, #8]
 800581a:	2000      	movs	r0, #0
 800581c:	1b9b      	subs	r3, r3, r6
 800581e:	60a3      	str	r3, [r4, #8]
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	199e      	adds	r6, r3, r6
 8005824:	6026      	str	r6, [r4, #0]
 8005826:	e7da      	b.n	80057de <__ssputs_r+0x5e>
 8005828:	002a      	movs	r2, r5
 800582a:	0038      	movs	r0, r7
 800582c:	f000 fb52 	bl	8005ed4 <_realloc_r>
 8005830:	1e06      	subs	r6, r0, #0
 8005832:	d1e0      	bne.n	80057f6 <__ssputs_r+0x76>
 8005834:	0038      	movs	r0, r7
 8005836:	6921      	ldr	r1, [r4, #16]
 8005838:	f000 faa4 	bl	8005d84 <_free_r>
 800583c:	e7c7      	b.n	80057ce <__ssputs_r+0x4e>
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	fffffb7f 	.word	0xfffffb7f

08005844 <_svfiprintf_r>:
 8005844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005846:	b0a1      	sub	sp, #132	; 0x84
 8005848:	9003      	str	r0, [sp, #12]
 800584a:	001d      	movs	r5, r3
 800584c:	898b      	ldrh	r3, [r1, #12]
 800584e:	000f      	movs	r7, r1
 8005850:	0016      	movs	r6, r2
 8005852:	061b      	lsls	r3, r3, #24
 8005854:	d511      	bpl.n	800587a <_svfiprintf_r+0x36>
 8005856:	690b      	ldr	r3, [r1, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10e      	bne.n	800587a <_svfiprintf_r+0x36>
 800585c:	2140      	movs	r1, #64	; 0x40
 800585e:	f000 fadb 	bl	8005e18 <_malloc_r>
 8005862:	6038      	str	r0, [r7, #0]
 8005864:	6138      	str	r0, [r7, #16]
 8005866:	2800      	cmp	r0, #0
 8005868:	d105      	bne.n	8005876 <_svfiprintf_r+0x32>
 800586a:	230c      	movs	r3, #12
 800586c:	9a03      	ldr	r2, [sp, #12]
 800586e:	3801      	subs	r0, #1
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	b021      	add	sp, #132	; 0x84
 8005874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005876:	2340      	movs	r3, #64	; 0x40
 8005878:	617b      	str	r3, [r7, #20]
 800587a:	2300      	movs	r3, #0
 800587c:	ac08      	add	r4, sp, #32
 800587e:	6163      	str	r3, [r4, #20]
 8005880:	3320      	adds	r3, #32
 8005882:	7663      	strb	r3, [r4, #25]
 8005884:	3310      	adds	r3, #16
 8005886:	76a3      	strb	r3, [r4, #26]
 8005888:	9507      	str	r5, [sp, #28]
 800588a:	0035      	movs	r5, r6
 800588c:	782b      	ldrb	r3, [r5, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <_svfiprintf_r+0x52>
 8005892:	2b25      	cmp	r3, #37	; 0x25
 8005894:	d147      	bne.n	8005926 <_svfiprintf_r+0xe2>
 8005896:	1bab      	subs	r3, r5, r6
 8005898:	9305      	str	r3, [sp, #20]
 800589a:	42b5      	cmp	r5, r6
 800589c:	d00c      	beq.n	80058b8 <_svfiprintf_r+0x74>
 800589e:	0032      	movs	r2, r6
 80058a0:	0039      	movs	r1, r7
 80058a2:	9803      	ldr	r0, [sp, #12]
 80058a4:	f7ff ff6c 	bl	8005780 <__ssputs_r>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d100      	bne.n	80058ae <_svfiprintf_r+0x6a>
 80058ac:	e0ae      	b.n	8005a0c <_svfiprintf_r+0x1c8>
 80058ae:	6962      	ldr	r2, [r4, #20]
 80058b0:	9b05      	ldr	r3, [sp, #20]
 80058b2:	4694      	mov	ip, r2
 80058b4:	4463      	add	r3, ip
 80058b6:	6163      	str	r3, [r4, #20]
 80058b8:	782b      	ldrb	r3, [r5, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d100      	bne.n	80058c0 <_svfiprintf_r+0x7c>
 80058be:	e0a5      	b.n	8005a0c <_svfiprintf_r+0x1c8>
 80058c0:	2201      	movs	r2, #1
 80058c2:	2300      	movs	r3, #0
 80058c4:	4252      	negs	r2, r2
 80058c6:	6062      	str	r2, [r4, #4]
 80058c8:	a904      	add	r1, sp, #16
 80058ca:	3254      	adds	r2, #84	; 0x54
 80058cc:	1852      	adds	r2, r2, r1
 80058ce:	1c6e      	adds	r6, r5, #1
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	60e3      	str	r3, [r4, #12]
 80058d4:	60a3      	str	r3, [r4, #8]
 80058d6:	7013      	strb	r3, [r2, #0]
 80058d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80058da:	2205      	movs	r2, #5
 80058dc:	7831      	ldrb	r1, [r6, #0]
 80058de:	4854      	ldr	r0, [pc, #336]	; (8005a30 <_svfiprintf_r+0x1ec>)
 80058e0:	f000 fa32 	bl	8005d48 <memchr>
 80058e4:	1c75      	adds	r5, r6, #1
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d11f      	bne.n	800592a <_svfiprintf_r+0xe6>
 80058ea:	6822      	ldr	r2, [r4, #0]
 80058ec:	06d3      	lsls	r3, r2, #27
 80058ee:	d504      	bpl.n	80058fa <_svfiprintf_r+0xb6>
 80058f0:	2353      	movs	r3, #83	; 0x53
 80058f2:	a904      	add	r1, sp, #16
 80058f4:	185b      	adds	r3, r3, r1
 80058f6:	2120      	movs	r1, #32
 80058f8:	7019      	strb	r1, [r3, #0]
 80058fa:	0713      	lsls	r3, r2, #28
 80058fc:	d504      	bpl.n	8005908 <_svfiprintf_r+0xc4>
 80058fe:	2353      	movs	r3, #83	; 0x53
 8005900:	a904      	add	r1, sp, #16
 8005902:	185b      	adds	r3, r3, r1
 8005904:	212b      	movs	r1, #43	; 0x2b
 8005906:	7019      	strb	r1, [r3, #0]
 8005908:	7833      	ldrb	r3, [r6, #0]
 800590a:	2b2a      	cmp	r3, #42	; 0x2a
 800590c:	d016      	beq.n	800593c <_svfiprintf_r+0xf8>
 800590e:	0035      	movs	r5, r6
 8005910:	2100      	movs	r1, #0
 8005912:	200a      	movs	r0, #10
 8005914:	68e3      	ldr	r3, [r4, #12]
 8005916:	782a      	ldrb	r2, [r5, #0]
 8005918:	1c6e      	adds	r6, r5, #1
 800591a:	3a30      	subs	r2, #48	; 0x30
 800591c:	2a09      	cmp	r2, #9
 800591e:	d94e      	bls.n	80059be <_svfiprintf_r+0x17a>
 8005920:	2900      	cmp	r1, #0
 8005922:	d111      	bne.n	8005948 <_svfiprintf_r+0x104>
 8005924:	e017      	b.n	8005956 <_svfiprintf_r+0x112>
 8005926:	3501      	adds	r5, #1
 8005928:	e7b0      	b.n	800588c <_svfiprintf_r+0x48>
 800592a:	4b41      	ldr	r3, [pc, #260]	; (8005a30 <_svfiprintf_r+0x1ec>)
 800592c:	6822      	ldr	r2, [r4, #0]
 800592e:	1ac0      	subs	r0, r0, r3
 8005930:	2301      	movs	r3, #1
 8005932:	4083      	lsls	r3, r0
 8005934:	4313      	orrs	r3, r2
 8005936:	002e      	movs	r6, r5
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	e7ce      	b.n	80058da <_svfiprintf_r+0x96>
 800593c:	9b07      	ldr	r3, [sp, #28]
 800593e:	1d19      	adds	r1, r3, #4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	9107      	str	r1, [sp, #28]
 8005944:	2b00      	cmp	r3, #0
 8005946:	db01      	blt.n	800594c <_svfiprintf_r+0x108>
 8005948:	930b      	str	r3, [sp, #44]	; 0x2c
 800594a:	e004      	b.n	8005956 <_svfiprintf_r+0x112>
 800594c:	425b      	negs	r3, r3
 800594e:	60e3      	str	r3, [r4, #12]
 8005950:	2302      	movs	r3, #2
 8005952:	4313      	orrs	r3, r2
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	782b      	ldrb	r3, [r5, #0]
 8005958:	2b2e      	cmp	r3, #46	; 0x2e
 800595a:	d10a      	bne.n	8005972 <_svfiprintf_r+0x12e>
 800595c:	786b      	ldrb	r3, [r5, #1]
 800595e:	2b2a      	cmp	r3, #42	; 0x2a
 8005960:	d135      	bne.n	80059ce <_svfiprintf_r+0x18a>
 8005962:	9b07      	ldr	r3, [sp, #28]
 8005964:	3502      	adds	r5, #2
 8005966:	1d1a      	adds	r2, r3, #4
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	9207      	str	r2, [sp, #28]
 800596c:	2b00      	cmp	r3, #0
 800596e:	db2b      	blt.n	80059c8 <_svfiprintf_r+0x184>
 8005970:	9309      	str	r3, [sp, #36]	; 0x24
 8005972:	4e30      	ldr	r6, [pc, #192]	; (8005a34 <_svfiprintf_r+0x1f0>)
 8005974:	2203      	movs	r2, #3
 8005976:	0030      	movs	r0, r6
 8005978:	7829      	ldrb	r1, [r5, #0]
 800597a:	f000 f9e5 	bl	8005d48 <memchr>
 800597e:	2800      	cmp	r0, #0
 8005980:	d006      	beq.n	8005990 <_svfiprintf_r+0x14c>
 8005982:	2340      	movs	r3, #64	; 0x40
 8005984:	1b80      	subs	r0, r0, r6
 8005986:	4083      	lsls	r3, r0
 8005988:	6822      	ldr	r2, [r4, #0]
 800598a:	3501      	adds	r5, #1
 800598c:	4313      	orrs	r3, r2
 800598e:	6023      	str	r3, [r4, #0]
 8005990:	7829      	ldrb	r1, [r5, #0]
 8005992:	2206      	movs	r2, #6
 8005994:	4828      	ldr	r0, [pc, #160]	; (8005a38 <_svfiprintf_r+0x1f4>)
 8005996:	1c6e      	adds	r6, r5, #1
 8005998:	7621      	strb	r1, [r4, #24]
 800599a:	f000 f9d5 	bl	8005d48 <memchr>
 800599e:	2800      	cmp	r0, #0
 80059a0:	d03c      	beq.n	8005a1c <_svfiprintf_r+0x1d8>
 80059a2:	4b26      	ldr	r3, [pc, #152]	; (8005a3c <_svfiprintf_r+0x1f8>)
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d125      	bne.n	80059f4 <_svfiprintf_r+0x1b0>
 80059a8:	2207      	movs	r2, #7
 80059aa:	9b07      	ldr	r3, [sp, #28]
 80059ac:	3307      	adds	r3, #7
 80059ae:	4393      	bics	r3, r2
 80059b0:	3308      	adds	r3, #8
 80059b2:	9307      	str	r3, [sp, #28]
 80059b4:	6963      	ldr	r3, [r4, #20]
 80059b6:	9a04      	ldr	r2, [sp, #16]
 80059b8:	189b      	adds	r3, r3, r2
 80059ba:	6163      	str	r3, [r4, #20]
 80059bc:	e765      	b.n	800588a <_svfiprintf_r+0x46>
 80059be:	4343      	muls	r3, r0
 80059c0:	0035      	movs	r5, r6
 80059c2:	2101      	movs	r1, #1
 80059c4:	189b      	adds	r3, r3, r2
 80059c6:	e7a6      	b.n	8005916 <_svfiprintf_r+0xd2>
 80059c8:	2301      	movs	r3, #1
 80059ca:	425b      	negs	r3, r3
 80059cc:	e7d0      	b.n	8005970 <_svfiprintf_r+0x12c>
 80059ce:	2300      	movs	r3, #0
 80059d0:	200a      	movs	r0, #10
 80059d2:	001a      	movs	r2, r3
 80059d4:	3501      	adds	r5, #1
 80059d6:	6063      	str	r3, [r4, #4]
 80059d8:	7829      	ldrb	r1, [r5, #0]
 80059da:	1c6e      	adds	r6, r5, #1
 80059dc:	3930      	subs	r1, #48	; 0x30
 80059de:	2909      	cmp	r1, #9
 80059e0:	d903      	bls.n	80059ea <_svfiprintf_r+0x1a6>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0c5      	beq.n	8005972 <_svfiprintf_r+0x12e>
 80059e6:	9209      	str	r2, [sp, #36]	; 0x24
 80059e8:	e7c3      	b.n	8005972 <_svfiprintf_r+0x12e>
 80059ea:	4342      	muls	r2, r0
 80059ec:	0035      	movs	r5, r6
 80059ee:	2301      	movs	r3, #1
 80059f0:	1852      	adds	r2, r2, r1
 80059f2:	e7f1      	b.n	80059d8 <_svfiprintf_r+0x194>
 80059f4:	ab07      	add	r3, sp, #28
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	003a      	movs	r2, r7
 80059fa:	0021      	movs	r1, r4
 80059fc:	4b10      	ldr	r3, [pc, #64]	; (8005a40 <_svfiprintf_r+0x1fc>)
 80059fe:	9803      	ldr	r0, [sp, #12]
 8005a00:	e000      	b.n	8005a04 <_svfiprintf_r+0x1c0>
 8005a02:	bf00      	nop
 8005a04:	9004      	str	r0, [sp, #16]
 8005a06:	9b04      	ldr	r3, [sp, #16]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	d1d3      	bne.n	80059b4 <_svfiprintf_r+0x170>
 8005a0c:	89bb      	ldrh	r3, [r7, #12]
 8005a0e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005a10:	065b      	lsls	r3, r3, #25
 8005a12:	d400      	bmi.n	8005a16 <_svfiprintf_r+0x1d2>
 8005a14:	e72d      	b.n	8005872 <_svfiprintf_r+0x2e>
 8005a16:	2001      	movs	r0, #1
 8005a18:	4240      	negs	r0, r0
 8005a1a:	e72a      	b.n	8005872 <_svfiprintf_r+0x2e>
 8005a1c:	ab07      	add	r3, sp, #28
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	003a      	movs	r2, r7
 8005a22:	0021      	movs	r1, r4
 8005a24:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <_svfiprintf_r+0x1fc>)
 8005a26:	9803      	ldr	r0, [sp, #12]
 8005a28:	f000 f87c 	bl	8005b24 <_printf_i>
 8005a2c:	e7ea      	b.n	8005a04 <_svfiprintf_r+0x1c0>
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	08006088 	.word	0x08006088
 8005a34:	0800608e 	.word	0x0800608e
 8005a38:	08006092 	.word	0x08006092
 8005a3c:	00000000 	.word	0x00000000
 8005a40:	08005781 	.word	0x08005781

08005a44 <_printf_common>:
 8005a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a46:	0015      	movs	r5, r2
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	688a      	ldr	r2, [r1, #8]
 8005a4c:	690b      	ldr	r3, [r1, #16]
 8005a4e:	000c      	movs	r4, r1
 8005a50:	9000      	str	r0, [sp, #0]
 8005a52:	4293      	cmp	r3, r2
 8005a54:	da00      	bge.n	8005a58 <_printf_common+0x14>
 8005a56:	0013      	movs	r3, r2
 8005a58:	0022      	movs	r2, r4
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	3243      	adds	r2, #67	; 0x43
 8005a5e:	7812      	ldrb	r2, [r2, #0]
 8005a60:	2a00      	cmp	r2, #0
 8005a62:	d001      	beq.n	8005a68 <_printf_common+0x24>
 8005a64:	3301      	adds	r3, #1
 8005a66:	602b      	str	r3, [r5, #0]
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	069b      	lsls	r3, r3, #26
 8005a6c:	d502      	bpl.n	8005a74 <_printf_common+0x30>
 8005a6e:	682b      	ldr	r3, [r5, #0]
 8005a70:	3302      	adds	r3, #2
 8005a72:	602b      	str	r3, [r5, #0]
 8005a74:	6822      	ldr	r2, [r4, #0]
 8005a76:	2306      	movs	r3, #6
 8005a78:	0017      	movs	r7, r2
 8005a7a:	401f      	ands	r7, r3
 8005a7c:	421a      	tst	r2, r3
 8005a7e:	d027      	beq.n	8005ad0 <_printf_common+0x8c>
 8005a80:	0023      	movs	r3, r4
 8005a82:	3343      	adds	r3, #67	; 0x43
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	1e5a      	subs	r2, r3, #1
 8005a88:	4193      	sbcs	r3, r2
 8005a8a:	6822      	ldr	r2, [r4, #0]
 8005a8c:	0692      	lsls	r2, r2, #26
 8005a8e:	d430      	bmi.n	8005af2 <_printf_common+0xae>
 8005a90:	0022      	movs	r2, r4
 8005a92:	9901      	ldr	r1, [sp, #4]
 8005a94:	9800      	ldr	r0, [sp, #0]
 8005a96:	9e08      	ldr	r6, [sp, #32]
 8005a98:	3243      	adds	r2, #67	; 0x43
 8005a9a:	47b0      	blx	r6
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	d025      	beq.n	8005aec <_printf_common+0xa8>
 8005aa0:	2306      	movs	r3, #6
 8005aa2:	6820      	ldr	r0, [r4, #0]
 8005aa4:	682a      	ldr	r2, [r5, #0]
 8005aa6:	68e1      	ldr	r1, [r4, #12]
 8005aa8:	2500      	movs	r5, #0
 8005aaa:	4003      	ands	r3, r0
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d103      	bne.n	8005ab8 <_printf_common+0x74>
 8005ab0:	1a8d      	subs	r5, r1, r2
 8005ab2:	43eb      	mvns	r3, r5
 8005ab4:	17db      	asrs	r3, r3, #31
 8005ab6:	401d      	ands	r5, r3
 8005ab8:	68a3      	ldr	r3, [r4, #8]
 8005aba:	6922      	ldr	r2, [r4, #16]
 8005abc:	4293      	cmp	r3, r2
 8005abe:	dd01      	ble.n	8005ac4 <_printf_common+0x80>
 8005ac0:	1a9b      	subs	r3, r3, r2
 8005ac2:	18ed      	adds	r5, r5, r3
 8005ac4:	2700      	movs	r7, #0
 8005ac6:	42bd      	cmp	r5, r7
 8005ac8:	d120      	bne.n	8005b0c <_printf_common+0xc8>
 8005aca:	2000      	movs	r0, #0
 8005acc:	e010      	b.n	8005af0 <_printf_common+0xac>
 8005ace:	3701      	adds	r7, #1
 8005ad0:	68e3      	ldr	r3, [r4, #12]
 8005ad2:	682a      	ldr	r2, [r5, #0]
 8005ad4:	1a9b      	subs	r3, r3, r2
 8005ad6:	42bb      	cmp	r3, r7
 8005ad8:	ddd2      	ble.n	8005a80 <_printf_common+0x3c>
 8005ada:	0022      	movs	r2, r4
 8005adc:	2301      	movs	r3, #1
 8005ade:	9901      	ldr	r1, [sp, #4]
 8005ae0:	9800      	ldr	r0, [sp, #0]
 8005ae2:	9e08      	ldr	r6, [sp, #32]
 8005ae4:	3219      	adds	r2, #25
 8005ae6:	47b0      	blx	r6
 8005ae8:	1c43      	adds	r3, r0, #1
 8005aea:	d1f0      	bne.n	8005ace <_printf_common+0x8a>
 8005aec:	2001      	movs	r0, #1
 8005aee:	4240      	negs	r0, r0
 8005af0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005af2:	2030      	movs	r0, #48	; 0x30
 8005af4:	18e1      	adds	r1, r4, r3
 8005af6:	3143      	adds	r1, #67	; 0x43
 8005af8:	7008      	strb	r0, [r1, #0]
 8005afa:	0021      	movs	r1, r4
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	3145      	adds	r1, #69	; 0x45
 8005b00:	7809      	ldrb	r1, [r1, #0]
 8005b02:	18a2      	adds	r2, r4, r2
 8005b04:	3243      	adds	r2, #67	; 0x43
 8005b06:	3302      	adds	r3, #2
 8005b08:	7011      	strb	r1, [r2, #0]
 8005b0a:	e7c1      	b.n	8005a90 <_printf_common+0x4c>
 8005b0c:	0022      	movs	r2, r4
 8005b0e:	2301      	movs	r3, #1
 8005b10:	9901      	ldr	r1, [sp, #4]
 8005b12:	9800      	ldr	r0, [sp, #0]
 8005b14:	9e08      	ldr	r6, [sp, #32]
 8005b16:	321a      	adds	r2, #26
 8005b18:	47b0      	blx	r6
 8005b1a:	1c43      	adds	r3, r0, #1
 8005b1c:	d0e6      	beq.n	8005aec <_printf_common+0xa8>
 8005b1e:	3701      	adds	r7, #1
 8005b20:	e7d1      	b.n	8005ac6 <_printf_common+0x82>
	...

08005b24 <_printf_i>:
 8005b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b26:	b08b      	sub	sp, #44	; 0x2c
 8005b28:	9206      	str	r2, [sp, #24]
 8005b2a:	000a      	movs	r2, r1
 8005b2c:	3243      	adds	r2, #67	; 0x43
 8005b2e:	9307      	str	r3, [sp, #28]
 8005b30:	9005      	str	r0, [sp, #20]
 8005b32:	9204      	str	r2, [sp, #16]
 8005b34:	7e0a      	ldrb	r2, [r1, #24]
 8005b36:	000c      	movs	r4, r1
 8005b38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b3a:	2a78      	cmp	r2, #120	; 0x78
 8005b3c:	d806      	bhi.n	8005b4c <_printf_i+0x28>
 8005b3e:	2a62      	cmp	r2, #98	; 0x62
 8005b40:	d808      	bhi.n	8005b54 <_printf_i+0x30>
 8005b42:	2a00      	cmp	r2, #0
 8005b44:	d100      	bne.n	8005b48 <_printf_i+0x24>
 8005b46:	e0c0      	b.n	8005cca <_printf_i+0x1a6>
 8005b48:	2a58      	cmp	r2, #88	; 0x58
 8005b4a:	d052      	beq.n	8005bf2 <_printf_i+0xce>
 8005b4c:	0026      	movs	r6, r4
 8005b4e:	3642      	adds	r6, #66	; 0x42
 8005b50:	7032      	strb	r2, [r6, #0]
 8005b52:	e022      	b.n	8005b9a <_printf_i+0x76>
 8005b54:	0010      	movs	r0, r2
 8005b56:	3863      	subs	r0, #99	; 0x63
 8005b58:	2815      	cmp	r0, #21
 8005b5a:	d8f7      	bhi.n	8005b4c <_printf_i+0x28>
 8005b5c:	f7fa fadc 	bl	8000118 <__gnu_thumb1_case_shi>
 8005b60:	001f0016 	.word	0x001f0016
 8005b64:	fff6fff6 	.word	0xfff6fff6
 8005b68:	fff6fff6 	.word	0xfff6fff6
 8005b6c:	fff6001f 	.word	0xfff6001f
 8005b70:	fff6fff6 	.word	0xfff6fff6
 8005b74:	00a8fff6 	.word	0x00a8fff6
 8005b78:	009a0036 	.word	0x009a0036
 8005b7c:	fff6fff6 	.word	0xfff6fff6
 8005b80:	fff600b9 	.word	0xfff600b9
 8005b84:	fff60036 	.word	0xfff60036
 8005b88:	009efff6 	.word	0x009efff6
 8005b8c:	0026      	movs	r6, r4
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	3642      	adds	r6, #66	; 0x42
 8005b92:	1d11      	adds	r1, r2, #4
 8005b94:	6019      	str	r1, [r3, #0]
 8005b96:	6813      	ldr	r3, [r2, #0]
 8005b98:	7033      	strb	r3, [r6, #0]
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e0a7      	b.n	8005cee <_printf_i+0x1ca>
 8005b9e:	6808      	ldr	r0, [r1, #0]
 8005ba0:	6819      	ldr	r1, [r3, #0]
 8005ba2:	1d0a      	adds	r2, r1, #4
 8005ba4:	0605      	lsls	r5, r0, #24
 8005ba6:	d50b      	bpl.n	8005bc0 <_printf_i+0x9c>
 8005ba8:	680d      	ldr	r5, [r1, #0]
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	2d00      	cmp	r5, #0
 8005bae:	da03      	bge.n	8005bb8 <_printf_i+0x94>
 8005bb0:	232d      	movs	r3, #45	; 0x2d
 8005bb2:	9a04      	ldr	r2, [sp, #16]
 8005bb4:	426d      	negs	r5, r5
 8005bb6:	7013      	strb	r3, [r2, #0]
 8005bb8:	4b61      	ldr	r3, [pc, #388]	; (8005d40 <_printf_i+0x21c>)
 8005bba:	270a      	movs	r7, #10
 8005bbc:	9303      	str	r3, [sp, #12]
 8005bbe:	e032      	b.n	8005c26 <_printf_i+0x102>
 8005bc0:	680d      	ldr	r5, [r1, #0]
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	0641      	lsls	r1, r0, #25
 8005bc6:	d5f1      	bpl.n	8005bac <_printf_i+0x88>
 8005bc8:	b22d      	sxth	r5, r5
 8005bca:	e7ef      	b.n	8005bac <_printf_i+0x88>
 8005bcc:	680d      	ldr	r5, [r1, #0]
 8005bce:	6819      	ldr	r1, [r3, #0]
 8005bd0:	1d08      	adds	r0, r1, #4
 8005bd2:	6018      	str	r0, [r3, #0]
 8005bd4:	062e      	lsls	r6, r5, #24
 8005bd6:	d501      	bpl.n	8005bdc <_printf_i+0xb8>
 8005bd8:	680d      	ldr	r5, [r1, #0]
 8005bda:	e003      	b.n	8005be4 <_printf_i+0xc0>
 8005bdc:	066d      	lsls	r5, r5, #25
 8005bde:	d5fb      	bpl.n	8005bd8 <_printf_i+0xb4>
 8005be0:	680d      	ldr	r5, [r1, #0]
 8005be2:	b2ad      	uxth	r5, r5
 8005be4:	4b56      	ldr	r3, [pc, #344]	; (8005d40 <_printf_i+0x21c>)
 8005be6:	270a      	movs	r7, #10
 8005be8:	9303      	str	r3, [sp, #12]
 8005bea:	2a6f      	cmp	r2, #111	; 0x6f
 8005bec:	d117      	bne.n	8005c1e <_printf_i+0xfa>
 8005bee:	2708      	movs	r7, #8
 8005bf0:	e015      	b.n	8005c1e <_printf_i+0xfa>
 8005bf2:	3145      	adds	r1, #69	; 0x45
 8005bf4:	700a      	strb	r2, [r1, #0]
 8005bf6:	4a52      	ldr	r2, [pc, #328]	; (8005d40 <_printf_i+0x21c>)
 8005bf8:	9203      	str	r2, [sp, #12]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	6821      	ldr	r1, [r4, #0]
 8005bfe:	ca20      	ldmia	r2!, {r5}
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	0608      	lsls	r0, r1, #24
 8005c04:	d550      	bpl.n	8005ca8 <_printf_i+0x184>
 8005c06:	07cb      	lsls	r3, r1, #31
 8005c08:	d502      	bpl.n	8005c10 <_printf_i+0xec>
 8005c0a:	2320      	movs	r3, #32
 8005c0c:	4319      	orrs	r1, r3
 8005c0e:	6021      	str	r1, [r4, #0]
 8005c10:	2710      	movs	r7, #16
 8005c12:	2d00      	cmp	r5, #0
 8005c14:	d103      	bne.n	8005c1e <_printf_i+0xfa>
 8005c16:	2320      	movs	r3, #32
 8005c18:	6822      	ldr	r2, [r4, #0]
 8005c1a:	439a      	bics	r2, r3
 8005c1c:	6022      	str	r2, [r4, #0]
 8005c1e:	0023      	movs	r3, r4
 8005c20:	2200      	movs	r2, #0
 8005c22:	3343      	adds	r3, #67	; 0x43
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	6863      	ldr	r3, [r4, #4]
 8005c28:	60a3      	str	r3, [r4, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	db03      	blt.n	8005c36 <_printf_i+0x112>
 8005c2e:	2204      	movs	r2, #4
 8005c30:	6821      	ldr	r1, [r4, #0]
 8005c32:	4391      	bics	r1, r2
 8005c34:	6021      	str	r1, [r4, #0]
 8005c36:	2d00      	cmp	r5, #0
 8005c38:	d102      	bne.n	8005c40 <_printf_i+0x11c>
 8005c3a:	9e04      	ldr	r6, [sp, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00c      	beq.n	8005c5a <_printf_i+0x136>
 8005c40:	9e04      	ldr	r6, [sp, #16]
 8005c42:	0028      	movs	r0, r5
 8005c44:	0039      	movs	r1, r7
 8005c46:	f7fa faf7 	bl	8000238 <__aeabi_uidivmod>
 8005c4a:	9b03      	ldr	r3, [sp, #12]
 8005c4c:	3e01      	subs	r6, #1
 8005c4e:	5c5b      	ldrb	r3, [r3, r1]
 8005c50:	7033      	strb	r3, [r6, #0]
 8005c52:	002b      	movs	r3, r5
 8005c54:	0005      	movs	r5, r0
 8005c56:	429f      	cmp	r7, r3
 8005c58:	d9f3      	bls.n	8005c42 <_printf_i+0x11e>
 8005c5a:	2f08      	cmp	r7, #8
 8005c5c:	d109      	bne.n	8005c72 <_printf_i+0x14e>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	07db      	lsls	r3, r3, #31
 8005c62:	d506      	bpl.n	8005c72 <_printf_i+0x14e>
 8005c64:	6863      	ldr	r3, [r4, #4]
 8005c66:	6922      	ldr	r2, [r4, #16]
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	dc02      	bgt.n	8005c72 <_printf_i+0x14e>
 8005c6c:	2330      	movs	r3, #48	; 0x30
 8005c6e:	3e01      	subs	r6, #1
 8005c70:	7033      	strb	r3, [r6, #0]
 8005c72:	9b04      	ldr	r3, [sp, #16]
 8005c74:	1b9b      	subs	r3, r3, r6
 8005c76:	6123      	str	r3, [r4, #16]
 8005c78:	9b07      	ldr	r3, [sp, #28]
 8005c7a:	0021      	movs	r1, r4
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	9805      	ldr	r0, [sp, #20]
 8005c80:	9b06      	ldr	r3, [sp, #24]
 8005c82:	aa09      	add	r2, sp, #36	; 0x24
 8005c84:	f7ff fede 	bl	8005a44 <_printf_common>
 8005c88:	1c43      	adds	r3, r0, #1
 8005c8a:	d135      	bne.n	8005cf8 <_printf_i+0x1d4>
 8005c8c:	2001      	movs	r0, #1
 8005c8e:	4240      	negs	r0, r0
 8005c90:	b00b      	add	sp, #44	; 0x2c
 8005c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c94:	2220      	movs	r2, #32
 8005c96:	6809      	ldr	r1, [r1, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	6022      	str	r2, [r4, #0]
 8005c9c:	0022      	movs	r2, r4
 8005c9e:	2178      	movs	r1, #120	; 0x78
 8005ca0:	3245      	adds	r2, #69	; 0x45
 8005ca2:	7011      	strb	r1, [r2, #0]
 8005ca4:	4a27      	ldr	r2, [pc, #156]	; (8005d44 <_printf_i+0x220>)
 8005ca6:	e7a7      	b.n	8005bf8 <_printf_i+0xd4>
 8005ca8:	0648      	lsls	r0, r1, #25
 8005caa:	d5ac      	bpl.n	8005c06 <_printf_i+0xe2>
 8005cac:	b2ad      	uxth	r5, r5
 8005cae:	e7aa      	b.n	8005c06 <_printf_i+0xe2>
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	680d      	ldr	r5, [r1, #0]
 8005cb4:	1d10      	adds	r0, r2, #4
 8005cb6:	6949      	ldr	r1, [r1, #20]
 8005cb8:	6018      	str	r0, [r3, #0]
 8005cba:	6813      	ldr	r3, [r2, #0]
 8005cbc:	062e      	lsls	r6, r5, #24
 8005cbe:	d501      	bpl.n	8005cc4 <_printf_i+0x1a0>
 8005cc0:	6019      	str	r1, [r3, #0]
 8005cc2:	e002      	b.n	8005cca <_printf_i+0x1a6>
 8005cc4:	066d      	lsls	r5, r5, #25
 8005cc6:	d5fb      	bpl.n	8005cc0 <_printf_i+0x19c>
 8005cc8:	8019      	strh	r1, [r3, #0]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9e04      	ldr	r6, [sp, #16]
 8005cce:	6123      	str	r3, [r4, #16]
 8005cd0:	e7d2      	b.n	8005c78 <_printf_i+0x154>
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	1d11      	adds	r1, r2, #4
 8005cd6:	6019      	str	r1, [r3, #0]
 8005cd8:	6816      	ldr	r6, [r2, #0]
 8005cda:	2100      	movs	r1, #0
 8005cdc:	0030      	movs	r0, r6
 8005cde:	6862      	ldr	r2, [r4, #4]
 8005ce0:	f000 f832 	bl	8005d48 <memchr>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d001      	beq.n	8005cec <_printf_i+0x1c8>
 8005ce8:	1b80      	subs	r0, r0, r6
 8005cea:	6060      	str	r0, [r4, #4]
 8005cec:	6863      	ldr	r3, [r4, #4]
 8005cee:	6123      	str	r3, [r4, #16]
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	9a04      	ldr	r2, [sp, #16]
 8005cf4:	7013      	strb	r3, [r2, #0]
 8005cf6:	e7bf      	b.n	8005c78 <_printf_i+0x154>
 8005cf8:	6923      	ldr	r3, [r4, #16]
 8005cfa:	0032      	movs	r2, r6
 8005cfc:	9906      	ldr	r1, [sp, #24]
 8005cfe:	9805      	ldr	r0, [sp, #20]
 8005d00:	9d07      	ldr	r5, [sp, #28]
 8005d02:	47a8      	blx	r5
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	d0c1      	beq.n	8005c8c <_printf_i+0x168>
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	079b      	lsls	r3, r3, #30
 8005d0c:	d415      	bmi.n	8005d3a <_printf_i+0x216>
 8005d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d10:	68e0      	ldr	r0, [r4, #12]
 8005d12:	4298      	cmp	r0, r3
 8005d14:	dabc      	bge.n	8005c90 <_printf_i+0x16c>
 8005d16:	0018      	movs	r0, r3
 8005d18:	e7ba      	b.n	8005c90 <_printf_i+0x16c>
 8005d1a:	0022      	movs	r2, r4
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	9906      	ldr	r1, [sp, #24]
 8005d20:	9805      	ldr	r0, [sp, #20]
 8005d22:	9e07      	ldr	r6, [sp, #28]
 8005d24:	3219      	adds	r2, #25
 8005d26:	47b0      	blx	r6
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	d0af      	beq.n	8005c8c <_printf_i+0x168>
 8005d2c:	3501      	adds	r5, #1
 8005d2e:	68e3      	ldr	r3, [r4, #12]
 8005d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d32:	1a9b      	subs	r3, r3, r2
 8005d34:	42ab      	cmp	r3, r5
 8005d36:	dcf0      	bgt.n	8005d1a <_printf_i+0x1f6>
 8005d38:	e7e9      	b.n	8005d0e <_printf_i+0x1ea>
 8005d3a:	2500      	movs	r5, #0
 8005d3c:	e7f7      	b.n	8005d2e <_printf_i+0x20a>
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	08006099 	.word	0x08006099
 8005d44:	080060aa 	.word	0x080060aa

08005d48 <memchr>:
 8005d48:	b2c9      	uxtb	r1, r1
 8005d4a:	1882      	adds	r2, r0, r2
 8005d4c:	4290      	cmp	r0, r2
 8005d4e:	d101      	bne.n	8005d54 <memchr+0xc>
 8005d50:	2000      	movs	r0, #0
 8005d52:	4770      	bx	lr
 8005d54:	7803      	ldrb	r3, [r0, #0]
 8005d56:	428b      	cmp	r3, r1
 8005d58:	d0fb      	beq.n	8005d52 <memchr+0xa>
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	e7f6      	b.n	8005d4c <memchr+0x4>

08005d5e <memmove>:
 8005d5e:	b510      	push	{r4, lr}
 8005d60:	4288      	cmp	r0, r1
 8005d62:	d902      	bls.n	8005d6a <memmove+0xc>
 8005d64:	188b      	adds	r3, r1, r2
 8005d66:	4298      	cmp	r0, r3
 8005d68:	d303      	bcc.n	8005d72 <memmove+0x14>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e007      	b.n	8005d7e <memmove+0x20>
 8005d6e:	5c8b      	ldrb	r3, [r1, r2]
 8005d70:	5483      	strb	r3, [r0, r2]
 8005d72:	3a01      	subs	r2, #1
 8005d74:	d2fb      	bcs.n	8005d6e <memmove+0x10>
 8005d76:	bd10      	pop	{r4, pc}
 8005d78:	5ccc      	ldrb	r4, [r1, r3]
 8005d7a:	54c4      	strb	r4, [r0, r3]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d1fa      	bne.n	8005d78 <memmove+0x1a>
 8005d82:	e7f8      	b.n	8005d76 <memmove+0x18>

08005d84 <_free_r>:
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	0005      	movs	r5, r0
 8005d88:	2900      	cmp	r1, #0
 8005d8a:	d010      	beq.n	8005dae <_free_r+0x2a>
 8005d8c:	1f0c      	subs	r4, r1, #4
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	da00      	bge.n	8005d96 <_free_r+0x12>
 8005d94:	18e4      	adds	r4, r4, r3
 8005d96:	0028      	movs	r0, r5
 8005d98:	f000 f8d4 	bl	8005f44 <__malloc_lock>
 8005d9c:	4a1d      	ldr	r2, [pc, #116]	; (8005e14 <_free_r+0x90>)
 8005d9e:	6813      	ldr	r3, [r2, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d105      	bne.n	8005db0 <_free_r+0x2c>
 8005da4:	6063      	str	r3, [r4, #4]
 8005da6:	6014      	str	r4, [r2, #0]
 8005da8:	0028      	movs	r0, r5
 8005daa:	f000 f8d3 	bl	8005f54 <__malloc_unlock>
 8005dae:	bd70      	pop	{r4, r5, r6, pc}
 8005db0:	42a3      	cmp	r3, r4
 8005db2:	d908      	bls.n	8005dc6 <_free_r+0x42>
 8005db4:	6821      	ldr	r1, [r4, #0]
 8005db6:	1860      	adds	r0, r4, r1
 8005db8:	4283      	cmp	r3, r0
 8005dba:	d1f3      	bne.n	8005da4 <_free_r+0x20>
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	1841      	adds	r1, r0, r1
 8005dc2:	6021      	str	r1, [r4, #0]
 8005dc4:	e7ee      	b.n	8005da4 <_free_r+0x20>
 8005dc6:	001a      	movs	r2, r3
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <_free_r+0x4e>
 8005dce:	42a3      	cmp	r3, r4
 8005dd0:	d9f9      	bls.n	8005dc6 <_free_r+0x42>
 8005dd2:	6811      	ldr	r1, [r2, #0]
 8005dd4:	1850      	adds	r0, r2, r1
 8005dd6:	42a0      	cmp	r0, r4
 8005dd8:	d10b      	bne.n	8005df2 <_free_r+0x6e>
 8005dda:	6820      	ldr	r0, [r4, #0]
 8005ddc:	1809      	adds	r1, r1, r0
 8005dde:	1850      	adds	r0, r2, r1
 8005de0:	6011      	str	r1, [r2, #0]
 8005de2:	4283      	cmp	r3, r0
 8005de4:	d1e0      	bne.n	8005da8 <_free_r+0x24>
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	1841      	adds	r1, r0, r1
 8005dec:	6011      	str	r1, [r2, #0]
 8005dee:	6053      	str	r3, [r2, #4]
 8005df0:	e7da      	b.n	8005da8 <_free_r+0x24>
 8005df2:	42a0      	cmp	r0, r4
 8005df4:	d902      	bls.n	8005dfc <_free_r+0x78>
 8005df6:	230c      	movs	r3, #12
 8005df8:	602b      	str	r3, [r5, #0]
 8005dfa:	e7d5      	b.n	8005da8 <_free_r+0x24>
 8005dfc:	6821      	ldr	r1, [r4, #0]
 8005dfe:	1860      	adds	r0, r4, r1
 8005e00:	4283      	cmp	r3, r0
 8005e02:	d103      	bne.n	8005e0c <_free_r+0x88>
 8005e04:	6818      	ldr	r0, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	1841      	adds	r1, r0, r1
 8005e0a:	6021      	str	r1, [r4, #0]
 8005e0c:	6063      	str	r3, [r4, #4]
 8005e0e:	6054      	str	r4, [r2, #4]
 8005e10:	e7ca      	b.n	8005da8 <_free_r+0x24>
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	20000560 	.word	0x20000560

08005e18 <_malloc_r>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	1ccd      	adds	r5, r1, #3
 8005e1e:	439d      	bics	r5, r3
 8005e20:	3508      	adds	r5, #8
 8005e22:	0006      	movs	r6, r0
 8005e24:	2d0c      	cmp	r5, #12
 8005e26:	d21f      	bcs.n	8005e68 <_malloc_r+0x50>
 8005e28:	250c      	movs	r5, #12
 8005e2a:	42a9      	cmp	r1, r5
 8005e2c:	d81e      	bhi.n	8005e6c <_malloc_r+0x54>
 8005e2e:	0030      	movs	r0, r6
 8005e30:	f000 f888 	bl	8005f44 <__malloc_lock>
 8005e34:	4925      	ldr	r1, [pc, #148]	; (8005ecc <_malloc_r+0xb4>)
 8005e36:	680a      	ldr	r2, [r1, #0]
 8005e38:	0014      	movs	r4, r2
 8005e3a:	2c00      	cmp	r4, #0
 8005e3c:	d11a      	bne.n	8005e74 <_malloc_r+0x5c>
 8005e3e:	4f24      	ldr	r7, [pc, #144]	; (8005ed0 <_malloc_r+0xb8>)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d104      	bne.n	8005e50 <_malloc_r+0x38>
 8005e46:	0021      	movs	r1, r4
 8005e48:	0030      	movs	r0, r6
 8005e4a:	f000 f869 	bl	8005f20 <_sbrk_r>
 8005e4e:	6038      	str	r0, [r7, #0]
 8005e50:	0029      	movs	r1, r5
 8005e52:	0030      	movs	r0, r6
 8005e54:	f000 f864 	bl	8005f20 <_sbrk_r>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d12b      	bne.n	8005eb4 <_malloc_r+0x9c>
 8005e5c:	230c      	movs	r3, #12
 8005e5e:	0030      	movs	r0, r6
 8005e60:	6033      	str	r3, [r6, #0]
 8005e62:	f000 f877 	bl	8005f54 <__malloc_unlock>
 8005e66:	e003      	b.n	8005e70 <_malloc_r+0x58>
 8005e68:	2d00      	cmp	r5, #0
 8005e6a:	dade      	bge.n	8005e2a <_malloc_r+0x12>
 8005e6c:	230c      	movs	r3, #12
 8005e6e:	6033      	str	r3, [r6, #0]
 8005e70:	2000      	movs	r0, #0
 8005e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	1b5b      	subs	r3, r3, r5
 8005e78:	d419      	bmi.n	8005eae <_malloc_r+0x96>
 8005e7a:	2b0b      	cmp	r3, #11
 8005e7c:	d903      	bls.n	8005e86 <_malloc_r+0x6e>
 8005e7e:	6023      	str	r3, [r4, #0]
 8005e80:	18e4      	adds	r4, r4, r3
 8005e82:	6025      	str	r5, [r4, #0]
 8005e84:	e003      	b.n	8005e8e <_malloc_r+0x76>
 8005e86:	6863      	ldr	r3, [r4, #4]
 8005e88:	42a2      	cmp	r2, r4
 8005e8a:	d10e      	bne.n	8005eaa <_malloc_r+0x92>
 8005e8c:	600b      	str	r3, [r1, #0]
 8005e8e:	0030      	movs	r0, r6
 8005e90:	f000 f860 	bl	8005f54 <__malloc_unlock>
 8005e94:	0020      	movs	r0, r4
 8005e96:	2207      	movs	r2, #7
 8005e98:	300b      	adds	r0, #11
 8005e9a:	1d23      	adds	r3, r4, #4
 8005e9c:	4390      	bics	r0, r2
 8005e9e:	1ac2      	subs	r2, r0, r3
 8005ea0:	4298      	cmp	r0, r3
 8005ea2:	d0e6      	beq.n	8005e72 <_malloc_r+0x5a>
 8005ea4:	1a1b      	subs	r3, r3, r0
 8005ea6:	50a3      	str	r3, [r4, r2]
 8005ea8:	e7e3      	b.n	8005e72 <_malloc_r+0x5a>
 8005eaa:	6053      	str	r3, [r2, #4]
 8005eac:	e7ef      	b.n	8005e8e <_malloc_r+0x76>
 8005eae:	0022      	movs	r2, r4
 8005eb0:	6864      	ldr	r4, [r4, #4]
 8005eb2:	e7c2      	b.n	8005e3a <_malloc_r+0x22>
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	1cc4      	adds	r4, r0, #3
 8005eb8:	439c      	bics	r4, r3
 8005eba:	42a0      	cmp	r0, r4
 8005ebc:	d0e1      	beq.n	8005e82 <_malloc_r+0x6a>
 8005ebe:	1a21      	subs	r1, r4, r0
 8005ec0:	0030      	movs	r0, r6
 8005ec2:	f000 f82d 	bl	8005f20 <_sbrk_r>
 8005ec6:	1c43      	adds	r3, r0, #1
 8005ec8:	d1db      	bne.n	8005e82 <_malloc_r+0x6a>
 8005eca:	e7c7      	b.n	8005e5c <_malloc_r+0x44>
 8005ecc:	20000560 	.word	0x20000560
 8005ed0:	20000564 	.word	0x20000564

08005ed4 <_realloc_r>:
 8005ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed6:	0007      	movs	r7, r0
 8005ed8:	000d      	movs	r5, r1
 8005eda:	0016      	movs	r6, r2
 8005edc:	2900      	cmp	r1, #0
 8005ede:	d105      	bne.n	8005eec <_realloc_r+0x18>
 8005ee0:	0011      	movs	r1, r2
 8005ee2:	f7ff ff99 	bl	8005e18 <_malloc_r>
 8005ee6:	0004      	movs	r4, r0
 8005ee8:	0020      	movs	r0, r4
 8005eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eec:	2a00      	cmp	r2, #0
 8005eee:	d103      	bne.n	8005ef8 <_realloc_r+0x24>
 8005ef0:	f7ff ff48 	bl	8005d84 <_free_r>
 8005ef4:	0034      	movs	r4, r6
 8005ef6:	e7f7      	b.n	8005ee8 <_realloc_r+0x14>
 8005ef8:	f000 f834 	bl	8005f64 <_malloc_usable_size_r>
 8005efc:	002c      	movs	r4, r5
 8005efe:	42b0      	cmp	r0, r6
 8005f00:	d2f2      	bcs.n	8005ee8 <_realloc_r+0x14>
 8005f02:	0031      	movs	r1, r6
 8005f04:	0038      	movs	r0, r7
 8005f06:	f7ff ff87 	bl	8005e18 <_malloc_r>
 8005f0a:	1e04      	subs	r4, r0, #0
 8005f0c:	d0ec      	beq.n	8005ee8 <_realloc_r+0x14>
 8005f0e:	0029      	movs	r1, r5
 8005f10:	0032      	movs	r2, r6
 8005f12:	f7ff fc03 	bl	800571c <memcpy>
 8005f16:	0029      	movs	r1, r5
 8005f18:	0038      	movs	r0, r7
 8005f1a:	f7ff ff33 	bl	8005d84 <_free_r>
 8005f1e:	e7e3      	b.n	8005ee8 <_realloc_r+0x14>

08005f20 <_sbrk_r>:
 8005f20:	2300      	movs	r3, #0
 8005f22:	b570      	push	{r4, r5, r6, lr}
 8005f24:	4d06      	ldr	r5, [pc, #24]	; (8005f40 <_sbrk_r+0x20>)
 8005f26:	0004      	movs	r4, r0
 8005f28:	0008      	movs	r0, r1
 8005f2a:	602b      	str	r3, [r5, #0]
 8005f2c:	f7fc f838 	bl	8001fa0 <_sbrk>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d103      	bne.n	8005f3c <_sbrk_r+0x1c>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d000      	beq.n	8005f3c <_sbrk_r+0x1c>
 8005f3a:	6023      	str	r3, [r4, #0]
 8005f3c:	bd70      	pop	{r4, r5, r6, pc}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	20000754 	.word	0x20000754

08005f44 <__malloc_lock>:
 8005f44:	b510      	push	{r4, lr}
 8005f46:	4802      	ldr	r0, [pc, #8]	; (8005f50 <__malloc_lock+0xc>)
 8005f48:	f000 f814 	bl	8005f74 <__retarget_lock_acquire_recursive>
 8005f4c:	bd10      	pop	{r4, pc}
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	2000075c 	.word	0x2000075c

08005f54 <__malloc_unlock>:
 8005f54:	b510      	push	{r4, lr}
 8005f56:	4802      	ldr	r0, [pc, #8]	; (8005f60 <__malloc_unlock+0xc>)
 8005f58:	f000 f80d 	bl	8005f76 <__retarget_lock_release_recursive>
 8005f5c:	bd10      	pop	{r4, pc}
 8005f5e:	46c0      	nop			; (mov r8, r8)
 8005f60:	2000075c 	.word	0x2000075c

08005f64 <_malloc_usable_size_r>:
 8005f64:	1f0b      	subs	r3, r1, #4
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	1f18      	subs	r0, r3, #4
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	da01      	bge.n	8005f72 <_malloc_usable_size_r+0xe>
 8005f6e:	580b      	ldr	r3, [r1, r0]
 8005f70:	18c0      	adds	r0, r0, r3
 8005f72:	4770      	bx	lr

08005f74 <__retarget_lock_acquire_recursive>:
 8005f74:	4770      	bx	lr

08005f76 <__retarget_lock_release_recursive>:
 8005f76:	4770      	bx	lr

08005f78 <_init>:
 8005f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7e:	bc08      	pop	{r3}
 8005f80:	469e      	mov	lr, r3
 8005f82:	4770      	bx	lr

08005f84 <_fini>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8a:	bc08      	pop	{r3}
 8005f8c:	469e      	mov	lr, r3
 8005f8e:	4770      	bx	lr
