
pgm_comtage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004aa4  08004aa4  00014aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b9c  08004b9c  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  08004b9c  08004b9c  00014b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ba4  08004ba4  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ba8  08004ba8  00014ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08004bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000224  08004dd0  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08004dd0  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b405  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bef  00000000  00000000  0002b651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  0002d240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  0002da38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d29  00000000  00000000  0002e188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab1c  00000000  00000000  00041eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007be6f  00000000  00000000  0004c9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c883c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001efc  00000000  00000000  000c8890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000224 	.word	0x20000224
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004a8c 	.word	0x08004a8c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000228 	.word	0x20000228
 8000104:	08004a8c 	.word	0x08004a8c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8ba 	bl	800046c <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8b5 	bl	800046c <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzdi2>:
 800046c:	b510      	push	{r4, lr}
 800046e:	2900      	cmp	r1, #0
 8000470:	d103      	bne.n	800047a <__clzdi2+0xe>
 8000472:	f000 f807 	bl	8000484 <__clzsi2>
 8000476:	3020      	adds	r0, #32
 8000478:	e002      	b.n	8000480 <__clzdi2+0x14>
 800047a:	1c08      	adds	r0, r1, #0
 800047c:	f000 f802 	bl	8000484 <__clzsi2>
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__clzsi2>:
 8000484:	211c      	movs	r1, #28
 8000486:	2301      	movs	r3, #1
 8000488:	041b      	lsls	r3, r3, #16
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0xe>
 800048e:	0c00      	lsrs	r0, r0, #16
 8000490:	3910      	subs	r1, #16
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	4298      	cmp	r0, r3
 8000496:	d301      	bcc.n	800049c <__clzsi2+0x18>
 8000498:	0a00      	lsrs	r0, r0, #8
 800049a:	3908      	subs	r1, #8
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	4298      	cmp	r0, r3
 80004a0:	d301      	bcc.n	80004a6 <__clzsi2+0x22>
 80004a2:	0900      	lsrs	r0, r0, #4
 80004a4:	3904      	subs	r1, #4
 80004a6:	a202      	add	r2, pc, #8	; (adr r2, 80004b0 <__clzsi2+0x2c>)
 80004a8:	5c10      	ldrb	r0, [r2, r0]
 80004aa:	1840      	adds	r0, r0, r1
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	02020304 	.word	0x02020304
 80004b4:	01010101 	.word	0x01010101
	...

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b08f      	sub	sp, #60	; 0x3c
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 ffb3 	bl	8001430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f9ad 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 fa7d 	bl	80009cc <MX_GPIO_Init>
  MX_USART5_UART_Init();
 80004d2:	f000 fa4b 	bl	800096c <MX_USART5_UART_Init>
  MX_USART2_UART_Init();
 80004d6:	f000 fa19 	bl	800090c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, LED_R, GPIO_PIN_SET);
 80004da:	4bbf      	ldr	r3, [pc, #764]	; (80007d8 <main+0x318>)
 80004dc:	2201      	movs	r2, #1
 80004de:	2104      	movs	r1, #4
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 fb3a 	bl	8001b5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_V, GPIO_PIN_RESET);
 80004e6:	2380      	movs	r3, #128	; 0x80
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	48bb      	ldr	r0, [pc, #748]	; (80007d8 <main+0x318>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	0019      	movs	r1, r3
 80004f0:	f001 fb33 	bl	8001b5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XBEE_SLEEP, 0);
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	0219      	lsls	r1, r3, #8
 80004f8:	23a0      	movs	r3, #160	; 0xa0
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	2200      	movs	r2, #0
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 fb2b 	bl	8001b5a <HAL_GPIO_WritePin>


  HAL_UART_Receive_IT(&huart5, &xbee_rx_last_byte, 1);
 8000504:	49b5      	ldr	r1, [pc, #724]	; (80007dc <main+0x31c>)
 8000506:	4bb6      	ldr	r3, [pc, #728]	; (80007e0 <main+0x320>)
 8000508:	2201      	movs	r2, #1
 800050a:	0018      	movs	r0, r3
 800050c:	f002 fbc6 	bl	8002c9c <HAL_UART_Receive_IT>

//  xbee_send_state = config_over;
  xbee_send_state = enter_command_mode;
 8000510:	4bb4      	ldr	r3, [pc, #720]	; (80007e4 <main+0x324>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
  while(xbee_send_state != config_over){
 8000516:	e137      	b.n	8000788 <main+0x2c8>
	  static uint16_t timeout;
	  char string[50] = {0};
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	3304      	adds	r3, #4
 8000520:	222e      	movs	r2, #46	; 0x2e
 8000522:	2100      	movs	r1, #0
 8000524:	0018      	movs	r0, r3
 8000526:	f003 fe8c 	bl	8004242 <memset>
	  switch(xbee_send_state){
 800052a:	4bae      	ldr	r3, [pc, #696]	; (80007e4 <main+0x324>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b05      	cmp	r3, #5
 8000530:	d900      	bls.n	8000534 <main+0x74>
 8000532:	e122      	b.n	800077a <main+0x2ba>
 8000534:	009a      	lsls	r2, r3, #2
 8000536:	4bac      	ldr	r3, [pc, #688]	; (80007e8 <main+0x328>)
 8000538:	18d3      	adds	r3, r2, r3
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	469f      	mov	pc, r3

		  case enter_command_mode:
			  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_2);
 800053e:	4ba6      	ldr	r3, [pc, #664]	; (80007d8 <main+0x318>)
 8000540:	2104      	movs	r1, #4
 8000542:	0018      	movs	r0, r3
 8000544:	f001 fb26 	bl	8001b94 <HAL_GPIO_TogglePin>
			  HAL_UART_Transmit(&huart5, "+++", 3, 100);
 8000548:	49a8      	ldr	r1, [pc, #672]	; (80007ec <main+0x32c>)
 800054a:	48a5      	ldr	r0, [pc, #660]	; (80007e0 <main+0x320>)
 800054c:	2364      	movs	r3, #100	; 0x64
 800054e:	2203      	movs	r2, #3
 8000550:	f002 fafc 	bl	8002b4c <HAL_UART_Transmit>
			  timeout = 0;
 8000554:	4ba6      	ldr	r3, [pc, #664]	; (80007f0 <main+0x330>)
 8000556:	2200      	movs	r2, #0
 8000558:	801a      	strh	r2, [r3, #0]
			  xbee_send_state = command_mode_ok;
 800055a:	4ba2      	ldr	r3, [pc, #648]	; (80007e4 <main+0x324>)
 800055c:	2201      	movs	r2, #1
 800055e:	701a      	strb	r2, [r3, #0]
		  break;
 8000560:	e112      	b.n	8000788 <main+0x2c8>

		  case command_mode_ok:
			  if(cr_flag){
 8000562:	4ba4      	ldr	r3, [pc, #656]	; (80007f4 <main+0x334>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d01a      	beq.n	80005a0 <main+0xe0>
				  if(xbee_rx_buffer[cr_flag-2] == 'O' && xbee_rx_buffer[cr_flag-1] == 'K'){
 800056a:	4ba2      	ldr	r3, [pc, #648]	; (80007f4 <main+0x334>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	3b02      	subs	r3, #2
 8000570:	4aa1      	ldr	r2, [pc, #644]	; (80007f8 <main+0x338>)
 8000572:	5cd3      	ldrb	r3, [r2, r3]
 8000574:	2b4f      	cmp	r3, #79	; 0x4f
 8000576:	d10f      	bne.n	8000598 <main+0xd8>
 8000578:	4b9e      	ldr	r3, [pc, #632]	; (80007f4 <main+0x334>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	3b01      	subs	r3, #1
 800057e:	4a9e      	ldr	r2, [pc, #632]	; (80007f8 <main+0x338>)
 8000580:	5cd3      	ldrb	r3, [r2, r3]
 8000582:	2b4b      	cmp	r3, #75	; 0x4b
 8000584:	d108      	bne.n	8000598 <main+0xd8>
					  xbee_send_state = single_command;
 8000586:	4b97      	ldr	r3, [pc, #604]	; (80007e4 <main+0x324>)
 8000588:	2204      	movs	r2, #4
 800058a:	701a      	strb	r2, [r3, #0]
					  HAL_Delay(10);
 800058c:	200a      	movs	r0, #10
 800058e:	f000 ffbf 	bl	8001510 <HAL_Delay>
					  timeout = 0;
 8000592:	4b97      	ldr	r3, [pc, #604]	; (80007f0 <main+0x330>)
 8000594:	2200      	movs	r2, #0
 8000596:	801a      	strh	r2, [r3, #0]
				  }
				  cr_flag = 0;
 8000598:	4b96      	ldr	r3, [pc, #600]	; (80007f4 <main+0x334>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
				  HAL_Delay(1);
				  timeout++;
				  if (timeout >= timeout_duration)
					  xbee_send_state = enter_command_mode;
			  }
		  break;
 800059e:	e0ee      	b.n	800077e <main+0x2be>
				  HAL_Delay(1);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 ffb5 	bl	8001510 <HAL_Delay>
				  timeout++;
 80005a6:	4b92      	ldr	r3, [pc, #584]	; (80007f0 <main+0x330>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	3301      	adds	r3, #1
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	4b90      	ldr	r3, [pc, #576]	; (80007f0 <main+0x330>)
 80005b0:	801a      	strh	r2, [r3, #0]
				  if (timeout >= timeout_duration)
 80005b2:	4b8f      	ldr	r3, [pc, #572]	; (80007f0 <main+0x330>)
 80005b4:	881a      	ldrh	r2, [r3, #0]
 80005b6:	23fa      	movs	r3, #250	; 0xfa
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d200      	bcs.n	80005c0 <main+0x100>
 80005be:	e0de      	b.n	800077e <main+0x2be>
					  xbee_send_state = enter_command_mode;
 80005c0:	4b88      	ldr	r3, [pc, #544]	; (80007e4 <main+0x324>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
		  break;
 80005c6:	e0da      	b.n	800077e <main+0x2be>

		  case single_command:
			  if (xbee_reset==0){
 80005c8:	4b8c      	ldr	r3, [pc, #560]	; (80007fc <main+0x33c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d108      	bne.n	80005e2 <main+0x122>
				  HAL_UART_Transmit(&huart5, "ATRE\r", 5, 100);
 80005d0:	498b      	ldr	r1, [pc, #556]	; (8000800 <main+0x340>)
 80005d2:	4883      	ldr	r0, [pc, #524]	; (80007e0 <main+0x320>)
 80005d4:	2364      	movs	r3, #100	; 0x64
 80005d6:	2205      	movs	r2, #5
 80005d8:	f002 fab8 	bl	8002b4c <HAL_UART_Transmit>
				  xbee_reset = 1;
 80005dc:	4b87      	ldr	r3, [pc, #540]	; (80007fc <main+0x33c>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
			  }
			  timeout = 0;
 80005e2:	4b83      	ldr	r3, [pc, #524]	; (80007f0 <main+0x330>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	801a      	strh	r2, [r3, #0]
			  xbee_send_state = single_command_ok;
 80005e8:	4b7e      	ldr	r3, [pc, #504]	; (80007e4 <main+0x324>)
 80005ea:	2205      	movs	r2, #5
 80005ec:	701a      	strb	r2, [r3, #0]
		  break;
 80005ee:	e0cb      	b.n	8000788 <main+0x2c8>

		  case single_command_ok:
			  if(cr_flag){
 80005f0:	4b80      	ldr	r3, [pc, #512]	; (80007f4 <main+0x334>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d01a      	beq.n	800062e <main+0x16e>
				  if(xbee_rx_buffer[cr_flag-2] == 'O' && xbee_rx_buffer[cr_flag-1] == 'K'){
 80005f8:	4b7e      	ldr	r3, [pc, #504]	; (80007f4 <main+0x334>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	3b02      	subs	r3, #2
 80005fe:	4a7e      	ldr	r2, [pc, #504]	; (80007f8 <main+0x338>)
 8000600:	5cd3      	ldrb	r3, [r2, r3]
 8000602:	2b4f      	cmp	r3, #79	; 0x4f
 8000604:	d10f      	bne.n	8000626 <main+0x166>
 8000606:	4b7b      	ldr	r3, [pc, #492]	; (80007f4 <main+0x334>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	3b01      	subs	r3, #1
 800060c:	4a7a      	ldr	r2, [pc, #488]	; (80007f8 <main+0x338>)
 800060e:	5cd3      	ldrb	r3, [r2, r3]
 8000610:	2b4b      	cmp	r3, #75	; 0x4b
 8000612:	d108      	bne.n	8000626 <main+0x166>
					  xbee_send_state = send_config;
 8000614:	4b73      	ldr	r3, [pc, #460]	; (80007e4 <main+0x324>)
 8000616:	2202      	movs	r2, #2
 8000618:	701a      	strb	r2, [r3, #0]
					  HAL_Delay(10);
 800061a:	200a      	movs	r0, #10
 800061c:	f000 ff78 	bl	8001510 <HAL_Delay>
					  timeout = 0;
 8000620:	4b73      	ldr	r3, [pc, #460]	; (80007f0 <main+0x330>)
 8000622:	2200      	movs	r2, #0
 8000624:	801a      	strh	r2, [r3, #0]
				  }
				  cr_flag = 0;
 8000626:	4b73      	ldr	r3, [pc, #460]	; (80007f4 <main+0x334>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
				  HAL_Delay(1);
				  timeout++;
				  if (timeout >= timeout_duration)
					  xbee_send_state = enter_command_mode;
			  }
		  break;
 800062c:	e0a9      	b.n	8000782 <main+0x2c2>
				  HAL_Delay(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f000 ff6e 	bl	8001510 <HAL_Delay>
				  timeout++;
 8000634:	4b6e      	ldr	r3, [pc, #440]	; (80007f0 <main+0x330>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	b29a      	uxth	r2, r3
 800063c:	4b6c      	ldr	r3, [pc, #432]	; (80007f0 <main+0x330>)
 800063e:	801a      	strh	r2, [r3, #0]
				  if (timeout >= timeout_duration)
 8000640:	4b6b      	ldr	r3, [pc, #428]	; (80007f0 <main+0x330>)
 8000642:	881a      	ldrh	r2, [r3, #0]
 8000644:	23fa      	movs	r3, #250	; 0xfa
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	429a      	cmp	r2, r3
 800064a:	d200      	bcs.n	800064e <main+0x18e>
 800064c:	e099      	b.n	8000782 <main+0x2c2>
					  xbee_send_state = enter_command_mode;
 800064e:	4b65      	ldr	r3, [pc, #404]	; (80007e4 <main+0x324>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
		  break;
 8000654:	e095      	b.n	8000782 <main+0x2c2>

		  case send_config:

			  if(config_step == config_length){
 8000656:	4b6b      	ldr	r3, [pc, #428]	; (8000804 <main+0x344>)
 8000658:	781a      	ldrb	r2, [r3, #0]
 800065a:	4b6b      	ldr	r3, [pc, #428]	; (8000808 <main+0x348>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	429a      	cmp	r2, r3
 8000660:	d106      	bne.n	8000670 <main+0x1b0>
				  sprintf(string, "ATWR\r");
 8000662:	4a6a      	ldr	r2, [pc, #424]	; (800080c <main+0x34c>)
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	0011      	movs	r1, r2
 8000668:	0018      	movs	r0, r3
 800066a:	f003 fdf3 	bl	8004254 <siprintf>
 800066e:	e018      	b.n	80006a2 <main+0x1e2>
			  }
			  else sprintf(string, "AT%s%s\r", config[config_step][0], config[config_step][1]);
 8000670:	4b64      	ldr	r3, [pc, #400]	; (8000804 <main+0x344>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	001a      	movs	r2, r3
 8000676:	0013      	movs	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	189b      	adds	r3, r3, r2
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	4a64      	ldr	r2, [pc, #400]	; (8000810 <main+0x350>)
 8000680:	189c      	adds	r4, r3, r2
 8000682:	4b60      	ldr	r3, [pc, #384]	; (8000804 <main+0x344>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	001a      	movs	r2, r3
 8000688:	0013      	movs	r3, r2
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	189b      	adds	r3, r3, r2
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	330a      	adds	r3, #10
 8000692:	001a      	movs	r2, r3
 8000694:	4b5e      	ldr	r3, [pc, #376]	; (8000810 <main+0x350>)
 8000696:	18d3      	adds	r3, r2, r3
 8000698:	495e      	ldr	r1, [pc, #376]	; (8000814 <main+0x354>)
 800069a:	1d38      	adds	r0, r7, #4
 800069c:	0022      	movs	r2, r4
 800069e:	f003 fdd9 	bl	8004254 <siprintf>


			  HAL_UART_Transmit(&huart5, string, strlen(string), 100);
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	0018      	movs	r0, r3
 80006a6:	f7ff fd2f 	bl	8000108 <strlen>
 80006aa:	0003      	movs	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	1d39      	adds	r1, r7, #4
 80006b0:	484b      	ldr	r0, [pc, #300]	; (80007e0 <main+0x320>)
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	f002 fa4a 	bl	8002b4c <HAL_UART_Transmit>
			  xbee_send_state = config_ok;
 80006b8:	4b4a      	ldr	r3, [pc, #296]	; (80007e4 <main+0x324>)
 80006ba:	2203      	movs	r2, #3
 80006bc:	701a      	strb	r2, [r3, #0]
		  break;
 80006be:	e063      	b.n	8000788 <main+0x2c8>

		  case config_ok:
			  if(cr_flag){
 80006c0:	4b4c      	ldr	r3, [pc, #304]	; (80007f4 <main+0x334>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d036      	beq.n	8000736 <main+0x276>
				  if(xbee_rx_buffer[cr_flag-2] == 'O' && xbee_rx_buffer[cr_flag-1] == 'K'){
 80006c8:	4b4a      	ldr	r3, [pc, #296]	; (80007f4 <main+0x334>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	3b02      	subs	r3, #2
 80006ce:	4a4a      	ldr	r2, [pc, #296]	; (80007f8 <main+0x338>)
 80006d0:	5cd3      	ldrb	r3, [r2, r3]
 80006d2:	2b4f      	cmp	r3, #79	; 0x4f
 80006d4:	d12c      	bne.n	8000730 <main+0x270>
 80006d6:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <main+0x334>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	3b01      	subs	r3, #1
 80006dc:	4a46      	ldr	r2, [pc, #280]	; (80007f8 <main+0x338>)
 80006de:	5cd3      	ldrb	r3, [r2, r3]
 80006e0:	2b4b      	cmp	r3, #75	; 0x4b
 80006e2:	d125      	bne.n	8000730 <main+0x270>
					  if(config_step == config_length){
 80006e4:	4b47      	ldr	r3, [pc, #284]	; (8000804 <main+0x344>)
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	4b47      	ldr	r3, [pc, #284]	; (8000808 <main+0x348>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d110      	bne.n	8000712 <main+0x252>
						  HAL_GPIO_WritePin(GPIOB, LED_R, GPIO_PIN_RESET);
 80006f0:	4b39      	ldr	r3, [pc, #228]	; (80007d8 <main+0x318>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	2104      	movs	r1, #4
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 fa2f 	bl	8001b5a <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(GPIOB, LED_V, GPIO_PIN_SET);
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	00db      	lsls	r3, r3, #3
 8000700:	4835      	ldr	r0, [pc, #212]	; (80007d8 <main+0x318>)
 8000702:	2201      	movs	r2, #1
 8000704:	0019      	movs	r1, r3
 8000706:	f001 fa28 	bl	8001b5a <HAL_GPIO_WritePin>
						  xbee_send_state = config_over;
 800070a:	4b36      	ldr	r3, [pc, #216]	; (80007e4 <main+0x324>)
 800070c:	2206      	movs	r2, #6
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	e00e      	b.n	8000730 <main+0x270>
					  }
					  else {
						  timeout = 0;
 8000712:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <main+0x330>)
 8000714:	2200      	movs	r2, #0
 8000716:	801a      	strh	r2, [r3, #0]
						  config_step++;
 8000718:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <main+0x344>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4b38      	ldr	r3, [pc, #224]	; (8000804 <main+0x344>)
 8000722:	701a      	strb	r2, [r3, #0]
						  xbee_send_state = send_config;
 8000724:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <main+0x324>)
 8000726:	2202      	movs	r2, #2
 8000728:	701a      	strb	r2, [r3, #0]
						  HAL_Delay(10);
 800072a:	200a      	movs	r0, #10
 800072c:	f000 fef0 	bl	8001510 <HAL_Delay>
					  }
				  }
				  cr_flag = 0;
 8000730:	4b30      	ldr	r3, [pc, #192]	; (80007f4 <main+0x334>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
			  }
			  if(xbee_rx_buffer[xbee_rx_write_index-2] == 'O' && xbee_rx_buffer[xbee_rx_write_index-1] == 'K'){
 8000736:	4b38      	ldr	r3, [pc, #224]	; (8000818 <main+0x358>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3b02      	subs	r3, #2
 800073c:	4a2e      	ldr	r2, [pc, #184]	; (80007f8 <main+0x338>)
 800073e:	5cd3      	ldrb	r3, [r2, r3]
 8000740:	2b4f      	cmp	r3, #79	; 0x4f
 8000742:	d106      	bne.n	8000752 <main+0x292>
 8000744:	4b34      	ldr	r3, [pc, #208]	; (8000818 <main+0x358>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	3b01      	subs	r3, #1
 800074a:	4a2b      	ldr	r2, [pc, #172]	; (80007f8 <main+0x338>)
 800074c:	5cd3      	ldrb	r3, [r2, r3]
 800074e:	2b4b      	cmp	r3, #75	; 0x4b
 8000750:	d012      	beq.n	8000778 <main+0x2b8>

			  }
			  else {
				  HAL_Delay(1);
 8000752:	2001      	movs	r0, #1
 8000754:	f000 fedc 	bl	8001510 <HAL_Delay>
				  timeout++;
 8000758:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <main+0x330>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	b29a      	uxth	r2, r3
 8000760:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <main+0x330>)
 8000762:	801a      	strh	r2, [r3, #0]
				  if (timeout >= timeout_duration){
 8000764:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <main+0x330>)
 8000766:	881a      	ldrh	r2, [r3, #0]
 8000768:	23fa      	movs	r3, #250	; 0xfa
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	429a      	cmp	r2, r3
 800076e:	d30a      	bcc.n	8000786 <main+0x2c6>
					  xbee_send_state = enter_command_mode;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <main+0x324>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
					  //config_step = 0;
				  }
			  }
		  break;
 8000776:	e006      	b.n	8000786 <main+0x2c6>
 8000778:	e005      	b.n	8000786 <main+0x2c6>

		  default: break;
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	e004      	b.n	8000788 <main+0x2c8>
		  break;
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	e002      	b.n	8000788 <main+0x2c8>
		  break;
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	e000      	b.n	8000788 <main+0x2c8>
		  break;
 8000786:	46c0      	nop			; (mov r8, r8)
  while(xbee_send_state != config_over){
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <main+0x324>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b06      	cmp	r3, #6
 800078e:	d000      	beq.n	8000792 <main+0x2d2>
 8000790:	e6c2      	b.n	8000518 <main+0x58>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  master_state = fine_polling;
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <main+0x35c>)
 8000794:	2203      	movs	r2, #3
 8000796:	701a      	strb	r2, [r3, #0]

	  switch(master_state){
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <main+0x35c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b04      	cmp	r3, #4
 800079e:	d814      	bhi.n	80007ca <main+0x30a>
 80007a0:	009a      	lsls	r2, r3, #2
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <main+0x360>)
 80007a4:	18d3      	adds	r3, r2, r3
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	469f      	mov	pc, r3
	  	  case lora_init: ;
	  	  break;
	  	  case master_idle:
	  	  break;
	  	  case sparse_polling:
	  		  scan_sensors();
 80007aa:	f000 fa0d 	bl	8000bc8 <scan_sensors>
	  		  HAL_Delay(10); //if a large amount of bees goes in or out
 80007ae:	200a      	movs	r0, #10
 80007b0:	f000 feae 	bl	8001510 <HAL_Delay>
	  		  if(bee_rate < -1*bee_rate_fine_polling_threshold || bee_rate > 1*bee_rate_fine_polling_threshold){
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <main+0x364>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	2bc8      	cmp	r3, #200	; 0xc8
 80007ba:	d90a      	bls.n	80007d2 <main+0x312>
	  			  master_state = fine_polling; //we'll trigger a fine_polling
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <main+0x35c>)
 80007be:	2203      	movs	r2, #3
 80007c0:	701a      	strb	r2, [r3, #0]
	  		  }
	  	  break;
 80007c2:	e006      	b.n	80007d2 <main+0x312>
	  	  case fine_polling:
	  		  scan_sensors();
 80007c4:	f000 fa00 	bl	8000bc8 <scan_sensors>
	  		  if(bee_rate < -1*bee_rate_alert_threshold){
	  			  xbee_send_alert();
	  		  }

	  	  break;
 80007c8:	e004      	b.n	80007d4 <main+0x314>
	  	  case lora_alert: ;
	  	  break;
	  	  default: break;
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	e7e1      	b.n	8000792 <main+0x2d2>
	  	  break;
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	e7df      	b.n	8000792 <main+0x2d2>
	  	  break;
 80007d2:	46c0      	nop			; (mov r8, r8)
	  master_state = fine_polling;
 80007d4:	e7dd      	b.n	8000792 <main+0x2d2>
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	50000400 	.word	0x50000400
 80007dc:	20000251 	.word	0x20000251
 80007e0:	20000374 	.word	0x20000374
 80007e4:	20000373 	.word	0x20000373
 80007e8:	08004ad0 	.word	0x08004ad0
 80007ec:	08004aa4 	.word	0x08004aa4
 80007f0:	20000358 	.word	0x20000358
 80007f4:	20000250 	.word	0x20000250
 80007f8:	20000254 	.word	0x20000254
 80007fc:	20000356 	.word	0x20000356
 8000800:	08004aa8 	.word	0x08004aa8
 8000804:	20000355 	.word	0x20000355
 8000808:	200001b0 	.word	0x200001b0
 800080c:	08004ab0 	.word	0x08004ab0
 8000810:	20000020 	.word	0x20000020
 8000814:	08004ab8 	.word	0x08004ab8
 8000818:	20000354 	.word	0x20000354
 800081c:	20000368 	.word	0x20000368
 8000820:	08004ae8 	.word	0x08004ae8
 8000824:	20000370 	.word	0x20000370

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b09f      	sub	sp, #124	; 0x7c
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	2440      	movs	r4, #64	; 0x40
 8000830:	193b      	adds	r3, r7, r4
 8000832:	0018      	movs	r0, r3
 8000834:	2338      	movs	r3, #56	; 0x38
 8000836:	001a      	movs	r2, r3
 8000838:	2100      	movs	r1, #0
 800083a:	f003 fd02 	bl	8004242 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083e:	232c      	movs	r3, #44	; 0x2c
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	0018      	movs	r0, r3
 8000844:	2314      	movs	r3, #20
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f003 fcfa 	bl	8004242 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	0018      	movs	r0, r3
 8000852:	2328      	movs	r3, #40	; 0x28
 8000854:	001a      	movs	r2, r3
 8000856:	2100      	movs	r1, #0
 8000858:	f003 fcf3 	bl	8004242 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	4b29      	ldr	r3, [pc, #164]	; (8000904 <SystemClock_Config+0xdc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a29      	ldr	r2, [pc, #164]	; (8000908 <SystemClock_Config+0xe0>)
 8000862:	401a      	ands	r2, r3
 8000864:	4b27      	ldr	r3, [pc, #156]	; (8000904 <SystemClock_Config+0xdc>)
 8000866:	2180      	movs	r1, #128	; 0x80
 8000868:	0109      	lsls	r1, r1, #4
 800086a:	430a      	orrs	r2, r1
 800086c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800086e:	0021      	movs	r1, r4
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2202      	movs	r2, #2
 8000874:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2201      	movs	r2, #1
 800087a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2210      	movs	r2, #16
 8000880:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2202      	movs	r2, #2
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	0312      	lsls	r2, r2, #12
 8000894:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	0412      	lsls	r2, r2, #16
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	0018      	movs	r0, r3
 80008a2:	f001 f993 	bl	8001bcc <HAL_RCC_OscConfig>
 80008a6:	1e03      	subs	r3, r0, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x86>
  {
    Error_Handler();
 80008aa:	f000 fc9f 	bl	80011ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	212c      	movs	r1, #44	; 0x2c
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	220f      	movs	r2, #15
 80008b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2203      	movs	r2, #3
 80008ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2101      	movs	r1, #1
 80008d2:	0018      	movs	r0, r3
 80008d4:	f001 fd4e 	bl	8002374 <HAL_RCC_ClockConfig>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80008dc:	f000 fc86 	bl	80011ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2202      	movs	r2, #2
 80008e4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	0018      	movs	r0, r3
 80008f0:	f001 ff64 	bl	80027bc <HAL_RCCEx_PeriphCLKConfig>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008f8:	f000 fc78 	bl	80011ec <Error_Handler>
  }
}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b01f      	add	sp, #124	; 0x7c
 8000902:	bd90      	pop	{r4, r7, pc}
 8000904:	40007000 	.word	0x40007000
 8000908:	ffffe7ff 	.word	0xffffe7ff

0800090c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USART2_UART_Init+0x58>)
 8000912:	4a15      	ldr	r2, [pc, #84]	; (8000968 <MX_USART2_UART_Init+0x5c>)
 8000914:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_USART2_UART_Init+0x58>)
 8000918:	22e1      	movs	r2, #225	; 0xe1
 800091a:	0252      	lsls	r2, r2, #9
 800091c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USART2_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USART2_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USART2_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USART2_UART_Init+0x58>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USART2_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USART2_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USART2_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USART2_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <MX_USART2_UART_Init+0x58>)
 8000950:	0018      	movs	r0, r3
 8000952:	f002 f8a7 	bl	8002aa4 <HAL_UART_Init>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d001      	beq.n	800095e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800095a:	f000 fc47 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200003f8 	.word	0x200003f8
 8000968:	40004400 	.word	0x40004400

0800096c <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_USART5_UART_Init+0x58>)
 8000972:	4a15      	ldr	r2, [pc, #84]	; (80009c8 <MX_USART5_UART_Init+0x5c>)
 8000974:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_USART5_UART_Init+0x58>)
 8000978:	2296      	movs	r2, #150	; 0x96
 800097a:	0192      	lsls	r2, r2, #6
 800097c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART5_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_USART5_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART5_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART5_UART_Init+0x58>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART5_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART5_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART5_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART5_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <MX_USART5_UART_Init+0x58>)
 80009b0:	0018      	movs	r0, r3
 80009b2:	f002 f877 	bl	8002aa4 <HAL_UART_Init>
 80009b6:	1e03      	subs	r3, r0, #0
 80009b8:	d001      	beq.n	80009be <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 80009ba:	f000 fc17 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000374 	.word	0x20000374
 80009c8:	40005000 	.word	0x40005000

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b08b      	sub	sp, #44	; 0x2c
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	2414      	movs	r4, #20
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	0018      	movs	r0, r3
 80009d8:	2314      	movs	r3, #20
 80009da:	001a      	movs	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f003 fc30 	bl	8004242 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b54      	ldr	r3, [pc, #336]	; (8000b34 <MX_GPIO_Init+0x168>)
 80009e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009e6:	4b53      	ldr	r3, [pc, #332]	; (8000b34 <MX_GPIO_Init+0x168>)
 80009e8:	2104      	movs	r1, #4
 80009ea:	430a      	orrs	r2, r1
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ee:	4b51      	ldr	r3, [pc, #324]	; (8000b34 <MX_GPIO_Init+0x168>)
 80009f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f2:	2204      	movs	r2, #4
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	4b4e      	ldr	r3, [pc, #312]	; (8000b34 <MX_GPIO_Init+0x168>)
 80009fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009fe:	4b4d      	ldr	r3, [pc, #308]	; (8000b34 <MX_GPIO_Init+0x168>)
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	430a      	orrs	r2, r1
 8000a04:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a06:	4b4b      	ldr	r3, [pc, #300]	; (8000b34 <MX_GPIO_Init+0x168>)
 8000a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b48      	ldr	r3, [pc, #288]	; (8000b34 <MX_GPIO_Init+0x168>)
 8000a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a16:	4b47      	ldr	r3, [pc, #284]	; (8000b34 <MX_GPIO_Init+0x168>)
 8000a18:	2101      	movs	r1, #1
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a1e:	4b45      	ldr	r3, [pc, #276]	; (8000b34 <MX_GPIO_Init+0x168>)
 8000a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a22:	2201      	movs	r2, #1
 8000a24:	4013      	ands	r3, r2
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b42      	ldr	r3, [pc, #264]	; (8000b34 <MX_GPIO_Init+0x168>)
 8000a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a2e:	4b41      	ldr	r3, [pc, #260]	; (8000b34 <MX_GPIO_Init+0x168>)
 8000a30:	2102      	movs	r1, #2
 8000a32:	430a      	orrs	r2, r1
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a36:	4b3f      	ldr	r3, [pc, #252]	; (8000b34 <MX_GPIO_Init+0x168>)
 8000a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000a42:	2380      	movs	r3, #128	; 0x80
 8000a44:	019b      	lsls	r3, r3, #6
 8000a46:	483c      	ldr	r0, [pc, #240]	; (8000b38 <MX_GPIO_Init+0x16c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	0019      	movs	r1, r3
 8000a4c:	f001 f885 	bl	8001b5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, S2_Pin|S0_Pin, GPIO_PIN_RESET);
 8000a50:	4b3a      	ldr	r3, [pc, #232]	; (8000b3c <MX_GPIO_Init+0x170>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	2103      	movs	r1, #3
 8000a56:	0018      	movs	r0, r3
 8000a58:	f001 f87f 	bl	8001b5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S1_Pin|LED_EN_Pin|XBEE_SLEEP_Pin, GPIO_PIN_RESET);
 8000a5c:	4938      	ldr	r1, [pc, #224]	; (8000b40 <MX_GPIO_Init+0x174>)
 8000a5e:	23a0      	movs	r3, #160	; 0xa0
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	2200      	movs	r2, #0
 8000a64:	0018      	movs	r0, r3
 8000a66:	f001 f878 	bl	8001b5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_V_Pin, GPIO_PIN_RESET);
 8000a6a:	4936      	ldr	r1, [pc, #216]	; (8000b44 <MX_GPIO_Init+0x178>)
 8000a6c:	4b36      	ldr	r3, [pc, #216]	; (8000b48 <MX_GPIO_Init+0x17c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	0018      	movs	r0, r3
 8000a72:	f001 f872 	bl	8001b5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	0192      	lsls	r2, r2, #6
 8000a7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2201      	movs	r2, #1
 8000a82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	4a29      	ldr	r2, [pc, #164]	; (8000b38 <MX_GPIO_Init+0x16c>)
 8000a94:	0019      	movs	r1, r3
 8000a96:	0010      	movs	r0, r2
 8000a98:	f000 fec4 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S0_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S0_Pin;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	4a21      	ldr	r2, [pc, #132]	; (8000b3c <MX_GPIO_Init+0x170>)
 8000ab8:	0019      	movs	r1, r3
 8000aba:	0010      	movs	r0, r2
 8000abc:	f000 feb2 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin LED_EN_Pin XBEE_SLEEP_Pin */
  GPIO_InitStruct.Pin = S1_Pin|LED_EN_Pin|XBEE_SLEEP_Pin;
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <MX_GPIO_Init+0x174>)
 8000ac4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2201      	movs	r2, #1
 8000aca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	193a      	adds	r2, r7, r4
 8000ada:	23a0      	movs	r3, #160	; 0xa0
 8000adc:	05db      	lsls	r3, r3, #23
 8000ade:	0011      	movs	r1, r2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 fe9f 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX1_Pin MUX2_Pin */
  GPIO_InitStruct.Pin = MUX1_Pin|MUX2_Pin;
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	2212      	movs	r2, #18
 8000aea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	193a      	adds	r2, r7, r4
 8000afa:	23a0      	movs	r3, #160	; 0xa0
 8000afc:	05db      	lsls	r3, r3, #23
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f000 fe8f 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_V_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_V_Pin;
 8000b06:	0021      	movs	r1, r4
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <MX_GPIO_Init+0x178>)
 8000b0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2201      	movs	r2, #1
 8000b12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <MX_GPIO_Init+0x17c>)
 8000b24:	0019      	movs	r1, r3
 8000b26:	0010      	movs	r0, r2
 8000b28:	f000 fe7c 	bl	8001824 <HAL_GPIO_Init>

}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b00b      	add	sp, #44	; 0x2c
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	40021000 	.word	0x40021000
 8000b38:	50000800 	.word	0x50000800
 8000b3c:	50001c00 	.word	0x50001c00
 8000b40:	00008021 	.word	0x00008021
 8000b44:	00000404 	.word	0x00000404
 8000b48:	50000400 	.word	0x50000400

08000b4c <select_mux>:

/* USER CODE BEGIN 4 */

void select_mux(uint8_t sel){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	0002      	movs	r2, r0
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1 , (sel & 0b0001)>>0);
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	4013      	ands	r3, r2
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	4817      	ldr	r0, [pc, #92]	; (8000bc0 <select_mux+0x74>)
 8000b64:	001a      	movs	r2, r3
 8000b66:	2102      	movs	r1, #2
 8000b68:	f000 fff7 	bl	8001b5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 , (sel & 0b0010)>>1);
 8000b6c:	1dfb      	adds	r3, r7, #7
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	105b      	asrs	r3, r3, #1
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2201      	movs	r2, #1
 8000b76:	4013      	ands	r3, r2
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	23a0      	movs	r3, #160	; 0xa0
 8000b7c:	05db      	lsls	r3, r3, #23
 8000b7e:	2101      	movs	r1, #1
 8000b80:	0018      	movs	r0, r3
 8000b82:	f000 ffea 	bl	8001b5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_0 , (sel & 0b0100)>>2);
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	109b      	asrs	r3, r3, #2
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4013      	ands	r3, r2
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <select_mux+0x74>)
 8000b96:	001a      	movs	r2, r3
 8000b98:	2101      	movs	r1, #1
 8000b9a:	f000 ffde 	bl	8001b5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (sel & 0b1000)>>3);
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	10db      	asrs	r3, r3, #3
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4013      	ands	r3, r2
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	019b      	lsls	r3, r3, #6
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <select_mux+0x78>)
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	f000 ffd1 	bl	8001b5a <HAL_GPIO_WritePin>
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	50001c00 	.word	0x50001c00
 8000bc4:	50000800 	.word	0x50000800

08000bc8 <scan_sensors>:

void scan_sensors(){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); //turn on the diodes
 8000bce:	23a0      	movs	r3, #160	; 0xa0
 8000bd0:	05db      	lsls	r3, r3, #23
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 ffbf 	bl	8001b5a <HAL_GPIO_WritePin>

  for(uint8_t i=0; i<8; i++) for(uint8_t j=0; j<2; j++){
 8000bdc:	1dfb      	adds	r3, r7, #7
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e0f9      	b.n	8000dd8 <scan_sensors+0x210>
 8000be4:	1dbb      	adds	r3, r7, #6
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	e0eb      	b.n	8000dc4 <scan_sensors+0x1fc>
	  uint8_t sensor_pair_value;
	  select_mux(sensor_pair[8*j+i][0]);
 8000bec:	1dbb      	adds	r3, r7, #6
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	00da      	lsls	r2, r3, #3
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	18d2      	adds	r2, r2, r3
 8000bf8:	4b81      	ldr	r3, [pc, #516]	; (8000e00 <scan_sensors+0x238>)
 8000bfa:	0052      	lsls	r2, r2, #1
 8000bfc:	5cd3      	ldrb	r3, [r2, r3]
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f7ff ffa4 	bl	8000b4c <select_mux>
	  sensor_pair_value = (j)? HAL_GPIO_ReadPin(MUX1) : HAL_GPIO_ReadPin(MUX2);
 8000c04:	1dbb      	adds	r3, r7, #6
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d008      	beq.n	8000c1e <scan_sensors+0x56>
 8000c0c:	23a0      	movs	r3, #160	; 0xa0
 8000c0e:	05db      	lsls	r3, r3, #23
 8000c10:	2102      	movs	r1, #2
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 ff84 	bl	8001b20 <HAL_GPIO_ReadPin>
 8000c18:	0003      	movs	r3, r0
 8000c1a:	001a      	movs	r2, r3
 8000c1c:	e007      	b.n	8000c2e <scan_sensors+0x66>
 8000c1e:	23a0      	movs	r3, #160	; 0xa0
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	2110      	movs	r1, #16
 8000c24:	0018      	movs	r0, r3
 8000c26:	f000 ff7b 	bl	8001b20 <HAL_GPIO_ReadPin>
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	1d7b      	adds	r3, r7, #5
 8000c30:	701a      	strb	r2, [r3, #0]
	  select_mux(sensor_pair[8*j+i][1]);
 8000c32:	1dbb      	adds	r3, r7, #6
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	00da      	lsls	r2, r3, #3
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	18d3      	adds	r3, r2, r3
 8000c3e:	4a70      	ldr	r2, [pc, #448]	; (8000e00 <scan_sensors+0x238>)
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	18d3      	adds	r3, r2, r3
 8000c44:	3301      	adds	r3, #1
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff ff7f 	bl	8000b4c <select_mux>
	  sensor_pair_value += (j)? HAL_GPIO_ReadPin(MUX1)<<1 : HAL_GPIO_ReadPin(MUX2)<<1;
 8000c4e:	1dbb      	adds	r3, r7, #6
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d008      	beq.n	8000c68 <scan_sensors+0xa0>
 8000c56:	23a0      	movs	r3, #160	; 0xa0
 8000c58:	05db      	lsls	r3, r3, #23
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f000 ff5f 	bl	8001b20 <HAL_GPIO_ReadPin>
 8000c62:	0003      	movs	r3, r0
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	e007      	b.n	8000c78 <scan_sensors+0xb0>
 8000c68:	23a0      	movs	r3, #160	; 0xa0
 8000c6a:	05db      	lsls	r3, r3, #23
 8000c6c:	2110      	movs	r1, #16
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 ff56 	bl	8001b20 <HAL_GPIO_ReadPin>
 8000c74:	0003      	movs	r3, r0
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	b2d9      	uxtb	r1, r3
 8000c7a:	1d7b      	adds	r3, r7, #5
 8000c7c:	1d7a      	adds	r2, r7, #5
 8000c7e:	7812      	ldrb	r2, [r2, #0]
 8000c80:	188a      	adds	r2, r1, r2
 8000c82:	701a      	strb	r2, [r3, #0]

	  switch(sensors_state[8*j+i]){
 8000c84:	1dbb      	adds	r3, r7, #6
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	00da      	lsls	r2, r3, #3
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	18d3      	adds	r3, r2, r3
 8000c90:	4a5c      	ldr	r2, [pc, #368]	; (8000e04 <scan_sensors+0x23c>)
 8000c92:	5cd3      	ldrb	r3, [r2, r3]
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d100      	bne.n	8000c9a <scan_sensors+0xd2>
 8000c98:	e06c      	b.n	8000d74 <scan_sensors+0x1ac>
 8000c9a:	dd00      	ble.n	8000c9e <scan_sensors+0xd6>
 8000c9c:	e08d      	b.n	8000dba <scan_sensors+0x1f2>
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d04c      	beq.n	8000d3c <scan_sensors+0x174>
 8000ca2:	dd00      	ble.n	8000ca6 <scan_sensors+0xde>
 8000ca4:	e089      	b.n	8000dba <scan_sensors+0x1f2>
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d002      	beq.n	8000cb0 <scan_sensors+0xe8>
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d02a      	beq.n	8000d04 <scan_sensors+0x13c>
 8000cae:	e084      	b.n	8000dba <scan_sensors+0x1f2>
		  case A:
			  if(sensor_pair_value == 0b01){
 8000cb0:	1d7b      	adds	r3, r7, #5
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d110      	bne.n	8000cda <scan_sensors+0x112>
				  sensors_state[8*j+i] = B;
 8000cb8:	1dbb      	adds	r3, r7, #6
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	00da      	lsls	r2, r3, #3
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	18d3      	adds	r3, r2, r3
 8000cc4:	4a4f      	ldr	r2, [pc, #316]	; (8000e04 <scan_sensors+0x23c>)
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	54d1      	strb	r1, [r2, r3]
				  bee_count--;
 8000cca:	4b4f      	ldr	r3, [pc, #316]	; (8000e08 <scan_sensors+0x240>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	1e5a      	subs	r2, r3, #1
 8000cd0:	4b4d      	ldr	r3, [pc, #308]	; (8000e08 <scan_sensors+0x240>)
 8000cd2:	601a      	str	r2, [r3, #0]
				  xbee_send_alert();
 8000cd4:	f000 fa74 	bl	80011c0 <xbee_send_alert>
			  else if(sensor_pair_value == 0b10){
				  sensors_state[8*j+i] = D;
				  bee_count++;
				  xbee_send_alert();
			  }
		  break;
 8000cd8:	e068      	b.n	8000dac <scan_sensors+0x1e4>
			  else if(sensor_pair_value == 0b10){
 8000cda:	1d7b      	adds	r3, r7, #5
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d164      	bne.n	8000dac <scan_sensors+0x1e4>
				  sensors_state[8*j+i] = D;
 8000ce2:	1dbb      	adds	r3, r7, #6
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	00da      	lsls	r2, r3, #3
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	18d3      	adds	r3, r2, r3
 8000cee:	4a45      	ldr	r2, [pc, #276]	; (8000e04 <scan_sensors+0x23c>)
 8000cf0:	2103      	movs	r1, #3
 8000cf2:	54d1      	strb	r1, [r2, r3]
				  bee_count++;
 8000cf4:	4b44      	ldr	r3, [pc, #272]	; (8000e08 <scan_sensors+0x240>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	1c5a      	adds	r2, r3, #1
 8000cfa:	4b43      	ldr	r3, [pc, #268]	; (8000e08 <scan_sensors+0x240>)
 8000cfc:	601a      	str	r2, [r3, #0]
				  xbee_send_alert();
 8000cfe:	f000 fa5f 	bl	80011c0 <xbee_send_alert>
		  break;
 8000d02:	e053      	b.n	8000dac <scan_sensors+0x1e4>

		  case B:
			  if(sensor_pair_value == 0b00) sensors_state[8*j+i] = C;
 8000d04:	1d7b      	adds	r3, r7, #5
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d109      	bne.n	8000d20 <scan_sensors+0x158>
 8000d0c:	1dbb      	adds	r3, r7, #6
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	00da      	lsls	r2, r3, #3
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	18d3      	adds	r3, r2, r3
 8000d18:	4a3a      	ldr	r2, [pc, #232]	; (8000e04 <scan_sensors+0x23c>)
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	54d1      	strb	r1, [r2, r3]
			  else if (sensor_pair_value == 0b11) sensors_state[8*j+i] = A;
		  break;
 8000d1e:	e047      	b.n	8000db0 <scan_sensors+0x1e8>
			  else if (sensor_pair_value == 0b11) sensors_state[8*j+i] = A;
 8000d20:	1d7b      	adds	r3, r7, #5
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d143      	bne.n	8000db0 <scan_sensors+0x1e8>
 8000d28:	1dbb      	adds	r3, r7, #6
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	00da      	lsls	r2, r3, #3
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	18d3      	adds	r3, r2, r3
 8000d34:	4a33      	ldr	r2, [pc, #204]	; (8000e04 <scan_sensors+0x23c>)
 8000d36:	2100      	movs	r1, #0
 8000d38:	54d1      	strb	r1, [r2, r3]
		  break;
 8000d3a:	e039      	b.n	8000db0 <scan_sensors+0x1e8>

		  case C:
			  if(sensor_pair_value == 0b10) sensors_state[8*j+i] = D;
 8000d3c:	1d7b      	adds	r3, r7, #5
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d109      	bne.n	8000d58 <scan_sensors+0x190>
 8000d44:	1dbb      	adds	r3, r7, #6
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	00da      	lsls	r2, r3, #3
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	18d3      	adds	r3, r2, r3
 8000d50:	4a2c      	ldr	r2, [pc, #176]	; (8000e04 <scan_sensors+0x23c>)
 8000d52:	2103      	movs	r1, #3
 8000d54:	54d1      	strb	r1, [r2, r3]
			  else if (sensor_pair_value == 0b01) sensors_state[8*j+i] = B;
		  break;
 8000d56:	e02d      	b.n	8000db4 <scan_sensors+0x1ec>
			  else if (sensor_pair_value == 0b01) sensors_state[8*j+i] = B;
 8000d58:	1d7b      	adds	r3, r7, #5
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d129      	bne.n	8000db4 <scan_sensors+0x1ec>
 8000d60:	1dbb      	adds	r3, r7, #6
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	00da      	lsls	r2, r3, #3
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	18d3      	adds	r3, r2, r3
 8000d6c:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <scan_sensors+0x23c>)
 8000d6e:	2101      	movs	r1, #1
 8000d70:	54d1      	strb	r1, [r2, r3]
		  break;
 8000d72:	e01f      	b.n	8000db4 <scan_sensors+0x1ec>

		  case D:
			  if(sensor_pair_value == 0b11) sensors_state[8*j+i] = A;
 8000d74:	1d7b      	adds	r3, r7, #5
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d109      	bne.n	8000d90 <scan_sensors+0x1c8>
 8000d7c:	1dbb      	adds	r3, r7, #6
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	00da      	lsls	r2, r3, #3
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	18d3      	adds	r3, r2, r3
 8000d88:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <scan_sensors+0x23c>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	54d1      	strb	r1, [r2, r3]
			  else if (sensor_pair_value == 0b00) sensors_state[8*j+i] = C;
		  break;
 8000d8e:	e013      	b.n	8000db8 <scan_sensors+0x1f0>
			  else if (sensor_pair_value == 0b00) sensors_state[8*j+i] = C;
 8000d90:	1d7b      	adds	r3, r7, #5
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d10f      	bne.n	8000db8 <scan_sensors+0x1f0>
 8000d98:	1dbb      	adds	r3, r7, #6
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	00da      	lsls	r2, r3, #3
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	18d3      	adds	r3, r2, r3
 8000da4:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <scan_sensors+0x23c>)
 8000da6:	2102      	movs	r1, #2
 8000da8:	54d1      	strb	r1, [r2, r3]
		  break;
 8000daa:	e005      	b.n	8000db8 <scan_sensors+0x1f0>
		  break;
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	e004      	b.n	8000dba <scan_sensors+0x1f2>
		  break;
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	e002      	b.n	8000dba <scan_sensors+0x1f2>
		  break;
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	e000      	b.n	8000dba <scan_sensors+0x1f2>
		  break;
 8000db8:	46c0      	nop			; (mov r8, r8)
  for(uint8_t i=0; i<8; i++) for(uint8_t j=0; j<2; j++){
 8000dba:	1dbb      	adds	r3, r7, #6
 8000dbc:	781a      	ldrb	r2, [r3, #0]
 8000dbe:	1dbb      	adds	r3, r7, #6
 8000dc0:	3201      	adds	r2, #1
 8000dc2:	701a      	strb	r2, [r3, #0]
 8000dc4:	1dbb      	adds	r3, r7, #6
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d800      	bhi.n	8000dce <scan_sensors+0x206>
 8000dcc:	e70e      	b.n	8000bec <scan_sensors+0x24>
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781a      	ldrb	r2, [r3, #0]
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	3201      	adds	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	1dfb      	adds	r3, r7, #7
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b07      	cmp	r3, #7
 8000dde:	d800      	bhi.n	8000de2 <scan_sensors+0x21a>
 8000de0:	e700      	b.n	8000be4 <scan_sensors+0x1c>
	  }
  }
  if(master_state == sparse_polling) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <scan_sensors+0x244>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d106      	bne.n	8000df8 <scan_sensors+0x230>
 8000dea:	23a0      	movs	r3, #160	; 0xa0
 8000dec:	05db      	lsls	r3, r3, #23
 8000dee:	2200      	movs	r2, #0
 8000df0:	2120      	movs	r1, #32
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 feb1 	bl	8001b5a <HAL_GPIO_WritePin>
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000240 	.word	0x20000240
 8000e08:	2000036c 	.word	0x2000036c
 8000e0c:	20000368 	.word	0x20000368

08000e10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART5){
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <HAL_UART_RxCpltCallback+0x54>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d11c      	bne.n	8000e5c <HAL_UART_RxCpltCallback+0x4c>
	    xbee_rx_buffer[xbee_rx_write_index] = xbee_rx_last_byte;
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_UART_RxCpltCallback+0x58>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	001a      	movs	r2, r3
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <HAL_UART_RxCpltCallback+0x5c>)
 8000e2a:	7819      	ldrb	r1, [r3, #0]
 8000e2c:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_UART_RxCpltCallback+0x60>)
 8000e2e:	5499      	strb	r1, [r3, r2]
	    cr_flag = (xbee_rx_last_byte == 0x0D)? xbee_rx_write_index : 0;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_UART_RxCpltCallback+0x5c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b0d      	cmp	r3, #13
 8000e36:	d102      	bne.n	8000e3e <HAL_UART_RxCpltCallback+0x2e>
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_UART_RxCpltCallback+0x58>)
 8000e3a:	781a      	ldrb	r2, [r3, #0]
 8000e3c:	e000      	b.n	8000e40 <HAL_UART_RxCpltCallback+0x30>
 8000e3e:	2200      	movs	r2, #0
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <HAL_UART_RxCpltCallback+0x64>)
 8000e42:	701a      	strb	r2, [r3, #0]
	    xbee_rx_write_index++;
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_UART_RxCpltCallback+0x58>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_UART_RxCpltCallback+0x58>)
 8000e4e:	701a      	strb	r2, [r3, #0]
	    HAL_UART_Receive_IT(&huart5, &xbee_rx_last_byte, 1);
 8000e50:	4906      	ldr	r1, [pc, #24]	; (8000e6c <HAL_UART_RxCpltCallback+0x5c>)
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_UART_RxCpltCallback+0x68>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	0018      	movs	r0, r3
 8000e58:	f001 ff20 	bl	8002c9c <HAL_UART_Receive_IT>

	}

}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b002      	add	sp, #8
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40005000 	.word	0x40005000
 8000e68:	20000354 	.word	0x20000354
 8000e6c:	20000251 	.word	0x20000251
 8000e70:	20000254 	.word	0x20000254
 8000e74:	20000250 	.word	0x20000250
 8000e78:	20000374 	.word	0x20000374

08000e7c <invert_lsB_msB>:

void check_coordinator(){

}

void invert_lsB_msB(uint64_t * var, uint8_t length){
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	b08d      	sub	sp, #52	; 0x34
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6178      	str	r0, [r7, #20]
 8000e84:	0008      	movs	r0, r1
 8000e86:	2113      	movs	r1, #19
 8000e88:	1879      	adds	r1, r7, r1
 8000e8a:	7008      	strb	r0, [r1, #0]
	uint64_t new_var = 0;
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	62b8      	str	r0, [r7, #40]	; 0x28
 8000e92:	62f9      	str	r1, [r7, #44]	; 0x2c
	for(uint8_t i=0; i<length; i++){
 8000e94:	2117      	movs	r1, #23
 8000e96:	2010      	movs	r0, #16
 8000e98:	4684      	mov	ip, r0
 8000e9a:	44bc      	add	ip, r7
 8000e9c:	4461      	add	r1, ip
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	7008      	strb	r0, [r1, #0]
 8000ea2:	e06a      	b.n	8000f7a <invert_lsB_msB+0xfe>
		uint64_t byte = (*var & (0xFF<<(8*i)))>>(8*i);
 8000ea4:	6979      	ldr	r1, [r7, #20]
 8000ea6:	6808      	ldr	r0, [r1, #0]
 8000ea8:	6849      	ldr	r1, [r1, #4]
 8000eaa:	6038      	str	r0, [r7, #0]
 8000eac:	6079      	str	r1, [r7, #4]
 8000eae:	2617      	movs	r6, #23
 8000eb0:	0030      	movs	r0, r6
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	468c      	mov	ip, r1
 8000eb6:	44bc      	add	ip, r7
 8000eb8:	4466      	add	r6, ip
 8000eba:	7836      	ldrb	r6, [r6, #0]
 8000ebc:	00f6      	lsls	r6, r6, #3
 8000ebe:	21ff      	movs	r1, #255	; 0xff
 8000ec0:	468c      	mov	ip, r1
 8000ec2:	4661      	mov	r1, ip
 8000ec4:	40b1      	lsls	r1, r6
 8000ec6:	000e      	movs	r6, r1
 8000ec8:	60be      	str	r6, [r7, #8]
 8000eca:	17f6      	asrs	r6, r6, #31
 8000ecc:	60fe      	str	r6, [r7, #12]
 8000ece:	68be      	ldr	r6, [r7, #8]
 8000ed0:	0031      	movs	r1, r6
 8000ed2:	683e      	ldr	r6, [r7, #0]
 8000ed4:	4031      	ands	r1, r6
 8000ed6:	000c      	movs	r4, r1
 8000ed8:	68fe      	ldr	r6, [r7, #12]
 8000eda:	0031      	movs	r1, r6
 8000edc:	687e      	ldr	r6, [r7, #4]
 8000ede:	4031      	ands	r1, r6
 8000ee0:	000d      	movs	r5, r1
 8000ee2:	0006      	movs	r6, r0
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	1879      	adds	r1, r7, r1
 8000ee8:	1989      	adds	r1, r1, r6
 8000eea:	7809      	ldrb	r1, [r1, #0]
 8000eec:	00c9      	lsls	r1, r1, #3
 8000eee:	0008      	movs	r0, r1
 8000ef0:	3820      	subs	r0, #32
 8000ef2:	2800      	cmp	r0, #0
 8000ef4:	db04      	blt.n	8000f00 <invert_lsB_msB+0x84>
 8000ef6:	002e      	movs	r6, r5
 8000ef8:	40c6      	lsrs	r6, r0
 8000efa:	0030      	movs	r0, r6
 8000efc:	61b8      	str	r0, [r7, #24]
 8000efe:	e008      	b.n	8000f12 <invert_lsB_msB+0x96>
 8000f00:	2020      	movs	r0, #32
 8000f02:	1a40      	subs	r0, r0, r1
 8000f04:	002e      	movs	r6, r5
 8000f06:	4086      	lsls	r6, r0
 8000f08:	0030      	movs	r0, r6
 8000f0a:	0026      	movs	r6, r4
 8000f0c:	40ce      	lsrs	r6, r1
 8000f0e:	4330      	orrs	r0, r6
 8000f10:	61b8      	str	r0, [r7, #24]
 8000f12:	0028      	movs	r0, r5
 8000f14:	40c8      	lsrs	r0, r1
 8000f16:	0001      	movs	r1, r0
 8000f18:	61f9      	str	r1, [r7, #28]
		new_var += byte<<((length-1-i)*8);
 8000f1a:	2113      	movs	r1, #19
 8000f1c:	1879      	adds	r1, r7, r1
 8000f1e:	7809      	ldrb	r1, [r1, #0]
 8000f20:	1e48      	subs	r0, r1, #1
 8000f22:	2117      	movs	r1, #23
 8000f24:	2610      	movs	r6, #16
 8000f26:	46b4      	mov	ip, r6
 8000f28:	44bc      	add	ip, r7
 8000f2a:	4461      	add	r1, ip
 8000f2c:	7809      	ldrb	r1, [r1, #0]
 8000f2e:	1a41      	subs	r1, r0, r1
 8000f30:	00c9      	lsls	r1, r1, #3
 8000f32:	0008      	movs	r0, r1
 8000f34:	3820      	subs	r0, #32
 8000f36:	2800      	cmp	r0, #0
 8000f38:	db03      	blt.n	8000f42 <invert_lsB_msB+0xc6>
 8000f3a:	69be      	ldr	r6, [r7, #24]
 8000f3c:	4086      	lsls	r6, r0
 8000f3e:	0033      	movs	r3, r6
 8000f40:	e008      	b.n	8000f54 <invert_lsB_msB+0xd8>
 8000f42:	2020      	movs	r0, #32
 8000f44:	1a40      	subs	r0, r0, r1
 8000f46:	69be      	ldr	r6, [r7, #24]
 8000f48:	40c6      	lsrs	r6, r0
 8000f4a:	0030      	movs	r0, r6
 8000f4c:	69fe      	ldr	r6, [r7, #28]
 8000f4e:	408e      	lsls	r6, r1
 8000f50:	0033      	movs	r3, r6
 8000f52:	4303      	orrs	r3, r0
 8000f54:	69b8      	ldr	r0, [r7, #24]
 8000f56:	4088      	lsls	r0, r1
 8000f58:	0002      	movs	r2, r0
 8000f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f5e:	1880      	adds	r0, r0, r2
 8000f60:	4159      	adcs	r1, r3
 8000f62:	62b8      	str	r0, [r7, #40]	; 0x28
 8000f64:	62f9      	str	r1, [r7, #44]	; 0x2c
	for(uint8_t i=0; i<length; i++){
 8000f66:	2617      	movs	r6, #23
 8000f68:	2110      	movs	r1, #16
 8000f6a:	1879      	adds	r1, r7, r1
 8000f6c:	1989      	adds	r1, r1, r6
 8000f6e:	7808      	ldrb	r0, [r1, #0]
 8000f70:	2110      	movs	r1, #16
 8000f72:	1879      	adds	r1, r7, r1
 8000f74:	1989      	adds	r1, r1, r6
 8000f76:	3001      	adds	r0, #1
 8000f78:	7008      	strb	r0, [r1, #0]
 8000f7a:	2117      	movs	r1, #23
 8000f7c:	2010      	movs	r0, #16
 8000f7e:	1838      	adds	r0, r7, r0
 8000f80:	1840      	adds	r0, r0, r1
 8000f82:	2113      	movs	r1, #19
 8000f84:	1879      	adds	r1, r7, r1
 8000f86:	7800      	ldrb	r0, [r0, #0]
 8000f88:	7809      	ldrb	r1, [r1, #0]
 8000f8a:	4288      	cmp	r0, r1
 8000f8c:	d38a      	bcc.n	8000ea4 <invert_lsB_msB+0x28>
	}

	*var = new_var;
 8000f8e:	6979      	ldr	r1, [r7, #20]
 8000f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f94:	600a      	str	r2, [r1, #0]
 8000f96:	604b      	str	r3, [r1, #4]
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b00d      	add	sp, #52	; 0x34
 8000f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fa0 <xbee_send_string>:

void xbee_send_string(uint8_t * string){
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	b0cf      	sub	sp, #316	; 0x13c
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	struct frame tx_frame = {0};
 8000fa8:	4b81      	ldr	r3, [pc, #516]	; (80011b0 <xbee_send_string+0x210>)
 8000faa:	229c      	movs	r2, #156	; 0x9c
 8000fac:	0052      	lsls	r2, r2, #1
 8000fae:	4694      	mov	ip, r2
 8000fb0:	44bc      	add	ip, r7
 8000fb2:	4463      	add	r3, ip
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	2390      	movs	r3, #144	; 0x90
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	001a      	movs	r2, r3
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f003 f940 	bl	8004242 <memset>
	tx_frame.length = 0x0E + strlen(string);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff f89f 	bl	8000108 <strlen>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	330e      	adds	r3, #14
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	4b77      	ldr	r3, [pc, #476]	; (80011b0 <xbee_send_string+0x210>)
 8000fd4:	219c      	movs	r1, #156	; 0x9c
 8000fd6:	0049      	lsls	r1, r1, #1
 8000fd8:	468c      	mov	ip, r1
 8000fda:	44bc      	add	ip, r7
 8000fdc:	4463      	add	r3, ip
 8000fde:	801a      	strh	r2, [r3, #0]
	invert_lsB_msB((uint64_t*)&tx_frame.length, 2);
 8000fe0:	2608      	movs	r6, #8
 8000fe2:	19bb      	adds	r3, r7, r6
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f7ff ff48 	bl	8000e7c <invert_lsB_msB>
	tx_frame.type = 0x10;
 8000fec:	4b70      	ldr	r3, [pc, #448]	; (80011b0 <xbee_send_string+0x210>)
 8000fee:	229c      	movs	r2, #156	; 0x9c
 8000ff0:	0052      	lsls	r2, r2, #1
 8000ff2:	4694      	mov	ip, r2
 8000ff4:	44bc      	add	ip, r7
 8000ff6:	4463      	add	r3, ip
 8000ff8:	2210      	movs	r2, #16
 8000ffa:	709a      	strb	r2, [r3, #2]
	tx_frame.id = 0x01;
 8000ffc:	4b6c      	ldr	r3, [pc, #432]	; (80011b0 <xbee_send_string+0x210>)
 8000ffe:	229c      	movs	r2, #156	; 0x9c
 8001000:	0052      	lsls	r2, r2, #1
 8001002:	4694      	mov	ip, r2
 8001004:	44bc      	add	ip, r7
 8001006:	4463      	add	r3, ip
 8001008:	2201      	movs	r2, #1
 800100a:	70da      	strb	r2, [r3, #3]
	tx_frame.address64 = 0xFFFF;
 800100c:	4b68      	ldr	r3, [pc, #416]	; (80011b0 <xbee_send_string+0x210>)
 800100e:	229c      	movs	r2, #156	; 0x9c
 8001010:	0052      	lsls	r2, r2, #1
 8001012:	18ba      	adds	r2, r7, r2
 8001014:	18d1      	adds	r1, r2, r3
 8001016:	4a67      	ldr	r2, [pc, #412]	; (80011b4 <xbee_send_string+0x214>)
 8001018:	2300      	movs	r3, #0
 800101a:	608a      	str	r2, [r1, #8]
 800101c:	60cb      	str	r3, [r1, #12]
	invert_lsB_msB((uint64_t*)&tx_frame.address64, 8);
 800101e:	19bb      	adds	r3, r7, r6
 8001020:	3308      	adds	r3, #8
 8001022:	2108      	movs	r1, #8
 8001024:	0018      	movs	r0, r3
 8001026:	f7ff ff29 	bl	8000e7c <invert_lsB_msB>
	tx_frame.address16 = 0xFFFE;
 800102a:	4b61      	ldr	r3, [pc, #388]	; (80011b0 <xbee_send_string+0x210>)
 800102c:	229c      	movs	r2, #156	; 0x9c
 800102e:	0052      	lsls	r2, r2, #1
 8001030:	4694      	mov	ip, r2
 8001032:	44bc      	add	ip, r7
 8001034:	4463      	add	r3, ip
 8001036:	2202      	movs	r2, #2
 8001038:	4252      	negs	r2, r2
 800103a:	821a      	strh	r2, [r3, #16]
	invert_lsB_msB((uint64_t*)&tx_frame.address16, 2);
 800103c:	19bb      	adds	r3, r7, r6
 800103e:	3310      	adds	r3, #16
 8001040:	2102      	movs	r1, #2
 8001042:	0018      	movs	r0, r3
 8001044:	f7ff ff1a 	bl	8000e7c <invert_lsB_msB>
	memcpy(tx_frame.content, string, strlen(string));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	0018      	movs	r0, r3
 800104c:	f7ff f85c 	bl	8000108 <strlen>
 8001050:	0002      	movs	r2, r0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	19bb      	adds	r3, r7, r6
 8001056:	3313      	adds	r3, #19
 8001058:	0018      	movs	r0, r3
 800105a:	f003 f8e9 	bl	8004230 <memcpy>

	uint64_t sum = 0;
 800105e:	2200      	movs	r2, #0
 8001060:	2300      	movs	r3, #0
 8001062:	2198      	movs	r1, #152	; 0x98
 8001064:	0049      	lsls	r1, r1, #1
 8001066:	1879      	adds	r1, r7, r1
 8001068:	600a      	str	r2, [r1, #0]
 800106a:	604b      	str	r3, [r1, #4]
	uint16_t frame_length;
	frame_length = 275;
 800106c:	2394      	movs	r3, #148	; 0x94
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	2214      	movs	r2, #20
 8001074:	32ff      	adds	r2, #255	; 0xff
 8001076:	801a      	strh	r2, [r3, #0]
	uint8_t * ptr = (void *)&tx_frame+2;
 8001078:	19bb      	adds	r3, r7, r6
 800107a:	3302      	adds	r3, #2
 800107c:	2296      	movs	r2, #150	; 0x96
 800107e:	0052      	lsls	r2, r2, #1
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	6013      	str	r3, [r2, #0]
	for(uint16_t i=0; i<frame_length-2; i++){
 8001084:	2395      	movs	r3, #149	; 0x95
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	2200      	movs	r2, #0
 800108c:	801a      	strh	r2, [r3, #0]
 800108e:	e01d      	b.n	80010cc <xbee_send_string+0x12c>
		sum += *ptr;
 8001090:	2196      	movs	r1, #150	; 0x96
 8001092:	0049      	lsls	r1, r1, #1
 8001094:	187b      	adds	r3, r7, r1
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	001c      	movs	r4, r3
 800109c:	2300      	movs	r3, #0
 800109e:	001d      	movs	r5, r3
 80010a0:	2098      	movs	r0, #152	; 0x98
 80010a2:	0040      	lsls	r0, r0, #1
 80010a4:	183b      	adds	r3, r7, r0
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	1912      	adds	r2, r2, r4
 80010ac:	416b      	adcs	r3, r5
 80010ae:	1838      	adds	r0, r7, r0
 80010b0:	6002      	str	r2, [r0, #0]
 80010b2:	6043      	str	r3, [r0, #4]
		ptr++;
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	187a      	adds	r2, r7, r1
 80010bc:	6013      	str	r3, [r2, #0]
	for(uint16_t i=0; i<frame_length-2; i++){
 80010be:	2195      	movs	r1, #149	; 0x95
 80010c0:	0049      	lsls	r1, r1, #1
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	881a      	ldrh	r2, [r3, #0]
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	3201      	adds	r2, #1
 80010ca:	801a      	strh	r2, [r3, #0]
 80010cc:	2395      	movs	r3, #149	; 0x95
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	881a      	ldrh	r2, [r3, #0]
 80010d4:	2394      	movs	r3, #148	; 0x94
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	3b02      	subs	r3, #2
 80010de:	429a      	cmp	r2, r3
 80010e0:	dbd6      	blt.n	8001090 <xbee_send_string+0xf0>
	}

	tx_frame.check_sum = 0xFF - (sum & 0xFF);
 80010e2:	2398      	movs	r3, #152	; 0x98
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	1c13      	adds	r3, r2, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	b2d9      	uxtb	r1, r3
 80010f4:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <xbee_send_string+0x210>)
 80010f6:	229c      	movs	r2, #156	; 0x9c
 80010f8:	0052      	lsls	r2, r2, #1
 80010fa:	18ba      	adds	r2, r7, r2
 80010fc:	18d2      	adds	r2, r2, r3
 80010fe:	238c      	movs	r3, #140	; 0x8c
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	54d1      	strb	r1, [r2, r3]


	HAL_UART_Transmit(&huart5, "~", 1, 100);
 8001104:	492c      	ldr	r1, [pc, #176]	; (80011b8 <xbee_send_string+0x218>)
 8001106:	482d      	ldr	r0, [pc, #180]	; (80011bc <xbee_send_string+0x21c>)
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	2201      	movs	r2, #1
 800110c:	f001 fd1e 	bl	8002b4c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, (uint8_t*)&tx_frame.length, 2, 100);
 8001110:	2408      	movs	r4, #8
 8001112:	1939      	adds	r1, r7, r4
 8001114:	4829      	ldr	r0, [pc, #164]	; (80011bc <xbee_send_string+0x21c>)
 8001116:	2364      	movs	r3, #100	; 0x64
 8001118:	2202      	movs	r2, #2
 800111a:	f001 fd17 	bl	8002b4c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.type, 1, 100);
 800111e:	193b      	adds	r3, r7, r4
 8001120:	1c99      	adds	r1, r3, #2
 8001122:	4826      	ldr	r0, [pc, #152]	; (80011bc <xbee_send_string+0x21c>)
 8001124:	2364      	movs	r3, #100	; 0x64
 8001126:	2201      	movs	r2, #1
 8001128:	f001 fd10 	bl	8002b4c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.id, 1, 100);
 800112c:	193b      	adds	r3, r7, r4
 800112e:	1cd9      	adds	r1, r3, #3
 8001130:	4822      	ldr	r0, [pc, #136]	; (80011bc <xbee_send_string+0x21c>)
 8001132:	2364      	movs	r3, #100	; 0x64
 8001134:	2201      	movs	r2, #1
 8001136:	f001 fd09 	bl	8002b4c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.address64, 8, 100);
 800113a:	193b      	adds	r3, r7, r4
 800113c:	3308      	adds	r3, #8
 800113e:	0019      	movs	r1, r3
 8001140:	481e      	ldr	r0, [pc, #120]	; (80011bc <xbee_send_string+0x21c>)
 8001142:	2364      	movs	r3, #100	; 0x64
 8001144:	2208      	movs	r2, #8
 8001146:	f001 fd01 	bl	8002b4c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.address16, 2, 100);
 800114a:	193b      	adds	r3, r7, r4
 800114c:	3310      	adds	r3, #16
 800114e:	0019      	movs	r1, r3
 8001150:	481a      	ldr	r0, [pc, #104]	; (80011bc <xbee_send_string+0x21c>)
 8001152:	2364      	movs	r3, #100	; 0x64
 8001154:	2202      	movs	r2, #2
 8001156:	f001 fcf9 	bl	8002b4c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.content_index, 1, 100);
 800115a:	193b      	adds	r3, r7, r4
 800115c:	3314      	adds	r3, #20
 800115e:	33ff      	adds	r3, #255	; 0xff
 8001160:	0019      	movs	r1, r3
 8001162:	4816      	ldr	r0, [pc, #88]	; (80011bc <xbee_send_string+0x21c>)
 8001164:	2364      	movs	r3, #100	; 0x64
 8001166:	2201      	movs	r2, #1
 8001168:	f001 fcf0 	bl	8002b4c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.option, 1, 100);
 800116c:	193b      	adds	r3, r7, r4
 800116e:	3312      	adds	r3, #18
 8001170:	0019      	movs	r1, r3
 8001172:	4812      	ldr	r0, [pc, #72]	; (80011bc <xbee_send_string+0x21c>)
 8001174:	2364      	movs	r3, #100	; 0x64
 8001176:	2201      	movs	r2, #1
 8001178:	f001 fce8 	bl	8002b4c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.content, strlen(string), 100);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	0018      	movs	r0, r3
 8001180:	f7fe ffc2 	bl	8000108 <strlen>
 8001184:	0003      	movs	r3, r0
 8001186:	b29a      	uxth	r2, r3
 8001188:	193b      	adds	r3, r7, r4
 800118a:	3313      	adds	r3, #19
 800118c:	0019      	movs	r1, r3
 800118e:	480b      	ldr	r0, [pc, #44]	; (80011bc <xbee_send_string+0x21c>)
 8001190:	2364      	movs	r3, #100	; 0x64
 8001192:	f001 fcdb 	bl	8002b4c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, &tx_frame.check_sum, 1, 100);
 8001196:	193b      	adds	r3, r7, r4
 8001198:	3319      	adds	r3, #25
 800119a:	33ff      	adds	r3, #255	; 0xff
 800119c:	0019      	movs	r1, r3
 800119e:	4807      	ldr	r0, [pc, #28]	; (80011bc <xbee_send_string+0x21c>)
 80011a0:	2364      	movs	r3, #100	; 0x64
 80011a2:	2201      	movs	r2, #1
 80011a4:	f001 fcd2 	bl	8002b4c <HAL_UART_Transmit>
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b04f      	add	sp, #316	; 0x13c
 80011ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b0:	fffffed0 	.word	0xfffffed0
 80011b4:	0000ffff 	.word	0x0000ffff
 80011b8:	08004ac0 	.word	0x08004ac0
 80011bc:	20000374 	.word	0x20000374

080011c0 <xbee_send_alert>:
void xbee_send_alert(){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
	uint8_t string[25];
	sprintf(string, "E%u_%li\n", (uint8_t)123, bee_count);
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <xbee_send_alert+0x24>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4907      	ldr	r1, [pc, #28]	; (80011e8 <xbee_send_alert+0x28>)
 80011cc:	1d38      	adds	r0, r7, #4
 80011ce:	227b      	movs	r2, #123	; 0x7b
 80011d0:	f003 f840 	bl	8004254 <siprintf>
	//xbee_send_string("n'importe quoi\n");
	xbee_send_string(string);
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	0018      	movs	r0, r3
 80011d8:	f7ff fee2 	bl	8000fa0 <xbee_send_string>
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b008      	add	sp, #32
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2000036c 	.word	0x2000036c
 80011e8:	08004ac4 	.word	0x08004ac4

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <Error_Handler+0x8>
	...

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <HAL_MspInit+0x24>)
 80011fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_MspInit+0x24>)
 8001202:	2101      	movs	r1, #1
 8001204:	430a      	orrs	r2, r1
 8001206:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <HAL_MspInit+0x24>)
 800120a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_MspInit+0x24>)
 800120e:	2180      	movs	r1, #128	; 0x80
 8001210:	0549      	lsls	r1, r1, #21
 8001212:	430a      	orrs	r2, r1
 8001214:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40021000 	.word	0x40021000

08001220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b08b      	sub	sp, #44	; 0x2c
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	2414      	movs	r4, #20
 800122a:	193b      	adds	r3, r7, r4
 800122c:	0018      	movs	r0, r3
 800122e:	2314      	movs	r3, #20
 8001230:	001a      	movs	r2, r3
 8001232:	2100      	movs	r1, #0
 8001234:	f003 f805 	bl	8004242 <memset>
  if(huart->Instance==USART2)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a33      	ldr	r2, [pc, #204]	; (800130c <HAL_UART_MspInit+0xec>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12a      	bne.n	8001298 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001242:	4b33      	ldr	r3, [pc, #204]	; (8001310 <HAL_UART_MspInit+0xf0>)
 8001244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001246:	4b32      	ldr	r3, [pc, #200]	; (8001310 <HAL_UART_MspInit+0xf0>)
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	0289      	lsls	r1, r1, #10
 800124c:	430a      	orrs	r2, r1
 800124e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <HAL_UART_MspInit+0xf0>)
 8001252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001254:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <HAL_UART_MspInit+0xf0>)
 8001256:	2101      	movs	r1, #1
 8001258:	430a      	orrs	r2, r1
 800125a:	62da      	str	r2, [r3, #44]	; 0x2c
 800125c:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <HAL_UART_MspInit+0xf0>)
 800125e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001260:	2201      	movs	r2, #1
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001268:	0021      	movs	r1, r4
 800126a:	187b      	adds	r3, r7, r1
 800126c:	220c      	movs	r2, #12
 800126e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	187b      	adds	r3, r7, r1
 8001272:	2202      	movs	r2, #2
 8001274:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	187b      	adds	r3, r7, r1
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2203      	movs	r2, #3
 8001280:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001282:	187b      	adds	r3, r7, r1
 8001284:	2204      	movs	r2, #4
 8001286:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	187a      	adds	r2, r7, r1
 800128a:	23a0      	movs	r3, #160	; 0xa0
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	0011      	movs	r1, r2
 8001290:	0018      	movs	r0, r3
 8001292:	f000 fac7 	bl	8001824 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8001296:	e035      	b.n	8001304 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART5)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a1d      	ldr	r2, [pc, #116]	; (8001314 <HAL_UART_MspInit+0xf4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d130      	bne.n	8001304 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART5_CLK_ENABLE();
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <HAL_UART_MspInit+0xf0>)
 80012a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_UART_MspInit+0xf0>)
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	0349      	lsls	r1, r1, #13
 80012ac:	430a      	orrs	r2, r1
 80012ae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_UART_MspInit+0xf0>)
 80012b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <HAL_UART_MspInit+0xf0>)
 80012b6:	2102      	movs	r1, #2
 80012b8:	430a      	orrs	r2, r1
 80012ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <HAL_UART_MspInit+0xf0>)
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	2202      	movs	r2, #2
 80012c2:	4013      	ands	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80012c8:	2114      	movs	r1, #20
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	2218      	movs	r2, #24
 80012ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	2202      	movs	r2, #2
 80012d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	187b      	adds	r3, r7, r1
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	2203      	movs	r2, #3
 80012e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 80012e2:	187b      	adds	r3, r7, r1
 80012e4:	2206      	movs	r2, #6
 80012e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <HAL_UART_MspInit+0xf8>)
 80012ec:	0019      	movs	r1, r3
 80012ee:	0010      	movs	r0, r2
 80012f0:	f000 fa98 	bl	8001824 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2100      	movs	r1, #0
 80012f8:	200e      	movs	r0, #14
 80012fa:	f000 f9d9 	bl	80016b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80012fe:	200e      	movs	r0, #14
 8001300:	f000 f9eb 	bl	80016da <HAL_NVIC_EnableIRQ>
}
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	b00b      	add	sp, #44	; 0x2c
 800130a:	bd90      	pop	{r4, r7, pc}
 800130c:	40004400 	.word	0x40004400
 8001310:	40021000 	.word	0x40021000
 8001314:	40005000 	.word	0x40005000
 8001318:	50000400 	.word	0x50000400

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <NMI_Handler+0x4>

08001322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler+0x4>

08001328 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800132c:	46c0      	nop			; (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001340:	f000 f8ca 	bl	80014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <USART4_5_IRQHandler+0x14>)
 8001352:	0018      	movs	r0, r3
 8001354:	f001 fd0a 	bl	8002d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	20000374 	.word	0x20000374

08001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <_sbrk+0x5c>)
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <_sbrk+0x60>)
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <_sbrk+0x64>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <_sbrk+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	18d3      	adds	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d207      	bcs.n	80013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001394:	f002 ff22 	bl	80041dc <__errno>
 8001398:	0003      	movs	r3, r0
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	2301      	movs	r3, #1
 80013a0:	425b      	negs	r3, r3
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	18d2      	adds	r2, r2, r3
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <_sbrk+0x64>)
 80013b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	0018      	movs	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b006      	add	sp, #24
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20005000 	.word	0x20005000
 80013c4:	00000400 	.word	0x00000400
 80013c8:	2000035c 	.word	0x2000035c
 80013cc:	20000490 	.word	0x20000490

080013d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80013de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <LoopForever+0x6>)
  ldr r1, =_edata
 80013e2:	490e      	ldr	r1, [pc, #56]	; (800141c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <LoopForever+0xe>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f8:	4c0b      	ldr	r4, [pc, #44]	; (8001428 <LoopForever+0x16>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001406:	f7ff ffe3 	bl	80013d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140a:	f002 feed 	bl	80041e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140e:	f7ff f857 	bl	80004c0 <main>

08001412 <LoopForever>:

LoopForever:
    b LoopForever
 8001412:	e7fe      	b.n	8001412 <LoopForever>
   ldr   r0, =_estack
 8001414:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8001420:	08004bac 	.word	0x08004bac
  ldr r2, =_sbss
 8001424:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8001428:	20000490 	.word	0x20000490

0800142c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC1_COMP_IRQHandler>
	...

08001430 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_Init+0x3c>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_Init+0x3c>)
 8001442:	2140      	movs	r1, #64	; 0x40
 8001444:	430a      	orrs	r2, r1
 8001446:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001448:	2003      	movs	r0, #3
 800144a:	f000 f811 	bl	8001470 <HAL_InitTick>
 800144e:	1e03      	subs	r3, r0, #0
 8001450:	d003      	beq.n	800145a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001452:	1dfb      	adds	r3, r7, #7
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e001      	b.n	800145e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800145a:	f7ff fecd 	bl	80011f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	781b      	ldrb	r3, [r3, #0]
}
 8001462:	0018      	movs	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	b002      	add	sp, #8
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	40022000 	.word	0x40022000

08001470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_InitTick+0x5c>)
 800147a:	681c      	ldr	r4, [r3, #0]
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <HAL_InitTick+0x60>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	0019      	movs	r1, r3
 8001482:	23fa      	movs	r3, #250	; 0xfa
 8001484:	0098      	lsls	r0, r3, #2
 8001486:	f7fe fe51 	bl	800012c <__udivsi3>
 800148a:	0003      	movs	r3, r0
 800148c:	0019      	movs	r1, r3
 800148e:	0020      	movs	r0, r4
 8001490:	f7fe fe4c 	bl	800012c <__udivsi3>
 8001494:	0003      	movs	r3, r0
 8001496:	0018      	movs	r0, r3
 8001498:	f000 f92f 	bl	80016fa <HAL_SYSTICK_Config>
 800149c:	1e03      	subs	r3, r0, #0
 800149e:	d001      	beq.n	80014a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e00f      	b.n	80014c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d80b      	bhi.n	80014c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	2301      	movs	r3, #1
 80014ae:	425b      	negs	r3, r3
 80014b0:	2200      	movs	r2, #0
 80014b2:	0018      	movs	r0, r3
 80014b4:	f000 f8fc 	bl	80016b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_InitTick+0x64>)
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	e000      	b.n	80014c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b003      	add	sp, #12
 80014ca:	bd90      	pop	{r4, r7, pc}
 80014cc:	200001b4 	.word	0x200001b4
 80014d0:	200001bc 	.word	0x200001bc
 80014d4:	200001b8 	.word	0x200001b8

080014d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_IncTick+0x1c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	001a      	movs	r2, r3
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_IncTick+0x20>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	18d2      	adds	r2, r2, r3
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_IncTick+0x20>)
 80014ea:	601a      	str	r2, [r3, #0]
}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	200001bc 	.word	0x200001bc
 80014f8:	2000047c 	.word	0x2000047c

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b02      	ldr	r3, [pc, #8]	; (800150c <HAL_GetTick+0x10>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	2000047c 	.word	0x2000047c

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff fff0 	bl	80014fc <HAL_GetTick>
 800151c:	0003      	movs	r3, r0
 800151e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3301      	adds	r3, #1
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	001a      	movs	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	189b      	adds	r3, r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	f7ff ffe0 	bl	80014fc <HAL_GetTick>
 800153c:	0002      	movs	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	46c0      	nop			; (mov r8, r8)
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	b004      	add	sp, #16
 8001550:	bd80      	pop	{r7, pc}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	200001bc 	.word	0x200001bc

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	0002      	movs	r2, r0
 8001560:	1dfb      	adds	r3, r7, #7
 8001562:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001564:	1dfb      	adds	r3, r7, #7
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b7f      	cmp	r3, #127	; 0x7f
 800156a:	d809      	bhi.n	8001580 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156c:	1dfb      	adds	r3, r7, #7
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	001a      	movs	r2, r3
 8001572:	231f      	movs	r3, #31
 8001574:	401a      	ands	r2, r3
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <__NVIC_EnableIRQ+0x30>)
 8001578:	2101      	movs	r1, #1
 800157a:	4091      	lsls	r1, r2
 800157c:	000a      	movs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
  }
}
 8001580:	46c0      	nop			; (mov r8, r8)
 8001582:	46bd      	mov	sp, r7
 8001584:	b002      	add	sp, #8
 8001586:	bd80      	pop	{r7, pc}
 8001588:	e000e100 	.word	0xe000e100

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	0002      	movs	r2, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b7f      	cmp	r3, #127	; 0x7f
 80015a0:	d828      	bhi.n	80015f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a2:	4a2f      	ldr	r2, [pc, #188]	; (8001660 <__NVIC_SetPriority+0xd4>)
 80015a4:	1dfb      	adds	r3, r7, #7
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	33c0      	adds	r3, #192	; 0xc0
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	589b      	ldr	r3, [r3, r2]
 80015b2:	1dfa      	adds	r2, r7, #7
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	0011      	movs	r1, r2
 80015b8:	2203      	movs	r2, #3
 80015ba:	400a      	ands	r2, r1
 80015bc:	00d2      	lsls	r2, r2, #3
 80015be:	21ff      	movs	r1, #255	; 0xff
 80015c0:	4091      	lsls	r1, r2
 80015c2:	000a      	movs	r2, r1
 80015c4:	43d2      	mvns	r2, r2
 80015c6:	401a      	ands	r2, r3
 80015c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	019b      	lsls	r3, r3, #6
 80015ce:	22ff      	movs	r2, #255	; 0xff
 80015d0:	401a      	ands	r2, r3
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	0018      	movs	r0, r3
 80015d8:	2303      	movs	r3, #3
 80015da:	4003      	ands	r3, r0
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e0:	481f      	ldr	r0, [pc, #124]	; (8001660 <__NVIC_SetPriority+0xd4>)
 80015e2:	1dfb      	adds	r3, r7, #7
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	430a      	orrs	r2, r1
 80015ec:	33c0      	adds	r3, #192	; 0xc0
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015f2:	e031      	b.n	8001658 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f4:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <__NVIC_SetPriority+0xd8>)
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	0019      	movs	r1, r3
 80015fc:	230f      	movs	r3, #15
 80015fe:	400b      	ands	r3, r1
 8001600:	3b08      	subs	r3, #8
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3306      	adds	r3, #6
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	18d3      	adds	r3, r2, r3
 800160a:	3304      	adds	r3, #4
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	1dfa      	adds	r2, r7, #7
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	0011      	movs	r1, r2
 8001614:	2203      	movs	r2, #3
 8001616:	400a      	ands	r2, r1
 8001618:	00d2      	lsls	r2, r2, #3
 800161a:	21ff      	movs	r1, #255	; 0xff
 800161c:	4091      	lsls	r1, r2
 800161e:	000a      	movs	r2, r1
 8001620:	43d2      	mvns	r2, r2
 8001622:	401a      	ands	r2, r3
 8001624:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	019b      	lsls	r3, r3, #6
 800162a:	22ff      	movs	r2, #255	; 0xff
 800162c:	401a      	ands	r2, r3
 800162e:	1dfb      	adds	r3, r7, #7
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	0018      	movs	r0, r3
 8001634:	2303      	movs	r3, #3
 8001636:	4003      	ands	r3, r0
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <__NVIC_SetPriority+0xd8>)
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	001c      	movs	r4, r3
 8001644:	230f      	movs	r3, #15
 8001646:	4023      	ands	r3, r4
 8001648:	3b08      	subs	r3, #8
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	430a      	orrs	r2, r1
 800164e:	3306      	adds	r3, #6
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	18c3      	adds	r3, r0, r3
 8001654:	3304      	adds	r3, #4
 8001656:	601a      	str	r2, [r3, #0]
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b003      	add	sp, #12
 800165e:	bd90      	pop	{r4, r7, pc}
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	1e5a      	subs	r2, r3, #1
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	045b      	lsls	r3, r3, #17
 8001678:	429a      	cmp	r2, r3
 800167a:	d301      	bcc.n	8001680 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167c:	2301      	movs	r3, #1
 800167e:	e010      	b.n	80016a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <SysTick_Config+0x44>)
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	3a01      	subs	r2, #1
 8001686:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001688:	2301      	movs	r3, #1
 800168a:	425b      	negs	r3, r3
 800168c:	2103      	movs	r1, #3
 800168e:	0018      	movs	r0, r3
 8001690:	f7ff ff7c 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SysTick_Config+0x44>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <SysTick_Config+0x44>)
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b002      	add	sp, #8
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	210f      	movs	r1, #15
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	1c02      	adds	r2, r0, #0
 80016c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	0011      	movs	r1, r2
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>
}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b004      	add	sp, #16
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	0002      	movs	r2, r0
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e6:	1dfb      	adds	r3, r7, #7
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7ff ff33 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b002      	add	sp, #8
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	0018      	movs	r0, r3
 8001706:	f7ff ffaf 	bl	8001668 <SysTick_Config>
 800170a:	0003      	movs	r3, r0
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800171c:	230f      	movs	r3, #15
 800171e:	18fb      	adds	r3, r7, r3
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2225      	movs	r2, #37	; 0x25
 8001728:	5c9b      	ldrb	r3, [r3, r2]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d008      	beq.n	8001742 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2204      	movs	r2, #4
 8001734:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2224      	movs	r2, #36	; 0x24
 800173a:	2100      	movs	r1, #0
 800173c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e024      	b.n	800178c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	210e      	movs	r1, #14
 800174e:	438a      	bics	r2, r1
 8001750:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2101      	movs	r1, #1
 800175e:	438a      	bics	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	221c      	movs	r2, #28
 8001768:	401a      	ands	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	2101      	movs	r1, #1
 8001770:	4091      	lsls	r1, r2
 8001772:	000a      	movs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2225      	movs	r2, #37	; 0x25
 800177a:	2101      	movs	r1, #1
 800177c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2224      	movs	r2, #36	; 0x24
 8001782:	2100      	movs	r1, #0
 8001784:	5499      	strb	r1, [r3, r2]

    return status;
 8001786:	230f      	movs	r3, #15
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b004      	add	sp, #16
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800179c:	210f      	movs	r1, #15
 800179e:	187b      	adds	r3, r7, r1
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2225      	movs	r2, #37	; 0x25
 80017a8:	5c9b      	ldrb	r3, [r3, r2]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d006      	beq.n	80017be <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2204      	movs	r2, #4
 80017b4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	e02a      	b.n	8001814 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	210e      	movs	r1, #14
 80017ca:	438a      	bics	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	438a      	bics	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	221c      	movs	r2, #28
 80017e4:	401a      	ands	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	2101      	movs	r1, #1
 80017ec:	4091      	lsls	r1, r2
 80017ee:	000a      	movs	r2, r1
 80017f0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2225      	movs	r2, #37	; 0x25
 80017f6:	2101      	movs	r1, #1
 80017f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2224      	movs	r2, #36	; 0x24
 80017fe:	2100      	movs	r1, #0
 8001800:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	0010      	movs	r0, r2
 8001812:	4798      	blx	r3
    }
  }
  return status;
 8001814:	230f      	movs	r3, #15
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	781b      	ldrb	r3, [r3, #0]
}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	b004      	add	sp, #16
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800183a:	e155      	b.n	8001ae8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2101      	movs	r1, #1
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	4091      	lsls	r1, r2
 8001846:	000a      	movs	r2, r1
 8001848:	4013      	ands	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d100      	bne.n	8001854 <HAL_GPIO_Init+0x30>
 8001852:	e146      	b.n	8001ae2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2203      	movs	r2, #3
 800185a:	4013      	ands	r3, r2
 800185c:	2b01      	cmp	r3, #1
 800185e:	d005      	beq.n	800186c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2203      	movs	r2, #3
 8001866:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001868:	2b02      	cmp	r3, #2
 800186a:	d130      	bne.n	80018ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	409a      	lsls	r2, r3
 800187a:	0013      	movs	r3, r2
 800187c:	43da      	mvns	r2, r3
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	409a      	lsls	r2, r3
 800188e:	0013      	movs	r3, r2
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a2:	2201      	movs	r2, #1
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
 80018a8:	0013      	movs	r3, r2
 80018aa:	43da      	mvns	r2, r3
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	2201      	movs	r2, #1
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
 80018c0:	0013      	movs	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2203      	movs	r2, #3
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d017      	beq.n	800190a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	409a      	lsls	r2, r3
 80018e8:	0013      	movs	r3, r2
 80018ea:	43da      	mvns	r2, r3
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	409a      	lsls	r2, r3
 80018fc:	0013      	movs	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2203      	movs	r2, #3
 8001910:	4013      	ands	r3, r2
 8001912:	2b02      	cmp	r3, #2
 8001914:	d123      	bne.n	800195e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	08da      	lsrs	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3208      	adds	r2, #8
 800191e:	0092      	lsls	r2, r2, #2
 8001920:	58d3      	ldr	r3, [r2, r3]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2207      	movs	r2, #7
 8001928:	4013      	ands	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	409a      	lsls	r2, r3
 8001930:	0013      	movs	r3, r2
 8001932:	43da      	mvns	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2107      	movs	r1, #7
 8001942:	400b      	ands	r3, r1
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	409a      	lsls	r2, r3
 8001948:	0013      	movs	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	08da      	lsrs	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3208      	adds	r2, #8
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	6939      	ldr	r1, [r7, #16]
 800195c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	43da      	mvns	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2203      	movs	r2, #3
 800197c:	401a      	ands	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	409a      	lsls	r2, r3
 8001984:	0013      	movs	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	23c0      	movs	r3, #192	; 0xc0
 8001998:	029b      	lsls	r3, r3, #10
 800199a:	4013      	ands	r3, r2
 800199c:	d100      	bne.n	80019a0 <HAL_GPIO_Init+0x17c>
 800199e:	e0a0      	b.n	8001ae2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a0:	4b57      	ldr	r3, [pc, #348]	; (8001b00 <HAL_GPIO_Init+0x2dc>)
 80019a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a4:	4b56      	ldr	r3, [pc, #344]	; (8001b00 <HAL_GPIO_Init+0x2dc>)
 80019a6:	2101      	movs	r1, #1
 80019a8:	430a      	orrs	r2, r1
 80019aa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ac:	4a55      	ldr	r2, [pc, #340]	; (8001b04 <HAL_GPIO_Init+0x2e0>)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	589b      	ldr	r3, [r3, r2]
 80019b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2203      	movs	r2, #3
 80019be:	4013      	ands	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	409a      	lsls	r2, r3
 80019c6:	0013      	movs	r3, r2
 80019c8:	43da      	mvns	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	23a0      	movs	r3, #160	; 0xa0
 80019d4:	05db      	lsls	r3, r3, #23
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d01f      	beq.n	8001a1a <HAL_GPIO_Init+0x1f6>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4a      	ldr	r2, [pc, #296]	; (8001b08 <HAL_GPIO_Init+0x2e4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d019      	beq.n	8001a16 <HAL_GPIO_Init+0x1f2>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a49      	ldr	r2, [pc, #292]	; (8001b0c <HAL_GPIO_Init+0x2e8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d013      	beq.n	8001a12 <HAL_GPIO_Init+0x1ee>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a48      	ldr	r2, [pc, #288]	; (8001b10 <HAL_GPIO_Init+0x2ec>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00d      	beq.n	8001a0e <HAL_GPIO_Init+0x1ea>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a47      	ldr	r2, [pc, #284]	; (8001b14 <HAL_GPIO_Init+0x2f0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d007      	beq.n	8001a0a <HAL_GPIO_Init+0x1e6>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a46      	ldr	r2, [pc, #280]	; (8001b18 <HAL_GPIO_Init+0x2f4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d101      	bne.n	8001a06 <HAL_GPIO_Init+0x1e2>
 8001a02:	2305      	movs	r3, #5
 8001a04:	e00a      	b.n	8001a1c <HAL_GPIO_Init+0x1f8>
 8001a06:	2306      	movs	r3, #6
 8001a08:	e008      	b.n	8001a1c <HAL_GPIO_Init+0x1f8>
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	e006      	b.n	8001a1c <HAL_GPIO_Init+0x1f8>
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e004      	b.n	8001a1c <HAL_GPIO_Init+0x1f8>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e002      	b.n	8001a1c <HAL_GPIO_Init+0x1f8>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <HAL_GPIO_Init+0x1f8>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	2103      	movs	r1, #3
 8001a20:	400a      	ands	r2, r1
 8001a22:	0092      	lsls	r2, r2, #2
 8001a24:	4093      	lsls	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a2c:	4935      	ldr	r1, [pc, #212]	; (8001b04 <HAL_GPIO_Init+0x2e0>)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a3a:	4b38      	ldr	r3, [pc, #224]	; (8001b1c <HAL_GPIO_Init+0x2f8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	43da      	mvns	r2, r3
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	025b      	lsls	r3, r3, #9
 8001a52:	4013      	ands	r3, r2
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <HAL_GPIO_Init+0x2f8>)
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a64:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <HAL_GPIO_Init+0x2f8>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	029b      	lsls	r3, r3, #10
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a88:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <HAL_GPIO_Init+0x2f8>)
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a8e:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <HAL_GPIO_Init+0x2f8>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	43da      	mvns	r2, r3
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	035b      	lsls	r3, r3, #13
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_GPIO_Init+0x2f8>)
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_GPIO_Init+0x2f8>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	43da      	mvns	r2, r3
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	039b      	lsls	r3, r3, #14
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_GPIO_Init+0x2f8>)
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	40da      	lsrs	r2, r3
 8001af0:	1e13      	subs	r3, r2, #0
 8001af2:	d000      	beq.n	8001af6 <HAL_GPIO_Init+0x2d2>
 8001af4:	e6a2      	b.n	800183c <HAL_GPIO_Init+0x18>
  }
}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	46c0      	nop			; (mov r8, r8)
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b006      	add	sp, #24
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010000 	.word	0x40010000
 8001b08:	50000400 	.word	0x50000400
 8001b0c:	50000800 	.word	0x50000800
 8001b10:	50000c00 	.word	0x50000c00
 8001b14:	50001000 	.word	0x50001000
 8001b18:	50001c00 	.word	0x50001c00
 8001b1c:	40010400 	.word	0x40010400

08001b20 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	000a      	movs	r2, r1
 8001b2a:	1cbb      	adds	r3, r7, #2
 8001b2c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	1cba      	adds	r2, r7, #2
 8001b34:	8812      	ldrh	r2, [r2, #0]
 8001b36:	4013      	ands	r3, r2
 8001b38:	d004      	beq.n	8001b44 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b3a:	230f      	movs	r3, #15
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
 8001b42:	e003      	b.n	8001b4c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b44:	230f      	movs	r3, #15
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	781b      	ldrb	r3, [r3, #0]
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b004      	add	sp, #16
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	0008      	movs	r0, r1
 8001b64:	0011      	movs	r1, r2
 8001b66:	1cbb      	adds	r3, r7, #2
 8001b68:	1c02      	adds	r2, r0, #0
 8001b6a:	801a      	strh	r2, [r3, #0]
 8001b6c:	1c7b      	adds	r3, r7, #1
 8001b6e:	1c0a      	adds	r2, r1, #0
 8001b70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b72:	1c7b      	adds	r3, r7, #1
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d004      	beq.n	8001b84 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b7a:	1cbb      	adds	r3, r7, #2
 8001b7c:	881a      	ldrh	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001b82:	e003      	b.n	8001b8c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001b84:	1cbb      	adds	r3, r7, #2
 8001b86:	881a      	ldrh	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b8c:	46c0      	nop			; (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b002      	add	sp, #8
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	000a      	movs	r2, r1
 8001b9e:	1cbb      	adds	r3, r7, #2
 8001ba0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ba8:	1cbb      	adds	r3, r7, #2
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	041a      	lsls	r2, r3, #16
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	1cb9      	adds	r1, r7, #2
 8001bb8:	8809      	ldrh	r1, [r1, #0]
 8001bba:	400b      	ands	r3, r1
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b004      	add	sp, #16
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b5b0      	push	{r4, r5, r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f000 fbbf 	bl	800235e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be0:	4bc9      	ldr	r3, [pc, #804]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	220c      	movs	r2, #12
 8001be6:	4013      	ands	r3, r2
 8001be8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bea:	4bc7      	ldr	r3, [pc, #796]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	025b      	lsls	r3, r3, #9
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d100      	bne.n	8001c02 <HAL_RCC_OscConfig+0x36>
 8001c00:	e07e      	b.n	8001d00 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d007      	beq.n	8001c18 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d112      	bne.n	8001c34 <HAL_RCC_OscConfig+0x68>
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	025b      	lsls	r3, r3, #9
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d10d      	bne.n	8001c34 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	4bbb      	ldr	r3, [pc, #748]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	029b      	lsls	r3, r3, #10
 8001c20:	4013      	ands	r3, r2
 8001c22:	d100      	bne.n	8001c26 <HAL_RCC_OscConfig+0x5a>
 8001c24:	e06b      	b.n	8001cfe <HAL_RCC_OscConfig+0x132>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d167      	bne.n	8001cfe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f000 fb95 	bl	800235e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	025b      	lsls	r3, r3, #9
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d107      	bne.n	8001c50 <HAL_RCC_OscConfig+0x84>
 8001c40:	4bb1      	ldr	r3, [pc, #708]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4bb0      	ldr	r3, [pc, #704]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001c46:	2180      	movs	r1, #128	; 0x80
 8001c48:	0249      	lsls	r1, r1, #9
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e027      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	23a0      	movs	r3, #160	; 0xa0
 8001c56:	02db      	lsls	r3, r3, #11
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d10e      	bne.n	8001c7a <HAL_RCC_OscConfig+0xae>
 8001c5c:	4baa      	ldr	r3, [pc, #680]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4ba9      	ldr	r3, [pc, #676]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001c62:	2180      	movs	r1, #128	; 0x80
 8001c64:	02c9      	lsls	r1, r1, #11
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	4ba7      	ldr	r3, [pc, #668]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4ba6      	ldr	r3, [pc, #664]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001c70:	2180      	movs	r1, #128	; 0x80
 8001c72:	0249      	lsls	r1, r1, #9
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e012      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c7a:	4ba3      	ldr	r3, [pc, #652]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4ba2      	ldr	r3, [pc, #648]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001c80:	49a2      	ldr	r1, [pc, #648]	; (8001f0c <HAL_RCC_OscConfig+0x340>)
 8001c82:	400a      	ands	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	4ba0      	ldr	r3, [pc, #640]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	025b      	lsls	r3, r3, #9
 8001c8e:	4013      	ands	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4b9c      	ldr	r3, [pc, #624]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b9b      	ldr	r3, [pc, #620]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001c9a:	499d      	ldr	r1, [pc, #628]	; (8001f10 <HAL_RCC_OscConfig+0x344>)
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d015      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fc28 	bl	80014fc <HAL_GetTick>
 8001cac:	0003      	movs	r3, r0
 8001cae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cb0:	e009      	b.n	8001cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb2:	f7ff fc23 	bl	80014fc <HAL_GetTick>
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b64      	cmp	r3, #100	; 0x64
 8001cbe:	d902      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	f000 fb4c 	bl	800235e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cc6:	4b90      	ldr	r3, [pc, #576]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	029b      	lsls	r3, r3, #10
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d0ef      	beq.n	8001cb2 <HAL_RCC_OscConfig+0xe6>
 8001cd2:	e015      	b.n	8001d00 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fc12 	bl	80014fc <HAL_GetTick>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cde:	f7ff fc0d 	bl	80014fc <HAL_GetTick>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b64      	cmp	r3, #100	; 0x64
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e336      	b.n	800235e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cf0:	4b85      	ldr	r3, [pc, #532]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	029b      	lsls	r3, r3, #10
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d1f0      	bne.n	8001cde <HAL_RCC_OscConfig+0x112>
 8001cfc:	e000      	b.n	8001d00 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2202      	movs	r2, #2
 8001d06:	4013      	ands	r3, r2
 8001d08:	d100      	bne.n	8001d0c <HAL_RCC_OscConfig+0x140>
 8001d0a:	e099      	b.n	8001e40 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	2220      	movs	r2, #32
 8001d16:	4013      	ands	r3, r2
 8001d18:	d009      	beq.n	8001d2e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001d1a:	4b7b      	ldr	r3, [pc, #492]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4b7a      	ldr	r3, [pc, #488]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001d20:	2120      	movs	r1, #32
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	2220      	movs	r2, #32
 8001d2a:	4393      	bics	r3, r2
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d13e      	bne.n	8001db8 <HAL_RCC_OscConfig+0x1ec>
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d13b      	bne.n	8001db8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d40:	4b71      	ldr	r3, [pc, #452]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2204      	movs	r2, #4
 8001d46:	4013      	ands	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_RCC_OscConfig+0x188>
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e304      	b.n	800235e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b6c      	ldr	r3, [pc, #432]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a6e      	ldr	r2, [pc, #440]	; (8001f14 <HAL_RCC_OscConfig+0x348>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	021a      	lsls	r2, r3, #8
 8001d64:	4b68      	ldr	r3, [pc, #416]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d6a:	4b67      	ldr	r3, [pc, #412]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2209      	movs	r2, #9
 8001d70:	4393      	bics	r3, r2
 8001d72:	0019      	movs	r1, r3
 8001d74:	4b64      	ldr	r3, [pc, #400]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d7c:	f000 fc42 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 8001d80:	0001      	movs	r1, r0
 8001d82:	4b61      	ldr	r3, [pc, #388]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	220f      	movs	r2, #15
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	4a62      	ldr	r2, [pc, #392]	; (8001f18 <HAL_RCC_OscConfig+0x34c>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	000a      	movs	r2, r1
 8001d92:	40da      	lsrs	r2, r3
 8001d94:	4b61      	ldr	r3, [pc, #388]	; (8001f1c <HAL_RCC_OscConfig+0x350>)
 8001d96:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001d98:	4b61      	ldr	r3, [pc, #388]	; (8001f20 <HAL_RCC_OscConfig+0x354>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2513      	movs	r5, #19
 8001d9e:	197c      	adds	r4, r7, r5
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff fb65 	bl	8001470 <HAL_InitTick>
 8001da6:	0003      	movs	r3, r0
 8001da8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001daa:	197b      	adds	r3, r7, r5
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d046      	beq.n	8001e40 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001db2:	197b      	adds	r3, r7, r5
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	e2d2      	b.n	800235e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d027      	beq.n	8001e0e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001dbe:	4b52      	ldr	r3, [pc, #328]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2209      	movs	r2, #9
 8001dc4:	4393      	bics	r3, r2
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	4b4f      	ldr	r3, [pc, #316]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fb94 	bl	80014fc <HAL_GetTick>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dda:	f7ff fb8f 	bl	80014fc <HAL_GetTick>
 8001dde:	0002      	movs	r2, r0
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e2b8      	b.n	800235e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dec:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2204      	movs	r2, #4
 8001df2:	4013      	ands	r3, r2
 8001df4:	d0f1      	beq.n	8001dda <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df6:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4a46      	ldr	r2, [pc, #280]	; (8001f14 <HAL_RCC_OscConfig+0x348>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	021a      	lsls	r2, r3, #8
 8001e06:	4b40      	ldr	r3, [pc, #256]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	e018      	b.n	8001e40 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0e:	4b3e      	ldr	r3, [pc, #248]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4b3d      	ldr	r3, [pc, #244]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001e14:	2101      	movs	r1, #1
 8001e16:	438a      	bics	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7ff fb6f 	bl	80014fc <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff fb6a 	bl	80014fc <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e293      	b.n	800235e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e36:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d1f1      	bne.n	8001e24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2210      	movs	r2, #16
 8001e46:	4013      	ands	r3, r2
 8001e48:	d100      	bne.n	8001e4c <HAL_RCC_OscConfig+0x280>
 8001e4a:	e0a2      	b.n	8001f92 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d140      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e52:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d005      	beq.n	8001e6a <HAL_RCC_OscConfig+0x29e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e279      	b.n	800235e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e6a:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4a2d      	ldr	r2, [pc, #180]	; (8001f24 <HAL_RCC_OscConfig+0x358>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e78:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7e:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	021b      	lsls	r3, r3, #8
 8001e84:	0a19      	lsrs	r1, r3, #8
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	061a      	lsls	r2, r3, #24
 8001e8c:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	0b5b      	lsrs	r3, r3, #13
 8001e98:	3301      	adds	r3, #1
 8001e9a:	2280      	movs	r2, #128	; 0x80
 8001e9c:	0212      	lsls	r2, r2, #8
 8001e9e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001ea0:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	210f      	movs	r1, #15
 8001ea8:	400b      	ands	r3, r1
 8001eaa:	491b      	ldr	r1, [pc, #108]	; (8001f18 <HAL_RCC_OscConfig+0x34c>)
 8001eac:	5ccb      	ldrb	r3, [r1, r3]
 8001eae:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_RCC_OscConfig+0x350>)
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <HAL_RCC_OscConfig+0x354>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2513      	movs	r5, #19
 8001eba:	197c      	adds	r4, r7, r5
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7ff fad7 	bl	8001470 <HAL_InitTick>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ec6:	197b      	adds	r3, r7, r5
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d061      	beq.n	8001f92 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001ece:	197b      	adds	r3, r7, r5
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	e244      	b.n	800235e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d040      	beq.n	8001f5e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	0049      	lsls	r1, r1, #1
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7ff fb07 	bl	80014fc <HAL_GetTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ef2:	e019      	b.n	8001f28 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ef4:	f7ff fb02 	bl	80014fc <HAL_GetTick>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d912      	bls.n	8001f28 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e22b      	b.n	800235e <HAL_RCC_OscConfig+0x792>
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	fffeffff 	.word	0xfffeffff
 8001f10:	fffbffff 	.word	0xfffbffff
 8001f14:	ffffe0ff 	.word	0xffffe0ff
 8001f18:	08004afc 	.word	0x08004afc
 8001f1c:	200001b4 	.word	0x200001b4
 8001f20:	200001b8 	.word	0x200001b8
 8001f24:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f28:	4bca      	ldr	r3, [pc, #808]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4013      	ands	r3, r2
 8001f32:	d0df      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f34:	4bc7      	ldr	r3, [pc, #796]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4ac7      	ldr	r2, [pc, #796]	; (8002258 <HAL_RCC_OscConfig+0x68c>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f42:	4bc4      	ldr	r3, [pc, #784]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f48:	4bc2      	ldr	r3, [pc, #776]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	0a19      	lsrs	r1, r3, #8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	061a      	lsls	r2, r3, #24
 8001f56:	4bbf      	ldr	r3, [pc, #764]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	e019      	b.n	8001f92 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f5e:	4bbd      	ldr	r3, [pc, #756]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4bbc      	ldr	r3, [pc, #752]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8001f64:	49bd      	ldr	r1, [pc, #756]	; (800225c <HAL_RCC_OscConfig+0x690>)
 8001f66:	400a      	ands	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7ff fac7 	bl	80014fc <HAL_GetTick>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f74:	f7ff fac2 	bl	80014fc <HAL_GetTick>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e1eb      	b.n	800235e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f86:	4bb3      	ldr	r3, [pc, #716]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2208      	movs	r2, #8
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d036      	beq.n	800200a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d019      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa4:	4bab      	ldr	r3, [pc, #684]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8001fa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fa8:	4baa      	ldr	r3, [pc, #680]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8001faa:	2101      	movs	r1, #1
 8001fac:	430a      	orrs	r2, r1
 8001fae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb0:	f7ff faa4 	bl	80014fc <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fba:	f7ff fa9f 	bl	80014fc <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e1c8      	b.n	800235e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fcc:	4ba1      	ldr	r3, [pc, #644]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8001fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d0f1      	beq.n	8001fba <HAL_RCC_OscConfig+0x3ee>
 8001fd6:	e018      	b.n	800200a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd8:	4b9e      	ldr	r3, [pc, #632]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8001fda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fdc:	4b9d      	ldr	r3, [pc, #628]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8001fde:	2101      	movs	r1, #1
 8001fe0:	438a      	bics	r2, r1
 8001fe2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe4:	f7ff fa8a 	bl	80014fc <HAL_GetTick>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fee:	f7ff fa85 	bl	80014fc <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e1ae      	b.n	800235e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002000:	4b94      	ldr	r3, [pc, #592]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8002002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002004:	2202      	movs	r2, #2
 8002006:	4013      	ands	r3, r2
 8002008:	d1f1      	bne.n	8001fee <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2204      	movs	r2, #4
 8002010:	4013      	ands	r3, r2
 8002012:	d100      	bne.n	8002016 <HAL_RCC_OscConfig+0x44a>
 8002014:	e0ae      	b.n	8002174 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002016:	2023      	movs	r0, #35	; 0x23
 8002018:	183b      	adds	r3, r7, r0
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201e:	4b8d      	ldr	r3, [pc, #564]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8002020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	055b      	lsls	r3, r3, #21
 8002026:	4013      	ands	r3, r2
 8002028:	d109      	bne.n	800203e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b8a      	ldr	r3, [pc, #552]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 800202c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800202e:	4b89      	ldr	r3, [pc, #548]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	0549      	lsls	r1, r1, #21
 8002034:	430a      	orrs	r2, r1
 8002036:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002038:	183b      	adds	r3, r7, r0
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203e:	4b88      	ldr	r3, [pc, #544]	; (8002260 <HAL_RCC_OscConfig+0x694>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4013      	ands	r3, r2
 8002048:	d11a      	bne.n	8002080 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800204a:	4b85      	ldr	r3, [pc, #532]	; (8002260 <HAL_RCC_OscConfig+0x694>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	4b84      	ldr	r3, [pc, #528]	; (8002260 <HAL_RCC_OscConfig+0x694>)
 8002050:	2180      	movs	r1, #128	; 0x80
 8002052:	0049      	lsls	r1, r1, #1
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002058:	f7ff fa50 	bl	80014fc <HAL_GetTick>
 800205c:	0003      	movs	r3, r0
 800205e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002062:	f7ff fa4b 	bl	80014fc <HAL_GetTick>
 8002066:	0002      	movs	r2, r0
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b64      	cmp	r3, #100	; 0x64
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e174      	b.n	800235e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002074:	4b7a      	ldr	r3, [pc, #488]	; (8002260 <HAL_RCC_OscConfig+0x694>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4013      	ands	r3, r2
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	429a      	cmp	r2, r3
 800208a:	d107      	bne.n	800209c <HAL_RCC_OscConfig+0x4d0>
 800208c:	4b71      	ldr	r3, [pc, #452]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 800208e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002090:	4b70      	ldr	r3, [pc, #448]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8002092:	2180      	movs	r1, #128	; 0x80
 8002094:	0049      	lsls	r1, r1, #1
 8002096:	430a      	orrs	r2, r1
 8002098:	651a      	str	r2, [r3, #80]	; 0x50
 800209a:	e031      	b.n	8002100 <HAL_RCC_OscConfig+0x534>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10c      	bne.n	80020be <HAL_RCC_OscConfig+0x4f2>
 80020a4:	4b6b      	ldr	r3, [pc, #428]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 80020a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020a8:	4b6a      	ldr	r3, [pc, #424]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 80020aa:	496c      	ldr	r1, [pc, #432]	; (800225c <HAL_RCC_OscConfig+0x690>)
 80020ac:	400a      	ands	r2, r1
 80020ae:	651a      	str	r2, [r3, #80]	; 0x50
 80020b0:	4b68      	ldr	r3, [pc, #416]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 80020b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020b4:	4b67      	ldr	r3, [pc, #412]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 80020b6:	496b      	ldr	r1, [pc, #428]	; (8002264 <HAL_RCC_OscConfig+0x698>)
 80020b8:	400a      	ands	r2, r1
 80020ba:	651a      	str	r2, [r3, #80]	; 0x50
 80020bc:	e020      	b.n	8002100 <HAL_RCC_OscConfig+0x534>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	23a0      	movs	r3, #160	; 0xa0
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d10e      	bne.n	80020e8 <HAL_RCC_OscConfig+0x51c>
 80020ca:	4b62      	ldr	r3, [pc, #392]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 80020cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ce:	4b61      	ldr	r3, [pc, #388]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	00c9      	lsls	r1, r1, #3
 80020d4:	430a      	orrs	r2, r1
 80020d6:	651a      	str	r2, [r3, #80]	; 0x50
 80020d8:	4b5e      	ldr	r3, [pc, #376]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 80020da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020dc:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	0049      	lsls	r1, r1, #1
 80020e2:	430a      	orrs	r2, r1
 80020e4:	651a      	str	r2, [r3, #80]	; 0x50
 80020e6:	e00b      	b.n	8002100 <HAL_RCC_OscConfig+0x534>
 80020e8:	4b5a      	ldr	r3, [pc, #360]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 80020ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ec:	4b59      	ldr	r3, [pc, #356]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 80020ee:	495b      	ldr	r1, [pc, #364]	; (800225c <HAL_RCC_OscConfig+0x690>)
 80020f0:	400a      	ands	r2, r1
 80020f2:	651a      	str	r2, [r3, #80]	; 0x50
 80020f4:	4b57      	ldr	r3, [pc, #348]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 80020f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020f8:	4b56      	ldr	r3, [pc, #344]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 80020fa:	495a      	ldr	r1, [pc, #360]	; (8002264 <HAL_RCC_OscConfig+0x698>)
 80020fc:	400a      	ands	r2, r1
 80020fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d015      	beq.n	8002134 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002108:	f7ff f9f8 	bl	80014fc <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002110:	e009      	b.n	8002126 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7ff f9f3 	bl	80014fc <HAL_GetTick>
 8002116:	0002      	movs	r2, r0
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	4a52      	ldr	r2, [pc, #328]	; (8002268 <HAL_RCC_OscConfig+0x69c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e11b      	b.n	800235e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002126:	4b4b      	ldr	r3, [pc, #300]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8002128:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4013      	ands	r3, r2
 8002130:	d0ef      	beq.n	8002112 <HAL_RCC_OscConfig+0x546>
 8002132:	e014      	b.n	800215e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002134:	f7ff f9e2 	bl	80014fc <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800213c:	e009      	b.n	8002152 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7ff f9dd 	bl	80014fc <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	4a47      	ldr	r2, [pc, #284]	; (8002268 <HAL_RCC_OscConfig+0x69c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e105      	b.n	800235e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002152:	4b40      	ldr	r3, [pc, #256]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8002154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4013      	ands	r3, r2
 800215c:	d1ef      	bne.n	800213e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800215e:	2323      	movs	r3, #35	; 0x23
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002168:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 800216a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800216c:	4b39      	ldr	r3, [pc, #228]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 800216e:	493f      	ldr	r1, [pc, #252]	; (800226c <HAL_RCC_OscConfig+0x6a0>)
 8002170:	400a      	ands	r2, r1
 8002172:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2220      	movs	r2, #32
 800217a:	4013      	ands	r3, r2
 800217c:	d049      	beq.n	8002212 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d026      	beq.n	80021d4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002186:	4b33      	ldr	r3, [pc, #204]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	4b32      	ldr	r3, [pc, #200]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 800218c:	2101      	movs	r1, #1
 800218e:	430a      	orrs	r2, r1
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	4b30      	ldr	r3, [pc, #192]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8002194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002196:	4b2f      	ldr	r3, [pc, #188]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8002198:	2101      	movs	r1, #1
 800219a:	430a      	orrs	r2, r1
 800219c:	635a      	str	r2, [r3, #52]	; 0x34
 800219e:	4b34      	ldr	r3, [pc, #208]	; (8002270 <HAL_RCC_OscConfig+0x6a4>)
 80021a0:	6a1a      	ldr	r2, [r3, #32]
 80021a2:	4b33      	ldr	r3, [pc, #204]	; (8002270 <HAL_RCC_OscConfig+0x6a4>)
 80021a4:	2180      	movs	r1, #128	; 0x80
 80021a6:	0189      	lsls	r1, r1, #6
 80021a8:	430a      	orrs	r2, r1
 80021aa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff f9a6 	bl	80014fc <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b6:	f7ff f9a1 	bl	80014fc <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0ca      	b.n	800235e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021c8:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2202      	movs	r2, #2
 80021ce:	4013      	ands	r3, r2
 80021d0:	d0f1      	beq.n	80021b6 <HAL_RCC_OscConfig+0x5ea>
 80021d2:	e01e      	b.n	8002212 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80021d4:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 80021da:	2101      	movs	r1, #1
 80021dc:	438a      	bics	r2, r1
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	4b23      	ldr	r3, [pc, #140]	; (8002270 <HAL_RCC_OscConfig+0x6a4>)
 80021e2:	6a1a      	ldr	r2, [r3, #32]
 80021e4:	4b22      	ldr	r3, [pc, #136]	; (8002270 <HAL_RCC_OscConfig+0x6a4>)
 80021e6:	4923      	ldr	r1, [pc, #140]	; (8002274 <HAL_RCC_OscConfig+0x6a8>)
 80021e8:	400a      	ands	r2, r1
 80021ea:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7ff f986 	bl	80014fc <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021f6:	f7ff f981 	bl	80014fc <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0aa      	b.n	800235e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2202      	movs	r2, #2
 800220e:	4013      	ands	r3, r2
 8002210:	d1f1      	bne.n	80021f6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	2b00      	cmp	r3, #0
 8002218:	d100      	bne.n	800221c <HAL_RCC_OscConfig+0x650>
 800221a:	e09f      	b.n	800235c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b0c      	cmp	r3, #12
 8002220:	d100      	bne.n	8002224 <HAL_RCC_OscConfig+0x658>
 8002222:	e078      	b.n	8002316 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	2b02      	cmp	r3, #2
 800222a:	d159      	bne.n	80022e0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8002232:	4911      	ldr	r1, [pc, #68]	; (8002278 <HAL_RCC_OscConfig+0x6ac>)
 8002234:	400a      	ands	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff f960 	bl	80014fc <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002240:	e01c      	b.n	800227c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002242:	f7ff f95b 	bl	80014fc <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d915      	bls.n	800227c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e084      	b.n	800235e <HAL_RCC_OscConfig+0x792>
 8002254:	40021000 	.word	0x40021000
 8002258:	ffff1fff 	.word	0xffff1fff
 800225c:	fffffeff 	.word	0xfffffeff
 8002260:	40007000 	.word	0x40007000
 8002264:	fffffbff 	.word	0xfffffbff
 8002268:	00001388 	.word	0x00001388
 800226c:	efffffff 	.word	0xefffffff
 8002270:	40010000 	.word	0x40010000
 8002274:	ffffdfff 	.word	0xffffdfff
 8002278:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800227c:	4b3a      	ldr	r3, [pc, #232]	; (8002368 <HAL_RCC_OscConfig+0x79c>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	049b      	lsls	r3, r3, #18
 8002284:	4013      	ands	r3, r2
 8002286:	d1dc      	bne.n	8002242 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002288:	4b37      	ldr	r3, [pc, #220]	; (8002368 <HAL_RCC_OscConfig+0x79c>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a37      	ldr	r2, [pc, #220]	; (800236c <HAL_RCC_OscConfig+0x7a0>)
 800228e:	4013      	ands	r3, r2
 8002290:	0019      	movs	r1, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a0:	431a      	orrs	r2, r3
 80022a2:	4b31      	ldr	r3, [pc, #196]	; (8002368 <HAL_RCC_OscConfig+0x79c>)
 80022a4:	430a      	orrs	r2, r1
 80022a6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a8:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <HAL_RCC_OscConfig+0x79c>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b2e      	ldr	r3, [pc, #184]	; (8002368 <HAL_RCC_OscConfig+0x79c>)
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	0449      	lsls	r1, r1, #17
 80022b2:	430a      	orrs	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7ff f921 	bl	80014fc <HAL_GetTick>
 80022ba:	0003      	movs	r3, r0
 80022bc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7ff f91c 	bl	80014fc <HAL_GetTick>
 80022c4:	0002      	movs	r2, r0
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e045      	b.n	800235e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022d2:	4b25      	ldr	r3, [pc, #148]	; (8002368 <HAL_RCC_OscConfig+0x79c>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	049b      	lsls	r3, r3, #18
 80022da:	4013      	ands	r3, r2
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x6f4>
 80022de:	e03d      	b.n	800235c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e0:	4b21      	ldr	r3, [pc, #132]	; (8002368 <HAL_RCC_OscConfig+0x79c>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_RCC_OscConfig+0x79c>)
 80022e6:	4922      	ldr	r1, [pc, #136]	; (8002370 <HAL_RCC_OscConfig+0x7a4>)
 80022e8:	400a      	ands	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7ff f906 	bl	80014fc <HAL_GetTick>
 80022f0:	0003      	movs	r3, r0
 80022f2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f6:	f7ff f901 	bl	80014fc <HAL_GetTick>
 80022fa:	0002      	movs	r2, r0
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e02a      	b.n	800235e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002308:	4b17      	ldr	r3, [pc, #92]	; (8002368 <HAL_RCC_OscConfig+0x79c>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	049b      	lsls	r3, r3, #18
 8002310:	4013      	ands	r3, r2
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0x72a>
 8002314:	e022      	b.n	800235c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e01d      	b.n	800235e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_RCC_OscConfig+0x79c>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	025b      	lsls	r3, r3, #9
 800232e:	401a      	ands	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	429a      	cmp	r2, r3
 8002336:	d10f      	bne.n	8002358 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	23f0      	movs	r3, #240	; 0xf0
 800233c:	039b      	lsls	r3, r3, #14
 800233e:	401a      	ands	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d107      	bne.n	8002358 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	23c0      	movs	r3, #192	; 0xc0
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	401a      	ands	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b00a      	add	sp, #40	; 0x28
 8002364:	bdb0      	pop	{r4, r5, r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	40021000 	.word	0x40021000
 800236c:	ff02ffff 	.word	0xff02ffff
 8002370:	feffffff 	.word	0xfeffffff

08002374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b5b0      	push	{r4, r5, r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e128      	b.n	80025da <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b96      	ldr	r3, [pc, #600]	; (80025e4 <HAL_RCC_ClockConfig+0x270>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2201      	movs	r2, #1
 800238e:	4013      	ands	r3, r2
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d91e      	bls.n	80023d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b93      	ldr	r3, [pc, #588]	; (80025e4 <HAL_RCC_ClockConfig+0x270>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2201      	movs	r2, #1
 800239c:	4393      	bics	r3, r2
 800239e:	0019      	movs	r1, r3
 80023a0:	4b90      	ldr	r3, [pc, #576]	; (80025e4 <HAL_RCC_ClockConfig+0x270>)
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023a8:	f7ff f8a8 	bl	80014fc <HAL_GetTick>
 80023ac:	0003      	movs	r3, r0
 80023ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b0:	e009      	b.n	80023c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b2:	f7ff f8a3 	bl	80014fc <HAL_GetTick>
 80023b6:	0002      	movs	r2, r0
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	4a8a      	ldr	r2, [pc, #552]	; (80025e8 <HAL_RCC_ClockConfig+0x274>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e109      	b.n	80025da <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b87      	ldr	r3, [pc, #540]	; (80025e4 <HAL_RCC_ClockConfig+0x270>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2201      	movs	r2, #1
 80023cc:	4013      	ands	r3, r2
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d1ee      	bne.n	80023b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2202      	movs	r2, #2
 80023da:	4013      	ands	r3, r2
 80023dc:	d009      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023de:	4b83      	ldr	r3, [pc, #524]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	22f0      	movs	r2, #240	; 0xf0
 80023e4:	4393      	bics	r3, r2
 80023e6:	0019      	movs	r1, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	4b7f      	ldr	r3, [pc, #508]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 80023ee:	430a      	orrs	r2, r1
 80023f0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2201      	movs	r2, #1
 80023f8:	4013      	ands	r3, r2
 80023fa:	d100      	bne.n	80023fe <HAL_RCC_ClockConfig+0x8a>
 80023fc:	e089      	b.n	8002512 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002406:	4b79      	ldr	r3, [pc, #484]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	029b      	lsls	r3, r3, #10
 800240e:	4013      	ands	r3, r2
 8002410:	d120      	bne.n	8002454 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0e1      	b.n	80025da <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800241e:	4b73      	ldr	r3, [pc, #460]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	049b      	lsls	r3, r3, #18
 8002426:	4013      	ands	r3, r2
 8002428:	d114      	bne.n	8002454 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0d5      	b.n	80025da <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d106      	bne.n	8002444 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002436:	4b6d      	ldr	r3, [pc, #436]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2204      	movs	r2, #4
 800243c:	4013      	ands	r3, r2
 800243e:	d109      	bne.n	8002454 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0ca      	b.n	80025da <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002444:	4b69      	ldr	r3, [pc, #420]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4013      	ands	r3, r2
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0c2      	b.n	80025da <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002454:	4b65      	ldr	r3, [pc, #404]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2203      	movs	r2, #3
 800245a:	4393      	bics	r3, r2
 800245c:	0019      	movs	r1, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	4b62      	ldr	r3, [pc, #392]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 8002464:	430a      	orrs	r2, r1
 8002466:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002468:	f7ff f848 	bl	80014fc <HAL_GetTick>
 800246c:	0003      	movs	r3, r0
 800246e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d111      	bne.n	800249c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002478:	e009      	b.n	800248e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247a:	f7ff f83f 	bl	80014fc <HAL_GetTick>
 800247e:	0002      	movs	r2, r0
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCC_ClockConfig+0x274>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e0a5      	b.n	80025da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800248e:	4b57      	ldr	r3, [pc, #348]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	220c      	movs	r2, #12
 8002494:	4013      	ands	r3, r2
 8002496:	2b08      	cmp	r3, #8
 8002498:	d1ef      	bne.n	800247a <HAL_RCC_ClockConfig+0x106>
 800249a:	e03a      	b.n	8002512 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d111      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a4:	e009      	b.n	80024ba <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a6:	f7ff f829 	bl	80014fc <HAL_GetTick>
 80024aa:	0002      	movs	r2, r0
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	4a4d      	ldr	r2, [pc, #308]	; (80025e8 <HAL_RCC_ClockConfig+0x274>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e08f      	b.n	80025da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ba:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	220c      	movs	r2, #12
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b0c      	cmp	r3, #12
 80024c4:	d1ef      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x132>
 80024c6:	e024      	b.n	8002512 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d11b      	bne.n	8002508 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024d0:	e009      	b.n	80024e6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d2:	f7ff f813 	bl	80014fc <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	4a42      	ldr	r2, [pc, #264]	; (80025e8 <HAL_RCC_ClockConfig+0x274>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e079      	b.n	80025da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e6:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	220c      	movs	r2, #12
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d1ef      	bne.n	80024d2 <HAL_RCC_ClockConfig+0x15e>
 80024f2:	e00e      	b.n	8002512 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f4:	f7ff f802 	bl	80014fc <HAL_GetTick>
 80024f8:	0002      	movs	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	4a3a      	ldr	r2, [pc, #232]	; (80025e8 <HAL_RCC_ClockConfig+0x274>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e068      	b.n	80025da <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002508:	4b38      	ldr	r3, [pc, #224]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	220c      	movs	r2, #12
 800250e:	4013      	ands	r3, r2
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002512:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <HAL_RCC_ClockConfig+0x270>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2201      	movs	r2, #1
 8002518:	4013      	ands	r3, r2
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d21e      	bcs.n	800255e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002520:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <HAL_RCC_ClockConfig+0x270>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2201      	movs	r2, #1
 8002526:	4393      	bics	r3, r2
 8002528:	0019      	movs	r1, r3
 800252a:	4b2e      	ldr	r3, [pc, #184]	; (80025e4 <HAL_RCC_ClockConfig+0x270>)
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002532:	f7fe ffe3 	bl	80014fc <HAL_GetTick>
 8002536:	0003      	movs	r3, r0
 8002538:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	e009      	b.n	8002550 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253c:	f7fe ffde 	bl	80014fc <HAL_GetTick>
 8002540:	0002      	movs	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	4a28      	ldr	r2, [pc, #160]	; (80025e8 <HAL_RCC_ClockConfig+0x274>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e044      	b.n	80025da <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002550:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCC_ClockConfig+0x270>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2201      	movs	r2, #1
 8002556:	4013      	ands	r3, r2
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d1ee      	bne.n	800253c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2204      	movs	r2, #4
 8002564:	4013      	ands	r3, r2
 8002566:	d009      	beq.n	800257c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002568:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4a20      	ldr	r2, [pc, #128]	; (80025f0 <HAL_RCC_ClockConfig+0x27c>)
 800256e:	4013      	ands	r3, r2
 8002570:	0019      	movs	r1, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 8002578:	430a      	orrs	r2, r1
 800257a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2208      	movs	r2, #8
 8002582:	4013      	ands	r3, r2
 8002584:	d00a      	beq.n	800259c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002586:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	4a1a      	ldr	r2, [pc, #104]	; (80025f4 <HAL_RCC_ClockConfig+0x280>)
 800258c:	4013      	ands	r3, r2
 800258e:	0019      	movs	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	00da      	lsls	r2, r3, #3
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 8002598:	430a      	orrs	r2, r1
 800259a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800259c:	f000 f832 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 80025a0:	0001      	movs	r1, r0
 80025a2:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_RCC_ClockConfig+0x278>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	220f      	movs	r2, #15
 80025aa:	4013      	ands	r3, r2
 80025ac:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <HAL_RCC_ClockConfig+0x284>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	000a      	movs	r2, r1
 80025b2:	40da      	lsrs	r2, r3
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <HAL_RCC_ClockConfig+0x288>)
 80025b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <HAL_RCC_ClockConfig+0x28c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	250b      	movs	r5, #11
 80025be:	197c      	adds	r4, r7, r5
 80025c0:	0018      	movs	r0, r3
 80025c2:	f7fe ff55 	bl	8001470 <HAL_InitTick>
 80025c6:	0003      	movs	r3, r0
 80025c8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80025ca:	197b      	adds	r3, r7, r5
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80025d2:	197b      	adds	r3, r7, r5
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	e000      	b.n	80025da <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	0018      	movs	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	b004      	add	sp, #16
 80025e0:	bdb0      	pop	{r4, r5, r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	40022000 	.word	0x40022000
 80025e8:	00001388 	.word	0x00001388
 80025ec:	40021000 	.word	0x40021000
 80025f0:	fffff8ff 	.word	0xfffff8ff
 80025f4:	ffffc7ff 	.word	0xffffc7ff
 80025f8:	08004afc 	.word	0x08004afc
 80025fc:	200001b4 	.word	0x200001b4
 8002600:	200001b8 	.word	0x200001b8

08002604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002604:	b5b0      	push	{r4, r5, r7, lr}
 8002606:	b08e      	sub	sp, #56	; 0x38
 8002608:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800260a:	4b4c      	ldr	r3, [pc, #304]	; (800273c <HAL_RCC_GetSysClockFreq+0x138>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002612:	230c      	movs	r3, #12
 8002614:	4013      	ands	r3, r2
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d014      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x40>
 800261a:	d900      	bls.n	800261e <HAL_RCC_GetSysClockFreq+0x1a>
 800261c:	e07b      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x112>
 800261e:	2b04      	cmp	r3, #4
 8002620:	d002      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x24>
 8002622:	2b08      	cmp	r3, #8
 8002624:	d00b      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0x3a>
 8002626:	e076      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002628:	4b44      	ldr	r3, [pc, #272]	; (800273c <HAL_RCC_GetSysClockFreq+0x138>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2210      	movs	r2, #16
 800262e:	4013      	ands	r3, r2
 8002630:	d002      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002632:	4b43      	ldr	r3, [pc, #268]	; (8002740 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002636:	e07c      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002638:	4b42      	ldr	r3, [pc, #264]	; (8002744 <HAL_RCC_GetSysClockFreq+0x140>)
 800263a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800263c:	e079      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800263e:	4b42      	ldr	r3, [pc, #264]	; (8002748 <HAL_RCC_GetSysClockFreq+0x144>)
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002642:	e076      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002646:	0c9a      	lsrs	r2, r3, #18
 8002648:	230f      	movs	r3, #15
 800264a:	401a      	ands	r2, r3
 800264c:	4b3f      	ldr	r3, [pc, #252]	; (800274c <HAL_RCC_GetSysClockFreq+0x148>)
 800264e:	5c9b      	ldrb	r3, [r3, r2]
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002654:	0d9a      	lsrs	r2, r3, #22
 8002656:	2303      	movs	r3, #3
 8002658:	4013      	ands	r3, r2
 800265a:	3301      	adds	r3, #1
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800265e:	4b37      	ldr	r3, [pc, #220]	; (800273c <HAL_RCC_GetSysClockFreq+0x138>)
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	025b      	lsls	r3, r3, #9
 8002666:	4013      	ands	r3, r2
 8002668:	d01a      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	4a35      	ldr	r2, [pc, #212]	; (8002748 <HAL_RCC_GetSysClockFreq+0x144>)
 8002674:	2300      	movs	r3, #0
 8002676:	69b8      	ldr	r0, [r7, #24]
 8002678:	69f9      	ldr	r1, [r7, #28]
 800267a:	f7fd fe03 	bl	8000284 <__aeabi_lmul>
 800267e:	0002      	movs	r2, r0
 8002680:	000b      	movs	r3, r1
 8002682:	0010      	movs	r0, r2
 8002684:	0019      	movs	r1, r3
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f7fd fdd7 	bl	8000244 <__aeabi_uldivmod>
 8002696:	0002      	movs	r2, r0
 8002698:	000b      	movs	r3, r1
 800269a:	0013      	movs	r3, r2
 800269c:	637b      	str	r3, [r7, #52]	; 0x34
 800269e:	e037      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026a0:	4b26      	ldr	r3, [pc, #152]	; (800273c <HAL_RCC_GetSysClockFreq+0x138>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2210      	movs	r2, #16
 80026a6:	4013      	ands	r3, r2
 80026a8:	d01a      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	4a23      	ldr	r2, [pc, #140]	; (8002740 <HAL_RCC_GetSysClockFreq+0x13c>)
 80026b4:	2300      	movs	r3, #0
 80026b6:	68b8      	ldr	r0, [r7, #8]
 80026b8:	68f9      	ldr	r1, [r7, #12]
 80026ba:	f7fd fde3 	bl	8000284 <__aeabi_lmul>
 80026be:	0002      	movs	r2, r0
 80026c0:	000b      	movs	r3, r1
 80026c2:	0010      	movs	r0, r2
 80026c4:	0019      	movs	r1, r3
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	2300      	movs	r3, #0
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f7fd fdb7 	bl	8000244 <__aeabi_uldivmod>
 80026d6:	0002      	movs	r2, r0
 80026d8:	000b      	movs	r3, r1
 80026da:	0013      	movs	r3, r2
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
 80026de:	e017      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	0018      	movs	r0, r3
 80026e4:	2300      	movs	r3, #0
 80026e6:	0019      	movs	r1, r3
 80026e8:	4a16      	ldr	r2, [pc, #88]	; (8002744 <HAL_RCC_GetSysClockFreq+0x140>)
 80026ea:	2300      	movs	r3, #0
 80026ec:	f7fd fdca 	bl	8000284 <__aeabi_lmul>
 80026f0:	0002      	movs	r2, r0
 80026f2:	000b      	movs	r3, r1
 80026f4:	0010      	movs	r0, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	001c      	movs	r4, r3
 80026fc:	2300      	movs	r3, #0
 80026fe:	001d      	movs	r5, r3
 8002700:	0022      	movs	r2, r4
 8002702:	002b      	movs	r3, r5
 8002704:	f7fd fd9e 	bl	8000244 <__aeabi_uldivmod>
 8002708:	0002      	movs	r2, r0
 800270a:	000b      	movs	r3, r1
 800270c:	0013      	movs	r3, r2
 800270e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002712:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002714:	e00d      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_GetSysClockFreq+0x138>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	0b5b      	lsrs	r3, r3, #13
 800271c:	2207      	movs	r2, #7
 800271e:	4013      	ands	r3, r2
 8002720:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	3301      	adds	r3, #1
 8002726:	2280      	movs	r2, #128	; 0x80
 8002728:	0212      	lsls	r2, r2, #8
 800272a:	409a      	lsls	r2, r3
 800272c:	0013      	movs	r3, r2
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002730:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	b00e      	add	sp, #56	; 0x38
 800273a:	bdb0      	pop	{r4, r5, r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	003d0900 	.word	0x003d0900
 8002744:	00f42400 	.word	0x00f42400
 8002748:	007a1200 	.word	0x007a1200
 800274c:	08004b14 	.word	0x08004b14

08002750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002754:	4b02      	ldr	r3, [pc, #8]	; (8002760 <HAL_RCC_GetHCLKFreq+0x10>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	200001b4 	.word	0x200001b4

08002764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002768:	f7ff fff2 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 800276c:	0001      	movs	r1, r0
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	2207      	movs	r2, #7
 8002776:	4013      	ands	r3, r2
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <HAL_RCC_GetPCLK1Freq+0x28>)
 800277a:	5cd3      	ldrb	r3, [r2, r3]
 800277c:	40d9      	lsrs	r1, r3
 800277e:	000b      	movs	r3, r1
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	40021000 	.word	0x40021000
 800278c:	08004b0c 	.word	0x08004b0c

08002790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002794:	f7ff ffdc 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 8002798:	0001      	movs	r1, r0
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	0adb      	lsrs	r3, r3, #11
 80027a0:	2207      	movs	r2, #7
 80027a2:	4013      	ands	r3, r2
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027a6:	5cd3      	ldrb	r3, [r2, r3]
 80027a8:	40d9      	lsrs	r1, r3
 80027aa:	000b      	movs	r3, r1
}
 80027ac:	0018      	movs	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	40021000 	.word	0x40021000
 80027b8:	08004b0c 	.word	0x08004b0c

080027bc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80027c4:	2317      	movs	r3, #23
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2220      	movs	r2, #32
 80027d2:	4013      	ands	r3, r2
 80027d4:	d106      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	4013      	ands	r3, r2
 80027e0:	d100      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80027e2:	e0d9      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e4:	4ba4      	ldr	r3, [pc, #656]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	055b      	lsls	r3, r3, #21
 80027ec:	4013      	ands	r3, r2
 80027ee:	d10a      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f0:	4ba1      	ldr	r3, [pc, #644]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027f4:	4ba0      	ldr	r3, [pc, #640]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027f6:	2180      	movs	r1, #128	; 0x80
 80027f8:	0549      	lsls	r1, r1, #21
 80027fa:	430a      	orrs	r2, r1
 80027fc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80027fe:	2317      	movs	r3, #23
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002806:	4b9d      	ldr	r3, [pc, #628]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4013      	ands	r3, r2
 8002810:	d11a      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002812:	4b9a      	ldr	r3, [pc, #616]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4b99      	ldr	r3, [pc, #612]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	0049      	lsls	r1, r1, #1
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002820:	f7fe fe6c 	bl	80014fc <HAL_GetTick>
 8002824:	0003      	movs	r3, r0
 8002826:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002828:	e008      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282a:	f7fe fe67 	bl	80014fc <HAL_GetTick>
 800282e:	0002      	movs	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b64      	cmp	r3, #100	; 0x64
 8002836:	d901      	bls.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e118      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	4b8f      	ldr	r3, [pc, #572]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4013      	ands	r3, r2
 8002846:	d0f0      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002848:	4b8b      	ldr	r3, [pc, #556]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	23c0      	movs	r3, #192	; 0xc0
 800284e:	039b      	lsls	r3, r3, #14
 8002850:	4013      	ands	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	23c0      	movs	r3, #192	; 0xc0
 800285a:	039b      	lsls	r3, r3, #14
 800285c:	4013      	ands	r3, r2
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	429a      	cmp	r2, r3
 8002862:	d107      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	23c0      	movs	r3, #192	; 0xc0
 800286a:	039b      	lsls	r3, r3, #14
 800286c:	4013      	ands	r3, r2
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	429a      	cmp	r2, r3
 8002872:	d013      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	23c0      	movs	r3, #192	; 0xc0
 800287a:	029b      	lsls	r3, r3, #10
 800287c:	401a      	ands	r2, r3
 800287e:	23c0      	movs	r3, #192	; 0xc0
 8002880:	029b      	lsls	r3, r3, #10
 8002882:	429a      	cmp	r2, r3
 8002884:	d10a      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002886:	4b7c      	ldr	r3, [pc, #496]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	029b      	lsls	r3, r3, #10
 800288e:	401a      	ands	r2, r3
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	029b      	lsls	r3, r3, #10
 8002894:	429a      	cmp	r2, r3
 8002896:	d101      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0e8      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800289c:	4b76      	ldr	r3, [pc, #472]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800289e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028a0:	23c0      	movs	r3, #192	; 0xc0
 80028a2:	029b      	lsls	r3, r3, #10
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d049      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	23c0      	movs	r3, #192	; 0xc0
 80028b4:	029b      	lsls	r3, r3, #10
 80028b6:	4013      	ands	r3, r2
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d004      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2220      	movs	r2, #32
 80028c4:	4013      	ands	r3, r2
 80028c6:	d10d      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	23c0      	movs	r3, #192	; 0xc0
 80028ce:	029b      	lsls	r3, r3, #10
 80028d0:	4013      	ands	r3, r2
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d034      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	4013      	ands	r3, r2
 80028e2:	d02e      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80028e4:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e8:	4a65      	ldr	r2, [pc, #404]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ee:	4b62      	ldr	r3, [pc, #392]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028f2:	4b61      	ldr	r3, [pc, #388]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028f4:	2180      	movs	r1, #128	; 0x80
 80028f6:	0309      	lsls	r1, r1, #12
 80028f8:	430a      	orrs	r2, r1
 80028fa:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028fc:	4b5e      	ldr	r3, [pc, #376]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002900:	4b5d      	ldr	r3, [pc, #372]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002902:	4960      	ldr	r1, [pc, #384]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002904:	400a      	ands	r2, r1
 8002906:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002908:	4b5b      	ldr	r3, [pc, #364]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4013      	ands	r3, r2
 8002916:	d014      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7fe fdf0 	bl	80014fc <HAL_GetTick>
 800291c:	0003      	movs	r3, r0
 800291e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002920:	e009      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002922:	f7fe fdeb 	bl	80014fc <HAL_GetTick>
 8002926:	0002      	movs	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	4a56      	ldr	r2, [pc, #344]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e09b      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002936:	4b50      	ldr	r3, [pc, #320]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002938:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4013      	ands	r3, r2
 8002940:	d0ef      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	23c0      	movs	r3, #192	; 0xc0
 8002948:	029b      	lsls	r3, r3, #10
 800294a:	401a      	ands	r2, r3
 800294c:	23c0      	movs	r3, #192	; 0xc0
 800294e:	029b      	lsls	r3, r3, #10
 8002950:	429a      	cmp	r2, r3
 8002952:	d10c      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002954:	4b48      	ldr	r3, [pc, #288]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a4c      	ldr	r2, [pc, #304]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800295a:	4013      	ands	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	23c0      	movs	r3, #192	; 0xc0
 8002964:	039b      	lsls	r3, r3, #14
 8002966:	401a      	ands	r2, r3
 8002968:	4b43      	ldr	r3, [pc, #268]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800296a:	430a      	orrs	r2, r1
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	4b42      	ldr	r3, [pc, #264]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002970:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	23c0      	movs	r3, #192	; 0xc0
 8002978:	029b      	lsls	r3, r3, #10
 800297a:	401a      	ands	r2, r3
 800297c:	4b3e      	ldr	r3, [pc, #248]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800297e:	430a      	orrs	r2, r1
 8002980:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002982:	2317      	movs	r3, #23
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298c:	4b3a      	ldr	r3, [pc, #232]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800298e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002990:	4b39      	ldr	r3, [pc, #228]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002992:	493f      	ldr	r1, [pc, #252]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002994:	400a      	ands	r2, r1
 8002996:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2201      	movs	r2, #1
 800299e:	4013      	ands	r3, r2
 80029a0:	d009      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029a2:	4b35      	ldr	r3, [pc, #212]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a6:	2203      	movs	r2, #3
 80029a8:	4393      	bics	r3, r2
 80029aa:	0019      	movs	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029b2:	430a      	orrs	r2, r1
 80029b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2202      	movs	r2, #2
 80029bc:	4013      	ands	r3, r2
 80029be:	d009      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029c0:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c4:	220c      	movs	r2, #12
 80029c6:	4393      	bics	r3, r2
 80029c8:	0019      	movs	r1, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	4b2a      	ldr	r3, [pc, #168]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029d0:	430a      	orrs	r2, r1
 80029d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2204      	movs	r2, #4
 80029da:	4013      	ands	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029de:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e2:	4a2c      	ldr	r2, [pc, #176]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029ee:	430a      	orrs	r2, r1
 80029f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2208      	movs	r2, #8
 80029f8:	4013      	ands	r3, r2
 80029fa:	d009      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029fc:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a00:	4a25      	ldr	r2, [pc, #148]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699a      	ldr	r2, [r3, #24]
 8002a0a:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d009      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a1c:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a20:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	0019      	movs	r1, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2240      	movs	r2, #64	; 0x40
 8002a36:	4013      	ands	r3, r2
 8002a38:	d009      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	4a17      	ldr	r2, [pc, #92]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	4013      	ands	r3, r2
 8002a56:	d009      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5c:	4a10      	ldr	r2, [pc, #64]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	0019      	movs	r1, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1a      	ldr	r2, [r3, #32]
 8002a66:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	0018      	movs	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b006      	add	sp, #24
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	fffcffff 	.word	0xfffcffff
 8002a84:	fff7ffff 	.word	0xfff7ffff
 8002a88:	00001388 	.word	0x00001388
 8002a8c:	ffcfffff 	.word	0xffcfffff
 8002a90:	efffffff 	.word	0xefffffff
 8002a94:	fffff3ff 	.word	0xfffff3ff
 8002a98:	ffffcfff 	.word	0xffffcfff
 8002a9c:	fbffffff 	.word	0xfbffffff
 8002aa0:	fff3ffff 	.word	0xfff3ffff

08002aa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e044      	b.n	8002b40 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d107      	bne.n	8002ace <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2274      	movs	r2, #116	; 0x74
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7fe fba9 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2224      	movs	r2, #36	; 0x24
 8002ad2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2101      	movs	r1, #1
 8002ae0:	438a      	bics	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f000 fc36 	bl	8003358 <UART_SetConfig>
 8002aec:	0003      	movs	r3, r0
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e024      	b.n	8002b40 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f000 fee7 	bl	80038d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	490d      	ldr	r1, [pc, #52]	; (8002b48 <HAL_UART_Init+0xa4>)
 8002b12:	400a      	ands	r2, r1
 8002b14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	212a      	movs	r1, #42	; 0x2a
 8002b22:	438a      	bics	r2, r1
 8002b24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2101      	movs	r1, #1
 8002b32:	430a      	orrs	r2, r1
 8002b34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f000 ff7f 	bl	8003a3c <UART_CheckIdleState>
 8002b3e:	0003      	movs	r3, r0
}
 8002b40:	0018      	movs	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b002      	add	sp, #8
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	ffffb7ff 	.word	0xffffb7ff

08002b4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	1dbb      	adds	r3, r7, #6
 8002b5a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d000      	beq.n	8002b66 <HAL_UART_Transmit+0x1a>
 8002b64:	e095      	b.n	8002c92 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_UART_Transmit+0x28>
 8002b6c:	1dbb      	adds	r3, r7, #6
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e08d      	b.n	8002c94 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	015b      	lsls	r3, r3, #5
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d109      	bne.n	8002b98 <HAL_UART_Transmit+0x4c>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d105      	bne.n	8002b98 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4013      	ands	r3, r2
 8002b92:	d001      	beq.n	8002b98 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e07d      	b.n	8002c94 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2274      	movs	r2, #116	; 0x74
 8002b9c:	5c9b      	ldrb	r3, [r3, r2]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_UART_Transmit+0x5a>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e076      	b.n	8002c94 <HAL_UART_Transmit+0x148>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2274      	movs	r2, #116	; 0x74
 8002baa:	2101      	movs	r1, #1
 8002bac:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2280      	movs	r2, #128	; 0x80
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2221      	movs	r2, #33	; 0x21
 8002bba:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fc9e 	bl	80014fc <HAL_GetTick>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1dba      	adds	r2, r7, #6
 8002bc8:	2150      	movs	r1, #80	; 0x50
 8002bca:	8812      	ldrh	r2, [r2, #0]
 8002bcc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1dba      	adds	r2, r7, #6
 8002bd2:	2152      	movs	r1, #82	; 0x52
 8002bd4:	8812      	ldrh	r2, [r2, #0]
 8002bd6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	015b      	lsls	r3, r3, #5
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d108      	bne.n	8002bf6 <HAL_UART_Transmit+0xaa>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	e003      	b.n	8002bfe <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2274      	movs	r2, #116	; 0x74
 8002c02:	2100      	movs	r1, #0
 8002c04:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002c06:	e02c      	b.n	8002c62 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	0013      	movs	r3, r2
 8002c12:	2200      	movs	r2, #0
 8002c14:	2180      	movs	r1, #128	; 0x80
 8002c16:	f000 ff59 	bl	8003acc <UART_WaitOnFlagUntilTimeout>
 8002c1a:	1e03      	subs	r3, r0, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e038      	b.n	8002c94 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	05d2      	lsls	r2, r2, #23
 8002c34:	0dd2      	lsrs	r2, r2, #23
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	e007      	b.n	8002c50 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	781a      	ldrb	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2252      	movs	r2, #82	; 0x52
 8002c54:	5a9b      	ldrh	r3, [r3, r2]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b299      	uxth	r1, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2252      	movs	r2, #82	; 0x52
 8002c60:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2252      	movs	r2, #82	; 0x52
 8002c66:	5a9b      	ldrh	r3, [r3, r2]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1cc      	bne.n	8002c08 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	0013      	movs	r3, r2
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2140      	movs	r1, #64	; 0x40
 8002c7c:	f000 ff26 	bl	8003acc <UART_WaitOnFlagUntilTimeout>
 8002c80:	1e03      	subs	r3, r0, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e005      	b.n	8002c94 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e000      	b.n	8002c94 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002c92:	2302      	movs	r3, #2
  }
}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b008      	add	sp, #32
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	1dbb      	adds	r3, r7, #6
 8002ca8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d155      	bne.n	8002d5e <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_UART_Receive_IT+0x24>
 8002cb8:	1dbb      	adds	r3, r7, #6
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e04d      	b.n	8002d60 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	015b      	lsls	r3, r3, #5
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d109      	bne.n	8002ce4 <HAL_UART_Receive_IT+0x48>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d105      	bne.n	8002ce4 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d001      	beq.n	8002ce4 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e03d      	b.n	8002d60 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2274      	movs	r2, #116	; 0x74
 8002ce8:	5c9b      	ldrb	r3, [r3, r2]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_UART_Receive_IT+0x56>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e036      	b.n	8002d60 <HAL_UART_Receive_IT+0xc4>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2274      	movs	r2, #116	; 0x74
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a18      	ldr	r2, [pc, #96]	; (8002d68 <HAL_UART_Receive_IT+0xcc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d020      	beq.n	8002d4c <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	041b      	lsls	r3, r3, #16
 8002d14:	4013      	ands	r3, r2
 8002d16:	d019      	beq.n	8002d4c <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d18:	f3ef 8310 	mrs	r3, PRIMASK
 8002d1c:	613b      	str	r3, [r7, #16]
  return(result);
 8002d1e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	2301      	movs	r3, #1
 8002d24:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f383 8810 	msr	PRIMASK, r3
}
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2180      	movs	r1, #128	; 0x80
 8002d3a:	04c9      	lsls	r1, r1, #19
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f383 8810 	msr	PRIMASK, r3
}
 8002d4a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d4c:	1dbb      	adds	r3, r7, #6
 8002d4e:	881a      	ldrh	r2, [r3, #0]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f000 ff7d 	bl	8003c54 <UART_Start_Receive_IT>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	e000      	b.n	8002d60 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
  }
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b008      	add	sp, #32
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40004800 	.word	0x40004800

08002d6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b0ab      	sub	sp, #172	; 0xac
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	22a4      	movs	r2, #164	; 0xa4
 8002d7c:	18b9      	adds	r1, r7, r2
 8002d7e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	20a0      	movs	r0, #160	; 0xa0
 8002d88:	1839      	adds	r1, r7, r0
 8002d8a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	219c      	movs	r1, #156	; 0x9c
 8002d94:	1879      	adds	r1, r7, r1
 8002d96:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d98:	0011      	movs	r1, r2
 8002d9a:	18bb      	adds	r3, r7, r2
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a99      	ldr	r2, [pc, #612]	; (8003004 <HAL_UART_IRQHandler+0x298>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	2298      	movs	r2, #152	; 0x98
 8002da4:	18bc      	adds	r4, r7, r2
 8002da6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002da8:	18bb      	adds	r3, r7, r2
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d114      	bne.n	8002dda <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2220      	movs	r2, #32
 8002db6:	4013      	ands	r3, r2
 8002db8:	d00f      	beq.n	8002dda <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dba:	183b      	adds	r3, r7, r0
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d00a      	beq.n	8002dda <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d100      	bne.n	8002dce <HAL_UART_IRQHandler+0x62>
 8002dcc:	e298      	b.n	8003300 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	0010      	movs	r0, r2
 8002dd6:	4798      	blx	r3
      }
      return;
 8002dd8:	e292      	b.n	8003300 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002dda:	2398      	movs	r3, #152	; 0x98
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d100      	bne.n	8002de6 <HAL_UART_IRQHandler+0x7a>
 8002de4:	e114      	b.n	8003010 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002de6:	239c      	movs	r3, #156	; 0x9c
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2201      	movs	r2, #1
 8002dee:	4013      	ands	r3, r2
 8002df0:	d106      	bne.n	8002e00 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002df2:	23a0      	movs	r3, #160	; 0xa0
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a83      	ldr	r2, [pc, #524]	; (8003008 <HAL_UART_IRQHandler+0x29c>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d100      	bne.n	8002e00 <HAL_UART_IRQHandler+0x94>
 8002dfe:	e107      	b.n	8003010 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e00:	23a4      	movs	r3, #164	; 0xa4
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2201      	movs	r2, #1
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d012      	beq.n	8002e32 <HAL_UART_IRQHandler+0xc6>
 8002e0c:	23a0      	movs	r3, #160	; 0xa0
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	4013      	ands	r3, r2
 8002e18:	d00b      	beq.n	8002e32 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	589b      	ldr	r3, [r3, r2]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2180      	movs	r1, #128	; 0x80
 8002e30:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e32:	23a4      	movs	r3, #164	; 0xa4
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d011      	beq.n	8002e62 <HAL_UART_IRQHandler+0xf6>
 8002e3e:	239c      	movs	r3, #156	; 0x9c
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2201      	movs	r2, #1
 8002e46:	4013      	ands	r3, r2
 8002e48:	d00b      	beq.n	8002e62 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2280      	movs	r2, #128	; 0x80
 8002e56:	589b      	ldr	r3, [r3, r2]
 8002e58:	2204      	movs	r2, #4
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2180      	movs	r1, #128	; 0x80
 8002e60:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e62:	23a4      	movs	r3, #164	; 0xa4
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d011      	beq.n	8002e92 <HAL_UART_IRQHandler+0x126>
 8002e6e:	239c      	movs	r3, #156	; 0x9c
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2201      	movs	r2, #1
 8002e76:	4013      	ands	r3, r2
 8002e78:	d00b      	beq.n	8002e92 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2280      	movs	r2, #128	; 0x80
 8002e86:	589b      	ldr	r3, [r3, r2]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2180      	movs	r1, #128	; 0x80
 8002e90:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e92:	23a4      	movs	r3, #164	; 0xa4
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2208      	movs	r2, #8
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d017      	beq.n	8002ece <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e9e:	23a0      	movs	r3, #160	; 0xa0
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d105      	bne.n	8002eb6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002eaa:	239c      	movs	r3, #156	; 0x9c
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002eb4:	d00b      	beq.n	8002ece <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2208      	movs	r2, #8
 8002ebc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2280      	movs	r2, #128	; 0x80
 8002ec2:	589b      	ldr	r3, [r3, r2]
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2180      	movs	r1, #128	; 0x80
 8002ecc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ece:	23a4      	movs	r3, #164	; 0xa4
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d013      	beq.n	8002f04 <HAL_UART_IRQHandler+0x198>
 8002edc:	23a0      	movs	r3, #160	; 0xa0
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	04db      	lsls	r3, r3, #19
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d00c      	beq.n	8002f04 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2280      	movs	r2, #128	; 0x80
 8002ef0:	0112      	lsls	r2, r2, #4
 8002ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2280      	movs	r2, #128	; 0x80
 8002ef8:	589b      	ldr	r3, [r3, r2]
 8002efa:	2220      	movs	r2, #32
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2180      	movs	r1, #128	; 0x80
 8002f02:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2280      	movs	r2, #128	; 0x80
 8002f08:	589b      	ldr	r3, [r3, r2]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d100      	bne.n	8002f10 <HAL_UART_IRQHandler+0x1a4>
 8002f0e:	e1f9      	b.n	8003304 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f10:	23a4      	movs	r3, #164	; 0xa4
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2220      	movs	r2, #32
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d00e      	beq.n	8002f3a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f1c:	23a0      	movs	r3, #160	; 0xa0
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2220      	movs	r2, #32
 8002f24:	4013      	ands	r3, r2
 8002f26:	d008      	beq.n	8002f3a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d004      	beq.n	8002f3a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	0010      	movs	r0, r2
 8002f38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2280      	movs	r2, #128	; 0x80
 8002f3e:	589b      	ldr	r3, [r3, r2]
 8002f40:	2194      	movs	r1, #148	; 0x94
 8002f42:	187a      	adds	r2, r7, r1
 8002f44:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2240      	movs	r2, #64	; 0x40
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d004      	beq.n	8002f5e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f54:	187b      	adds	r3, r7, r1
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2228      	movs	r2, #40	; 0x28
 8002f5a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f5c:	d047      	beq.n	8002fee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	0018      	movs	r0, r3
 8002f62:	f000 ff27 	bl	8003db4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2240      	movs	r2, #64	; 0x40
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d137      	bne.n	8002fe4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f74:	f3ef 8310 	mrs	r3, PRIMASK
 8002f78:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f7c:	2090      	movs	r0, #144	; 0x90
 8002f7e:	183a      	adds	r2, r7, r0
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	2301      	movs	r3, #1
 8002f84:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f88:	f383 8810 	msr	PRIMASK, r3
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2140      	movs	r1, #64	; 0x40
 8002f9a:	438a      	bics	r2, r1
 8002f9c:	609a      	str	r2, [r3, #8]
 8002f9e:	183b      	adds	r3, r7, r0
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fa6:	f383 8810 	msr	PRIMASK, r3
}
 8002faa:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d012      	beq.n	8002fda <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a14      	ldr	r2, [pc, #80]	; (800300c <HAL_UART_IRQHandler+0x2a0>)
 8002fba:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f7fe fbe7 	bl	8001794 <HAL_DMA_Abort_IT>
 8002fc6:	1e03      	subs	r3, r0, #0
 8002fc8:	d01a      	beq.n	8003000 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd8:	e012      	b.n	8003000 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 f9a7 	bl	8003330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe2:	e00d      	b.n	8003000 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f000 f9a2 	bl	8003330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fec:	e008      	b.n	8003000 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f000 f99d 	bl	8003330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002ffe:	e181      	b.n	8003304 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003000:	46c0      	nop			; (mov r8, r8)
    return;
 8003002:	e17f      	b.n	8003304 <HAL_UART_IRQHandler+0x598>
 8003004:	0000080f 	.word	0x0000080f
 8003008:	04000120 	.word	0x04000120
 800300c:	08003e79 	.word	0x08003e79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003014:	2b01      	cmp	r3, #1
 8003016:	d000      	beq.n	800301a <HAL_UART_IRQHandler+0x2ae>
 8003018:	e133      	b.n	8003282 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800301a:	23a4      	movs	r3, #164	; 0xa4
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2210      	movs	r2, #16
 8003022:	4013      	ands	r3, r2
 8003024:	d100      	bne.n	8003028 <HAL_UART_IRQHandler+0x2bc>
 8003026:	e12c      	b.n	8003282 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003028:	23a0      	movs	r3, #160	; 0xa0
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2210      	movs	r2, #16
 8003030:	4013      	ands	r3, r2
 8003032:	d100      	bne.n	8003036 <HAL_UART_IRQHandler+0x2ca>
 8003034:	e125      	b.n	8003282 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2210      	movs	r2, #16
 800303c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2240      	movs	r2, #64	; 0x40
 8003046:	4013      	ands	r3, r2
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d000      	beq.n	800304e <HAL_UART_IRQHandler+0x2e2>
 800304c:	e09d      	b.n	800318a <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	217e      	movs	r1, #126	; 0x7e
 8003058:	187b      	adds	r3, r7, r1
 800305a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800305c:	187b      	adds	r3, r7, r1
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d100      	bne.n	8003066 <HAL_UART_IRQHandler+0x2fa>
 8003064:	e150      	b.n	8003308 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2258      	movs	r2, #88	; 0x58
 800306a:	5a9b      	ldrh	r3, [r3, r2]
 800306c:	187a      	adds	r2, r7, r1
 800306e:	8812      	ldrh	r2, [r2, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d300      	bcc.n	8003076 <HAL_UART_IRQHandler+0x30a>
 8003074:	e148      	b.n	8003308 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	187a      	adds	r2, r7, r1
 800307a:	215a      	movs	r1, #90	; 0x5a
 800307c:	8812      	ldrh	r2, [r2, #0]
 800307e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2220      	movs	r2, #32
 800308a:	4013      	ands	r3, r2
 800308c:	d16e      	bne.n	800316c <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308e:	f3ef 8310 	mrs	r3, PRIMASK
 8003092:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003096:	67bb      	str	r3, [r7, #120]	; 0x78
 8003098:	2301      	movs	r3, #1
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309e:	f383 8810 	msr	PRIMASK, r3
}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	499a      	ldr	r1, [pc, #616]	; (8003318 <HAL_UART_IRQHandler+0x5ac>)
 80030b0:	400a      	ands	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ba:	f383 8810 	msr	PRIMASK, r3
}
 80030be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c0:	f3ef 8310 	mrs	r3, PRIMASK
 80030c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80030c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c8:	677b      	str	r3, [r7, #116]	; 0x74
 80030ca:	2301      	movs	r3, #1
 80030cc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d0:	f383 8810 	msr	PRIMASK, r3
}
 80030d4:	46c0      	nop			; (mov r8, r8)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2101      	movs	r1, #1
 80030e2:	438a      	bics	r2, r1
 80030e4:	609a      	str	r2, [r3, #8]
 80030e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030e8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ec:	f383 8810 	msr	PRIMASK, r3
}
 80030f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f2:	f3ef 8310 	mrs	r3, PRIMASK
 80030f6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80030f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030fa:	673b      	str	r3, [r7, #112]	; 0x70
 80030fc:	2301      	movs	r3, #1
 80030fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003102:	f383 8810 	msr	PRIMASK, r3
}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2140      	movs	r1, #64	; 0x40
 8003114:	438a      	bics	r2, r1
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800311a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800311e:	f383 8810 	msr	PRIMASK, r3
}
 8003122:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003130:	f3ef 8310 	mrs	r3, PRIMASK
 8003134:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003136:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003138:	66fb      	str	r3, [r7, #108]	; 0x6c
 800313a:	2301      	movs	r3, #1
 800313c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003140:	f383 8810 	msr	PRIMASK, r3
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2110      	movs	r1, #16
 8003152:	438a      	bics	r2, r1
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003158:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800315c:	f383 8810 	msr	PRIMASK, r3
}
 8003160:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	0018      	movs	r0, r3
 8003168:	f7fe fad4 	bl	8001714 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2258      	movs	r2, #88	; 0x58
 8003170:	5a9a      	ldrh	r2, [r3, r2]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	215a      	movs	r1, #90	; 0x5a
 8003176:	5a5b      	ldrh	r3, [r3, r1]
 8003178:	b29b      	uxth	r3, r3
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	b29a      	uxth	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	0011      	movs	r1, r2
 8003182:	0018      	movs	r0, r3
 8003184:	f000 f8dc 	bl	8003340 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003188:	e0be      	b.n	8003308 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2258      	movs	r2, #88	; 0x58
 800318e:	5a99      	ldrh	r1, [r3, r2]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	225a      	movs	r2, #90	; 0x5a
 8003194:	5a9b      	ldrh	r3, [r3, r2]
 8003196:	b29a      	uxth	r2, r3
 8003198:	208e      	movs	r0, #142	; 0x8e
 800319a:	183b      	adds	r3, r7, r0
 800319c:	1a8a      	subs	r2, r1, r2
 800319e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	225a      	movs	r2, #90	; 0x5a
 80031a4:	5a9b      	ldrh	r3, [r3, r2]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d100      	bne.n	80031ae <HAL_UART_IRQHandler+0x442>
 80031ac:	e0ae      	b.n	800330c <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 80031ae:	183b      	adds	r3, r7, r0
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d100      	bne.n	80031b8 <HAL_UART_IRQHandler+0x44c>
 80031b6:	e0a9      	b.n	800330c <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b8:	f3ef 8310 	mrs	r3, PRIMASK
 80031bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80031be:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031c0:	2488      	movs	r4, #136	; 0x88
 80031c2:	193a      	adds	r2, r7, r4
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	2301      	movs	r3, #1
 80031c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f383 8810 	msr	PRIMASK, r3
}
 80031d0:	46c0      	nop			; (mov r8, r8)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	494f      	ldr	r1, [pc, #316]	; (800331c <HAL_UART_IRQHandler+0x5b0>)
 80031de:	400a      	ands	r2, r1
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	193b      	adds	r3, r7, r4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f383 8810 	msr	PRIMASK, r3
}
 80031ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031f0:	f3ef 8310 	mrs	r3, PRIMASK
 80031f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80031f6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f8:	2484      	movs	r4, #132	; 0x84
 80031fa:	193a      	adds	r2, r7, r4
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	2301      	movs	r3, #1
 8003200:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f383 8810 	msr	PRIMASK, r3
}
 8003208:	46c0      	nop			; (mov r8, r8)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2101      	movs	r1, #1
 8003216:	438a      	bics	r2, r1
 8003218:	609a      	str	r2, [r3, #8]
 800321a:	193b      	adds	r3, r7, r4
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	f383 8810 	msr	PRIMASK, r3
}
 8003226:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800323a:	f3ef 8310 	mrs	r3, PRIMASK
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003242:	2480      	movs	r4, #128	; 0x80
 8003244:	193a      	adds	r2, r7, r4
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	2301      	movs	r3, #1
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	f383 8810 	msr	PRIMASK, r3
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2110      	movs	r1, #16
 8003260:	438a      	bics	r2, r1
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	193b      	adds	r3, r7, r4
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326c:	f383 8810 	msr	PRIMASK, r3
}
 8003270:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003272:	183b      	adds	r3, r7, r0
 8003274:	881a      	ldrh	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	0011      	movs	r1, r2
 800327a:	0018      	movs	r0, r3
 800327c:	f000 f860 	bl	8003340 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003280:	e044      	b.n	800330c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003282:	23a4      	movs	r3, #164	; 0xa4
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	035b      	lsls	r3, r3, #13
 800328c:	4013      	ands	r3, r2
 800328e:	d010      	beq.n	80032b2 <HAL_UART_IRQHandler+0x546>
 8003290:	239c      	movs	r3, #156	; 0x9c
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	03db      	lsls	r3, r3, #15
 800329a:	4013      	ands	r3, r2
 800329c:	d009      	beq.n	80032b2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2280      	movs	r2, #128	; 0x80
 80032a4:	0352      	lsls	r2, r2, #13
 80032a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	0018      	movs	r0, r3
 80032ac:	f000 ff8e 	bl	80041cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032b0:	e02f      	b.n	8003312 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032b2:	23a4      	movs	r3, #164	; 0xa4
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2280      	movs	r2, #128	; 0x80
 80032ba:	4013      	ands	r3, r2
 80032bc:	d00f      	beq.n	80032de <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032be:	23a0      	movs	r3, #160	; 0xa0
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2280      	movs	r2, #128	; 0x80
 80032c6:	4013      	ands	r3, r2
 80032c8:	d009      	beq.n	80032de <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d01e      	beq.n	8003310 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	0010      	movs	r0, r2
 80032da:	4798      	blx	r3
    }
    return;
 80032dc:	e018      	b.n	8003310 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032de:	23a4      	movs	r3, #164	; 0xa4
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2240      	movs	r2, #64	; 0x40
 80032e6:	4013      	ands	r3, r2
 80032e8:	d013      	beq.n	8003312 <HAL_UART_IRQHandler+0x5a6>
 80032ea:	23a0      	movs	r3, #160	; 0xa0
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2240      	movs	r2, #64	; 0x40
 80032f2:	4013      	ands	r3, r2
 80032f4:	d00d      	beq.n	8003312 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	0018      	movs	r0, r3
 80032fa:	f000 fdd4 	bl	8003ea6 <UART_EndTransmit_IT>
    return;
 80032fe:	e008      	b.n	8003312 <HAL_UART_IRQHandler+0x5a6>
      return;
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	e006      	b.n	8003312 <HAL_UART_IRQHandler+0x5a6>
    return;
 8003304:	46c0      	nop			; (mov r8, r8)
 8003306:	e004      	b.n	8003312 <HAL_UART_IRQHandler+0x5a6>
      return;
 8003308:	46c0      	nop			; (mov r8, r8)
 800330a:	e002      	b.n	8003312 <HAL_UART_IRQHandler+0x5a6>
      return;
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	e000      	b.n	8003312 <HAL_UART_IRQHandler+0x5a6>
    return;
 8003310:	46c0      	nop			; (mov r8, r8)
  }

}
 8003312:	46bd      	mov	sp, r7
 8003314:	b02b      	add	sp, #172	; 0xac
 8003316:	bd90      	pop	{r4, r7, pc}
 8003318:	fffffeff 	.word	0xfffffeff
 800331c:	fffffedf 	.word	0xfffffedf

08003320 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003328:	46c0      	nop			; (mov r8, r8)
 800332a:	46bd      	mov	sp, r7
 800332c:	b002      	add	sp, #8
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b002      	add	sp, #8
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	000a      	movs	r2, r1
 800334a:	1cbb      	adds	r3, r7, #2
 800334c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	b002      	add	sp, #8
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003358:	b5b0      	push	{r4, r5, r7, lr}
 800335a:	b08e      	sub	sp, #56	; 0x38
 800335c:	af00      	add	r7, sp, #0
 800335e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003360:	231a      	movs	r3, #26
 8003362:	2218      	movs	r2, #24
 8003364:	4694      	mov	ip, r2
 8003366:	44bc      	add	ip, r7
 8003368:	4463      	add	r3, ip
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	431a      	orrs	r2, r3
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	431a      	orrs	r2, r3
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	4313      	orrs	r3, r2
 8003384:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4ab0      	ldr	r2, [pc, #704]	; (8003650 <UART_SetConfig+0x2f8>)
 800338e:	4013      	ands	r3, r2
 8003390:	0019      	movs	r1, r3
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003398:	430a      	orrs	r2, r1
 800339a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4aac      	ldr	r2, [pc, #688]	; (8003654 <UART_SetConfig+0x2fc>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	0019      	movs	r1, r3
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4aa6      	ldr	r2, [pc, #664]	; (8003658 <UART_SetConfig+0x300>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033ca:	4313      	orrs	r3, r2
 80033cc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	4aa1      	ldr	r2, [pc, #644]	; (800365c <UART_SetConfig+0x304>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	0019      	movs	r1, r3
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033e0:	430a      	orrs	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a9d      	ldr	r2, [pc, #628]	; (8003660 <UART_SetConfig+0x308>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d136      	bne.n	800345c <UART_SetConfig+0x104>
 80033ee:	4b9d      	ldr	r3, [pc, #628]	; (8003664 <UART_SetConfig+0x30c>)
 80033f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f2:	2203      	movs	r2, #3
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d020      	beq.n	800343c <UART_SetConfig+0xe4>
 80033fa:	d827      	bhi.n	800344c <UART_SetConfig+0xf4>
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d00d      	beq.n	800341c <UART_SetConfig+0xc4>
 8003400:	d824      	bhi.n	800344c <UART_SetConfig+0xf4>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <UART_SetConfig+0xb4>
 8003406:	2b01      	cmp	r3, #1
 8003408:	d010      	beq.n	800342c <UART_SetConfig+0xd4>
 800340a:	e01f      	b.n	800344c <UART_SetConfig+0xf4>
 800340c:	231b      	movs	r3, #27
 800340e:	2218      	movs	r2, #24
 8003410:	4694      	mov	ip, r2
 8003412:	44bc      	add	ip, r7
 8003414:	4463      	add	r3, ip
 8003416:	2201      	movs	r2, #1
 8003418:	701a      	strb	r2, [r3, #0]
 800341a:	e0c5      	b.n	80035a8 <UART_SetConfig+0x250>
 800341c:	231b      	movs	r3, #27
 800341e:	2218      	movs	r2, #24
 8003420:	4694      	mov	ip, r2
 8003422:	44bc      	add	ip, r7
 8003424:	4463      	add	r3, ip
 8003426:	2202      	movs	r2, #2
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	e0bd      	b.n	80035a8 <UART_SetConfig+0x250>
 800342c:	231b      	movs	r3, #27
 800342e:	2218      	movs	r2, #24
 8003430:	4694      	mov	ip, r2
 8003432:	44bc      	add	ip, r7
 8003434:	4463      	add	r3, ip
 8003436:	2204      	movs	r2, #4
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	e0b5      	b.n	80035a8 <UART_SetConfig+0x250>
 800343c:	231b      	movs	r3, #27
 800343e:	2218      	movs	r2, #24
 8003440:	4694      	mov	ip, r2
 8003442:	44bc      	add	ip, r7
 8003444:	4463      	add	r3, ip
 8003446:	2208      	movs	r2, #8
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	e0ad      	b.n	80035a8 <UART_SetConfig+0x250>
 800344c:	231b      	movs	r3, #27
 800344e:	2218      	movs	r2, #24
 8003450:	4694      	mov	ip, r2
 8003452:	44bc      	add	ip, r7
 8003454:	4463      	add	r3, ip
 8003456:	2210      	movs	r2, #16
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	e0a5      	b.n	80035a8 <UART_SetConfig+0x250>
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a81      	ldr	r2, [pc, #516]	; (8003668 <UART_SetConfig+0x310>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d136      	bne.n	80034d4 <UART_SetConfig+0x17c>
 8003466:	4b7f      	ldr	r3, [pc, #508]	; (8003664 <UART_SetConfig+0x30c>)
 8003468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346a:	220c      	movs	r2, #12
 800346c:	4013      	ands	r3, r2
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d020      	beq.n	80034b4 <UART_SetConfig+0x15c>
 8003472:	d827      	bhi.n	80034c4 <UART_SetConfig+0x16c>
 8003474:	2b08      	cmp	r3, #8
 8003476:	d00d      	beq.n	8003494 <UART_SetConfig+0x13c>
 8003478:	d824      	bhi.n	80034c4 <UART_SetConfig+0x16c>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <UART_SetConfig+0x12c>
 800347e:	2b04      	cmp	r3, #4
 8003480:	d010      	beq.n	80034a4 <UART_SetConfig+0x14c>
 8003482:	e01f      	b.n	80034c4 <UART_SetConfig+0x16c>
 8003484:	231b      	movs	r3, #27
 8003486:	2218      	movs	r2, #24
 8003488:	4694      	mov	ip, r2
 800348a:	44bc      	add	ip, r7
 800348c:	4463      	add	r3, ip
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e089      	b.n	80035a8 <UART_SetConfig+0x250>
 8003494:	231b      	movs	r3, #27
 8003496:	2218      	movs	r2, #24
 8003498:	4694      	mov	ip, r2
 800349a:	44bc      	add	ip, r7
 800349c:	4463      	add	r3, ip
 800349e:	2202      	movs	r2, #2
 80034a0:	701a      	strb	r2, [r3, #0]
 80034a2:	e081      	b.n	80035a8 <UART_SetConfig+0x250>
 80034a4:	231b      	movs	r3, #27
 80034a6:	2218      	movs	r2, #24
 80034a8:	4694      	mov	ip, r2
 80034aa:	44bc      	add	ip, r7
 80034ac:	4463      	add	r3, ip
 80034ae:	2204      	movs	r2, #4
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	e079      	b.n	80035a8 <UART_SetConfig+0x250>
 80034b4:	231b      	movs	r3, #27
 80034b6:	2218      	movs	r2, #24
 80034b8:	4694      	mov	ip, r2
 80034ba:	44bc      	add	ip, r7
 80034bc:	4463      	add	r3, ip
 80034be:	2208      	movs	r2, #8
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e071      	b.n	80035a8 <UART_SetConfig+0x250>
 80034c4:	231b      	movs	r3, #27
 80034c6:	2218      	movs	r2, #24
 80034c8:	4694      	mov	ip, r2
 80034ca:	44bc      	add	ip, r7
 80034cc:	4463      	add	r3, ip
 80034ce:	2210      	movs	r2, #16
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e069      	b.n	80035a8 <UART_SetConfig+0x250>
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a64      	ldr	r2, [pc, #400]	; (800366c <UART_SetConfig+0x314>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d107      	bne.n	80034ee <UART_SetConfig+0x196>
 80034de:	231b      	movs	r3, #27
 80034e0:	2218      	movs	r2, #24
 80034e2:	4694      	mov	ip, r2
 80034e4:	44bc      	add	ip, r7
 80034e6:	4463      	add	r3, ip
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
 80034ec:	e05c      	b.n	80035a8 <UART_SetConfig+0x250>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a5f      	ldr	r2, [pc, #380]	; (8003670 <UART_SetConfig+0x318>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d107      	bne.n	8003508 <UART_SetConfig+0x1b0>
 80034f8:	231b      	movs	r3, #27
 80034fa:	2218      	movs	r2, #24
 80034fc:	4694      	mov	ip, r2
 80034fe:	44bc      	add	ip, r7
 8003500:	4463      	add	r3, ip
 8003502:	2200      	movs	r2, #0
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	e04f      	b.n	80035a8 <UART_SetConfig+0x250>
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a52      	ldr	r2, [pc, #328]	; (8003658 <UART_SetConfig+0x300>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d143      	bne.n	800359a <UART_SetConfig+0x242>
 8003512:	4b54      	ldr	r3, [pc, #336]	; (8003664 <UART_SetConfig+0x30c>)
 8003514:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003516:	23c0      	movs	r3, #192	; 0xc0
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	4013      	ands	r3, r2
 800351c:	22c0      	movs	r2, #192	; 0xc0
 800351e:	0112      	lsls	r2, r2, #4
 8003520:	4293      	cmp	r3, r2
 8003522:	d02a      	beq.n	800357a <UART_SetConfig+0x222>
 8003524:	22c0      	movs	r2, #192	; 0xc0
 8003526:	0112      	lsls	r2, r2, #4
 8003528:	4293      	cmp	r3, r2
 800352a:	d82e      	bhi.n	800358a <UART_SetConfig+0x232>
 800352c:	2280      	movs	r2, #128	; 0x80
 800352e:	0112      	lsls	r2, r2, #4
 8003530:	4293      	cmp	r3, r2
 8003532:	d012      	beq.n	800355a <UART_SetConfig+0x202>
 8003534:	2280      	movs	r2, #128	; 0x80
 8003536:	0112      	lsls	r2, r2, #4
 8003538:	4293      	cmp	r3, r2
 800353a:	d826      	bhi.n	800358a <UART_SetConfig+0x232>
 800353c:	2b00      	cmp	r3, #0
 800353e:	d004      	beq.n	800354a <UART_SetConfig+0x1f2>
 8003540:	2280      	movs	r2, #128	; 0x80
 8003542:	00d2      	lsls	r2, r2, #3
 8003544:	4293      	cmp	r3, r2
 8003546:	d010      	beq.n	800356a <UART_SetConfig+0x212>
 8003548:	e01f      	b.n	800358a <UART_SetConfig+0x232>
 800354a:	231b      	movs	r3, #27
 800354c:	2218      	movs	r2, #24
 800354e:	4694      	mov	ip, r2
 8003550:	44bc      	add	ip, r7
 8003552:	4463      	add	r3, ip
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	e026      	b.n	80035a8 <UART_SetConfig+0x250>
 800355a:	231b      	movs	r3, #27
 800355c:	2218      	movs	r2, #24
 800355e:	4694      	mov	ip, r2
 8003560:	44bc      	add	ip, r7
 8003562:	4463      	add	r3, ip
 8003564:	2202      	movs	r2, #2
 8003566:	701a      	strb	r2, [r3, #0]
 8003568:	e01e      	b.n	80035a8 <UART_SetConfig+0x250>
 800356a:	231b      	movs	r3, #27
 800356c:	2218      	movs	r2, #24
 800356e:	4694      	mov	ip, r2
 8003570:	44bc      	add	ip, r7
 8003572:	4463      	add	r3, ip
 8003574:	2204      	movs	r2, #4
 8003576:	701a      	strb	r2, [r3, #0]
 8003578:	e016      	b.n	80035a8 <UART_SetConfig+0x250>
 800357a:	231b      	movs	r3, #27
 800357c:	2218      	movs	r2, #24
 800357e:	4694      	mov	ip, r2
 8003580:	44bc      	add	ip, r7
 8003582:	4463      	add	r3, ip
 8003584:	2208      	movs	r2, #8
 8003586:	701a      	strb	r2, [r3, #0]
 8003588:	e00e      	b.n	80035a8 <UART_SetConfig+0x250>
 800358a:	231b      	movs	r3, #27
 800358c:	2218      	movs	r2, #24
 800358e:	4694      	mov	ip, r2
 8003590:	44bc      	add	ip, r7
 8003592:	4463      	add	r3, ip
 8003594:	2210      	movs	r2, #16
 8003596:	701a      	strb	r2, [r3, #0]
 8003598:	e006      	b.n	80035a8 <UART_SetConfig+0x250>
 800359a:	231b      	movs	r3, #27
 800359c:	2218      	movs	r2, #24
 800359e:	4694      	mov	ip, r2
 80035a0:	44bc      	add	ip, r7
 80035a2:	4463      	add	r3, ip
 80035a4:	2210      	movs	r2, #16
 80035a6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a2a      	ldr	r2, [pc, #168]	; (8003658 <UART_SetConfig+0x300>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d000      	beq.n	80035b4 <UART_SetConfig+0x25c>
 80035b2:	e09e      	b.n	80036f2 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035b4:	231b      	movs	r3, #27
 80035b6:	2218      	movs	r2, #24
 80035b8:	4694      	mov	ip, r2
 80035ba:	44bc      	add	ip, r7
 80035bc:	4463      	add	r3, ip
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d01d      	beq.n	8003600 <UART_SetConfig+0x2a8>
 80035c4:	dc20      	bgt.n	8003608 <UART_SetConfig+0x2b0>
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d015      	beq.n	80035f6 <UART_SetConfig+0x29e>
 80035ca:	dc1d      	bgt.n	8003608 <UART_SetConfig+0x2b0>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <UART_SetConfig+0x27e>
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d005      	beq.n	80035e0 <UART_SetConfig+0x288>
 80035d4:	e018      	b.n	8003608 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035d6:	f7ff f8c5 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 80035da:	0003      	movs	r3, r0
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035de:	e01d      	b.n	800361c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035e0:	4b20      	ldr	r3, [pc, #128]	; (8003664 <UART_SetConfig+0x30c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2210      	movs	r2, #16
 80035e6:	4013      	ands	r3, r2
 80035e8:	d002      	beq.n	80035f0 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80035ea:	4b22      	ldr	r3, [pc, #136]	; (8003674 <UART_SetConfig+0x31c>)
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80035ee:	e015      	b.n	800361c <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 80035f0:	4b21      	ldr	r3, [pc, #132]	; (8003678 <UART_SetConfig+0x320>)
 80035f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035f4:	e012      	b.n	800361c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035f6:	f7ff f805 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 80035fa:	0003      	movs	r3, r0
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035fe:	e00d      	b.n	800361c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003606:	e009      	b.n	800361c <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800360c:	231a      	movs	r3, #26
 800360e:	2218      	movs	r2, #24
 8003610:	4694      	mov	ip, r2
 8003612:	44bc      	add	ip, r7
 8003614:	4463      	add	r3, ip
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
        break;
 800361a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	2b00      	cmp	r3, #0
 8003620:	d100      	bne.n	8003624 <UART_SetConfig+0x2cc>
 8003622:	e13c      	b.n	800389e <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	0013      	movs	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	189b      	adds	r3, r3, r2
 800362e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003630:	429a      	cmp	r2, r3
 8003632:	d305      	bcc.n	8003640 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800363a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800363c:	429a      	cmp	r2, r3
 800363e:	d91d      	bls.n	800367c <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8003640:	231a      	movs	r3, #26
 8003642:	2218      	movs	r2, #24
 8003644:	4694      	mov	ip, r2
 8003646:	44bc      	add	ip, r7
 8003648:	4463      	add	r3, ip
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	e126      	b.n	800389e <UART_SetConfig+0x546>
 8003650:	efff69f3 	.word	0xefff69f3
 8003654:	ffffcfff 	.word	0xffffcfff
 8003658:	40004800 	.word	0x40004800
 800365c:	fffff4ff 	.word	0xfffff4ff
 8003660:	40013800 	.word	0x40013800
 8003664:	40021000 	.word	0x40021000
 8003668:	40004400 	.word	0x40004400
 800366c:	40004c00 	.word	0x40004c00
 8003670:	40005000 	.word	0x40005000
 8003674:	003d0900 	.word	0x003d0900
 8003678:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	6939      	ldr	r1, [r7, #16]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	000b      	movs	r3, r1
 800368a:	0e1b      	lsrs	r3, r3, #24
 800368c:	0010      	movs	r0, r2
 800368e:	0205      	lsls	r5, r0, #8
 8003690:	431d      	orrs	r5, r3
 8003692:	000b      	movs	r3, r1
 8003694:	021c      	lsls	r4, r3, #8
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	085b      	lsrs	r3, r3, #1
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68b8      	ldr	r0, [r7, #8]
 80036a4:	68f9      	ldr	r1, [r7, #12]
 80036a6:	1900      	adds	r0, r0, r4
 80036a8:	4169      	adcs	r1, r5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	2300      	movs	r3, #0
 80036b2:	607b      	str	r3, [r7, #4]
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f7fc fdc4 	bl	8000244 <__aeabi_uldivmod>
 80036bc:	0002      	movs	r2, r0
 80036be:	000b      	movs	r3, r1
 80036c0:	0013      	movs	r3, r2
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036c6:	23c0      	movs	r3, #192	; 0xc0
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d309      	bcc.n	80036e2 <UART_SetConfig+0x38a>
 80036ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	035b      	lsls	r3, r3, #13
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d204      	bcs.n	80036e2 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036de:	60da      	str	r2, [r3, #12]
 80036e0:	e0dd      	b.n	800389e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80036e2:	231a      	movs	r3, #26
 80036e4:	2218      	movs	r2, #24
 80036e6:	4694      	mov	ip, r2
 80036e8:	44bc      	add	ip, r7
 80036ea:	4463      	add	r3, ip
 80036ec:	2201      	movs	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	e0d5      	b.n	800389e <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	69da      	ldr	r2, [r3, #28]
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	021b      	lsls	r3, r3, #8
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d000      	beq.n	8003700 <UART_SetConfig+0x3a8>
 80036fe:	e074      	b.n	80037ea <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8003700:	231b      	movs	r3, #27
 8003702:	2218      	movs	r2, #24
 8003704:	4694      	mov	ip, r2
 8003706:	44bc      	add	ip, r7
 8003708:	4463      	add	r3, ip
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d822      	bhi.n	8003756 <UART_SetConfig+0x3fe>
 8003710:	009a      	lsls	r2, r3, #2
 8003712:	4b6b      	ldr	r3, [pc, #428]	; (80038c0 <UART_SetConfig+0x568>)
 8003714:	18d3      	adds	r3, r2, r3
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800371a:	f7ff f823 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 800371e:	0003      	movs	r3, r0
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003722:	e022      	b.n	800376a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003724:	f7ff f834 	bl	8002790 <HAL_RCC_GetPCLK2Freq>
 8003728:	0003      	movs	r3, r0
 800372a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800372c:	e01d      	b.n	800376a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800372e:	4b65      	ldr	r3, [pc, #404]	; (80038c4 <UART_SetConfig+0x56c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2210      	movs	r2, #16
 8003734:	4013      	ands	r3, r2
 8003736:	d002      	beq.n	800373e <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003738:	4b63      	ldr	r3, [pc, #396]	; (80038c8 <UART_SetConfig+0x570>)
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800373c:	e015      	b.n	800376a <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800373e:	4b63      	ldr	r3, [pc, #396]	; (80038cc <UART_SetConfig+0x574>)
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003742:	e012      	b.n	800376a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003744:	f7fe ff5e 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 8003748:	0003      	movs	r3, r0
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800374c:	e00d      	b.n	800376a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003754:	e009      	b.n	800376a <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800375a:	231a      	movs	r3, #26
 800375c:	2218      	movs	r2, #24
 800375e:	4694      	mov	ip, r2
 8003760:	44bc      	add	ip, r7
 8003762:	4463      	add	r3, ip
 8003764:	2201      	movs	r2, #1
 8003766:	701a      	strb	r2, [r3, #0]
        break;
 8003768:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d100      	bne.n	8003772 <UART_SetConfig+0x41a>
 8003770:	e095      	b.n	800389e <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	005a      	lsls	r2, r3, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	085b      	lsrs	r3, r3, #1
 800377c:	18d2      	adds	r2, r2, r3
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	0019      	movs	r1, r3
 8003784:	0010      	movs	r0, r2
 8003786:	f7fc fcd1 	bl	800012c <__udivsi3>
 800378a:	0003      	movs	r3, r0
 800378c:	b29b      	uxth	r3, r3
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003792:	2b0f      	cmp	r3, #15
 8003794:	d921      	bls.n	80037da <UART_SetConfig+0x482>
 8003796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	025b      	lsls	r3, r3, #9
 800379c:	429a      	cmp	r2, r3
 800379e:	d21c      	bcs.n	80037da <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	200e      	movs	r0, #14
 80037a6:	2418      	movs	r4, #24
 80037a8:	193b      	adds	r3, r7, r4
 80037aa:	181b      	adds	r3, r3, r0
 80037ac:	210f      	movs	r1, #15
 80037ae:	438a      	bics	r2, r1
 80037b0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2207      	movs	r2, #7
 80037ba:	4013      	ands	r3, r2
 80037bc:	b299      	uxth	r1, r3
 80037be:	193b      	adds	r3, r7, r4
 80037c0:	181b      	adds	r3, r3, r0
 80037c2:	193a      	adds	r2, r7, r4
 80037c4:	1812      	adds	r2, r2, r0
 80037c6:	8812      	ldrh	r2, [r2, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	193a      	adds	r2, r7, r4
 80037d2:	1812      	adds	r2, r2, r0
 80037d4:	8812      	ldrh	r2, [r2, #0]
 80037d6:	60da      	str	r2, [r3, #12]
 80037d8:	e061      	b.n	800389e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80037da:	231a      	movs	r3, #26
 80037dc:	2218      	movs	r2, #24
 80037de:	4694      	mov	ip, r2
 80037e0:	44bc      	add	ip, r7
 80037e2:	4463      	add	r3, ip
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
 80037e8:	e059      	b.n	800389e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037ea:	231b      	movs	r3, #27
 80037ec:	2218      	movs	r2, #24
 80037ee:	4694      	mov	ip, r2
 80037f0:	44bc      	add	ip, r7
 80037f2:	4463      	add	r3, ip
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d822      	bhi.n	8003840 <UART_SetConfig+0x4e8>
 80037fa:	009a      	lsls	r2, r3, #2
 80037fc:	4b34      	ldr	r3, [pc, #208]	; (80038d0 <UART_SetConfig+0x578>)
 80037fe:	18d3      	adds	r3, r2, r3
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003804:	f7fe ffae 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 8003808:	0003      	movs	r3, r0
 800380a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800380c:	e022      	b.n	8003854 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800380e:	f7fe ffbf 	bl	8002790 <HAL_RCC_GetPCLK2Freq>
 8003812:	0003      	movs	r3, r0
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003816:	e01d      	b.n	8003854 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003818:	4b2a      	ldr	r3, [pc, #168]	; (80038c4 <UART_SetConfig+0x56c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2210      	movs	r2, #16
 800381e:	4013      	ands	r3, r2
 8003820:	d002      	beq.n	8003828 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003822:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <UART_SetConfig+0x570>)
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003826:	e015      	b.n	8003854 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8003828:	4b28      	ldr	r3, [pc, #160]	; (80038cc <UART_SetConfig+0x574>)
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800382c:	e012      	b.n	8003854 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800382e:	f7fe fee9 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 8003832:	0003      	movs	r3, r0
 8003834:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003836:	e00d      	b.n	8003854 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800383e:	e009      	b.n	8003854 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003844:	231a      	movs	r3, #26
 8003846:	2218      	movs	r2, #24
 8003848:	4694      	mov	ip, r2
 800384a:	44bc      	add	ip, r7
 800384c:	4463      	add	r3, ip
 800384e:	2201      	movs	r2, #1
 8003850:	701a      	strb	r2, [r3, #0]
        break;
 8003852:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d021      	beq.n	800389e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	085a      	lsrs	r2, r3, #1
 8003860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003862:	18d2      	adds	r2, r2, r3
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	0019      	movs	r1, r3
 800386a:	0010      	movs	r0, r2
 800386c:	f7fc fc5e 	bl	800012c <__udivsi3>
 8003870:	0003      	movs	r3, r0
 8003872:	b29b      	uxth	r3, r3
 8003874:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003878:	2b0f      	cmp	r3, #15
 800387a:	d909      	bls.n	8003890 <UART_SetConfig+0x538>
 800387c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800387e:	2380      	movs	r3, #128	; 0x80
 8003880:	025b      	lsls	r3, r3, #9
 8003882:	429a      	cmp	r2, r3
 8003884:	d204      	bcs.n	8003890 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	e006      	b.n	800389e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003890:	231a      	movs	r3, #26
 8003892:	2218      	movs	r2, #24
 8003894:	4694      	mov	ip, r2
 8003896:	44bc      	add	ip, r7
 8003898:	4463      	add	r3, ip
 800389a:	2201      	movs	r2, #1
 800389c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2200      	movs	r2, #0
 80038a2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2200      	movs	r2, #0
 80038a8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80038aa:	231a      	movs	r3, #26
 80038ac:	2218      	movs	r2, #24
 80038ae:	4694      	mov	ip, r2
 80038b0:	44bc      	add	ip, r7
 80038b2:	4463      	add	r3, ip
 80038b4:	781b      	ldrb	r3, [r3, #0]
}
 80038b6:	0018      	movs	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b00e      	add	sp, #56	; 0x38
 80038bc:	bdb0      	pop	{r4, r5, r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	08004b20 	.word	0x08004b20
 80038c4:	40021000 	.word	0x40021000
 80038c8:	003d0900 	.word	0x003d0900
 80038cc:	00f42400 	.word	0x00f42400
 80038d0:	08004b44 	.word	0x08004b44

080038d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	2201      	movs	r2, #1
 80038e2:	4013      	ands	r3, r2
 80038e4:	d00b      	beq.n	80038fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4a4a      	ldr	r2, [pc, #296]	; (8003a18 <UART_AdvFeatureConfig+0x144>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	0019      	movs	r1, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	2202      	movs	r2, #2
 8003904:	4013      	ands	r3, r2
 8003906:	d00b      	beq.n	8003920 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4a43      	ldr	r2, [pc, #268]	; (8003a1c <UART_AdvFeatureConfig+0x148>)
 8003910:	4013      	ands	r3, r2
 8003912:	0019      	movs	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	2204      	movs	r2, #4
 8003926:	4013      	ands	r3, r2
 8003928:	d00b      	beq.n	8003942 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	4a3b      	ldr	r2, [pc, #236]	; (8003a20 <UART_AdvFeatureConfig+0x14c>)
 8003932:	4013      	ands	r3, r2
 8003934:	0019      	movs	r1, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	2208      	movs	r2, #8
 8003948:	4013      	ands	r3, r2
 800394a:	d00b      	beq.n	8003964 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4a34      	ldr	r2, [pc, #208]	; (8003a24 <UART_AdvFeatureConfig+0x150>)
 8003954:	4013      	ands	r3, r2
 8003956:	0019      	movs	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	2210      	movs	r2, #16
 800396a:	4013      	ands	r3, r2
 800396c:	d00b      	beq.n	8003986 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a2c      	ldr	r2, [pc, #176]	; (8003a28 <UART_AdvFeatureConfig+0x154>)
 8003976:	4013      	ands	r3, r2
 8003978:	0019      	movs	r1, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	2220      	movs	r2, #32
 800398c:	4013      	ands	r3, r2
 800398e:	d00b      	beq.n	80039a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	4a25      	ldr	r2, [pc, #148]	; (8003a2c <UART_AdvFeatureConfig+0x158>)
 8003998:	4013      	ands	r3, r2
 800399a:	0019      	movs	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	2240      	movs	r2, #64	; 0x40
 80039ae:	4013      	ands	r3, r2
 80039b0:	d01d      	beq.n	80039ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4a1d      	ldr	r2, [pc, #116]	; (8003a30 <UART_AdvFeatureConfig+0x15c>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ce:	2380      	movs	r3, #128	; 0x80
 80039d0:	035b      	lsls	r3, r3, #13
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d10b      	bne.n	80039ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <UART_AdvFeatureConfig+0x160>)
 80039de:	4013      	ands	r3, r2
 80039e0:	0019      	movs	r1, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	2280      	movs	r2, #128	; 0x80
 80039f4:	4013      	ands	r3, r2
 80039f6:	d00b      	beq.n	8003a10 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4a0e      	ldr	r2, [pc, #56]	; (8003a38 <UART_AdvFeatureConfig+0x164>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	0019      	movs	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	605a      	str	r2, [r3, #4]
  }
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b002      	add	sp, #8
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	fffdffff 	.word	0xfffdffff
 8003a1c:	fffeffff 	.word	0xfffeffff
 8003a20:	fffbffff 	.word	0xfffbffff
 8003a24:	ffff7fff 	.word	0xffff7fff
 8003a28:	ffffefff 	.word	0xffffefff
 8003a2c:	ffffdfff 	.word	0xffffdfff
 8003a30:	ffefffff 	.word	0xffefffff
 8003a34:	ff9fffff 	.word	0xff9fffff
 8003a38:	fff7ffff 	.word	0xfff7ffff

08003a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2280      	movs	r2, #128	; 0x80
 8003a48:	2100      	movs	r1, #0
 8003a4a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a4c:	f7fd fd56 	bl	80014fc <HAL_GetTick>
 8003a50:	0003      	movs	r3, r0
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2208      	movs	r2, #8
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d10c      	bne.n	8003a7c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2280      	movs	r2, #128	; 0x80
 8003a66:	0391      	lsls	r1, r2, #14
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	4a17      	ldr	r2, [pc, #92]	; (8003ac8 <UART_CheckIdleState+0x8c>)
 8003a6c:	9200      	str	r2, [sp, #0]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f000 f82c 	bl	8003acc <UART_WaitOnFlagUntilTimeout>
 8003a74:	1e03      	subs	r3, r0, #0
 8003a76:	d001      	beq.n	8003a7c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e021      	b.n	8003ac0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2204      	movs	r2, #4
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d10c      	bne.n	8003aa4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2280      	movs	r2, #128	; 0x80
 8003a8e:	03d1      	lsls	r1, r2, #15
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4a0d      	ldr	r2, [pc, #52]	; (8003ac8 <UART_CheckIdleState+0x8c>)
 8003a94:	9200      	str	r2, [sp, #0]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f000 f818 	bl	8003acc <UART_WaitOnFlagUntilTimeout>
 8003a9c:	1e03      	subs	r3, r0, #0
 8003a9e:	d001      	beq.n	8003aa4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e00d      	b.n	8003ac0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2220      	movs	r2, #32
 8003aae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2274      	movs	r2, #116	; 0x74
 8003aba:	2100      	movs	r1, #0
 8003abc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b004      	add	sp, #16
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	01ffffff 	.word	0x01ffffff

08003acc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b094      	sub	sp, #80	; 0x50
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	1dfb      	adds	r3, r7, #7
 8003ada:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003adc:	e0a3      	b.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	d100      	bne.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003ae4:	e09f      	b.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae6:	f7fd fd09 	bl	80014fc <HAL_GetTick>
 8003aea:	0002      	movs	r2, r0
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d302      	bcc.n	8003afc <UART_WaitOnFlagUntilTimeout+0x30>
 8003af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d13d      	bne.n	8003b78 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afc:	f3ef 8310 	mrs	r3, PRIMASK
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b04:	647b      	str	r3, [r7, #68]	; 0x44
 8003b06:	2301      	movs	r3, #1
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	f383 8810 	msr	PRIMASK, r3
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	494c      	ldr	r1, [pc, #304]	; (8003c50 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003b1e:	400a      	ands	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b24:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	f383 8810 	msr	PRIMASK, r3
}
 8003b2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b36:	643b      	str	r3, [r7, #64]	; 0x40
 8003b38:	2301      	movs	r3, #1
 8003b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3e:	f383 8810 	msr	PRIMASK, r3
}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2101      	movs	r1, #1
 8003b50:	438a      	bics	r2, r1
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5a:	f383 8810 	msr	PRIMASK, r3
}
 8003b5e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2274      	movs	r2, #116	; 0x74
 8003b70:	2100      	movs	r1, #0
 8003b72:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e067      	b.n	8003c48 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2204      	movs	r2, #4
 8003b80:	4013      	ands	r3, r2
 8003b82:	d050      	beq.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69da      	ldr	r2, [r3, #28]
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	401a      	ands	r2, r3
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d146      	bne.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2280      	movs	r2, #128	; 0x80
 8003b9e:	0112      	lsls	r2, r2, #4
 8003ba0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba6:	613b      	str	r3, [r7, #16]
  return(result);
 8003ba8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bac:	2301      	movs	r3, #1
 8003bae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f383 8810 	msr	PRIMASK, r3
}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4923      	ldr	r1, [pc, #140]	; (8003c50 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003bc4:	400a      	ands	r2, r1
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f383 8810 	msr	PRIMASK, r3
}
 8003bd2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bda:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bde:	2301      	movs	r3, #1
 8003be0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	f383 8810 	msr	PRIMASK, r3
}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	438a      	bics	r2, r1
 8003bf8:	609a      	str	r2, [r3, #8]
 8003bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	f383 8810 	msr	PRIMASK, r3
}
 8003c04:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2280      	movs	r2, #128	; 0x80
 8003c16:	2120      	movs	r1, #32
 8003c18:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2274      	movs	r2, #116	; 0x74
 8003c1e:	2100      	movs	r1, #0
 8003c20:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e010      	b.n	8003c48 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	425a      	negs	r2, r3
 8003c36:	4153      	adcs	r3, r2
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	001a      	movs	r2, r3
 8003c3c:	1dfb      	adds	r3, r7, #7
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d100      	bne.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003c44:	e74b      	b.n	8003ade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	0018      	movs	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b014      	add	sp, #80	; 0x50
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	fffffe5f 	.word	0xfffffe5f

08003c54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08c      	sub	sp, #48	; 0x30
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	1dbb      	adds	r3, r7, #6
 8003c60:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1dba      	adds	r2, r7, #6
 8003c6c:	2158      	movs	r1, #88	; 0x58
 8003c6e:	8812      	ldrh	r2, [r2, #0]
 8003c70:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1dba      	adds	r2, r7, #6
 8003c76:	215a      	movs	r1, #90	; 0x5a
 8003c78:	8812      	ldrh	r2, [r2, #0]
 8003c7a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	015b      	lsls	r3, r3, #5
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d10d      	bne.n	8003caa <UART_Start_Receive_IT+0x56>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d104      	bne.n	8003ca0 <UART_Start_Receive_IT+0x4c>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	225c      	movs	r2, #92	; 0x5c
 8003c9a:	4943      	ldr	r1, [pc, #268]	; (8003da8 <UART_Start_Receive_IT+0x154>)
 8003c9c:	5299      	strh	r1, [r3, r2]
 8003c9e:	e02e      	b.n	8003cfe <UART_Start_Receive_IT+0xaa>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	225c      	movs	r2, #92	; 0x5c
 8003ca4:	21ff      	movs	r1, #255	; 0xff
 8003ca6:	5299      	strh	r1, [r3, r2]
 8003ca8:	e029      	b.n	8003cfe <UART_Start_Receive_IT+0xaa>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10d      	bne.n	8003cce <UART_Start_Receive_IT+0x7a>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d104      	bne.n	8003cc4 <UART_Start_Receive_IT+0x70>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	225c      	movs	r2, #92	; 0x5c
 8003cbe:	21ff      	movs	r1, #255	; 0xff
 8003cc0:	5299      	strh	r1, [r3, r2]
 8003cc2:	e01c      	b.n	8003cfe <UART_Start_Receive_IT+0xaa>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	225c      	movs	r2, #92	; 0x5c
 8003cc8:	217f      	movs	r1, #127	; 0x7f
 8003cca:	5299      	strh	r1, [r3, r2]
 8003ccc:	e017      	b.n	8003cfe <UART_Start_Receive_IT+0xaa>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	2380      	movs	r3, #128	; 0x80
 8003cd4:	055b      	lsls	r3, r3, #21
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d10d      	bne.n	8003cf6 <UART_Start_Receive_IT+0xa2>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d104      	bne.n	8003cec <UART_Start_Receive_IT+0x98>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	225c      	movs	r2, #92	; 0x5c
 8003ce6:	217f      	movs	r1, #127	; 0x7f
 8003ce8:	5299      	strh	r1, [r3, r2]
 8003cea:	e008      	b.n	8003cfe <UART_Start_Receive_IT+0xaa>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	225c      	movs	r2, #92	; 0x5c
 8003cf0:	213f      	movs	r1, #63	; 0x3f
 8003cf2:	5299      	strh	r1, [r3, r2]
 8003cf4:	e003      	b.n	8003cfe <UART_Start_Receive_IT+0xaa>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	225c      	movs	r2, #92	; 0x5c
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2280      	movs	r2, #128	; 0x80
 8003d02:	2100      	movs	r1, #0
 8003d04:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2222      	movs	r2, #34	; 0x22
 8003d0a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d10:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d12:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d16:	2301      	movs	r3, #1
 8003d18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f383 8810 	msr	PRIMASK, r3
}
 8003d20:	46c0      	nop			; (mov r8, r8)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	609a      	str	r2, [r3, #8]
 8003d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	f383 8810 	msr	PRIMASK, r3
}
 8003d3c:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	015b      	lsls	r3, r3, #5
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d107      	bne.n	8003d5a <UART_Start_Receive_IT+0x106>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d103      	bne.n	8003d5a <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4a15      	ldr	r2, [pc, #84]	; (8003dac <UART_Start_Receive_IT+0x158>)
 8003d56:	665a      	str	r2, [r3, #100]	; 0x64
 8003d58:	e002      	b.n	8003d60 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4a14      	ldr	r2, [pc, #80]	; (8003db0 <UART_Start_Receive_IT+0x15c>)
 8003d5e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2274      	movs	r2, #116	; 0x74
 8003d64:	2100      	movs	r1, #0
 8003d66:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d68:	f3ef 8310 	mrs	r3, PRIMASK
 8003d6c:	613b      	str	r3, [r7, #16]
  return(result);
 8003d6e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d72:	2301      	movs	r3, #1
 8003d74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f383 8810 	msr	PRIMASK, r3
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2190      	movs	r1, #144	; 0x90
 8003d8a:	0049      	lsls	r1, r1, #1
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	f383 8810 	msr	PRIMASK, r3
}
 8003d9a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	0018      	movs	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b00c      	add	sp, #48	; 0x30
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	000001ff 	.word	0x000001ff
 8003dac:	08004065 	.word	0x08004065
 8003db0:	08003efd 	.word	0x08003efd

08003db4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08e      	sub	sp, #56	; 0x38
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003dc0:	617b      	str	r3, [r7, #20]
  return(result);
 8003dc2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f383 8810 	msr	PRIMASK, r3
}
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4925      	ldr	r1, [pc, #148]	; (8003e74 <UART_EndRxTransfer+0xc0>)
 8003dde:	400a      	ands	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f383 8810 	msr	PRIMASK, r3
}
 8003dec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dee:	f3ef 8310 	mrs	r3, PRIMASK
 8003df2:	623b      	str	r3, [r7, #32]
  return(result);
 8003df4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df6:	633b      	str	r3, [r7, #48]	; 0x30
 8003df8:	2301      	movs	r3, #1
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	f383 8810 	msr	PRIMASK, r3
}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2101      	movs	r1, #1
 8003e10:	438a      	bics	r2, r1
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	f383 8810 	msr	PRIMASK, r3
}
 8003e1e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d118      	bne.n	8003e5a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e28:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e32:	2301      	movs	r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f383 8810 	msr	PRIMASK, r3
}
 8003e3c:	46c0      	nop			; (mov r8, r8)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2110      	movs	r1, #16
 8003e4a:	438a      	bics	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f383 8810 	msr	PRIMASK, r3
}
 8003e58:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e6c:	46c0      	nop			; (mov r8, r8)
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b00e      	add	sp, #56	; 0x38
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	fffffedf 	.word	0xfffffedf

08003e78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	225a      	movs	r2, #90	; 0x5a
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2252      	movs	r2, #82	; 0x52
 8003e92:	2100      	movs	r1, #0
 8003e94:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7ff fa49 	bl	8003330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b004      	add	sp, #16
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b086      	sub	sp, #24
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eae:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	2301      	movs	r3, #1
 8003eba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f383 8810 	msr	PRIMASK, r3
}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2140      	movs	r1, #64	; 0x40
 8003ed0:	438a      	bics	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f383 8810 	msr	PRIMASK, r3
}
 8003ede:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f7ff fa16 	bl	8003320 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b006      	add	sp, #24
 8003efa:	bd80      	pop	{r7, pc}

08003efc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b090      	sub	sp, #64	; 0x40
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f04:	203e      	movs	r0, #62	; 0x3e
 8003f06:	183b      	adds	r3, r7, r0
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	215c      	movs	r1, #92	; 0x5c
 8003f0c:	5a52      	ldrh	r2, [r2, r1]
 8003f0e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f14:	2b22      	cmp	r3, #34	; 0x22
 8003f16:	d000      	beq.n	8003f1a <UART_RxISR_8BIT+0x1e>
 8003f18:	e095      	b.n	8004046 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f20:	213c      	movs	r1, #60	; 0x3c
 8003f22:	187b      	adds	r3, r7, r1
 8003f24:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f26:	187b      	adds	r3, r7, r1
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	183b      	adds	r3, r7, r0
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b2d9      	uxtb	r1, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f36:	400a      	ands	r2, r1
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	225a      	movs	r2, #90	; 0x5a
 8003f4a:	5a9b      	ldrh	r3, [r3, r2]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b299      	uxth	r1, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	225a      	movs	r2, #90	; 0x5a
 8003f56:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	225a      	movs	r2, #90	; 0x5a
 8003f5c:	5a9b      	ldrh	r3, [r3, r2]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d178      	bne.n	8004056 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f64:	f3ef 8310 	mrs	r3, PRIMASK
 8003f68:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f6a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f6e:	2301      	movs	r3, #1
 8003f70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f383 8810 	msr	PRIMASK, r3
}
 8003f78:	46c0      	nop			; (mov r8, r8)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4936      	ldr	r1, [pc, #216]	; (8004060 <UART_RxISR_8BIT+0x164>)
 8003f86:	400a      	ands	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	f383 8810 	msr	PRIMASK, r3
}
 8003f94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f96:	f3ef 8310 	mrs	r3, PRIMASK
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa6:	f383 8810 	msr	PRIMASK, r3
}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	438a      	bics	r2, r1
 8003fba:	609a      	str	r2, [r3, #8]
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc2:	f383 8810 	msr	PRIMASK, r3
}
 8003fc6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d12f      	bne.n	800403c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fe8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fea:	633b      	str	r3, [r7, #48]	; 0x30
 8003fec:	2301      	movs	r3, #1
 8003fee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f383 8810 	msr	PRIMASK, r3
}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2110      	movs	r1, #16
 8004004:	438a      	bics	r2, r1
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f383 8810 	msr	PRIMASK, r3
}
 8004012:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	2210      	movs	r2, #16
 800401c:	4013      	ands	r3, r2
 800401e:	2b10      	cmp	r3, #16
 8004020:	d103      	bne.n	800402a <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2210      	movs	r2, #16
 8004028:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2258      	movs	r2, #88	; 0x58
 800402e:	5a9a      	ldrh	r2, [r3, r2]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	0011      	movs	r1, r2
 8004034:	0018      	movs	r0, r3
 8004036:	f7ff f983 	bl	8003340 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800403a:	e00c      	b.n	8004056 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	0018      	movs	r0, r3
 8004040:	f7fc fee6 	bl	8000e10 <HAL_UART_RxCpltCallback>
}
 8004044:	e007      	b.n	8004056 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699a      	ldr	r2, [r3, #24]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2108      	movs	r1, #8
 8004052:	430a      	orrs	r2, r1
 8004054:	619a      	str	r2, [r3, #24]
}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	46bd      	mov	sp, r7
 800405a:	b010      	add	sp, #64	; 0x40
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	fffffedf 	.word	0xfffffedf

08004064 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b090      	sub	sp, #64	; 0x40
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800406c:	203e      	movs	r0, #62	; 0x3e
 800406e:	183b      	adds	r3, r7, r0
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	215c      	movs	r1, #92	; 0x5c
 8004074:	5a52      	ldrh	r2, [r2, r1]
 8004076:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800407c:	2b22      	cmp	r3, #34	; 0x22
 800407e:	d000      	beq.n	8004082 <UART_RxISR_16BIT+0x1e>
 8004080:	e095      	b.n	80041ae <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004088:	213c      	movs	r1, #60	; 0x3c
 800408a:	187b      	adds	r3, r7, r1
 800408c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004092:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004094:	187b      	adds	r3, r7, r1
 8004096:	183a      	adds	r2, r7, r0
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	8812      	ldrh	r2, [r2, #0]
 800409c:	4013      	ands	r3, r2
 800409e:	b29a      	uxth	r2, r3
 80040a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a8:	1c9a      	adds	r2, r3, #2
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	225a      	movs	r2, #90	; 0x5a
 80040b2:	5a9b      	ldrh	r3, [r3, r2]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b299      	uxth	r1, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	225a      	movs	r2, #90	; 0x5a
 80040be:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	225a      	movs	r2, #90	; 0x5a
 80040c4:	5a9b      	ldrh	r3, [r3, r2]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d178      	bne.n	80041be <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040cc:	f3ef 8310 	mrs	r3, PRIMASK
 80040d0:	617b      	str	r3, [r7, #20]
  return(result);
 80040d2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
 80040d6:	2301      	movs	r3, #1
 80040d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	f383 8810 	msr	PRIMASK, r3
}
 80040e0:	46c0      	nop			; (mov r8, r8)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4936      	ldr	r1, [pc, #216]	; (80041c8 <UART_RxISR_16BIT+0x164>)
 80040ee:	400a      	ands	r2, r1
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f383 8810 	msr	PRIMASK, r3
}
 80040fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004102:	623b      	str	r3, [r7, #32]
  return(result);
 8004104:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004106:	633b      	str	r3, [r7, #48]	; 0x30
 8004108:	2301      	movs	r3, #1
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	f383 8810 	msr	PRIMASK, r3
}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2101      	movs	r1, #1
 8004120:	438a      	bics	r2, r1
 8004122:	609a      	str	r2, [r3, #8]
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	f383 8810 	msr	PRIMASK, r3
}
 800412e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004140:	2b01      	cmp	r3, #1
 8004142:	d12f      	bne.n	80041a4 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800414a:	f3ef 8310 	mrs	r3, PRIMASK
 800414e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004150:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004154:	2301      	movs	r3, #1
 8004156:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f383 8810 	msr	PRIMASK, r3
}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2110      	movs	r1, #16
 800416c:	438a      	bics	r2, r1
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004172:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f383 8810 	msr	PRIMASK, r3
}
 800417a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	2210      	movs	r2, #16
 8004184:	4013      	ands	r3, r2
 8004186:	2b10      	cmp	r3, #16
 8004188:	d103      	bne.n	8004192 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2210      	movs	r2, #16
 8004190:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2258      	movs	r2, #88	; 0x58
 8004196:	5a9a      	ldrh	r2, [r3, r2]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	0011      	movs	r1, r2
 800419c:	0018      	movs	r0, r3
 800419e:	f7ff f8cf 	bl	8003340 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041a2:	e00c      	b.n	80041be <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	0018      	movs	r0, r3
 80041a8:	f7fc fe32 	bl	8000e10 <HAL_UART_RxCpltCallback>
}
 80041ac:	e007      	b.n	80041be <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699a      	ldr	r2, [r3, #24]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2108      	movs	r1, #8
 80041ba:	430a      	orrs	r2, r1
 80041bc:	619a      	str	r2, [r3, #24]
}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b010      	add	sp, #64	; 0x40
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	fffffedf 	.word	0xfffffedf

080041cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b002      	add	sp, #8
 80041da:	bd80      	pop	{r7, pc}

080041dc <__errno>:
 80041dc:	4b01      	ldr	r3, [pc, #4]	; (80041e4 <__errno+0x8>)
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	4770      	bx	lr
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	200001c0 	.word	0x200001c0

080041e8 <__libc_init_array>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	2600      	movs	r6, #0
 80041ec:	4d0c      	ldr	r5, [pc, #48]	; (8004220 <__libc_init_array+0x38>)
 80041ee:	4c0d      	ldr	r4, [pc, #52]	; (8004224 <__libc_init_array+0x3c>)
 80041f0:	1b64      	subs	r4, r4, r5
 80041f2:	10a4      	asrs	r4, r4, #2
 80041f4:	42a6      	cmp	r6, r4
 80041f6:	d109      	bne.n	800420c <__libc_init_array+0x24>
 80041f8:	2600      	movs	r6, #0
 80041fa:	f000 fc47 	bl	8004a8c <_init>
 80041fe:	4d0a      	ldr	r5, [pc, #40]	; (8004228 <__libc_init_array+0x40>)
 8004200:	4c0a      	ldr	r4, [pc, #40]	; (800422c <__libc_init_array+0x44>)
 8004202:	1b64      	subs	r4, r4, r5
 8004204:	10a4      	asrs	r4, r4, #2
 8004206:	42a6      	cmp	r6, r4
 8004208:	d105      	bne.n	8004216 <__libc_init_array+0x2e>
 800420a:	bd70      	pop	{r4, r5, r6, pc}
 800420c:	00b3      	lsls	r3, r6, #2
 800420e:	58eb      	ldr	r3, [r5, r3]
 8004210:	4798      	blx	r3
 8004212:	3601      	adds	r6, #1
 8004214:	e7ee      	b.n	80041f4 <__libc_init_array+0xc>
 8004216:	00b3      	lsls	r3, r6, #2
 8004218:	58eb      	ldr	r3, [r5, r3]
 800421a:	4798      	blx	r3
 800421c:	3601      	adds	r6, #1
 800421e:	e7f2      	b.n	8004206 <__libc_init_array+0x1e>
 8004220:	08004ba4 	.word	0x08004ba4
 8004224:	08004ba4 	.word	0x08004ba4
 8004228:	08004ba4 	.word	0x08004ba4
 800422c:	08004ba8 	.word	0x08004ba8

08004230 <memcpy>:
 8004230:	2300      	movs	r3, #0
 8004232:	b510      	push	{r4, lr}
 8004234:	429a      	cmp	r2, r3
 8004236:	d100      	bne.n	800423a <memcpy+0xa>
 8004238:	bd10      	pop	{r4, pc}
 800423a:	5ccc      	ldrb	r4, [r1, r3]
 800423c:	54c4      	strb	r4, [r0, r3]
 800423e:	3301      	adds	r3, #1
 8004240:	e7f8      	b.n	8004234 <memcpy+0x4>

08004242 <memset>:
 8004242:	0003      	movs	r3, r0
 8004244:	1882      	adds	r2, r0, r2
 8004246:	4293      	cmp	r3, r2
 8004248:	d100      	bne.n	800424c <memset+0xa>
 800424a:	4770      	bx	lr
 800424c:	7019      	strb	r1, [r3, #0]
 800424e:	3301      	adds	r3, #1
 8004250:	e7f9      	b.n	8004246 <memset+0x4>
	...

08004254 <siprintf>:
 8004254:	b40e      	push	{r1, r2, r3}
 8004256:	b500      	push	{lr}
 8004258:	490b      	ldr	r1, [pc, #44]	; (8004288 <siprintf+0x34>)
 800425a:	b09c      	sub	sp, #112	; 0x70
 800425c:	ab1d      	add	r3, sp, #116	; 0x74
 800425e:	9002      	str	r0, [sp, #8]
 8004260:	9006      	str	r0, [sp, #24]
 8004262:	9107      	str	r1, [sp, #28]
 8004264:	9104      	str	r1, [sp, #16]
 8004266:	4809      	ldr	r0, [pc, #36]	; (800428c <siprintf+0x38>)
 8004268:	4909      	ldr	r1, [pc, #36]	; (8004290 <siprintf+0x3c>)
 800426a:	cb04      	ldmia	r3!, {r2}
 800426c:	9105      	str	r1, [sp, #20]
 800426e:	6800      	ldr	r0, [r0, #0]
 8004270:	a902      	add	r1, sp, #8
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	f000 f870 	bl	8004358 <_svfiprintf_r>
 8004278:	2300      	movs	r3, #0
 800427a:	9a02      	ldr	r2, [sp, #8]
 800427c:	7013      	strb	r3, [r2, #0]
 800427e:	b01c      	add	sp, #112	; 0x70
 8004280:	bc08      	pop	{r3}
 8004282:	b003      	add	sp, #12
 8004284:	4718      	bx	r3
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	7fffffff 	.word	0x7fffffff
 800428c:	200001c0 	.word	0x200001c0
 8004290:	ffff0208 	.word	0xffff0208

08004294 <__ssputs_r>:
 8004294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004296:	688e      	ldr	r6, [r1, #8]
 8004298:	b085      	sub	sp, #20
 800429a:	0007      	movs	r7, r0
 800429c:	000c      	movs	r4, r1
 800429e:	9203      	str	r2, [sp, #12]
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	429e      	cmp	r6, r3
 80042a4:	d83c      	bhi.n	8004320 <__ssputs_r+0x8c>
 80042a6:	2390      	movs	r3, #144	; 0x90
 80042a8:	898a      	ldrh	r2, [r1, #12]
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	421a      	tst	r2, r3
 80042ae:	d034      	beq.n	800431a <__ssputs_r+0x86>
 80042b0:	2503      	movs	r5, #3
 80042b2:	6909      	ldr	r1, [r1, #16]
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	1a5b      	subs	r3, r3, r1
 80042b8:	9302      	str	r3, [sp, #8]
 80042ba:	6963      	ldr	r3, [r4, #20]
 80042bc:	9802      	ldr	r0, [sp, #8]
 80042be:	435d      	muls	r5, r3
 80042c0:	0feb      	lsrs	r3, r5, #31
 80042c2:	195d      	adds	r5, r3, r5
 80042c4:	9b01      	ldr	r3, [sp, #4]
 80042c6:	106d      	asrs	r5, r5, #1
 80042c8:	3301      	adds	r3, #1
 80042ca:	181b      	adds	r3, r3, r0
 80042cc:	42ab      	cmp	r3, r5
 80042ce:	d900      	bls.n	80042d2 <__ssputs_r+0x3e>
 80042d0:	001d      	movs	r5, r3
 80042d2:	0553      	lsls	r3, r2, #21
 80042d4:	d532      	bpl.n	800433c <__ssputs_r+0xa8>
 80042d6:	0029      	movs	r1, r5
 80042d8:	0038      	movs	r0, r7
 80042da:	f000 fb27 	bl	800492c <_malloc_r>
 80042de:	1e06      	subs	r6, r0, #0
 80042e0:	d109      	bne.n	80042f6 <__ssputs_r+0x62>
 80042e2:	230c      	movs	r3, #12
 80042e4:	603b      	str	r3, [r7, #0]
 80042e6:	2340      	movs	r3, #64	; 0x40
 80042e8:	2001      	movs	r0, #1
 80042ea:	89a2      	ldrh	r2, [r4, #12]
 80042ec:	4240      	negs	r0, r0
 80042ee:	4313      	orrs	r3, r2
 80042f0:	81a3      	strh	r3, [r4, #12]
 80042f2:	b005      	add	sp, #20
 80042f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f6:	9a02      	ldr	r2, [sp, #8]
 80042f8:	6921      	ldr	r1, [r4, #16]
 80042fa:	f7ff ff99 	bl	8004230 <memcpy>
 80042fe:	89a3      	ldrh	r3, [r4, #12]
 8004300:	4a14      	ldr	r2, [pc, #80]	; (8004354 <__ssputs_r+0xc0>)
 8004302:	401a      	ands	r2, r3
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	4313      	orrs	r3, r2
 8004308:	81a3      	strh	r3, [r4, #12]
 800430a:	9b02      	ldr	r3, [sp, #8]
 800430c:	6126      	str	r6, [r4, #16]
 800430e:	18f6      	adds	r6, r6, r3
 8004310:	6026      	str	r6, [r4, #0]
 8004312:	6165      	str	r5, [r4, #20]
 8004314:	9e01      	ldr	r6, [sp, #4]
 8004316:	1aed      	subs	r5, r5, r3
 8004318:	60a5      	str	r5, [r4, #8]
 800431a:	9b01      	ldr	r3, [sp, #4]
 800431c:	429e      	cmp	r6, r3
 800431e:	d900      	bls.n	8004322 <__ssputs_r+0x8e>
 8004320:	9e01      	ldr	r6, [sp, #4]
 8004322:	0032      	movs	r2, r6
 8004324:	9903      	ldr	r1, [sp, #12]
 8004326:	6820      	ldr	r0, [r4, #0]
 8004328:	f000 faa3 	bl	8004872 <memmove>
 800432c:	68a3      	ldr	r3, [r4, #8]
 800432e:	2000      	movs	r0, #0
 8004330:	1b9b      	subs	r3, r3, r6
 8004332:	60a3      	str	r3, [r4, #8]
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	199e      	adds	r6, r3, r6
 8004338:	6026      	str	r6, [r4, #0]
 800433a:	e7da      	b.n	80042f2 <__ssputs_r+0x5e>
 800433c:	002a      	movs	r2, r5
 800433e:	0038      	movs	r0, r7
 8004340:	f000 fb52 	bl	80049e8 <_realloc_r>
 8004344:	1e06      	subs	r6, r0, #0
 8004346:	d1e0      	bne.n	800430a <__ssputs_r+0x76>
 8004348:	0038      	movs	r0, r7
 800434a:	6921      	ldr	r1, [r4, #16]
 800434c:	f000 faa4 	bl	8004898 <_free_r>
 8004350:	e7c7      	b.n	80042e2 <__ssputs_r+0x4e>
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	fffffb7f 	.word	0xfffffb7f

08004358 <_svfiprintf_r>:
 8004358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800435a:	b0a1      	sub	sp, #132	; 0x84
 800435c:	9003      	str	r0, [sp, #12]
 800435e:	001d      	movs	r5, r3
 8004360:	898b      	ldrh	r3, [r1, #12]
 8004362:	000f      	movs	r7, r1
 8004364:	0016      	movs	r6, r2
 8004366:	061b      	lsls	r3, r3, #24
 8004368:	d511      	bpl.n	800438e <_svfiprintf_r+0x36>
 800436a:	690b      	ldr	r3, [r1, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10e      	bne.n	800438e <_svfiprintf_r+0x36>
 8004370:	2140      	movs	r1, #64	; 0x40
 8004372:	f000 fadb 	bl	800492c <_malloc_r>
 8004376:	6038      	str	r0, [r7, #0]
 8004378:	6138      	str	r0, [r7, #16]
 800437a:	2800      	cmp	r0, #0
 800437c:	d105      	bne.n	800438a <_svfiprintf_r+0x32>
 800437e:	230c      	movs	r3, #12
 8004380:	9a03      	ldr	r2, [sp, #12]
 8004382:	3801      	subs	r0, #1
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	b021      	add	sp, #132	; 0x84
 8004388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800438a:	2340      	movs	r3, #64	; 0x40
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	2300      	movs	r3, #0
 8004390:	ac08      	add	r4, sp, #32
 8004392:	6163      	str	r3, [r4, #20]
 8004394:	3320      	adds	r3, #32
 8004396:	7663      	strb	r3, [r4, #25]
 8004398:	3310      	adds	r3, #16
 800439a:	76a3      	strb	r3, [r4, #26]
 800439c:	9507      	str	r5, [sp, #28]
 800439e:	0035      	movs	r5, r6
 80043a0:	782b      	ldrb	r3, [r5, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <_svfiprintf_r+0x52>
 80043a6:	2b25      	cmp	r3, #37	; 0x25
 80043a8:	d147      	bne.n	800443a <_svfiprintf_r+0xe2>
 80043aa:	1bab      	subs	r3, r5, r6
 80043ac:	9305      	str	r3, [sp, #20]
 80043ae:	42b5      	cmp	r5, r6
 80043b0:	d00c      	beq.n	80043cc <_svfiprintf_r+0x74>
 80043b2:	0032      	movs	r2, r6
 80043b4:	0039      	movs	r1, r7
 80043b6:	9803      	ldr	r0, [sp, #12]
 80043b8:	f7ff ff6c 	bl	8004294 <__ssputs_r>
 80043bc:	1c43      	adds	r3, r0, #1
 80043be:	d100      	bne.n	80043c2 <_svfiprintf_r+0x6a>
 80043c0:	e0ae      	b.n	8004520 <_svfiprintf_r+0x1c8>
 80043c2:	6962      	ldr	r2, [r4, #20]
 80043c4:	9b05      	ldr	r3, [sp, #20]
 80043c6:	4694      	mov	ip, r2
 80043c8:	4463      	add	r3, ip
 80043ca:	6163      	str	r3, [r4, #20]
 80043cc:	782b      	ldrb	r3, [r5, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d100      	bne.n	80043d4 <_svfiprintf_r+0x7c>
 80043d2:	e0a5      	b.n	8004520 <_svfiprintf_r+0x1c8>
 80043d4:	2201      	movs	r2, #1
 80043d6:	2300      	movs	r3, #0
 80043d8:	4252      	negs	r2, r2
 80043da:	6062      	str	r2, [r4, #4]
 80043dc:	a904      	add	r1, sp, #16
 80043de:	3254      	adds	r2, #84	; 0x54
 80043e0:	1852      	adds	r2, r2, r1
 80043e2:	1c6e      	adds	r6, r5, #1
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	60e3      	str	r3, [r4, #12]
 80043e8:	60a3      	str	r3, [r4, #8]
 80043ea:	7013      	strb	r3, [r2, #0]
 80043ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80043ee:	2205      	movs	r2, #5
 80043f0:	7831      	ldrb	r1, [r6, #0]
 80043f2:	4854      	ldr	r0, [pc, #336]	; (8004544 <_svfiprintf_r+0x1ec>)
 80043f4:	f000 fa32 	bl	800485c <memchr>
 80043f8:	1c75      	adds	r5, r6, #1
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d11f      	bne.n	800443e <_svfiprintf_r+0xe6>
 80043fe:	6822      	ldr	r2, [r4, #0]
 8004400:	06d3      	lsls	r3, r2, #27
 8004402:	d504      	bpl.n	800440e <_svfiprintf_r+0xb6>
 8004404:	2353      	movs	r3, #83	; 0x53
 8004406:	a904      	add	r1, sp, #16
 8004408:	185b      	adds	r3, r3, r1
 800440a:	2120      	movs	r1, #32
 800440c:	7019      	strb	r1, [r3, #0]
 800440e:	0713      	lsls	r3, r2, #28
 8004410:	d504      	bpl.n	800441c <_svfiprintf_r+0xc4>
 8004412:	2353      	movs	r3, #83	; 0x53
 8004414:	a904      	add	r1, sp, #16
 8004416:	185b      	adds	r3, r3, r1
 8004418:	212b      	movs	r1, #43	; 0x2b
 800441a:	7019      	strb	r1, [r3, #0]
 800441c:	7833      	ldrb	r3, [r6, #0]
 800441e:	2b2a      	cmp	r3, #42	; 0x2a
 8004420:	d016      	beq.n	8004450 <_svfiprintf_r+0xf8>
 8004422:	0035      	movs	r5, r6
 8004424:	2100      	movs	r1, #0
 8004426:	200a      	movs	r0, #10
 8004428:	68e3      	ldr	r3, [r4, #12]
 800442a:	782a      	ldrb	r2, [r5, #0]
 800442c:	1c6e      	adds	r6, r5, #1
 800442e:	3a30      	subs	r2, #48	; 0x30
 8004430:	2a09      	cmp	r2, #9
 8004432:	d94e      	bls.n	80044d2 <_svfiprintf_r+0x17a>
 8004434:	2900      	cmp	r1, #0
 8004436:	d111      	bne.n	800445c <_svfiprintf_r+0x104>
 8004438:	e017      	b.n	800446a <_svfiprintf_r+0x112>
 800443a:	3501      	adds	r5, #1
 800443c:	e7b0      	b.n	80043a0 <_svfiprintf_r+0x48>
 800443e:	4b41      	ldr	r3, [pc, #260]	; (8004544 <_svfiprintf_r+0x1ec>)
 8004440:	6822      	ldr	r2, [r4, #0]
 8004442:	1ac0      	subs	r0, r0, r3
 8004444:	2301      	movs	r3, #1
 8004446:	4083      	lsls	r3, r0
 8004448:	4313      	orrs	r3, r2
 800444a:	002e      	movs	r6, r5
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	e7ce      	b.n	80043ee <_svfiprintf_r+0x96>
 8004450:	9b07      	ldr	r3, [sp, #28]
 8004452:	1d19      	adds	r1, r3, #4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	9107      	str	r1, [sp, #28]
 8004458:	2b00      	cmp	r3, #0
 800445a:	db01      	blt.n	8004460 <_svfiprintf_r+0x108>
 800445c:	930b      	str	r3, [sp, #44]	; 0x2c
 800445e:	e004      	b.n	800446a <_svfiprintf_r+0x112>
 8004460:	425b      	negs	r3, r3
 8004462:	60e3      	str	r3, [r4, #12]
 8004464:	2302      	movs	r3, #2
 8004466:	4313      	orrs	r3, r2
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	782b      	ldrb	r3, [r5, #0]
 800446c:	2b2e      	cmp	r3, #46	; 0x2e
 800446e:	d10a      	bne.n	8004486 <_svfiprintf_r+0x12e>
 8004470:	786b      	ldrb	r3, [r5, #1]
 8004472:	2b2a      	cmp	r3, #42	; 0x2a
 8004474:	d135      	bne.n	80044e2 <_svfiprintf_r+0x18a>
 8004476:	9b07      	ldr	r3, [sp, #28]
 8004478:	3502      	adds	r5, #2
 800447a:	1d1a      	adds	r2, r3, #4
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	9207      	str	r2, [sp, #28]
 8004480:	2b00      	cmp	r3, #0
 8004482:	db2b      	blt.n	80044dc <_svfiprintf_r+0x184>
 8004484:	9309      	str	r3, [sp, #36]	; 0x24
 8004486:	4e30      	ldr	r6, [pc, #192]	; (8004548 <_svfiprintf_r+0x1f0>)
 8004488:	2203      	movs	r2, #3
 800448a:	0030      	movs	r0, r6
 800448c:	7829      	ldrb	r1, [r5, #0]
 800448e:	f000 f9e5 	bl	800485c <memchr>
 8004492:	2800      	cmp	r0, #0
 8004494:	d006      	beq.n	80044a4 <_svfiprintf_r+0x14c>
 8004496:	2340      	movs	r3, #64	; 0x40
 8004498:	1b80      	subs	r0, r0, r6
 800449a:	4083      	lsls	r3, r0
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	3501      	adds	r5, #1
 80044a0:	4313      	orrs	r3, r2
 80044a2:	6023      	str	r3, [r4, #0]
 80044a4:	7829      	ldrb	r1, [r5, #0]
 80044a6:	2206      	movs	r2, #6
 80044a8:	4828      	ldr	r0, [pc, #160]	; (800454c <_svfiprintf_r+0x1f4>)
 80044aa:	1c6e      	adds	r6, r5, #1
 80044ac:	7621      	strb	r1, [r4, #24]
 80044ae:	f000 f9d5 	bl	800485c <memchr>
 80044b2:	2800      	cmp	r0, #0
 80044b4:	d03c      	beq.n	8004530 <_svfiprintf_r+0x1d8>
 80044b6:	4b26      	ldr	r3, [pc, #152]	; (8004550 <_svfiprintf_r+0x1f8>)
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d125      	bne.n	8004508 <_svfiprintf_r+0x1b0>
 80044bc:	2207      	movs	r2, #7
 80044be:	9b07      	ldr	r3, [sp, #28]
 80044c0:	3307      	adds	r3, #7
 80044c2:	4393      	bics	r3, r2
 80044c4:	3308      	adds	r3, #8
 80044c6:	9307      	str	r3, [sp, #28]
 80044c8:	6963      	ldr	r3, [r4, #20]
 80044ca:	9a04      	ldr	r2, [sp, #16]
 80044cc:	189b      	adds	r3, r3, r2
 80044ce:	6163      	str	r3, [r4, #20]
 80044d0:	e765      	b.n	800439e <_svfiprintf_r+0x46>
 80044d2:	4343      	muls	r3, r0
 80044d4:	0035      	movs	r5, r6
 80044d6:	2101      	movs	r1, #1
 80044d8:	189b      	adds	r3, r3, r2
 80044da:	e7a6      	b.n	800442a <_svfiprintf_r+0xd2>
 80044dc:	2301      	movs	r3, #1
 80044de:	425b      	negs	r3, r3
 80044e0:	e7d0      	b.n	8004484 <_svfiprintf_r+0x12c>
 80044e2:	2300      	movs	r3, #0
 80044e4:	200a      	movs	r0, #10
 80044e6:	001a      	movs	r2, r3
 80044e8:	3501      	adds	r5, #1
 80044ea:	6063      	str	r3, [r4, #4]
 80044ec:	7829      	ldrb	r1, [r5, #0]
 80044ee:	1c6e      	adds	r6, r5, #1
 80044f0:	3930      	subs	r1, #48	; 0x30
 80044f2:	2909      	cmp	r1, #9
 80044f4:	d903      	bls.n	80044fe <_svfiprintf_r+0x1a6>
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0c5      	beq.n	8004486 <_svfiprintf_r+0x12e>
 80044fa:	9209      	str	r2, [sp, #36]	; 0x24
 80044fc:	e7c3      	b.n	8004486 <_svfiprintf_r+0x12e>
 80044fe:	4342      	muls	r2, r0
 8004500:	0035      	movs	r5, r6
 8004502:	2301      	movs	r3, #1
 8004504:	1852      	adds	r2, r2, r1
 8004506:	e7f1      	b.n	80044ec <_svfiprintf_r+0x194>
 8004508:	ab07      	add	r3, sp, #28
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	003a      	movs	r2, r7
 800450e:	0021      	movs	r1, r4
 8004510:	4b10      	ldr	r3, [pc, #64]	; (8004554 <_svfiprintf_r+0x1fc>)
 8004512:	9803      	ldr	r0, [sp, #12]
 8004514:	e000      	b.n	8004518 <_svfiprintf_r+0x1c0>
 8004516:	bf00      	nop
 8004518:	9004      	str	r0, [sp, #16]
 800451a:	9b04      	ldr	r3, [sp, #16]
 800451c:	3301      	adds	r3, #1
 800451e:	d1d3      	bne.n	80044c8 <_svfiprintf_r+0x170>
 8004520:	89bb      	ldrh	r3, [r7, #12]
 8004522:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004524:	065b      	lsls	r3, r3, #25
 8004526:	d400      	bmi.n	800452a <_svfiprintf_r+0x1d2>
 8004528:	e72d      	b.n	8004386 <_svfiprintf_r+0x2e>
 800452a:	2001      	movs	r0, #1
 800452c:	4240      	negs	r0, r0
 800452e:	e72a      	b.n	8004386 <_svfiprintf_r+0x2e>
 8004530:	ab07      	add	r3, sp, #28
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	003a      	movs	r2, r7
 8004536:	0021      	movs	r1, r4
 8004538:	4b06      	ldr	r3, [pc, #24]	; (8004554 <_svfiprintf_r+0x1fc>)
 800453a:	9803      	ldr	r0, [sp, #12]
 800453c:	f000 f87c 	bl	8004638 <_printf_i>
 8004540:	e7ea      	b.n	8004518 <_svfiprintf_r+0x1c0>
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	08004b68 	.word	0x08004b68
 8004548:	08004b6e 	.word	0x08004b6e
 800454c:	08004b72 	.word	0x08004b72
 8004550:	00000000 	.word	0x00000000
 8004554:	08004295 	.word	0x08004295

08004558 <_printf_common>:
 8004558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800455a:	0015      	movs	r5, r2
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	688a      	ldr	r2, [r1, #8]
 8004560:	690b      	ldr	r3, [r1, #16]
 8004562:	000c      	movs	r4, r1
 8004564:	9000      	str	r0, [sp, #0]
 8004566:	4293      	cmp	r3, r2
 8004568:	da00      	bge.n	800456c <_printf_common+0x14>
 800456a:	0013      	movs	r3, r2
 800456c:	0022      	movs	r2, r4
 800456e:	602b      	str	r3, [r5, #0]
 8004570:	3243      	adds	r2, #67	; 0x43
 8004572:	7812      	ldrb	r2, [r2, #0]
 8004574:	2a00      	cmp	r2, #0
 8004576:	d001      	beq.n	800457c <_printf_common+0x24>
 8004578:	3301      	adds	r3, #1
 800457a:	602b      	str	r3, [r5, #0]
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	069b      	lsls	r3, r3, #26
 8004580:	d502      	bpl.n	8004588 <_printf_common+0x30>
 8004582:	682b      	ldr	r3, [r5, #0]
 8004584:	3302      	adds	r3, #2
 8004586:	602b      	str	r3, [r5, #0]
 8004588:	6822      	ldr	r2, [r4, #0]
 800458a:	2306      	movs	r3, #6
 800458c:	0017      	movs	r7, r2
 800458e:	401f      	ands	r7, r3
 8004590:	421a      	tst	r2, r3
 8004592:	d027      	beq.n	80045e4 <_printf_common+0x8c>
 8004594:	0023      	movs	r3, r4
 8004596:	3343      	adds	r3, #67	; 0x43
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	1e5a      	subs	r2, r3, #1
 800459c:	4193      	sbcs	r3, r2
 800459e:	6822      	ldr	r2, [r4, #0]
 80045a0:	0692      	lsls	r2, r2, #26
 80045a2:	d430      	bmi.n	8004606 <_printf_common+0xae>
 80045a4:	0022      	movs	r2, r4
 80045a6:	9901      	ldr	r1, [sp, #4]
 80045a8:	9800      	ldr	r0, [sp, #0]
 80045aa:	9e08      	ldr	r6, [sp, #32]
 80045ac:	3243      	adds	r2, #67	; 0x43
 80045ae:	47b0      	blx	r6
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	d025      	beq.n	8004600 <_printf_common+0xa8>
 80045b4:	2306      	movs	r3, #6
 80045b6:	6820      	ldr	r0, [r4, #0]
 80045b8:	682a      	ldr	r2, [r5, #0]
 80045ba:	68e1      	ldr	r1, [r4, #12]
 80045bc:	2500      	movs	r5, #0
 80045be:	4003      	ands	r3, r0
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d103      	bne.n	80045cc <_printf_common+0x74>
 80045c4:	1a8d      	subs	r5, r1, r2
 80045c6:	43eb      	mvns	r3, r5
 80045c8:	17db      	asrs	r3, r3, #31
 80045ca:	401d      	ands	r5, r3
 80045cc:	68a3      	ldr	r3, [r4, #8]
 80045ce:	6922      	ldr	r2, [r4, #16]
 80045d0:	4293      	cmp	r3, r2
 80045d2:	dd01      	ble.n	80045d8 <_printf_common+0x80>
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	18ed      	adds	r5, r5, r3
 80045d8:	2700      	movs	r7, #0
 80045da:	42bd      	cmp	r5, r7
 80045dc:	d120      	bne.n	8004620 <_printf_common+0xc8>
 80045de:	2000      	movs	r0, #0
 80045e0:	e010      	b.n	8004604 <_printf_common+0xac>
 80045e2:	3701      	adds	r7, #1
 80045e4:	68e3      	ldr	r3, [r4, #12]
 80045e6:	682a      	ldr	r2, [r5, #0]
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	42bb      	cmp	r3, r7
 80045ec:	ddd2      	ble.n	8004594 <_printf_common+0x3c>
 80045ee:	0022      	movs	r2, r4
 80045f0:	2301      	movs	r3, #1
 80045f2:	9901      	ldr	r1, [sp, #4]
 80045f4:	9800      	ldr	r0, [sp, #0]
 80045f6:	9e08      	ldr	r6, [sp, #32]
 80045f8:	3219      	adds	r2, #25
 80045fa:	47b0      	blx	r6
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d1f0      	bne.n	80045e2 <_printf_common+0x8a>
 8004600:	2001      	movs	r0, #1
 8004602:	4240      	negs	r0, r0
 8004604:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004606:	2030      	movs	r0, #48	; 0x30
 8004608:	18e1      	adds	r1, r4, r3
 800460a:	3143      	adds	r1, #67	; 0x43
 800460c:	7008      	strb	r0, [r1, #0]
 800460e:	0021      	movs	r1, r4
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	3145      	adds	r1, #69	; 0x45
 8004614:	7809      	ldrb	r1, [r1, #0]
 8004616:	18a2      	adds	r2, r4, r2
 8004618:	3243      	adds	r2, #67	; 0x43
 800461a:	3302      	adds	r3, #2
 800461c:	7011      	strb	r1, [r2, #0]
 800461e:	e7c1      	b.n	80045a4 <_printf_common+0x4c>
 8004620:	0022      	movs	r2, r4
 8004622:	2301      	movs	r3, #1
 8004624:	9901      	ldr	r1, [sp, #4]
 8004626:	9800      	ldr	r0, [sp, #0]
 8004628:	9e08      	ldr	r6, [sp, #32]
 800462a:	321a      	adds	r2, #26
 800462c:	47b0      	blx	r6
 800462e:	1c43      	adds	r3, r0, #1
 8004630:	d0e6      	beq.n	8004600 <_printf_common+0xa8>
 8004632:	3701      	adds	r7, #1
 8004634:	e7d1      	b.n	80045da <_printf_common+0x82>
	...

08004638 <_printf_i>:
 8004638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800463a:	b08b      	sub	sp, #44	; 0x2c
 800463c:	9206      	str	r2, [sp, #24]
 800463e:	000a      	movs	r2, r1
 8004640:	3243      	adds	r2, #67	; 0x43
 8004642:	9307      	str	r3, [sp, #28]
 8004644:	9005      	str	r0, [sp, #20]
 8004646:	9204      	str	r2, [sp, #16]
 8004648:	7e0a      	ldrb	r2, [r1, #24]
 800464a:	000c      	movs	r4, r1
 800464c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800464e:	2a78      	cmp	r2, #120	; 0x78
 8004650:	d806      	bhi.n	8004660 <_printf_i+0x28>
 8004652:	2a62      	cmp	r2, #98	; 0x62
 8004654:	d808      	bhi.n	8004668 <_printf_i+0x30>
 8004656:	2a00      	cmp	r2, #0
 8004658:	d100      	bne.n	800465c <_printf_i+0x24>
 800465a:	e0c0      	b.n	80047de <_printf_i+0x1a6>
 800465c:	2a58      	cmp	r2, #88	; 0x58
 800465e:	d052      	beq.n	8004706 <_printf_i+0xce>
 8004660:	0026      	movs	r6, r4
 8004662:	3642      	adds	r6, #66	; 0x42
 8004664:	7032      	strb	r2, [r6, #0]
 8004666:	e022      	b.n	80046ae <_printf_i+0x76>
 8004668:	0010      	movs	r0, r2
 800466a:	3863      	subs	r0, #99	; 0x63
 800466c:	2815      	cmp	r0, #21
 800466e:	d8f7      	bhi.n	8004660 <_printf_i+0x28>
 8004670:	f7fb fd52 	bl	8000118 <__gnu_thumb1_case_shi>
 8004674:	001f0016 	.word	0x001f0016
 8004678:	fff6fff6 	.word	0xfff6fff6
 800467c:	fff6fff6 	.word	0xfff6fff6
 8004680:	fff6001f 	.word	0xfff6001f
 8004684:	fff6fff6 	.word	0xfff6fff6
 8004688:	00a8fff6 	.word	0x00a8fff6
 800468c:	009a0036 	.word	0x009a0036
 8004690:	fff6fff6 	.word	0xfff6fff6
 8004694:	fff600b9 	.word	0xfff600b9
 8004698:	fff60036 	.word	0xfff60036
 800469c:	009efff6 	.word	0x009efff6
 80046a0:	0026      	movs	r6, r4
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	3642      	adds	r6, #66	; 0x42
 80046a6:	1d11      	adds	r1, r2, #4
 80046a8:	6019      	str	r1, [r3, #0]
 80046aa:	6813      	ldr	r3, [r2, #0]
 80046ac:	7033      	strb	r3, [r6, #0]
 80046ae:	2301      	movs	r3, #1
 80046b0:	e0a7      	b.n	8004802 <_printf_i+0x1ca>
 80046b2:	6808      	ldr	r0, [r1, #0]
 80046b4:	6819      	ldr	r1, [r3, #0]
 80046b6:	1d0a      	adds	r2, r1, #4
 80046b8:	0605      	lsls	r5, r0, #24
 80046ba:	d50b      	bpl.n	80046d4 <_printf_i+0x9c>
 80046bc:	680d      	ldr	r5, [r1, #0]
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	2d00      	cmp	r5, #0
 80046c2:	da03      	bge.n	80046cc <_printf_i+0x94>
 80046c4:	232d      	movs	r3, #45	; 0x2d
 80046c6:	9a04      	ldr	r2, [sp, #16]
 80046c8:	426d      	negs	r5, r5
 80046ca:	7013      	strb	r3, [r2, #0]
 80046cc:	4b61      	ldr	r3, [pc, #388]	; (8004854 <_printf_i+0x21c>)
 80046ce:	270a      	movs	r7, #10
 80046d0:	9303      	str	r3, [sp, #12]
 80046d2:	e032      	b.n	800473a <_printf_i+0x102>
 80046d4:	680d      	ldr	r5, [r1, #0]
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	0641      	lsls	r1, r0, #25
 80046da:	d5f1      	bpl.n	80046c0 <_printf_i+0x88>
 80046dc:	b22d      	sxth	r5, r5
 80046de:	e7ef      	b.n	80046c0 <_printf_i+0x88>
 80046e0:	680d      	ldr	r5, [r1, #0]
 80046e2:	6819      	ldr	r1, [r3, #0]
 80046e4:	1d08      	adds	r0, r1, #4
 80046e6:	6018      	str	r0, [r3, #0]
 80046e8:	062e      	lsls	r6, r5, #24
 80046ea:	d501      	bpl.n	80046f0 <_printf_i+0xb8>
 80046ec:	680d      	ldr	r5, [r1, #0]
 80046ee:	e003      	b.n	80046f8 <_printf_i+0xc0>
 80046f0:	066d      	lsls	r5, r5, #25
 80046f2:	d5fb      	bpl.n	80046ec <_printf_i+0xb4>
 80046f4:	680d      	ldr	r5, [r1, #0]
 80046f6:	b2ad      	uxth	r5, r5
 80046f8:	4b56      	ldr	r3, [pc, #344]	; (8004854 <_printf_i+0x21c>)
 80046fa:	270a      	movs	r7, #10
 80046fc:	9303      	str	r3, [sp, #12]
 80046fe:	2a6f      	cmp	r2, #111	; 0x6f
 8004700:	d117      	bne.n	8004732 <_printf_i+0xfa>
 8004702:	2708      	movs	r7, #8
 8004704:	e015      	b.n	8004732 <_printf_i+0xfa>
 8004706:	3145      	adds	r1, #69	; 0x45
 8004708:	700a      	strb	r2, [r1, #0]
 800470a:	4a52      	ldr	r2, [pc, #328]	; (8004854 <_printf_i+0x21c>)
 800470c:	9203      	str	r2, [sp, #12]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	6821      	ldr	r1, [r4, #0]
 8004712:	ca20      	ldmia	r2!, {r5}
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	0608      	lsls	r0, r1, #24
 8004718:	d550      	bpl.n	80047bc <_printf_i+0x184>
 800471a:	07cb      	lsls	r3, r1, #31
 800471c:	d502      	bpl.n	8004724 <_printf_i+0xec>
 800471e:	2320      	movs	r3, #32
 8004720:	4319      	orrs	r1, r3
 8004722:	6021      	str	r1, [r4, #0]
 8004724:	2710      	movs	r7, #16
 8004726:	2d00      	cmp	r5, #0
 8004728:	d103      	bne.n	8004732 <_printf_i+0xfa>
 800472a:	2320      	movs	r3, #32
 800472c:	6822      	ldr	r2, [r4, #0]
 800472e:	439a      	bics	r2, r3
 8004730:	6022      	str	r2, [r4, #0]
 8004732:	0023      	movs	r3, r4
 8004734:	2200      	movs	r2, #0
 8004736:	3343      	adds	r3, #67	; 0x43
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	6863      	ldr	r3, [r4, #4]
 800473c:	60a3      	str	r3, [r4, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	db03      	blt.n	800474a <_printf_i+0x112>
 8004742:	2204      	movs	r2, #4
 8004744:	6821      	ldr	r1, [r4, #0]
 8004746:	4391      	bics	r1, r2
 8004748:	6021      	str	r1, [r4, #0]
 800474a:	2d00      	cmp	r5, #0
 800474c:	d102      	bne.n	8004754 <_printf_i+0x11c>
 800474e:	9e04      	ldr	r6, [sp, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00c      	beq.n	800476e <_printf_i+0x136>
 8004754:	9e04      	ldr	r6, [sp, #16]
 8004756:	0028      	movs	r0, r5
 8004758:	0039      	movs	r1, r7
 800475a:	f7fb fd6d 	bl	8000238 <__aeabi_uidivmod>
 800475e:	9b03      	ldr	r3, [sp, #12]
 8004760:	3e01      	subs	r6, #1
 8004762:	5c5b      	ldrb	r3, [r3, r1]
 8004764:	7033      	strb	r3, [r6, #0]
 8004766:	002b      	movs	r3, r5
 8004768:	0005      	movs	r5, r0
 800476a:	429f      	cmp	r7, r3
 800476c:	d9f3      	bls.n	8004756 <_printf_i+0x11e>
 800476e:	2f08      	cmp	r7, #8
 8004770:	d109      	bne.n	8004786 <_printf_i+0x14e>
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	07db      	lsls	r3, r3, #31
 8004776:	d506      	bpl.n	8004786 <_printf_i+0x14e>
 8004778:	6863      	ldr	r3, [r4, #4]
 800477a:	6922      	ldr	r2, [r4, #16]
 800477c:	4293      	cmp	r3, r2
 800477e:	dc02      	bgt.n	8004786 <_printf_i+0x14e>
 8004780:	2330      	movs	r3, #48	; 0x30
 8004782:	3e01      	subs	r6, #1
 8004784:	7033      	strb	r3, [r6, #0]
 8004786:	9b04      	ldr	r3, [sp, #16]
 8004788:	1b9b      	subs	r3, r3, r6
 800478a:	6123      	str	r3, [r4, #16]
 800478c:	9b07      	ldr	r3, [sp, #28]
 800478e:	0021      	movs	r1, r4
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	9805      	ldr	r0, [sp, #20]
 8004794:	9b06      	ldr	r3, [sp, #24]
 8004796:	aa09      	add	r2, sp, #36	; 0x24
 8004798:	f7ff fede 	bl	8004558 <_printf_common>
 800479c:	1c43      	adds	r3, r0, #1
 800479e:	d135      	bne.n	800480c <_printf_i+0x1d4>
 80047a0:	2001      	movs	r0, #1
 80047a2:	4240      	negs	r0, r0
 80047a4:	b00b      	add	sp, #44	; 0x2c
 80047a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047a8:	2220      	movs	r2, #32
 80047aa:	6809      	ldr	r1, [r1, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	6022      	str	r2, [r4, #0]
 80047b0:	0022      	movs	r2, r4
 80047b2:	2178      	movs	r1, #120	; 0x78
 80047b4:	3245      	adds	r2, #69	; 0x45
 80047b6:	7011      	strb	r1, [r2, #0]
 80047b8:	4a27      	ldr	r2, [pc, #156]	; (8004858 <_printf_i+0x220>)
 80047ba:	e7a7      	b.n	800470c <_printf_i+0xd4>
 80047bc:	0648      	lsls	r0, r1, #25
 80047be:	d5ac      	bpl.n	800471a <_printf_i+0xe2>
 80047c0:	b2ad      	uxth	r5, r5
 80047c2:	e7aa      	b.n	800471a <_printf_i+0xe2>
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	680d      	ldr	r5, [r1, #0]
 80047c8:	1d10      	adds	r0, r2, #4
 80047ca:	6949      	ldr	r1, [r1, #20]
 80047cc:	6018      	str	r0, [r3, #0]
 80047ce:	6813      	ldr	r3, [r2, #0]
 80047d0:	062e      	lsls	r6, r5, #24
 80047d2:	d501      	bpl.n	80047d8 <_printf_i+0x1a0>
 80047d4:	6019      	str	r1, [r3, #0]
 80047d6:	e002      	b.n	80047de <_printf_i+0x1a6>
 80047d8:	066d      	lsls	r5, r5, #25
 80047da:	d5fb      	bpl.n	80047d4 <_printf_i+0x19c>
 80047dc:	8019      	strh	r1, [r3, #0]
 80047de:	2300      	movs	r3, #0
 80047e0:	9e04      	ldr	r6, [sp, #16]
 80047e2:	6123      	str	r3, [r4, #16]
 80047e4:	e7d2      	b.n	800478c <_printf_i+0x154>
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	1d11      	adds	r1, r2, #4
 80047ea:	6019      	str	r1, [r3, #0]
 80047ec:	6816      	ldr	r6, [r2, #0]
 80047ee:	2100      	movs	r1, #0
 80047f0:	0030      	movs	r0, r6
 80047f2:	6862      	ldr	r2, [r4, #4]
 80047f4:	f000 f832 	bl	800485c <memchr>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d001      	beq.n	8004800 <_printf_i+0x1c8>
 80047fc:	1b80      	subs	r0, r0, r6
 80047fe:	6060      	str	r0, [r4, #4]
 8004800:	6863      	ldr	r3, [r4, #4]
 8004802:	6123      	str	r3, [r4, #16]
 8004804:	2300      	movs	r3, #0
 8004806:	9a04      	ldr	r2, [sp, #16]
 8004808:	7013      	strb	r3, [r2, #0]
 800480a:	e7bf      	b.n	800478c <_printf_i+0x154>
 800480c:	6923      	ldr	r3, [r4, #16]
 800480e:	0032      	movs	r2, r6
 8004810:	9906      	ldr	r1, [sp, #24]
 8004812:	9805      	ldr	r0, [sp, #20]
 8004814:	9d07      	ldr	r5, [sp, #28]
 8004816:	47a8      	blx	r5
 8004818:	1c43      	adds	r3, r0, #1
 800481a:	d0c1      	beq.n	80047a0 <_printf_i+0x168>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	079b      	lsls	r3, r3, #30
 8004820:	d415      	bmi.n	800484e <_printf_i+0x216>
 8004822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004824:	68e0      	ldr	r0, [r4, #12]
 8004826:	4298      	cmp	r0, r3
 8004828:	dabc      	bge.n	80047a4 <_printf_i+0x16c>
 800482a:	0018      	movs	r0, r3
 800482c:	e7ba      	b.n	80047a4 <_printf_i+0x16c>
 800482e:	0022      	movs	r2, r4
 8004830:	2301      	movs	r3, #1
 8004832:	9906      	ldr	r1, [sp, #24]
 8004834:	9805      	ldr	r0, [sp, #20]
 8004836:	9e07      	ldr	r6, [sp, #28]
 8004838:	3219      	adds	r2, #25
 800483a:	47b0      	blx	r6
 800483c:	1c43      	adds	r3, r0, #1
 800483e:	d0af      	beq.n	80047a0 <_printf_i+0x168>
 8004840:	3501      	adds	r5, #1
 8004842:	68e3      	ldr	r3, [r4, #12]
 8004844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	42ab      	cmp	r3, r5
 800484a:	dcf0      	bgt.n	800482e <_printf_i+0x1f6>
 800484c:	e7e9      	b.n	8004822 <_printf_i+0x1ea>
 800484e:	2500      	movs	r5, #0
 8004850:	e7f7      	b.n	8004842 <_printf_i+0x20a>
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	08004b79 	.word	0x08004b79
 8004858:	08004b8a 	.word	0x08004b8a

0800485c <memchr>:
 800485c:	b2c9      	uxtb	r1, r1
 800485e:	1882      	adds	r2, r0, r2
 8004860:	4290      	cmp	r0, r2
 8004862:	d101      	bne.n	8004868 <memchr+0xc>
 8004864:	2000      	movs	r0, #0
 8004866:	4770      	bx	lr
 8004868:	7803      	ldrb	r3, [r0, #0]
 800486a:	428b      	cmp	r3, r1
 800486c:	d0fb      	beq.n	8004866 <memchr+0xa>
 800486e:	3001      	adds	r0, #1
 8004870:	e7f6      	b.n	8004860 <memchr+0x4>

08004872 <memmove>:
 8004872:	b510      	push	{r4, lr}
 8004874:	4288      	cmp	r0, r1
 8004876:	d902      	bls.n	800487e <memmove+0xc>
 8004878:	188b      	adds	r3, r1, r2
 800487a:	4298      	cmp	r0, r3
 800487c:	d303      	bcc.n	8004886 <memmove+0x14>
 800487e:	2300      	movs	r3, #0
 8004880:	e007      	b.n	8004892 <memmove+0x20>
 8004882:	5c8b      	ldrb	r3, [r1, r2]
 8004884:	5483      	strb	r3, [r0, r2]
 8004886:	3a01      	subs	r2, #1
 8004888:	d2fb      	bcs.n	8004882 <memmove+0x10>
 800488a:	bd10      	pop	{r4, pc}
 800488c:	5ccc      	ldrb	r4, [r1, r3]
 800488e:	54c4      	strb	r4, [r0, r3]
 8004890:	3301      	adds	r3, #1
 8004892:	429a      	cmp	r2, r3
 8004894:	d1fa      	bne.n	800488c <memmove+0x1a>
 8004896:	e7f8      	b.n	800488a <memmove+0x18>

08004898 <_free_r>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	0005      	movs	r5, r0
 800489c:	2900      	cmp	r1, #0
 800489e:	d010      	beq.n	80048c2 <_free_r+0x2a>
 80048a0:	1f0c      	subs	r4, r1, #4
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	da00      	bge.n	80048aa <_free_r+0x12>
 80048a8:	18e4      	adds	r4, r4, r3
 80048aa:	0028      	movs	r0, r5
 80048ac:	f000 f8d4 	bl	8004a58 <__malloc_lock>
 80048b0:	4a1d      	ldr	r2, [pc, #116]	; (8004928 <_free_r+0x90>)
 80048b2:	6813      	ldr	r3, [r2, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d105      	bne.n	80048c4 <_free_r+0x2c>
 80048b8:	6063      	str	r3, [r4, #4]
 80048ba:	6014      	str	r4, [r2, #0]
 80048bc:	0028      	movs	r0, r5
 80048be:	f000 f8d3 	bl	8004a68 <__malloc_unlock>
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	42a3      	cmp	r3, r4
 80048c6:	d908      	bls.n	80048da <_free_r+0x42>
 80048c8:	6821      	ldr	r1, [r4, #0]
 80048ca:	1860      	adds	r0, r4, r1
 80048cc:	4283      	cmp	r3, r0
 80048ce:	d1f3      	bne.n	80048b8 <_free_r+0x20>
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	1841      	adds	r1, r0, r1
 80048d6:	6021      	str	r1, [r4, #0]
 80048d8:	e7ee      	b.n	80048b8 <_free_r+0x20>
 80048da:	001a      	movs	r2, r3
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <_free_r+0x4e>
 80048e2:	42a3      	cmp	r3, r4
 80048e4:	d9f9      	bls.n	80048da <_free_r+0x42>
 80048e6:	6811      	ldr	r1, [r2, #0]
 80048e8:	1850      	adds	r0, r2, r1
 80048ea:	42a0      	cmp	r0, r4
 80048ec:	d10b      	bne.n	8004906 <_free_r+0x6e>
 80048ee:	6820      	ldr	r0, [r4, #0]
 80048f0:	1809      	adds	r1, r1, r0
 80048f2:	1850      	adds	r0, r2, r1
 80048f4:	6011      	str	r1, [r2, #0]
 80048f6:	4283      	cmp	r3, r0
 80048f8:	d1e0      	bne.n	80048bc <_free_r+0x24>
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	1841      	adds	r1, r0, r1
 8004900:	6011      	str	r1, [r2, #0]
 8004902:	6053      	str	r3, [r2, #4]
 8004904:	e7da      	b.n	80048bc <_free_r+0x24>
 8004906:	42a0      	cmp	r0, r4
 8004908:	d902      	bls.n	8004910 <_free_r+0x78>
 800490a:	230c      	movs	r3, #12
 800490c:	602b      	str	r3, [r5, #0]
 800490e:	e7d5      	b.n	80048bc <_free_r+0x24>
 8004910:	6821      	ldr	r1, [r4, #0]
 8004912:	1860      	adds	r0, r4, r1
 8004914:	4283      	cmp	r3, r0
 8004916:	d103      	bne.n	8004920 <_free_r+0x88>
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	1841      	adds	r1, r0, r1
 800491e:	6021      	str	r1, [r4, #0]
 8004920:	6063      	str	r3, [r4, #4]
 8004922:	6054      	str	r4, [r2, #4]
 8004924:	e7ca      	b.n	80048bc <_free_r+0x24>
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	20000360 	.word	0x20000360

0800492c <_malloc_r>:
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492e:	2303      	movs	r3, #3
 8004930:	1ccd      	adds	r5, r1, #3
 8004932:	439d      	bics	r5, r3
 8004934:	3508      	adds	r5, #8
 8004936:	0006      	movs	r6, r0
 8004938:	2d0c      	cmp	r5, #12
 800493a:	d21f      	bcs.n	800497c <_malloc_r+0x50>
 800493c:	250c      	movs	r5, #12
 800493e:	42a9      	cmp	r1, r5
 8004940:	d81e      	bhi.n	8004980 <_malloc_r+0x54>
 8004942:	0030      	movs	r0, r6
 8004944:	f000 f888 	bl	8004a58 <__malloc_lock>
 8004948:	4925      	ldr	r1, [pc, #148]	; (80049e0 <_malloc_r+0xb4>)
 800494a:	680a      	ldr	r2, [r1, #0]
 800494c:	0014      	movs	r4, r2
 800494e:	2c00      	cmp	r4, #0
 8004950:	d11a      	bne.n	8004988 <_malloc_r+0x5c>
 8004952:	4f24      	ldr	r7, [pc, #144]	; (80049e4 <_malloc_r+0xb8>)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <_malloc_r+0x38>
 800495a:	0021      	movs	r1, r4
 800495c:	0030      	movs	r0, r6
 800495e:	f000 f869 	bl	8004a34 <_sbrk_r>
 8004962:	6038      	str	r0, [r7, #0]
 8004964:	0029      	movs	r1, r5
 8004966:	0030      	movs	r0, r6
 8004968:	f000 f864 	bl	8004a34 <_sbrk_r>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d12b      	bne.n	80049c8 <_malloc_r+0x9c>
 8004970:	230c      	movs	r3, #12
 8004972:	0030      	movs	r0, r6
 8004974:	6033      	str	r3, [r6, #0]
 8004976:	f000 f877 	bl	8004a68 <__malloc_unlock>
 800497a:	e003      	b.n	8004984 <_malloc_r+0x58>
 800497c:	2d00      	cmp	r5, #0
 800497e:	dade      	bge.n	800493e <_malloc_r+0x12>
 8004980:	230c      	movs	r3, #12
 8004982:	6033      	str	r3, [r6, #0]
 8004984:	2000      	movs	r0, #0
 8004986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	1b5b      	subs	r3, r3, r5
 800498c:	d419      	bmi.n	80049c2 <_malloc_r+0x96>
 800498e:	2b0b      	cmp	r3, #11
 8004990:	d903      	bls.n	800499a <_malloc_r+0x6e>
 8004992:	6023      	str	r3, [r4, #0]
 8004994:	18e4      	adds	r4, r4, r3
 8004996:	6025      	str	r5, [r4, #0]
 8004998:	e003      	b.n	80049a2 <_malloc_r+0x76>
 800499a:	6863      	ldr	r3, [r4, #4]
 800499c:	42a2      	cmp	r2, r4
 800499e:	d10e      	bne.n	80049be <_malloc_r+0x92>
 80049a0:	600b      	str	r3, [r1, #0]
 80049a2:	0030      	movs	r0, r6
 80049a4:	f000 f860 	bl	8004a68 <__malloc_unlock>
 80049a8:	0020      	movs	r0, r4
 80049aa:	2207      	movs	r2, #7
 80049ac:	300b      	adds	r0, #11
 80049ae:	1d23      	adds	r3, r4, #4
 80049b0:	4390      	bics	r0, r2
 80049b2:	1ac2      	subs	r2, r0, r3
 80049b4:	4298      	cmp	r0, r3
 80049b6:	d0e6      	beq.n	8004986 <_malloc_r+0x5a>
 80049b8:	1a1b      	subs	r3, r3, r0
 80049ba:	50a3      	str	r3, [r4, r2]
 80049bc:	e7e3      	b.n	8004986 <_malloc_r+0x5a>
 80049be:	6053      	str	r3, [r2, #4]
 80049c0:	e7ef      	b.n	80049a2 <_malloc_r+0x76>
 80049c2:	0022      	movs	r2, r4
 80049c4:	6864      	ldr	r4, [r4, #4]
 80049c6:	e7c2      	b.n	800494e <_malloc_r+0x22>
 80049c8:	2303      	movs	r3, #3
 80049ca:	1cc4      	adds	r4, r0, #3
 80049cc:	439c      	bics	r4, r3
 80049ce:	42a0      	cmp	r0, r4
 80049d0:	d0e1      	beq.n	8004996 <_malloc_r+0x6a>
 80049d2:	1a21      	subs	r1, r4, r0
 80049d4:	0030      	movs	r0, r6
 80049d6:	f000 f82d 	bl	8004a34 <_sbrk_r>
 80049da:	1c43      	adds	r3, r0, #1
 80049dc:	d1db      	bne.n	8004996 <_malloc_r+0x6a>
 80049de:	e7c7      	b.n	8004970 <_malloc_r+0x44>
 80049e0:	20000360 	.word	0x20000360
 80049e4:	20000364 	.word	0x20000364

080049e8 <_realloc_r>:
 80049e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ea:	0007      	movs	r7, r0
 80049ec:	000d      	movs	r5, r1
 80049ee:	0016      	movs	r6, r2
 80049f0:	2900      	cmp	r1, #0
 80049f2:	d105      	bne.n	8004a00 <_realloc_r+0x18>
 80049f4:	0011      	movs	r1, r2
 80049f6:	f7ff ff99 	bl	800492c <_malloc_r>
 80049fa:	0004      	movs	r4, r0
 80049fc:	0020      	movs	r0, r4
 80049fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a00:	2a00      	cmp	r2, #0
 8004a02:	d103      	bne.n	8004a0c <_realloc_r+0x24>
 8004a04:	f7ff ff48 	bl	8004898 <_free_r>
 8004a08:	0034      	movs	r4, r6
 8004a0a:	e7f7      	b.n	80049fc <_realloc_r+0x14>
 8004a0c:	f000 f834 	bl	8004a78 <_malloc_usable_size_r>
 8004a10:	002c      	movs	r4, r5
 8004a12:	42b0      	cmp	r0, r6
 8004a14:	d2f2      	bcs.n	80049fc <_realloc_r+0x14>
 8004a16:	0031      	movs	r1, r6
 8004a18:	0038      	movs	r0, r7
 8004a1a:	f7ff ff87 	bl	800492c <_malloc_r>
 8004a1e:	1e04      	subs	r4, r0, #0
 8004a20:	d0ec      	beq.n	80049fc <_realloc_r+0x14>
 8004a22:	0029      	movs	r1, r5
 8004a24:	0032      	movs	r2, r6
 8004a26:	f7ff fc03 	bl	8004230 <memcpy>
 8004a2a:	0029      	movs	r1, r5
 8004a2c:	0038      	movs	r0, r7
 8004a2e:	f7ff ff33 	bl	8004898 <_free_r>
 8004a32:	e7e3      	b.n	80049fc <_realloc_r+0x14>

08004a34 <_sbrk_r>:
 8004a34:	2300      	movs	r3, #0
 8004a36:	b570      	push	{r4, r5, r6, lr}
 8004a38:	4d06      	ldr	r5, [pc, #24]	; (8004a54 <_sbrk_r+0x20>)
 8004a3a:	0004      	movs	r4, r0
 8004a3c:	0008      	movs	r0, r1
 8004a3e:	602b      	str	r3, [r5, #0]
 8004a40:	f7fc fc90 	bl	8001364 <_sbrk>
 8004a44:	1c43      	adds	r3, r0, #1
 8004a46:	d103      	bne.n	8004a50 <_sbrk_r+0x1c>
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d000      	beq.n	8004a50 <_sbrk_r+0x1c>
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	bd70      	pop	{r4, r5, r6, pc}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	20000480 	.word	0x20000480

08004a58 <__malloc_lock>:
 8004a58:	b510      	push	{r4, lr}
 8004a5a:	4802      	ldr	r0, [pc, #8]	; (8004a64 <__malloc_lock+0xc>)
 8004a5c:	f000 f814 	bl	8004a88 <__retarget_lock_acquire_recursive>
 8004a60:	bd10      	pop	{r4, pc}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	20000488 	.word	0x20000488

08004a68 <__malloc_unlock>:
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	4802      	ldr	r0, [pc, #8]	; (8004a74 <__malloc_unlock+0xc>)
 8004a6c:	f000 f80d 	bl	8004a8a <__retarget_lock_release_recursive>
 8004a70:	bd10      	pop	{r4, pc}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	20000488 	.word	0x20000488

08004a78 <_malloc_usable_size_r>:
 8004a78:	1f0b      	subs	r3, r1, #4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	1f18      	subs	r0, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	da01      	bge.n	8004a86 <_malloc_usable_size_r+0xe>
 8004a82:	580b      	ldr	r3, [r1, r0]
 8004a84:	18c0      	adds	r0, r0, r3
 8004a86:	4770      	bx	lr

08004a88 <__retarget_lock_acquire_recursive>:
 8004a88:	4770      	bx	lr

08004a8a <__retarget_lock_release_recursive>:
 8004a8a:	4770      	bx	lr

08004a8c <_init>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr

08004a98 <_fini>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr
