/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */


/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

#define bee_rate_fine_polling_threshold 2 //in bee per DT
#define bee_rate_alert_threshold 5 //in bee per DT
#define DT 10 //in seconds

#define transmit_request 0x10
#define receive_packet 0x90
#define remote_command_response 0x97
#define remote_AT_command_request 0x17

#define timeout_duration 500 // x 2ms

#define LED_R GPIO_PIN_2
#define LED_V GPIO_PIN_10

#define LED_EN GPIOA, GPIO_PIN_5
#define XBEE_SLEEP GPIOA, GPIO_PIN_15

#define MUX1 GPIOA, GPIO_PIN_1
#define MUX2 GPIOA, GPIO_PIN_4


/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi2;

TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart2;
UART_HandleTypeDef huart5;

/* USER CODE BEGIN PV */

enum {
	lora_init,
	xbee_init,
	master_idle,
	sparse_polling,
	fine_polling,
	lora_alert
} master_state = lora_init;


uint8_t sensor_pair[16][2] = {
 //exterior, interior
		{0 , 1 },
		{3 , 2 },
		{5 , 4 },
		{7 , 6 },
		{15, 14},
		{13, 12},
		{11, 10},
		{9 , 8 },
		{17, 16},
		{19, 18},
		{21, 20},
		{23, 22},
		{31, 30},
		{29, 28},
		{27, 26},
		{25, 24}
};

uint8_t sensor_value[16][2] = {0};
typedef enum {A, B, C, D} sensors_states;
sensors_states sensors_state[16] = {A};

long int bee_count;
int16_t bee_rate;

uint8_t lora_status = {0};
uint8_t cr_flag=0;
uint8_t xbee_rx_last_byte = 0;
uint8_t xbee_rx_buffer[256] = {0};
uint8_t xbee_rx_read_index = 0;
uint8_t xbee_rx_write_index = 0;

uint8_t test_string[100] = { 0x7E, 0x00, 0x0F, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xBA, 0xBA, 0x0D };

uint8_t config[20][2][10] = {
	{"ID", "1111"}, // network id
	{"NI", "demo1234"}, // node id
	{"CE", "0"},	// coordinator mode
	{"ID", "1111"}, // network id
	{"AP", "1"},  	// API enable
	{"SP", "20"},	// cyclic sleep period
	{"SN", "100"},  // number of sleep periods
	{"SM", "0"},	// sleep mode
	{"ST", "500"}   // time before sleep
};
uint8_t config_step = 0;
uint8_t xbee_reset = 0;

uint8_t config_length = 9;

enum xbee_send_states {
	enter_command_mode,
	command_mode_ok,
	send_config,
	config_ok,
	single_command,
	single_command_ok,
	config_over
} xbee_send_state = enter_command_mode;

enum xbee_receive_states {
	idle,
	frame_length,
	frame_type,
	frame_id,
	frame_address64,
	frame_address16,
	frame_option,
	frame_at_status,
	frame_content,
	check_sum,
	process_content
} xbee_receive_state;

struct frame{
    uint16_t length;
    uint8_t type;
    uint8_t id; //AT
    uint64_t address64;
    uint16_t address16;
    uint8_t option;
    uint8_t content[256];
    uint8_t content_index;
    uint8_t command_status[4]; //AT
    uint8_t check_sum;
    uint8_t check_sum_ok;
};

//AT COMMANDS https://cdn.sparkfun.com/assets/resources/2/9/22AT_Commands.pdf

struct frame received_frame = {0};

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART5_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM3_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void select_mux(uint8_t);
void scan_sensors(void);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
void check_coordinator();

void invert_lsB_msB(uint64_t*, uint8_t);
void xbee_send_string(uint8_t * string);
void xbee_send_alert();
void read_xbee();

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART5_UART_Init();
  MX_USART2_UART_Init();
  MX_TIM3_Init();
  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);

  HAL_GPIO_WritePin(GPIOB, LED_R, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOB, LED_V, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(XBEE_SLEEP, 0);


  HAL_UART_Receive_IT(&huart5, &xbee_rx_last_byte, 1);

//  xbee_send_state = config_over;


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint16_t timeout;
	  char string[50] = {0};

	  switch(master_state){
	  	  case lora_init:
	  		  master_state = xbee_init;
	  	  break;
	  	  case xbee_init:

			  switch(xbee_send_state){

				  case enter_command_mode:
					  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_2);
					  HAL_UART_Transmit(&huart5, "+++", 3, 100);
					  timeout = 0;
					  xbee_send_state = command_mode_ok;
				  break;

				  case command_mode_ok:
					  if(cr_flag){
						  if(xbee_rx_buffer[cr_flag-2] == 'O' && xbee_rx_buffer[cr_flag-1] == 'K'){
							  xbee_send_state = single_command;
							  HAL_Delay(10);
							  timeout = 0;
						  }
						  cr_flag = 0;
					  }
					  else {
						  HAL_Delay(1);
						  timeout++;
						  if (timeout >= timeout_duration)
							  xbee_send_state = enter_command_mode;
					  }
				  break;

				  case single_command:
					  if (xbee_reset==0){
						  HAL_UART_Transmit(&huart5, "ATRE\r", 5, 100);
						  xbee_reset = 1;
					  }
					  timeout = 0;
					  xbee_send_state = single_command_ok;
				  break;

				  case single_command_ok:
					  if(cr_flag){
						  if(xbee_rx_buffer[cr_flag-2] == 'O' && xbee_rx_buffer[cr_flag-1] == 'K'){
							  xbee_send_state = send_config;
							  HAL_Delay(10);
							  timeout = 0;
						  }
						  cr_flag = 0;
					  }
					  else {
						  HAL_Delay(1);
						  timeout++;
						  if (timeout >= timeout_duration)
							  xbee_send_state = enter_command_mode;
					  }
				  break;

				  case send_config:

					  if(config_step == config_length){
						  sprintf(string, "ATWR\r");
					  }
					  else sprintf(string, "AT%s%s\r", config[config_step][0], config[config_step][1]);


					  HAL_UART_Transmit(&huart5, string, strlen(string), 100);
					  xbee_send_state = config_ok;
				  break;

				  case config_ok:
					  if(cr_flag){
						  if(xbee_rx_buffer[cr_flag-2] == 'O' && xbee_rx_buffer[cr_flag-1] == 'K'){
							  if(config_step == config_length){
								  HAL_GPIO_WritePin(GPIOB, LED_R, GPIO_PIN_RESET);
								  HAL_GPIO_WritePin(GPIOB, LED_V, GPIO_PIN_SET);
								  xbee_send_state = config_over;
								  master_state = fine_polling;
								  xbee_rx_read_index = xbee_rx_write_index;
							  }
							  else {
								  timeout = 0;
								  config_step++;
								  xbee_send_state = send_config;
								  HAL_Delay(10);
							  }
						  }
						  cr_flag = 0;
					  }
					  if(xbee_rx_buffer[xbee_rx_write_index-2] == 'O' && xbee_rx_buffer[xbee_rx_write_index-1] == 'K'){

					  }
					  else {
						  HAL_Delay(1);
						  timeout++;
						  if (timeout >= timeout_duration){
							  xbee_send_state = enter_command_mode;
							  //config_step = 0;
						  }
					  }
				  break;

				  default:

				  break;

			  }
	      break;

	  	  case master_idle:
	  		  HAL_Delay(10);
	  	  break;

	  	  case sparse_polling:
	  		  scan_sensors();
	  		  HAL_Delay(10); //if a large amount of bees goes in or out
	  		  if(bee_rate < -1*bee_rate_fine_polling_threshold || bee_rate > 1*bee_rate_fine_polling_threshold){
	  			  master_state = fine_polling; //we'll trigger a fine_polling
	  		  }
	  	  break;

	  	  case fine_polling:
	  		  scan_sensors();
	  		  if(bee_rate < -1*bee_rate_alert_threshold || bee_rate > bee_rate_alert_threshold){
	  			  xbee_send_alert();
	  			  bee_rate = 0;
	  		  }
	  	  break;

	  	  case lora_alert: ;

	  	  break;

	  	  default: break;
	  }

	  read_xbee();
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 65535;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 4883;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{

  /* USER CODE BEGIN USART5_Init 0 */

  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
  huart5.Init.BaudRate = 9600;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart5) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, S2_Pin|S0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S1_Pin|LED_EN_Pin|XBEE_SLEEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_V_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : S2_Pin S0_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

  /*Configure GPIO pins : S1_Pin LED_EN_Pin XBEE_SLEEP_Pin */
  GPIO_InitStruct.Pin = S1_Pin|LED_EN_Pin|XBEE_SLEEP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : MUX1_Pin MUX2_Pin */
  GPIO_InitStruct.Pin = MUX1_Pin|MUX2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LED_R_Pin LED_V_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_V_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

void select_mux(uint8_t sel){
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1 , (sel & 0b0001)>>0);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 , (sel & 0b0010)>>1);
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_0 , (sel & 0b0100)>>2);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (sel & 0b1000)>>3);
}

void scan_sensors(){

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); //turn on the diodes

  for(uint8_t i=0; i<8; i++) for(uint8_t j=0; j<2; j++){
	  uint8_t sensor_pair_value;
	  select_mux(sensor_pair[8*j+i][0]);
	  sensor_pair_value = (j)? HAL_GPIO_ReadPin(MUX1) : HAL_GPIO_ReadPin(MUX2);
	  select_mux(sensor_pair[8*j+i][1]);
	  sensor_pair_value += (j)? HAL_GPIO_ReadPin(MUX1)<<1 : HAL_GPIO_ReadPin(MUX2)<<1;

	  switch(sensors_state[8*j+i]){
		  case A:
			  if(sensor_pair_value == 0b01){
				  sensors_state[8*j+i] = B;
				  bee_count--;
//				  HAL_GPIO_WritePin(GPIOB, LED_R, 1);
//				  HAL_GPIO_WritePin(GPIOB, LED_V, 0);
//				  xbee_send_alert();
			  }
			  else if(sensor_pair_value == 0b10){
				  sensors_state[8*j+i] = D;
				  bee_count++;
//				  HAL_GPIO_WritePin(GPIOB, LED_R, 0);
//				  HAL_GPIO_WritePin(GPIOB, LED_V, 1);
//				  xbee_send_alert();
			  }
		  break;

		  case B:
			  if(sensor_pair_value == 0b00) sensors_state[8*j+i] = C;
			  else if (sensor_pair_value == 0b11) sensors_state[8*j+i] = A;
		  break;

		  case C:
			  if(sensor_pair_value == 0b10) sensors_state[8*j+i] = D;
			  else if (sensor_pair_value == 0b01) sensors_state[8*j+i] = B;
		  break;

		  case D:
			  if(sensor_pair_value == 0b11) sensors_state[8*j+i] = A;
			  else if (sensor_pair_value == 0b00) sensors_state[8*j+i] = C;
		  break;
	  }
  }
  if(master_state == sparse_polling) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART5){
	    xbee_rx_buffer[xbee_rx_write_index] = xbee_rx_last_byte;
	    cr_flag = (xbee_rx_last_byte == 0x0D)? xbee_rx_write_index : 0;
	    xbee_rx_write_index++;
	    HAL_UART_Receive_IT(&huart5, &xbee_rx_last_byte, 1);

	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	static long int bee_count_prev = 0;
	if(htim == &htim3){
		bee_rate = (bee_count - bee_count_prev);
		bee_count_prev = bee_count;
		HAL_GPIO_TogglePin(GPIOB, LED_V);
	}
}

void check_coordinator(){

}

void invert_lsB_msB(uint64_t * var, uint8_t length){
	uint64_t new_var = 0;
	for(uint8_t i=0; i<length; i++){
		uint64_t byte = (*var & (0xFF<<(8*i)))>>(8*i);
		new_var += byte<<((length-1-i)*8);
	}

	*var = new_var;
}

void xbee_send_string(uint8_t * string){
	struct frame tx_frame = {0};
	tx_frame.length = 0x0E + strlen(string);
	invert_lsB_msB((uint64_t*)&tx_frame.length, 2);
	tx_frame.type = 0x10;
	tx_frame.id = 0x01;
	tx_frame.address64 = 0xFFFF;
	invert_lsB_msB((uint64_t*)&tx_frame.address64, 8);
	tx_frame.address16 = 0xFFFE;
	invert_lsB_msB((uint64_t*)&tx_frame.address16, 2);
	memcpy(tx_frame.content, string, strlen(string));

	uint64_t sum = 0;
	uint16_t frame_length;
	frame_length = 275;
	uint8_t * ptr = (void *)&tx_frame+2;
	for(uint16_t i=0; i<frame_length-2; i++){
		sum += *ptr;
		ptr++;
	}

	tx_frame.check_sum = 0xFF - (sum & 0xFF);


	HAL_UART_Transmit(&huart5, "~", 1, 100);
	HAL_UART_Transmit(&huart5, (uint8_t*)&tx_frame.length, 2, 100);
	HAL_UART_Transmit(&huart5, &tx_frame.type, 1, 100);
	HAL_UART_Transmit(&huart5, &tx_frame.id, 1, 100);
	HAL_UART_Transmit(&huart5, &tx_frame.address64, 8, 100);
	HAL_UART_Transmit(&huart5, &tx_frame.address16, 2, 100);
	HAL_UART_Transmit(&huart5, &tx_frame.content_index, 1, 100);
	HAL_UART_Transmit(&huart5, &tx_frame.option, 1, 100);
	HAL_UART_Transmit(&huart5, &tx_frame.content, strlen(string), 100);
	HAL_UART_Transmit(&huart5, &tx_frame.check_sum, 1, 100);
}
void xbee_send_alert(){
	uint8_t string[256];
	sprintf(string, "E %s %li %li\r", config[1][1], bee_count, bee_rate);
	//xbee_send_string("n'importe quoi\n");
	xbee_send_string(string);
}


void read_xbee(){

  if(xbee_rx_read_index<xbee_rx_write_index){
	  uint64_t sum = 0;
	  static uint8_t multiple_byte_step;

	  switch (xbee_receive_state){
		  case idle:
			  if(xbee_rx_buffer[xbee_rx_read_index] == 0x7E) xbee_receive_state = frame_length;
			  /*else if (lora_requested && xbee_rx_buffer[xbee_rx_read_index] == 0xAA){
				  is_coordinator = True;
				  lora_requested = False;
			  }*/
		  break;

		  case frame_length:
			  received_frame.length += ((uint16_t)(xbee_rx_buffer[xbee_rx_read_index])) << (8-8*multiple_byte_step) ;
			  if(multiple_byte_step){
				  multiple_byte_step = 0;
				  xbee_receive_state = frame_type;
			  }
			  else{
				  multiple_byte_step++;
			  }
		  break;

		  case frame_type:
			  received_frame.type = xbee_rx_buffer[xbee_rx_read_index];
			  switch(received_frame.type){
				  case receive_packet: xbee_receive_state = frame_address64; break;
				  case remote_command_response: xbee_receive_state = frame_id; break;
				  default: xbee_rx_read_index = xbee_rx_write_index;
						   xbee_receive_state = idle;
				  break;
			  }

			  multiple_byte_step = 0;
		  break;

		  case frame_id:
			  received_frame.id = xbee_rx_buffer[xbee_rx_read_index];
			  xbee_receive_state = frame_address64;
		  break;

		  case frame_address64:
			  received_frame.address64 += ((uint64_t)xbee_rx_buffer[xbee_rx_read_index]) << (56-8*multiple_byte_step);

			  if(multiple_byte_step == 7){
				  xbee_receive_state = frame_address16;
				  multiple_byte_step = 0;
			  }
			  else multiple_byte_step++;
		  break;

		  case frame_address16:
			  received_frame.address16 += ((uint16_t)xbee_rx_buffer[xbee_rx_read_index]) << (8-8*multiple_byte_step);
			  if(multiple_byte_step == 1){
				  switch(received_frame.type){
					  case receive_packet: xbee_receive_state = frame_option; break;
					  case remote_command_response: xbee_receive_state = frame_at_status; break;
					  default: xbee_rx_read_index = xbee_rx_write_index;
							   xbee_receive_state = idle;
					  break;
				  }

				  multiple_byte_step = 0;
			  }
			  else multiple_byte_step++;
		  break;

		  case frame_option:
			  received_frame.option = xbee_rx_buffer[xbee_rx_read_index];
			  xbee_receive_state = frame_content;
		  break;

		  case frame_at_status:
			  received_frame.command_status[multiple_byte_step] = xbee_rx_buffer[xbee_rx_read_index];
			  if(multiple_byte_step == 2){
				  multiple_byte_step = 0;
				  xbee_receive_state = frame_content;
			  }
			  else multiple_byte_step++;
		  break;

		  case frame_content:
			  received_frame.content[received_frame.content_index] = xbee_rx_buffer[xbee_rx_read_index];
			  if(((received_frame.content_index == received_frame.length-13) && received_frame.type==receive_packet) || ((received_frame.content_index == received_frame.length-16) && (received_frame.type==remote_command_response)))
				  xbee_receive_state = check_sum;
			  else
				  received_frame.content_index++;
		  break;

		  case check_sum:
			  received_frame.check_sum = xbee_rx_buffer[xbee_rx_read_index];
			  for(uint8_t i=0; i<8; i++) sum += (((uint64_t)0xFF<<(56-8*i)) & received_frame.address64)>>(56-8*i);
			  for(uint8_t i=0; i<2; i++) sum += (((uint16_t)0xFF<<(8-8*i)) & received_frame.address16)>>(8-i*8);
			  if(received_frame.id==receive_packet) for(uint16_t i=0; i<received_frame.length-12; i++) sum += received_frame.content[i];
			  else if(received_frame.type==remote_command_response){
				  for(uint16_t i=0; i<received_frame.length-15; i++) sum += received_frame.content[i];
				  for(uint8_t i=0; i<4; i++) sum += received_frame.command_status[i];
			  }
			  sum += received_frame.type + received_frame.option + received_frame.id + received_frame.check_sum;
			  received_frame.check_sum_ok = (sum & 0xFF) == 0xFF;
			  xbee_receive_state = process_content;
		  break;

		  case process_content:
			  switch(received_frame.content[0]){
			  	  case 'E':
			  		  master_state = master_idle;
			  	  break;
			  }
		  break;
	  }

	  xbee_rx_read_index += 1;

  }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
